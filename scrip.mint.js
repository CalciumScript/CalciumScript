(function() {

    var CHROME_EXT = true, scriptVersion = '2014.825.1', scriptId = '173473', REALM_URL = '', REALM_NAME, chrome_extensions = 'chrome://chrome/extensions/', userscripts_src = 'http://userscripts.org:8080/scripts/source/' + scriptId + '.user.js', UID = {}, UIDN = {}, REMOVE_HD = false;

	function make_space_for_kongregate(frame, width) {
		var maxWidth = (width ? width : (document.body.offsetWidth - 50) + 'px');
		if (frame) {
			if (frame.width) frame.width = maxWidth;
			else if (frame.style.width) frame.style.width = maxWidth;
			else frame.setAttribute("style", "width: " + maxWidth + ";");
		}
	}

	function debugLog(data) {
		if (window.console && console.log) console.log(data);
	}

	function hide_all(body, game_container) {
		function content_dependant(tag) {
			if (!tag.childNodes) return (false);
			var child_list = tag.childNodes;
			var found = false;
			for (var x = 0; x < child_list.length && !found; x++) {
				if (child_list[x].id && child_list[x].id == game_container) found = true;
				else found = content_dependant(child_list[x]);
			}
			return found;
		}
		if (body.childNodes) {
			var child_elements = body.childNodes;
			for (var c = 0; c < child_elements.length; c++) {
				var child = child_elements[c];
				if (child.id && child.id == game_container) {
					child.style.width = '100%';
					child.style.margin = '0';
					child.style.border = '0';
					child.style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
				} else {
					var depend = content_dependant(child);
					if (!depend) {
						if (child.tagName == 'DIV' || child.tagName == 'IFRAME' || child.tagName == 'TABLE') {
							child.style.width = '0%';
							child.style.display = 'none';
						} else hide_all(child, game_container);
					} else {
						if (child.tagName == 'DIV' || child.tagName == 'IFRAME' || child.tagName == 'TABLE' || child.tagName == 'TD') {
							child.style.padding = '0px';
							child.style.width = '100%';
							child.style.margin = '0';
							child.style.border = '0';
							child.style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
						}
						hide_all(child, game_container);
					}
				}
			}
		}
	}

	function setHD(element) {
		if (element.parentNode) {
			var parent_element = element.parentNode;
			setHD(parent_element);
			if (parent_element.tagName == 'DIV' || parent_element.tagName == 'IFRAME' || parent_element.tagName == 'TABLE' || parent_element.tagName == 'TD') {
				parent_element.style.width = '100%';
				parent_element.style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
			}
		}
	}

	/* Set layout on kabam.com */
	if ((/dragons-of-atlantis\/play/.test(window.location.href)) && window.location.href.indexOf("kabam.com") !== -1)
		setTimeout(function() {
			document.getElementById('promo-sidebar').style.display = 'none';
			var to_remove = document.getElementById('promo-sidebar').parentNode;
			to_remove.parentNode.removeChild(to_remove);
		}, 7000);

	/*
	 * Check to see if script is running in an iframe or not and removes
	 * unnecessary elements before continuing with the script.
	 */
	if (/(pixelkabam|akamaihd|plugins|ai\.php|talkgadget|notifications|contactPicker|accounts|googleapis\.com\/static)/.test(window.location.href)) return;

	if (!((/apps\.facebook\.com\/dragonsofatlantis/.test(window.location.href) && /rubies/.test(window.location.pathname) === false) ||
		/castle\.wonderhill\.com\/platforms\/.+\/game/.test(window.location.href) ||
		/plus\.google\.com.*\/games.*\/659749063556/.test(window.location.href) ||
		/plus\.google\.com.*\/games\/play\/659749063556/.test(window.location.href) ||
		/googleusercontent\.com\/gadgets\/.*\/659749063556/.test(window.location.href) ||
		/kabam.com\/dragons-of-atlantis\/play/.test(window.location.href) ||
		/kongregate.com\/games\/kabam\/dragons-of-atlantis/.test(window.location.href) ||
		(/realmtheraindoa.altervista.org\/*/.test(window.location.href) && !/realmtheraindoa.altervista.org\/Jeux\/*/.test(window.location.href)) ||
		/wackoscripts.com\/realm*/.test(window.location.href)
	)) {
		return;
	}



	if (window.top === window.self) {
		function setWide() {
			if (window.location.href.indexOf('facebook') !== -1) {
				iframe = document.getElementById('iframe_canvas');
				platform = 'facebook';
			} else if (window.location.href.indexOf("google") !== -1) {
				game_frame = 'oz-gadgets-canvas-iframe-659749063556';
				iframe = document.getElementById('oz-gadgets-canvas-iframe-659749063556');
				platform = 'google';
			} else if (window.location.href.indexOf("kongregate.com") !== -1) {
				game_frame = 'gameiframe';
				iframe = document.getElementById('gameiframe');
				platform = 'kongregate';
			} else if (window.location.href.indexOf("kabam.com") !== -1) {
				iframe = document.getElementById('game_frame');
				platform = 'kabam';
			} else if (window.location.href.indexOf("altervista.org") !== -1 || window.location.href.indexOf("wackoscripts.com/realm") !== -1) {
				iframe = 'none';
				platform = 'altervista';
			}
			if (!iframe || iframe.length < 1) {
				setTimeout(setWide, 1000);
				return;
			}
			var background_118446 = localStorage.getItem('118446_background');
			var USE_BACKGROUND = (background_118446 && background_118446 != undefined && background_118446 != null) ? eval(background_118446) : true;
			switch (platform) {
				case 'facebook':
					while ((iframe = iframe.parentNode) != null) {
						if (iframe.tagName == 'DIV')
							iframe.style.width = '100%';
					}
					document.getElementById('rightCol').style.display = 'none';
					document.getElementById('blueBarDOMInspector').style.display = 'none';
                    document.getElementById('contentCol').style.margin = '0px';
					document.getElementById('contentCol').style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
					var contentColChild = document.getElementById('contentCol').childNodes;
					for (var i = 0; i < contentColChild.length; i++)
						if (contentColChild[i].tagName == 'DIV')
							contentColChild[i].style.margin = '0px';
					document.scrollTop = '42px';
					if (USE_BACKGROUND) {
						var body_elements = document.getElementsByTagName('body');
						for (var el = 0; el < body_elements.length; el++)
							body_elements[el].style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
					}
					break;
				case 'kabam':
					iframe.style.width = '100%';
					iframe.style.margin = '0';
					iframe.style.border = '0';
					if (USE_BACKGROUND)
						iframe.style.backgroundColor = 'transparent';
					else
						iframe.style.backgroundColor = 'white';
					while ((iframe = iframe.parentNode) != null) {
						if (iframe.tagName == 'DIV') {
							iframe.style.width = '100%';
							iframe.style.margin = '0';
							iframe.style.border = '0';
							iframe.style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
						}
					}
					break;
				case 'altervista':
					if (!document.getElementsByTagName('head')) {
						var header = document.createElement('head');
						var html_elements = document.getElementsByTagName('html');
						html_elements[0].appendChild(header);
					}
					if (document.getElementsByTagName('link').length <= 0) {
						var ss = document.createElement("link");
						ss.type = "text/css";
						ss.rel = "stylesheet";
						ss.media = "screen";
						ss.href = "https://kabam1-a.akamaihd.net/castle/stylesheets/chomped/common_258783ec84eaa8c2ad74bf6168ec24317be52dab.css";
						document.getElementsByTagName('head')[0].appendChild(ss);
						var ss = document.createElement("link");
						ss.type = "text/css";
						ss.rel = "stylesheet";
						ss.media = "screen";
						ss.href = "https://kabam1-a.akamaihd.net/castle/stylesheets/chomped/facebook_37fbd906939be51243d0becafcb7aca6edbc3a8f.css";
						document.getElementsByTagName('head')[0].appendChild(ss);
					}
					var centers = document.getElementsByTagName('center');
					for (var el = 0; el < centers.length; el++) {
						var old_elem = centers[el];
						var new_elem = document.createElement('div');
						new_elem.id = 'altervista_div' + el;
						old_elem.parentNode.appendChild(new_elem);
						while (old_elem.hasChildNodes())
							new_elem.appendChild(old_elem.removeChild(old_elem.firstChild));
					}
					var object = document.getElementsByTagName('object');
					if (object) initScript(object);
					break;
				default:
					if (platform == 'kongregate') setTimeout(function() {
						make_space_for_kongregate(document.getElementById('gameiframe'), undefined)
					}, 10000);
					var top_body = document.getElementsByTagName('body');
					for (var el = 0; el < top_body.length; el++) {
						if (top_body[el].id) debugLog('top_body[' + el + '].id = ' + top_body[el].id);
						hide_all(top_body[el], game_frame);
					}
					var frame = document.getElementById(game_frame);
					if (frame) {
						if (frame.width) frame.width = '100%';
						frame.style.width = '100%';
						frame.setAttribute("style", "width: 100%;");
					}
					break;
			}
		}
		setWide();
	} else {
		platform = document.body.className.split(' ');
		if (platform && platform[0]) {
			platform = platform[0].replace(/(platforms_|_game)/g, '');
		} else {
			platform = 'google';
		}
		var errors = 0;

		function setHigh() {
			clearTimeout;
			/* Custom treatment for intermediate iframe */
			if (document.getElementById('game_frame')) setTimeout(function() {
				make_space_for_kongregate(document.getElementById('game_frame'), '100%')
			}, 10000);
			var object = document.getElementsByTagName('object');
			if (object.length < 1) {
				if (++errors > 6) {
					errors = 0;
					window.location = window.location.href;
				}
				setTimeout(setHigh, 1000);
				return;
			}
			var background_118446 = localStorage.getItem('118446_background');
			var USE_BACKGROUND = (background_118446 && background_118446 != undefined && background_118446 != null) ? eval(background_118446) : true;
			switch (platform) {
				case 'facebook':
					REALM_URL = 'https://apps.facebook.com/dragonsofatlantis/realm/';
					for (var i = 0; i < object.length; i++) {
						switch (object[i].parentNode.id) {
							case 'hd':
								object[i].style.display = 'none';
								break;
							default:
								object[i].parentNode.style.margin = '0px';
						}
					}
					document.getElementById('hd').parentNode.style.width = '760px';
					var hdChild = document.getElementById('hd').childNodes;
					for (var i = 0; i < hdChild.length; i++) {
						if (hdChild[i].tagName == 'DIV') hdChild[i].style.display = 'none';
						if (hdChild[i].tagName == 'IFRAME') hdChild[i].style.display = 'none';
					}
					document.getElementById('ft').style.display = 'none';
					document.scrollTop = '42px';
					if (REMOVE_HD) document.getElementById('hd').style.display = 'none';
					if (USE_BACKGROUND) {
						var body_elements = document.getElementsByTagName('body');
						for (var el = 0; el < body_elements.length; el++)
							body_elements[el].style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
						var html_elements = document.getElementsByTagName('html');
						for (var el = 0; el < html_elements.length; el++)
							html_elements[el].style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
					}
					break;
				case 'google':
					document.getElementById('pane_hd').style.display = 'none';
					if (USE_BACKGROUND) {
						var body_elements = document.getElementsByTagName('body');
						for (var el = 0; el < body_elements.length; el++) {
							body_elements[el].style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
							body_elements[el].style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
						}
					}
					break;
				case 'kabam':
					REALM_URL = 'https://www.kabam.com/fr/games/dragons-of-atlantis/play/';
					var html_elements = document.getElementsByTagName('html');
					for (var el = 0; el < html_elements.length; el++) {
						html_elements[el].style.overflow = 'hidden'
						html_elements[el].style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
					}
					if (!USE_BACKGROUND) document.body.style.background = '#888 url(https://images.alphacoders.com/117/117053.jpg)';
					document.getElementById('cn').style.textAlign = 'left';
					if (document.getElementById('castlemania_swf')) setHD(document.getElementById('castlemania_swf'));
					break;
			}
			initScript(object);
		}
		setHigh();
	}



	function initScript(SWF_OBJECT) {

		function makeUID(len) {
			var len = (len != undefined ? len : 20);
			var chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'u', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'U', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_'];
			var uid = chars[Math.floor(Math.random() * 54)];
			for (var i = 0; i < len; i++) {
				uid += chars[Math.floor(Math.random() * 64)];
			}
			return uid;
		}

		function getUID(name) {
			return UID[name] != undefined ? UID[name] : name;
		}

		function setUID(name) {
			var uid = makeUID();
			while (UIDN[uid] != undefined) {
				uid = makeUID();
			}
			UIDN[uid] = 1;
			UID[name] = uid;
			return uid;
		}

		function parseQuotedVars(str) {
			var obj = {};
			var pattern = /\s*(.*?)\s*=\s*('|")(.*?)\2/gi;
			var match;
			while ((match = pattern.exec(str)) != null) {
				obj[match[1]] = match[3];
			}
			return obj;
		}

		function getFlashVars(swf) {
			/* "use strict"; */
			var params = swf.innerHTML;
			var pattern = /\<\s*param\s*(.*?)\>/gi;
			var attrs = {};
			var args, match, p;
			while ((match = pattern.exec(params)) != null) {
				var p = parseQuotedVars(match[1]);
				if (p.name && p.name == 'flashvars') {
					args = decodeEntity(p.value).split('&');
					for (var i = 0; i < args.length; i++) {
						var v = args[i].split('=');
						attrs[v[0].strip()] = v[1].strip();
					}
					break;
				}
			}
			/* will have to enhance this if they change the names ... */
			C.attrs.apiServer = attrs.api_server;
			C.attrs.sessionId = attrs.session_id;
			C.attrs.dragonHeart = attrs.dragon_heart;
			C.attrs.userId = attrs.user_id;
			C.attrs.locale = attrs.locale;
			USER_ID = attrs.user_id;
			S3_SERVER = attrs.s3_server;
			S3_SWF_PREFIX = attrs.s3_swf_prefix;
			PUB_SERVER = attrs.pub_server;
			PUB_PORT = attrs.pub_port;
			MAP_BIN_CACHEBREAKER = attrs.map_bin_cachebreaker;
			SERVER_ID = (/realm(\d+)\./.exec(attrs.api_server) || ['', ''])[1];
			url_versions = C.attrs.apiServer;
			if (url_versions.indexOf('/api') > 0)
				url_versions = url_versions.substring(0, url_versions.indexOf('/api'));
		}

		/*
		 * All global variables MUST be set here or they will not be available
		 * to all functions throughout the script.
		 */
		var api_version = 'overarch',
			scriptName = 'CalciumScript',
			mainAuthor = 'Calcium'
            CPT_SEARCH = {  players:'playerSearchName', playersHisto:'playerSearchHistoName', playerDetail: 'detailPlayer',
                            alliances:'allianceSearchName', allianceDetail: 'detailAlliance' };
		/* Skins */
		var urlBackgroundImage = '',
			urlBackgroundLogo = 'https://images.alphacoders.com/117/117053.jpg';
		/* Styles List */
		var styleList = ['btn_blue', 'blue', 'btn_cyan', 'btn_green', 'btn_on', 'btn_off', 'btn_red', 'btn_purple', 'btn_red', 'btn_yellow', 'bold_red', 'compact_table',
			'content', 'content_table', 'defending', 'hiding', 'popup_bar', 'popup_close', 'popup_main', 'popup_outer', 'popup_top', 'row_headers', 'row_style', 'row_top_headers',
			'row_headers_left', 'scrollable', 'status_feedback', 'status_report', 'status_ticker', 'subtitle_light', 'subtitle', 'support_link', 'table', 'table_console', 'table_headers', 'table_targets',
			'table_wrap', 'title', 'red', 'green', 'btn_disabled', 'title_sr', 'title_main', 'info_protect', 'info_alerts', 'info_boosts','information', 'btn_black'
		];

		/* Tab order */
		var INFO_TAB_ORDER = 1,
			JOBS_TAB_ORDER = 2,
			ALLIANCE_TAB_ORDER = 3,
			WAVE_TAB_ORDER = 4,
			ATTACK_TAB_ORDER = 5,
			SINGLE_TAB_ORDER = 6,
			SEARCH_TAB_ORDER = 10,
			TOWER_TAB_ORDER = 11,
			WALL_TAB_ORDER = 12,
			OPTIONS_TAB_ORDER = 20,
			WHEEL_TAB_ORDER = 21,
			BOOKMARK_TAB_ORDER = 30,
			MULTI_TAB_ORDER = 31,
			SPY_TAB_ORDER = 32,
			INBOX_TAB_ORDER = 50,
            CPT_TAB_ORDER = 60,
			LOG_TAB_ORDER = 99;

		/* Tab enable/disable */
		var ALLIANCE_TAB_ENABLE = true,
			ATTACK_TAB_ENABLE = true,
			BOOKMARK_TAB_ENABLE = true,
			INBOX_TAB_ENABLE = true,
			INFO_TAB_ENABLE = true,
			JOBS_TAB_ENABLE = true,
			LOG_TAB_ENABLE = true,
			MULTI_TAB_ENABLE = true,
			OPTIONS_TAB_ENABLE = true,
			WHEEL_TAB_ENABLE = true,
			SEARCH_TAB_ENABLE = true,
			SINGLE_TAB_ENABLE = true,
			SPY_TAB_ENABLE = true,
			TOWER_TAB_ENABLE = true,
			WALL_TAB_ENABLE = true,
			WAVE_TAB_ENABLE = true,
            CPT_TAB_ENABLE = true;

		/* Global variables */
		var DEBUG_TRACE_AJAX = 2,
			DEBUG_MARCHES = false,
			E429_TIMER = 0,
			E429_DELAY = 3600,
			TILE_DELAY = 2250,
			MAP_DELAY = 1250,
			MIN_DELAY = 10,
			EMULATE_NET_ERROR = 0,
			MIN_DELAY_BETWEEN_WAVE = 10;

		var BUTTON_BGCOLOR = '#436',
			JOB_BUTTON_BGCOLOR = '#436';

		/* Message handling */
		var MESSAGES_ALL = 0,
			MESSAGES_ONLY = 1,
			REPORTS_ONLY = 2,
			MAX_READ = 120,
			MAX_DELETE = 30;

		/* Capital and outposts IDs */
		var CAPITAL =			{ id: 0,	type: 'capital',	name: '', 						dragon_name: 'CityGreatDragon'},
			SPECTRAL_OUTPOST =	{ id: 1,	type: 'spectral',	name: 'SpectralDragonOutpost',	dragon_name: 'SpectralDragon'},
			ICE_OUTPOST =		{ id: 2,	type: 'ice',		name: 'IceDragonOutpost',		dragon_name: 'IceDragon'},
			SWAMP_OUTPOST =		{ id: 3,	type: 'swamp',		name: 'SwampDragonOutpost',		dragon_name: 'SwampDragon'},
			FOREST_OUTPOST =	{ id: 4,	type: 'forest',		name: 'ForestDragonOutpost',	dragon_name: 'ForestDragon'},
			DESERT_OUTPOST =	{ id: 5,	type: 'desert',		name: 'DesertDragonOutpost',	dragon_name: 'DesertDragon'},
			WATER_OUTPOST =		{ id: 6,	type: 'water',		name: 'WaterDragonOutpost',		dragon_name: 'WaterDragon'},
			STONE_OUTPOST =		{ id: 7,	type: 'stone',		name: 'StoneDragonOutpost',		dragon_name: 'StoneDragon'},
			FIRE_OUTPOST =		{ id: 8,	type: 'fire',		name: 'FireDragonOutpost',		dragon_name: 'FireDragon'},
			WIND_OUTPOST =		{ id: 9,	type: 'wind',		name: 'WindDragonOutpost',		dragon_name: 'WindDragon'},
			CHRONO_OUTPOST =	{ id: 10,	type: 'chrono',		name: 'ChronoDragonOutpost',	dragon_name: 'ChronoDragon'},
			SKY_OUTPOST =		{ id: 11,	type: 'skythrone',	name: 'SkythroneOutpost',		dragon_name: 'KaiserDragon'},
			CAVE_OUTPOST =		{ id: 12,	type: 'cave',		name: 'CaveDragonOutpost',		dragon_name: 'CaveDragon'},
			LUNA_OUTPOST =		{ id: 13,	type: 'luna',		name: 'LunaDragonOutpost',		dragon_name: 'LunaDragon'},
			COLOSSUS_OUTPOST = 	{ id: 14,	type: 'colossus',	name: 'ColossusDragonOutpost',	dragon_name: 'ColossusDragon'};

		var IsChrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;

		/* Error messages */
		var kFatalSeedTitle = 'ERROR WHILST FETCHING DATA FROM SERVER',
			kFatalSeedMsg = 'Please disable the script and see if you are able to play the game manually. If normal play is possible then enable the script and try again. If the error persists please read the following post before submitting a report. If normal play is not possible then wait until it is and try again.',
			kFatalSWF = '"<B>Error initializing:</b><BR><BR>Unable to find SWF element"',
			kStartupErr = '"Unable to start "' + scriptName + '"<BR>"',
			kInitErr = '"<B>Error initializing:</b><BR><BR>"';

		var marchErrorTexts = [{vb: 'delayed due to', fb: ''},
		{ vb: 'delayed due to pending march request', fb: 'Another march request is pending' },
		{ vb: 'has-too-many-marches', fb: 'has-too-many-marches' },
		{ vb: 'delayed due to no available generals', fb: 'No Generals Available' },
		{ vb: 'No Troops Defined', fb: 'No Troops Defined' },
		{ vb: 'delayed due to no available Great Dragon', fb: 'No Great Dragon available'},
		{ vb: '<b>Rate Limit Exceeded</b>, too many requests!', fb: 'Rate Limit Exceeded because there were too many requests'},
		{ vb: 'Requirements Unmet', fb: 'Requirements Unmet'},
		{ vb: 'no resources to transport', fb: 'no resources to transport'}];

		/* Main arrays used in the script */
		var sanctuaryDragonRank = new Array('common', 'lesser', 'heightened', 'royal', 'exalted', 'omniscient', 'legendary');
		/* Troops arrays */
		var all_dragon_list =		['GreatDragon', 'WaterDragon', 'StoneDragon', 'FireDragon', 'WindDragon', 'IceDragon', 'SwampDragon', 'ForestDragon', 'DesertDragon', 'ChronoDragon', 'SpectralDragon', 'KaiserDragon', 'CaveDragon', 'LunaDragon', 'ColossusDragon'];
		var all_unit_types =		['Porter', 'Conscript', 'Spy', 'Halberdsman', 'Minotaur', 'Longbowman', 'SwiftStrikeDragon', 'BattleDragon', 'ArmoredTransport', 'Giant', 'FireMirror', 'PackDragon', 'DarkSlayer', 'LightningCannon', 'ChargeTroop', 'VengeWyrm', 'AquaTroop', 'StoneTroop', 'FireTroop', 'WindTroop', 'IceTroop', 'FrostGiant', 'SwampTroop', 'ForestTroop', 'DesertTroop', 'DimensionalRuiner', 'ArcticLeviathan', 'Harrier', 'Defendo', 'ShadowStalker', 'Shaman', 'WarScarab', 'VoltRanger','DragonRider','ColossalMite'];
		var attack_unit_types =		['Porter', 'Conscript', 'Spy', 'Halberdsman', 'Minotaur', 'Longbowman', 'SwiftStrikeDragon', 'BattleDragon', 'ArmoredTransport', 'Giant', 'FireMirror', 'PackDragon', 'DarkSlayer', 'LightningCannon', 'ChargeTroop', 'VengeWyrm', 'AquaTroop', 'StoneTroop', 'FireTroop', 'WindTroop', 'IceTroop', 'FrostGiant', 'SwampTroop', 'ForestTroop', 'DesertTroop', 'DimensionalRuiner', 'ArcticLeviathan', 'Harrier', 'Defendo', 'ShadowStalker', 'Shaman', 'WarScarab', 'VoltRanger','DragonRider','ColossalMite'];
		var wave_unit_types =		['Porter', 'Conscript', 'Spy', 'Halberdsman', 'Minotaur', 'Longbowman', 'SwiftStrikeDragon', 'BattleDragon', 'ArmoredTransport', 'Giant', 'FireMirror', 'PackDragon', 'DarkSlayer', 'LightningCannon', 'ChargeTroop', 'VengeWyrm', 'AquaTroop', 'StoneTroop', 'FireTroop', 'WindTroop', 'IceTroop', 'FrostGiant', 'SwampTroop', 'ForestTroop', 'DesertTroop', 'DimensionalRuiner', 'ArcticLeviathan', 'Harrier', 'Defendo', 'ShadowStalker', 'Shaman', 'WarScarab', 'VoltRanger','DragonRider','ColossalMite'];
		var spy_unit_types =		['Spy'];
		var transport_unit_types =	['Porter', 'ATrans', 'PackDrg']; // Beware : Use abbreviations here
		/* Resources arrays */
		var all_resource_types =			['gold', 'food', 'wood', 'ore', 'stone', 'blue_energy', 'lunar_energy', 'enchanting'];
		var transportable_resource_types = 	['gold', 'food', 'wood', 'ore', 'stone'];
		var trade_resource_types = 			['food', 'wood', 'ore', 'stone'];
		/* Buildings arrays */
		var capital_buildings =		['Home', 'Garrison', 'ScienceCenter', 'Metalsmith', 'OfficerQuarter', 'MusterPoint', 'Rookery', 'StorageVault', 'Theater', 'Sentinel', 'Factory', 'Fortress', 'DragonKeep', 'Wall', 'DefensiveTower'];
		var outpost_buildings =		['TrainingCamp', 'Home', 'Silo', 'MusterPoint', 'DragonKeep', 'Wall'];
		var field_buildings =		['Mine', 'Farm', 'Lumbermill', 'Quarry'];
		var spectral_buildings =	['DarkPortal', 'Mausoleum', 'SpectralDragonKeep'];
		var spectral_fields =		['EnergyCollector'];
		var skythrone_buildings =	['KaiserDragonKeep', 'Cathedral', 'Forge', 'Greenhouse', 'Library', 'Workshop'];
		var cave_buildings =		['CaveDragonKeep', 'CaveCathedral', 'CaveDepot', 'CaveForge', 'CaveGreenhouse', 'CaveLibrary', 'CaveTrainingCamp', 'CaveWorkshop'];
		var luna_buildings =		['DragonKeep', 'LunaCathedral', 'LunaDepot', 'LunaForge', 'LunaGreenhouse', 'LunaLibrary', 'LunaWorkshop', 'LunaShrine'];
		var colossus_buildings =	['ColossusDragonKeep', 'ColossusWall', 'Warehouse', 'TroopQuarters', 'WarpGate', 'ColossusDefensiveTower'];
		
		/* Items arrays */
		var time_item_list =
		   [{name: 'Blink', 				text: '1m',		type: 'JMTR',	confirmation: false,	classCss: 'btn_green'},
			{name: 'Hop',					text: '5m',		type: 'JMTR',	confirmation: false,	classCss: 'btn_green'},
			{name: 'Skip',					text: '15m',	type: 'JMTR',	confirmation: false,	classCss: 'btn_green'},
			{name: 'Jump',					text: '1h',		type: 'JMTR',	confirmation: false,	classCss: 'btn_green'},
			{name: 'Leap', 					text: '2h30',	type: 'JMTR',	confirmation: false,	classCss: 'btn_green'},
			{name: 'Bounce',				text: '8h',		type: 'JMTR',	confirmation: false,	classCss: 'btn_green'},
			{name: 'Bore',					text: '15h',	type: 'JMTR',	confirmation: false,	classCss: 'btn_green'},
			{name: 'Bolt',					text: '24h',	type: 'JMTR',	confirmation: true,		classCss: 'btn_green'},
			{name: 'Blast',					text: '60h',	type: 'JMTR',	confirmation: true,		classCss: 'btn_green'},
			{name: 'Blitz',					text: '96h',	type: 'JMTR',	confirmation: true,		classCss: 'btn_green'},
			{name: 'ForcedMarchDrops',		text: '25%',	type: 'M',		confirmation: false,	classCss: 'btn_cyan'},
			{name: 'TranceMarchDrops',		text: '50%',	type: 'M',		confirmation: false,	classCss: 'btn_cyan'},
			{name: 'TestroniusPowder',		text: '30%',	type: 'JMTR',	confirmation: false,	classCss: 'btn_blue'},
			{name: 'DarkTestroniusPowder',	text: '30%',	type: 'JMTR',	confirmation: false,	classCss: 'btn_black'},
			{name: 'TestroniusDeluxe',		text: '50%',	type: 'JMTR',	confirmation: false,	classCss: 'btn_blue'},
			{name: 'DarkTestroniusDeluxe',	text: '50%',	type: 'JMTR',	confirmation: false,	classCss: 'btn_black'},
			{name: 'TestroniusInfusion',	text: '99%',	type: 'JTR',	confirmation: true,		classCss: 'btn_blue'},
			{name: 'DarkTestroniusInfusion',text: '99%',	type: 'JTR',	confirmation: true,		classCss: 'btn_black'}];

		/* TRANSLATIONS */
		var LANG_CODE = navigator.language.substring(0, 2).toLowerCase();
		var IS_NOT_NATIVE_LANG = (LANG_CODE !== 'en');
		var TRANSLATION_ARRAY = {};

		var div_player_attack = setUID('div_SwfPlyr_attack');
		var div_player_spy = setUID('div_SwfPlyr_spy');
		var div_player_building = setUID('div_SwfPlyr_building');
		var div_player_units = setUID('div_SwfPlyr_units');
		var div_player_research = setUID('div_SwfPlyr_research');
		var div_player_fortuna = setUID('div_SwfPlyr_fortuna');
		var short_alerts = setUID('short_alerts');
		var TIMER_COLOR = '#2B4988';

		/* Global variables */
		var Tabs = {};
		var progressBarPop;
		var updaterPop;
		var mainPop;
		var header_2lines = false;
		var swf_object;
		var SWF_CONTAINER;
		var SWF_CONTAINER_INNERHTML;
		var gAttScrollPos = 0;
		var gMapScrollPos = 0;
		var C = {};
		var gFormatTime = ':';
		var gFormatDate = '/';
		var kForumLink = 'Forum';
		var kWikiLink = 'Wiki DoA';
		var scriptUrlError = 'http://script.wygopro.com/';
		var scriptTitle = '';
		var scriptSite = '';
		var scriptTimeout = null;
		var scriptLoaded = false;
		var startupCount = 0;
		var initTimeout = null;
		var STARTUP_TIMER;
		var citySteps;

		styleList.forEach(
			function(element, index, array) {
				setUID(element);
			});
		/* Set initial Language */
		setLanguage();
		C.attrs = {};

		/* Main entry */

		function scriptStartup() {
			var i;
			progressBar.hideshow(false);
			clearTimeout(scriptTimeout);

			if (scriptLoaded) {
				return;
			}

			if (++startupCount > 20) {
				dialogFatal(kFatalSWF);
				return;
			}

			try {
				var swf = null;
				var object = document.getElementsByTagName('object');
				if (object.length < 1) {
					scriptTimeout = setTimeout(scriptStartup, 1000);
					return;
				}
				for (i = 0; i < object.length; i++) {
					if (object[i].type && object[i].type == 'application/x-shockwave-flash') {
						swf = object[i];
						getFlashVars(swf);
						if (C.attrs.apiServer) {
							var maxWidth = document.body.offsetWidth - 570;
							if (maxWidth < 760) maxWidth = 760;
							if (window.location.href.indexOf("facebook") !== -1)
								document.getElementById('hd').parentNode.style.width = maxWidth + 'px';
							if (swf.id == 'castlemania_swf') swf.style.width = maxWidth + 'px';
							swf_object = swf;
							SWF_CONTAINER = swf.parentNode;
							SWF_CONTAINER_INNERHTML = SWF_CONTAINER.innerHTML;
							setTimeout(function() {
								logit('Mute sound');
								swf.musicMute();
							}, 30000);
							break;
						}
					}
				}
				if (!C.attrs.apiServer) {
					scriptTimeout = setTimeout(scriptStartup, 1000);
					return;
				}
			} catch (e) {
				debugLog('scriptStartup : Error = ' + e);
				scriptTimeout = setTimeout(scriptStartup, 1000);
				return;
			}

			scriptLoaded = true;

			try {
				AutoUpdater.check();
				var retry = 0;
				var startupDelay = Math.randRange(10000, 15000);
				progressBar.start({
					steps: 21,
					delay: startupDelay,
					title: translate('Initializing...'),
					stepText: translate('Loading basic data')
				});

				Data.init({
					log: [
						[],
						[]
					],
					/*
					 * Static data and scripts settings - Will be stored in
					 * local storage and be backup in local file
					 */
					options: {
						popUp: {
							open: true,
							drag: true,
							x: 0,
							y: 0
						},
						background: true,
						currentTab: false,
						forumUrl: 'https://userscripts.org/scripts/discuss/' + scriptId,
						wikiUrl: 'http://fr.dragonsofatlantis.wikia.com/wiki/Accueil',
						disable_wave: !WAVE_TAB_ENABLE,
						disable_multi: MULTI_TAB_ENABLE,
						disable_bookmark: !BOOKMARK_TAB_ENABLE,
						disable_spies: SPY_TAB_ENABLE,
						disable_inbox: !INBOX_TAB_ENABLE,
						disable_search: !SEARCH_TAB_ENABLE,
						disable_alliance: !ALLIANCE_TAB_ENABLE,
						disable_wall: !WALL_TAB_ENABLE,
						disable_single: !SINGLE_TAB_ENABLE,
						disable_wheel: !WHEEL_TAB_ENABLE,
						disable_log: !LOG_TAB_ENABLE,
                        disable_cpt: !CPT_TAB_ENABLE,
						enable_notifications_fortuna: false,
						enable_notifications_spy: false,
						enable_notifications_attack: false,
						messages_notification: [],
						speedups_enabled: false,
						jobs_speedups_enabled: false,
						cheat_enabled: false,
						use_speedup_confirmation: false,
						Rcheat_enabled: false,
						jobs_cancel_confirmation: false,
						utc_time: false,
						user_language: LANG_CODE,

						alliance: {
							last_update: '',
							alliance_update: '',
							activity_update: '',
							current_tab: 0,
							transport_id: 0,
							reinforce_id: 0,
							auto_id: 0,
							sort_list: '0',
							sort_alliance: '0',
							sort_activity: '0',
							sort_applicants: '0',
							data: {
								transports: {},
								resources: {},
								units: {}
							},
							auto: {
								enabled: false,
								recall: false,
								max_load: false,
								delay_min: 30,
								delay_max: 45,
								max_marches: null,
								transports: {},
								resources: {}
							},
							recall: false
						},

						sanctuaryAbilities: {},

						autoCollect: {
							enabled: true,
							last_time: 0,
							delay: 60,
							unit: 60
						},

						autoRefresh: {
							enabled: false,
							delay: 1,
							unit: 3600
						},
						flashRefresh: {
							enabled: false,
							delay: 30,
							unit: 60
						},

						info: {
							current_tab: 0,
							troop_sub_tab: 0,
							consumption_sel: 0
						},
						jobs: {
							current_tab: 0
						},
						building: {
							enabled: false,
							hide_fields: false,
							level_enable: [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}],
							/* Add 1 for new outpost - luna added */
							level_cap: [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}] /*
																							 * Add
																							 * 1
																							 * for
																							 * new
																							 * outpost -
																							 * luna
																							 * added
																							 */
						},
						research: {
							enabled: false,
							res_enable: [{}, {}, {}, {}, {}, {}],
							res_cap: [{}, {}, {}, {}, {}, {}]
						},
						trade: {
							sell : {
								resource: 'food',
								qty: 10,
								price: 10000000
							},
							buy : {
								resource: 'food',
								qty: 10,
								price: 10000000
							}
						},
						training: {
							enabled: false,
							current_tab: 0,
							city: [ /* Add 1 line for new outpost */ {
									enabled: true,
									units: [],
									cap: []
								}, /* main */ {
									enabled: true,
									units: [],
									cap: []
								}, /* spectral */ {
									enabled: true,
									units: [],
									cap: []
								}, /* ice */ {
									enabled: true,
									units: [],
									cap: []
								}, /* swamp */ {
									enabled: true,
									units: [],
									cap: []
								}, /* water */ {
									enabled: true,
									units: [],
									cap: []
								}, /* stone */ {
									enabled: true,
									units: [],
									cap: []
								}, /* fire */ {
									enabled: true,
									units: [],
									cap: []
								}, /* wind */ {
									enabled: true,
									units: [],
									cap: []
								}, /* forest */ {
									enabled: true,
									units: [],
									cap: []
								}, /* desert */ {
									enabled: true,
									units: [],
									cap: []
								}, /* chrono */ {
									enabled: true,
									units: [],
									cap: []
								}, /* skythrone */ {
									enabled: true,
									units: [],
									cap: []
								}, /* cave */ {
									enabled: true,
									units: [],
									cap: []
								}, /* luna */ {
									enabled: true,
									units: [],
									cap: []
								} /* colossus */

							],
							mode: 'min_resource'
						},
						resurrect: {
							enabled: false,
							res_enable: [{}, {}, {}, {}, {}, {}],
							res_max: [{}, {}, {}, {}, {}, {}]
						},
						sanctuary: {
							enabled: false,
							current_tab: 0,
							male_id: 0,
							female_id: 0,
							feeding: {},
							hideDrgMaxLevel: false
						},

						collapsed: {
							quests: [],
							train: [],
							build: [],
							dragon: []
						},
						inbox: {
							current_tab: 0
						},
						map: {
							radius: 16,
							radius_fast: 32,
							x: 0,
							y: 0
						},
						messages: {
							last_read: 0,
							missing: 0
						},
						messages_tower: [],
						messages_delete: {
							type: 0,
							msgGame: true,
							msgPlayer: true,
							msgSentinel: true,
							msgAlliance: true,
							rptAnthropus: true,
							rptTransport: true,
							rptSpy: true,
							rptBattle: true,
							rptReinforcement: true,
							rptCurse: true,
							rptTrading: true,
							rptBreeding: true,
							rptExceptMyAttacks: true,
							rptExceptYourAttacks: true,
							dateAll: true
						},
						search: {
							enabled: false,
							current_tab: 0,
							sort_list: '0',
							last_update: '',
							target: {
								enabled: false,
								alliance: null,
								player: null,
								distance: 14,
								x: 999,
								y: 999,
								type: '',
								level: 0
							},
							grassland: true,
							lake: true,
							hill: true,
							mountain: true,
							forest: true,
							nuage: true,
							plain: true,
							swamp: true,
							min_level: 1,
							max_level: 10,
							unowned: false
						},
						sound: {
							enable_jobs: false,
							enable_fortuna: false,
							enable_sentinel: false,
							repeat_attack: false,
							attack_rdelay: 2,
							repeat_spy: false,
							spy_rdelay: 2,
							URL_player: SoundPlayer.SWF_PLAYER_URL,
							URL_attack: SoundPlayer.DEFAULT_SOUND_URL.attack,
							URL_spy: SoundPlayer.DEFAULT_SOUND_URL.spy,
							URL_building: SoundPlayer.DEFAULT_SOUND_URL.building,
							URL_units: SoundPlayer.DEFAULT_SOUND_URL.units,
							URL_research: SoundPlayer.DEFAULT_SOUND_URL.research,
							URL_fortuna: SoundPlayer.DEFAULT_SOUND_URL.fortuna
						},
						verboseLog: {
							enabled: false
						},

						tower: {
							enabled: true,
							current_tab: 0,
							nospy: false,
							delay: 2,
							unit: 60,
							delete_report: true,
							delete_delay: 1,
							delete_unit: 3600,
							preset: '',
							send_message: false,
							msg_subject: 'I\'m under attack !! (automatic message)',
							msg_body: '%1 at %2 is leading an attack on me...\n' + 'Ennemy forces are composed with :\n' + '%3\n\n' + 'The attack should arrive at %4.\n' + 'Could you please reinforce me ASAP (%6 at %7) ?\n' + 'Thanks\n\n' + '%5'
						},

						attacks: {
							enabled: false,
							current_tab: 0,
							choice: 'AnthropusCamp',
							delay_min: 30,
							delay_max: 60,
							delete_reports: true,
							stop_on_loss: true,
							log_attacks: true,
							max_marches: null,
							level_enable: ['', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
							level_distance: ['', 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16],
							units: ['', {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}],
							include_great_dragon: ['', false, false, false, false, false, false, false, false, false, false, false],
							except_great_dragon: ['', {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}],
							clear_all_targets: false,
							send_without_dragon: false
						},
						bookmarks: {
							enabled: false,
							current_tab: 0,
							choice: 3,
							sort: 0,
							delay_min: 30,
							delay_max: 45,
							max_marches: null,
							stop_on_loss: true,
							delete_reports: true,
							targets: [],
							new_bookmark: {
								x: 0,
								y: 0,
								sequence: '',
								type: '',
								level: 0,
								units: {},
								dragons: {},
								include_great_dragon: false,
								comment: ''
							}
						},
						multiple: {
							enabled: false,
							current_tab: 0,
							delay_min: 30,
							/* Delay before sending a primary wave */
							delay_max: 45,
							delay_b4_secondary: 20,
							/*
							 * Delay before sending first secondary after
							 * primary wave
							 */
							delay_min2: 10,
							/* Delay between seconday waves */
							delay_max2: 15,
							max_marches: null,
							/* Total marches that can send by multi tab */
							max_secondary: null,
							/*
							 * Number of secondary before sending again a
							 * primary
							 */
							stop_on_loss: true,
							delete_reports: true,
							target: {
								x: 0,
								y: 0,
								type: '',
								level: 0,
								ai: 0,
								primary_units: {},
								dragons_1: {},
								include_gd_1: false,
								saved_units_1: {},
								secondary_units: {},
								dragons_2: {},
								include_gd_2: false,
								saved_units_2: {},
								comment: ''
							}
						},
						single: {
							current_tab: 0,
							current_preset: '',
							presets: [],
							preset: {
								name: '',
								units: {}
							},
							target: {
								x: 0,
								y: 0,
								type: '',
								level: 0,
								ai: 0,
								units: {},
								dragons: {},
								saved_units: {},
								include_great_dragon: false,
								comment: ''
							},
							history: []
						},
						spies: {
							enabled: false,
							current_tab: 0,
							delay_min: 30,
							delay_max: 45,
							max_marches: null,
							stop_on_loss: true,
							delete_reports: false,
							target: {
								x: 0,
								y: 0,
								type: '',
								level: 0,
								ai: 0,
								units: {},
								comment: ''
							},
							history: []
						},
						wall: {
							current_tab: 0,
							current_preset: '',
							presets: [],
							preset: {
								name: '',
								units: {},
								scales: '',
								armor: ''
							},
							auto: {
								enable:false,
								hide_troop_after_last: true,
								spy: {
									preset : [],
									use_truce : false
								},
								attack: {
									use_truce : false,
									hide_troop_on_multi_attack: true,
									preset_default : 0
								}
							}
						},
						waves: {
							enabled: false,
							current_tab: 0,
							delay_min: 30,
							delay_max: 45,
							max_marches: null,
							stop_on_loss: true,
							delete_reports: true,
							send_without_dragon: false,
							target: {
								x: 0,
								y: 0,
								type: '',
								level: 0,
								ai: 0,
								units: {},
								dragons: {},
								saved_units: {},
								include_great_dragon: false,
								comment: ''
							},
							history: []
						},
						wheel: {
							current_tab: 0,
							type: 'regular',
							auto_refresh: true,
							auto_play: true,
							delay: 3,
							unit: 1,
							number: 1,
							max_auto: 1,
							mandatory: [
								['CompletionGrant', 'null'],
								['AncestralSeal', 'TestroniusInfusion']
							],
							optional: [
								['null', 'null', 'null', 'null'],
								['null', 'null', 'null', 'null']
							]
						},
						tchat: {
							maxEntries: 500,
							delayToHide: 6,
							enable_notif_realm: true,
							enable_notif_alliance: false,
							tRealm: [],
							tAlliance: []
						}
					},
					/*
					 * Statistics data - Will be stored in local storage and
					 * WON'T be backup in local file
					 */
					stats: {
						attacks: {
							start_at: 0,
							run_time: 0,
							total_attacks: 0,
							loss: {},
							items: {},
							resources: {},
							by_level: ['', {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}, {
								total_attacks: 0,
								items: {},
								resources: {}
							}]
						},
						bookmarks: {
							start_at: 0,
							run_time: 0,
							total_attacks: 0,
							loss: {},
							items: {},
							resources: {}
						},
						leaderboards: {
							alliance: {
								offensive_kills: [{}, {}, {}],
								defensive_kills: [{}, {}, {}],
								power_taken: [{}, {}, {}],
								power_gained: [{}, {}, {}]
							},
							player: {
								offensive_kills: [
									[{}, {}, {}],
									[{}, {}, {}]
								],
								defensive_kills: [
									[{}, {}, {}],
									[{}, {}, {}]
								],
								power_taken: [
									[{}, {}, {}],
									[{}, {}, {}]
								]
							},
							last_refresh: ''
						},
						multiple: {
							start_at: 0,
							run_time: 0,
							total_attacks: 0,
							loss: {},
							items: {},
							resources: {}
						},
						requests: {
							start_at: 0,
							run_time: 0,
							last_block: 0,
							count_block: 0,
							ajax_type: {
								binary: {
									time: [],
									error: []
								},
								/* Startup requests & refresh player/cities data */
								versions: {
									time: [],
									error: []
								},
								locales: {
									time: [],
									error: []
								},
								cookie: {
									time: [],
									error: []
								},
								manifest: {
									time: [],
									error: []
								},
								player: {
									time: [],
									error: []
								},
								cities: {
									time: [],
									error: []
								},
								jobs: {
									time: [],
									error: []
								},
								dragons: {
									time: [],
									error: []
								},
								/* Alliance reated requests */
								alliances: {
									time: [],
									error: []
								},
								membership: {
									time: [],
									error: []
								},
								activity: {
									time: [],
									error: []
								},
								/* Map requests */
								map: {
									time: [],
									error: []
								},
								tile_at: {
									time: [],
									error: []
								},
								wilderness: {
									time: [],
									error: []
								},
								/* Jobs requests */
								building: {
									time: [],
									error: []
								},
								research: {
									time: [],
									error: []
								},
								training: {
									time: [],
									error: []
								},
								resurrect: {
									time: [],
									error: []
								},
								canceljob: {
									time: [],
									error: []
								},
								/* Marches requests */
								marches: {
									time: [],
									error: []
								},
								cancelmarch: {
									time: [],
									error: []
								},
								/* Report requests */
								reports: {
									time: [],
									error: []
								},
								reports_del: {
									time: [],
									error: []
								},
								reports_read: {
									time: [],
									error: []
								},
								message: {
									time: [],
									error: []
								},
								/* Other requests */
								minigame: {
									time: [],
									error: []
								},
								save_minigame: {
									time: [],
									error: []
								},
								leaderboards: {
									time: [],
									error: []
								},
								collect: {
									time: [],
									error: []
								},
								claim: {
									time: [],
									error: []
								},
								defended: {
									time: [],
									error: []
								},
								defense: {
									time: [],
									error: []
								},
								items: {
									time: [],
									error: []
								},
								breeding: {
									time: [],
									error: []
								},
								feeding: {
									time: [],
									error: []
								},
								dragonHandle: {
									time: [],
									error: []
								},
								customization: {
									time: [],
									error: []
								},
								trade: {
									time: [],
									error: []
								},
                                other: {
                                    time: [],
                                    error: []
                                }
							}
						},
						spies: {
							start_at: 0,
							run_time: 0,
							total_attacks: 0,
							loss: {}
						},
						total: {
							start_at: 0,
							total_attacks: 0,
							loss: {},
							items: {},
							resources: {}
						},
						waves: {
							start_at: 0,
							run_time: 0,
							total_attacks: 0,
							loss: {},
							items: {},
							resources: {}
						},
						wheel: {
							type: 'regular',
							total_grids: [0, 0],
							total_played: [0, 0],
							items: [{}, {}],
							last_won: [
								[],
								[]
							]
						}
					},
					/*
					 * Dynamic data - Will be stored in local storage and WON'T
					 * be backup in local file
					 */
					dynamic: {
						recall_marches: [],
						players: {
							memberships: [],
							memberships_evolution: [],
							alliances: [],
							friends: [],
							foes: [],
							alliances_evolution: [],
							activity: [],
							applicants: []
						}
					},
					map: {
						terrains: {},
						players: {},
						evolution: {},
						alliance: {},
						coords: {}
					},
					marches: {
						start_at: 0,
						attacks: {},
						bookmark: {},
						waves: {},
						spies: {},
						transport: {},
						multiple: {},
						count_limit: 1,
						ressources: {}
					}
				});

				verboseLog('Session parameters : ' + inspectObj(C, 6, 1));
				clearAndReload();

				/* Set the default locale use */
				if (Data.options.user_language != undefined && Data.options.user_language != null && Data.options.user_language != LANG_CODE) {
					setLanguage(Data.options.user_language);
				}
				/* Set blue energy transportable if cheat enabled */
				if (Data.options.cheat_enabled) {
					transportable_resource_types = cloneProps(all_resource_types);
				}
				if (Data.options.Rcheat_enabled)
					Data.options.Rcheat_enabled = false; /*
															 * To be sure that
															 * remaining setting
															 * is reset to its
															 * default
															 */
				/* Check basic initialization */

				function stepStarting(current_step) {
					var wait_time = Math.randRange(2500, 4500);
					   var error_code;
					var error_msg;
					var progress_title;
					progressBar.resume();

					function onSuccess(message, waitTime, currentStep) {
						verboseLog(message);
						debugLog(message);
						STARTUP_TIMER = setTimeout(stepStarting, waitTime, currentStep);
					}

					function onError(errorCode, errorMsg, message, waitTime, currentStep) {
						error_code = errorCode;
						switch (errorCode) {
							/* Bad request (API version ?) */
							case 400:
								error_msg = translate('<b>Bad request!</b>');
								progressBar.stop;
								progressBar.hideshow(false);
								retry = 400;
								dialogFatal('<b>' + kFatalSeedTitle + '</b><br><br>\
											<font color="#BF0000"><b> ' + errorMsg + '</b></font>\
											<br><br><div align=left>\
											' + kFatalSeedMsg + '<br><br></div>\
											<a id="' + UID['support_link'] + '" href="" target="_blank">Bugs and Known Issues</a><br>');
								return;
								break;
								/*
								 * Forbidden (RefControl or --no-referrers
								 * missing ?)
								 */
							case 403:
								error_msg = translate('<b>Forbidden!</b>');
								retry = 403;
								return;
								break;
								/* Rate Limit Exceeded */
							case 429:
								error_msg = '<b>API </b>' + translate('<b>Rate Limit Exceeded</b>, too many requests!');
								waitTime = E429_DELAY;
								progressBar.update({
									step: currentStep,
									title: progress_title,
									stepText: translate('Fetching') + ' ' + message + '<br>' + error_msg + ' - ' + translate('Retry in') + ' ' + waitTime
								});
								progressBar.pause();
								verboseLog(error_msg + ' - ' + translate('Retry in :') + waitTime);
								STARTUP_TIMER = setTimeout(stepStarting, waitTime * 1000, currentStep);
								return;
								break;
							case 509:
								error_msg = translate('<b>Rate Limit Exceeded</b>, too many requests!');
								waitTime = 600;
								progressBar.update({
									step: currentStep,
									title: progress_title,
									stepText: translate('Fetching') + ' ' + message + '<br>' + error_msg + ' - ' + translate('Retry in') + ' ' + waitTime
								});
								progressBar.pause();
								verboseLog(error_msg + ' - ' + translate('Retry in :') + waitTime);
								STARTUP_TIMER = setTimeout(stepStarting, waitTime * 1000, currentStep);
								return;
								break;
							default:
								break;
						}
						error_msg = errorMsg;
						debugLog('stepStarting: ' + message + ', Error ' + errorCode + ', ' + error_msg + '. Retry ' + retry);
						STARTUP_TIMER = setTimeout(stepStarting, waitTime, currentStep, ++retry);
					}

					if (retry <= 20) {
						switch (current_step) {
							case 1:
								/* Check API version */
									function getSupportedVersions(callback) {
										var params = {};
										new MyAjaxRequest('versions', url_versions + '/supported_versions', params, function(res) {
											if (res.ok && res.dat) {
												var list = '';
												if (res.dat.length) {
													api_version = res.dat[res.dat.length - 1];
													for (var v = 0; v < res.dat.length; v++) list = list + ((v == 0) ? '' : ', ') + res.dat[v];
												} else {
													api_version = res.dat;
													list = res.dat;
												}
												verboseLog('List of supported API version : ' + list);
												debugLog('List of supported API version : ' + list);
											}
											if (callback) callback(res);
										}, false);
								}
								progress_title = translate('Getting API version...');
								progressBar.update({
									step: current_step,
									title: progress_title,
									stepText: translate('Checking API version')
								});
								getSupportedVersions(function(res) {
									if (res.ok) {
										onSuccess(translate('API version Successfully initialized') + ' : ' + api_version, wait_time, current_step + 1);
									} else {
										debugLog('stepStarting: ' + translate('Checking API version') + ', Error ' + res.status + ', ' + res.errmsg + '.');
										onSuccess(translate('API version not available. Using default') + ' : ' + api_version, wait_time, current_step + 1);
									}
								});
								break;
							case 2:
								/* Map data Initialization */
									progress_title = translate('Getting map data...');
								progressBar.update({
									step: current_step,
									title: progress_title,
									stepText: translate('Charging Map binairy file')
					});
								Map.initMapData(function(res) {
									if (res.ok) {
										onSuccess(translate('Map Bin Successfully initialized'), wait_time, current_step + 1);
									} else {
										onError(res.status, res.errmsg, translate('Map Bin'), wait_time, current_step);
									}
								});
								break;
							case 3:
								/* Translation Initialization */
									progress_title = translate('Getting basic data...');
								progressBar.update({
									step: current_step,
									title: progress_title,
									stepText: translate('Fetching Translation matrix')
								});
								Translation.init(function(res) {
									if (res.ok) {
										onSuccess(translate('Translation Matrix Successfully initialized'), wait_time, current_step + 1);
									} else {
										onError(res.status, res.errmsg, translate('Translation matrix'), wait_time, current_step);
									}
								});
								break;
							case 4:
								/* Manifest Initialization */
									progress_title = translate('Getting game data...');
								progressBar.update({
									step: current_step,
									title: progress_title,
									stepText: translate('Fetching Manifest')
								});
								Manifest.init(function(res) {
									if (res.ok) {
										onSuccess(translate('Manifest Successfully initialized'), wait_time, current_step + 1);
									} else {
										onError(res.status, res.errmsg, translate('Manifest'), wait_time, current_step);
									}
								});
								break;
							case 5:
								/* Seed Initialization */
									progress_title = translate('Getting game data...');
								progressBar.update({
									step: current_step,
									title: progress_title,
									stepText: translate('Fetching Seed')
								});
								Seed.init(function(res) {
									if (res.ok) {
										onSuccess(translate('Seed Successfully initialized'), wait_time, current_step + 1);
									} else {
										onError(res.status, res.errmsg, translate('Seed'), wait_time, current_step);
									}
								});
								break;
							case 6:
								/* Sanctuary dragons data */
									progress_title = translate('Getting dragons data...');
								progressBar.update({
									step: current_step,
									title: progress_title,
									stepText: translate('Fetching Dragons data')
								});
								Seed.fetchDragons(function(res) {
									if (res.ok) {
										onSuccess(translate('Dragons data successfully fetched'), wait_time, current_step + 1);
									} else {
										onError(res.status, res.errmsg, translate('Dragons'), wait_time, current_step);
									}
								});
								break;
							case 7:
								/* Fetch capital data */
									progress_title = translate('Getting cities data...');
								var cityIdx;
								/* We make sure to first start the capital */
								for (var i = 0; i < Seed.cityInit.length; i++) {
									if (Seed.cityInit[i].type == 'capital') {
										cityIdx = Seed.cityInit[i].id;
									}
								}
								/* Set progress bar steps / city */
								citySteps = Math.floor(14 / (Seed.cityInit.length - 1));
								progressBar.update({
									step: current_step,
									title: progress_title,
									stepText: translate('Fetching Capital data')
								});
								Seed.fetchCity(cityIdx, function(res) {
									if (res.ok) {
										wait_time = Math.randRange(2500, 6000);
										onSuccess(translate('Capital data successfully fetched'), wait_time, current_step + 1);
									} else {
										onError(res.status, res.errmsg, translate('Capital data'), wait_time, current_step);
									}
								});
								break;
							case 8:
								/* Fetch outposts data */
									progress_title = translate('Getting cities data...');
								for (var i = 0; i < Seed.cityInit.length; i++) {
									if (Seed.cityInit[i].loaded) {
										continue;
									}
									progressBar.update({
										step: current_step + (citySteps * i),
										title: progress_title,
										stepText: translate('Fetching Outpost ') + (i + 1)
									});
									if (Seed.cityInit[i].timer) {
										clearTimeout(Seed.cityInit[i].timer);
									}
									var current_index = i;
									var cityIdx = Seed.cityInit[i].id;
									Seed.fetchCity(cityIdx, function(res) {
										if (res.ok) {
											wait_time = Math.randRange(2500, 6000);
											if (current_index == Seed.cityInit.length - 1) {
												wait_time = 2500;
											}
											onSuccess(translate('Outpost') + ' #' + (i + 1) + ' ' + translate('data successfully fetched'), wait_time, current_step);
										} else {
											onError(res.status, res.errmsg, translate('Outpost') + ' #' + (i + 1), wait_time, current_step);
										}
									});
									return;
								}
								startScript();
								return;
								break;
						}
					} else {
						/* Retries Limit */
						clearTimeout(STARTUP_TIMER);
						progressBar.stop;
						progressBar.hideshow(false);
						if (retry < 400) { /*
											 * to avoid displaying twice a
											 * dialogFatal popup
											 */
							dialogFatal('<b>' + kFatalSeedTitle + '</b><br><br>\
								<font color="#BF0000"><b> ' + (error_code || retry) + ' - ' + error_msg + '</b></font>\
								<br><br><div align=left>\
								' + kFatalSeedMsg + '<br><br></div>\
								<a id="' + UID['support_link'] + '" href="" target="_blank">Bugs and Known Issues</a><br>');
						}
						return;
					}
				}

				actionLog('<B>' + scriptVersion + ' ' + translate('Loading...') + '</B>');
				consoleLog('<B>' + scriptVersion + ' ' + translate('Loading...') + '</B>');
				stepStarting(1);

				function startScript() {

					if (updaterPop) setTimeout(function() {
						updaterPop.destroy()
					}, 100);

					progressBar.update({
						step: 19,
						title: translate('Completing...'),
						stepText: translate('Initializing map, auto-collect, ...')
					});
                    MyAjax.statScript();
					Names.init();
					Map.init();
					Marches.init();
					AutoCollect.init();
					AutoRefresh.init();
					Messages.init();


					progressBar.stop;
					progressBar.hideshow(false);
					progressBarPop.destroy();

					if (Data.options.popUp == null || Data.options.popUp.x == null || Data.options.popUp.x == '' || isNaN(Data.options.popUp.x)) {
						var maxWidth = document.body.offsetWidth - 570;
						if (maxWidth < 760) maxWidth = 760;
						Data.options.popUp.x = maxWidth + 2;
						Data.options.popUp.y = 1;
					}
					var popupWidth = 550;
					var popupHeight = 808;

					/* Random Title */
					makeRandomTitle();

					/* Create a new popup DIV for the main script window */
					mainPop = new PopUp('main', Data.options.popUp.x, Data.options.popUp.y, popupWidth, popupHeight, Data.options.popUp.drag, function() {
						tabManager.hideTab();
					});

					/* Check Our Coords */
					Map.checkOurCoords();

					/*
					 * Create all the tabs and insert them into the main script
					 * popup DIV
					 */
					tabManager.init(mainPop.getMainDiv());

					/* Display everything */
					Data.options.popUp.open = true;
					if (Data.options.popUp.open) {
						mainPop.show(true);
						tabManager.showTab();
					}

					Data.setDefaultValues('options');
					RecallMarch.init();
					SoundPlayer.init();
					WackoScript.init();
					Wall.init();
					CalciumNotifications.init();
					Socket.init(mainPop.getMainDiv());
					window.addEventListener('unload', Data.onUnload, false);

					/* Apply CSS styles (THIS MUST BE THE LAST ALWAYS) */
					setStyles();

					actionLog('<B>' + scriptVersion + ' ' + translate('Loaded') + '</B>');
					if (Data.stats.requests) Data.stats.requests.start_at = serverTime();
					/* sendNewVersionMsg (); */

					checkDelay();

					REALM_NAME = $$('a.current_realm.change_realm')[0].text;
					logit(REALM_NAME);
				}
			} catch (e) {
				dialogFatal(kInitErr + e);
				logit(inspectObj(e, 8, 1));
			}
		}

		/******************************** CalciumNotification package ****************/
		var CalciumNotifications = {
			nAlliance : null,
			nMonde : null,
			timerAlliance : null,
			timerMonde : null,
			
			init: function() {
				var t = CalciumNotifications;
				Messages.addAlarmReportListener(t.gotAlarmReport);
				verboseLog('CalciumNotifications init successfully');
			},

			showFortunaWin: function(bodyWin) {
				var t = CalciumNotifications;
				if (Data.options.enable_notifications_fortuna) {
					t.showNotification(REALM_NAME + ' : FORTUNA', bodyWin, serverTime(), 'https://wackoscripts.com/images/Fortunas_Ticket.jpg');
				}
			},

			showNotification: function(title, body, tag, iconUrl) {
				try {
					verboseLog('IsChrome = ' + IsChrome);
					var Notification = window.Notification || window.mozNotification || window.webkitNotification;
					
					Notification.requestPermission(function (permission) {});
					
					var instance = new Notification(title, {
						body: body,
						tag: tag,
						icon: iconUrl
					});
					
					instance.onclick = function () {
						// Something to do
					};
					instance.onerror = function () {
						// Something to do
					};
					instance.onshow = function () {
						// Something to do
					};
					instance.onclose = function () {
						// Something to do
					};
					
					return instance;
					/*Notification.requestPermission(function(perm) {
						verboseLog('perm = ' + perm);
						if (perm == 'granted') {
							return new Notification(title, {
								body: body,
								// tag: tag,
								icon: iconUrl
							});
						}
					});*/
				} catch (e) {
					verboseLog('Error Notification = ' + inspectObj(e, 8, 1));
				}
			},

			showAlertNotification: function(msg) {
				if ((Data.options.enable_notifications_spy && msg.type == 1) ||
					(Data.options.enable_notifications_attack && msg.type == 0)) {

					CalciumNotifications.showNotification(
						REALM_NAME + '-' + translate((msg.type == 1 ? 'Spy' : 'Attack')) + '-' + translate('Arrival time') + ': ' + new Date(msg.arrive_at).formatDate() + ' ' + new Date(msg.arrive_at).formatTime(),
						msg.x + ',' + msg.y + ' : ' + msg.alliance + '/' + msg.troups,
						serverTime(),
						(msg.type == 1 ? 'https://wackoscripts.com/images/Spy.jpg' : 'https://wackoscripts.com/images/Attacks.jpg')
					);

				}
			},

			showChatMessage: function(data) {
				var t = CalciumNotifications;
				var tabTemp = data.room.split(':');
				tabTemp = tabTemp[1].split('_');
				var message = {
					name: data.user_card.name,
					alliance: data.user_card.allianceName,
					text: data.message,
					power: data.user_card.power,
					time: data.timestamp,
					id: data.player_id
				};
				
				if(tabTemp[1] == 0) {
					if(Data.options.tchat.enable_notif_realm) {
						if(t.nMonde != null) {
							t.nMonde.close();
							clearTimeout(t.timerMonde);
						}
						t.nMonde = t.showNotification(REALM_NAME + ' TCHAT MONDE: ' + message.name + '('+ message.alliance +')', message.text, message.id, data.user_card.portrait);
						t.timerMonde = setTimeout(function() { CalciumNotifications.nMonde.close();  }, Data.options.tchat.delayToHide * 1000);
					}
					if(Data.options.tchat.tRealm.length > Data.options.tchat.maxEntries) {
						Data.options.tchat.tRealm.splice(0, 1);
					}
					Data.options.tchat.tRealm.push(message);
					if(Tabs.Inbox.tabTchatRealmActive) {
						Tabs.Inbox.tabInboxTchatRealm();
					}
					verboseLog('Add message to realm tchat :' + inspectObj(message, 4, 1));
				} else {
					if(Data.options.tchat.enable_notif_alliance) {
						if(t.nAlliance != null) {
							t.nAlliance.close();
							clearTimeout(t.timerAlliance);
						}
						t.nAlliance = t.showNotification(REALM_NAME + ' TCHAT ALLIANCE: ' + message.name + '('+ message.alliance +')', message.text, message.id, data.user_card.portrait);
						t.timerAlliance = setTimeout(function() { CalciumNotifications.nAlliance.close();  }, Data.options.tchat.delayToHide * 1000);
					}
					if(Data.options.tchat.tAlliance.length > Data.options.tchat.maxEntries) {
						Data.options.tchat.tAlliance.splice(0, 1);
					}
					Data.options.tchat.tAlliance.push(message);
					if(Tabs.Inbox.tabTchatAllianceActive) {
						Tabs.Inbox.tabInboxTchatAlliance();
					}
					verboseLog('Add message to alliance tchat :' + inspectObj(message, 4, 1));
				}
			},
			
			gotAlarmReport: function(rpt_alm, msgid) {
				var t = CalciumNotifications;
				var nbSpy = 0;
				var msg = {
					id: msgid,
					type: 0,
					arrive_at: 0,
					alliance: '',
					x: 0,
					y: 0,
					units: {},
					troups: '',
					general: 0,
					op: 0
				};
				if (!rpt_alm) {
					return;
				}
				if (rpt_alm.report.warnings) {
					var warn = rpt_alm.report.warnings;
					if (warn.attacker_name) {
						msg.alliance = warn.attacker_name;
					}
					if (warn.attacker_title && warn.attacker_title.alliance) {
						if (msg.alliance) {
							msg.alliance = msg.alliance + ' / ' + warn.attacker_title.alliance;
						} else {
							msg.alliance = warn.attacker_title.alliance;
						}
					}
					// if (warn.outpost_attack) msg.op = warn.march_incoming;
					if (warn.attacker_coords) {
						msg.x = warn.attacker_coords.x;
						msg.y = warn.attacker_coords.y;
					}
					if (warn.march_type && warn.march_type == 'SpyMarch') {
						msg.type = 1;
					}
					if (warn.attacker_units) {
						var results = [];
						for (var tr in warn.attacker_units) {
							var unit = numf(warn.attacker_units[tr], ' ') + ' ' + translate(tr);
							results.push(unit);
							if(msg.type == 1 && tr == 'Spy') {
								nbSpy = warn.attacker_units[tr];
							}
						}
						if (results.length > 0) {
							msg.troups = results.join(', ');
						}
						msg.units = cloneProps(warn.attacker_units);
					}
					if (warn.march_arrival_time) {
						msg.arrive_at = t.getTimeAlarm(warn.march_arrival_time);
					}
				}

				var found = false;
				for (var i = 0; i < Data.options.messages_notification.length && !found; i++) {
					if (Data.options.messages_notification[i].id == msgid) {
						found = true;
					}
				}

				if (!found) {
					Data.options.messages_notification.push(msg);
					t.showAlertNotification(msg);
					// Auto-Wall enable ?
					if(Data.options.wall.auto.enable && (Buildings.getLevel(CAPITAL.id, 'Sentinel')).min >= 9) {
						logit('Wall auto enable and sentinel >= 9');
						var detAlert = SoundPlayer.getNbCurrentAlertForAutoWall();
						
						// Spy in progress ?
						if(detAlert.nbSpyInProgress > 0) {
							logit('nbSpyInProgress : ' + detAlert.nbSpyInProgress);
							// Use a MomentaryTruce ?
							if(Data.options.wall.auto.spy.use_truce) {
								// City underProtection ?
								if(!Wall.isUnderProtection()) {
									setTimeout(function() { Wall.useMomentaryTruce(); }, 2000);
								}
							}
							
							var idSpyPreset = 0;
							if(detAlert.maxSpy <= 100) { 
								idSpyPreset = 0;
							} else if (detAlert.maxSpy <= 1000) {
								idSpyPreset = 1;
							} else if (detAlert.maxSpy <= 5000) {
								idSpyPreset = 2;
							} else if (detAlert.maxSpy <= 10000) {
								idSpyPreset = 3;
							} else {
								idSpyPreset = 4;
							}
							Wall.putWallDefenseOn();
							Wall.applyPreset(Data.options.wall.auto.spy.preset[idSpyPreset], 'spy');
						}
						
						// Attack in progress ?
						if(detAlert.nbAttackInProgress > 0) {
							// Multi attack ?
							if(detAlert.nbAttackInProgress > 1) {
								// Hide troops on multi-attack
								if(Data.options.wall.auto.attack.hide_troop_on_multi_attack) {
									Wall.hideTroops();
								}
							}
						
							// Use a MomentaryTruce ?
							if(Data.options.wall.auto.attack.use_truce) {
								// City underProtection ?
								if(!Wall.isUnderProtection()) {
									setTimeout(function() { Wall.useMomentaryTruce(); }, 1000);
								}
							}
							Wall.putWallDefenseOn();
							Wall.applyPreset(Data.options.wall.auto.attack.preset_default, 'attack');
						}
						
						// Hide troop at the end of the last attack ?? ==> Gérer
						// dans package Wall !
						if(Data.options.wall.auto.hide_troop_after_last) {
							clearTimeout(Data.options.wall.auto.hide_troop_timeout);
							Data.options.wall.auto.hide_troop_timeout = setTimeout(function() { Wall.hideTroops(); }, detAlert.maxTimeArrived * 1000);
						}
					} else {
						logit('Wall auto disable or sentinel < 9');
					}
				}

			},

			getTimeAlarm: function(str) {
				var result = 0;
				if (str.length >= 19) {
					var year = toNum(str.substr(0, 4));
					var month = toNum(str.substr(5, 2));
					if (month == 0) {
						month = toNum(str.substr(6, 1));
					}
					var day = toNum(str.substr(8, 2));
					if (day == 0) {
						day = toNum(str.substr(9, 1));
					}
					var hours = toNum(str.substr(11, 2));
					if (hours == 0) {
						hours = toNum(str.substr(12, 1));
					}
					var minutes = toNum(str.substr(14, 2));
					if (minutes == 0) {
						minutes = toNum(str.substr(15, 1));
					}
					var seconds = toNum(str.substr(17, 2));
					if (seconds == 0) {
						seconds = toNum(str.substr(18, 1));
					}
					result = new Date(Date.UTC(year, month - 1, day, hours, minutes, seconds));
				}
				return result;
			}
		}
		/******************************** Socket Teamwork package ********************/
		var Socket = {
			SWF_SOCKET_URL : 'https://wackoscripts.com/files/teamwork_socket_bridge.swf',

			buffer : [],
			swf_socket : null,
			scriptisready : false,
			isready : false,
			isconnected : false,
			ishandshake : false,
			credentials : null,
			scriptid:null,
			shockwave_ok : false,
			CHECKSTATUS_DELAY : 60000,
			CHECKSTATUS_MAXRESP : 15000,
			checkstatus_timer : undefined,

			EventType : {
				TEAMWORK_SOCKET_LOADED : 'loaded',
				TEAMWORK_SOCKET_STATUSOK : 'shockwaveok',
				TEAMWORK_SOCKET_CONNECTED : 'connected',
				TEAMWORK_SOCKET_DISCONNECTED : 'disconnected',
				TEAMWORK_SOCKET_IOERROR : 'ioError',
				TEAMWORK_SOCKET_SECURITYERROR : 'securityError',
				TEAMWORK_SOCKET_RECEIVE : 'receive',
				TEAMWORK_SOCKET_SCRIPTREADY : 'scriptready'
			},

			EOM : '\r\n',
			ENCODING : 'utf-8',
			SUBSCRIBE : 'subscribe',

			message_type : {
				report_notification : 'Socket.doNothing',
				sentinel_warning : 'Messages.newWarning' ,
				wilderness_created_notification : 'Socket.doNothing', // 'Player.addWilderness',
				wilderness_destroyed_notification : 'Socket.doNothing', // 'Player.removeWilderness',
				wilderness_count_notification : 'Socket.doNothing', // 'Player.setMaxWildernesses',
				trading_post_notification : 'Socket.doNothing', // managing in Messages
				research_completed : 'Socket.doNothing', // 'Jobs.researchcompleted',
				job_completed : 'Socket.doNothing', // 'Jobs.completed',
				march_completed : 'Socket.doNothing', // no interesting info
				great_dragon_fully_healed : 'Socket.doNothing', // 'Dragons.fullyHealed' managing in Jobs
				force_client_reload : undefined,
				force_auto_client_reload : undefined,
				system_maintenance : undefined,
				dragon_damaged : 'Socket.doNothing', // 'Dragons.damaged',
				outpost_damaged : 'Socket.doNothing', // not managing
				outpost_fully_healed : 'Socket.doNothing', // not managing
				dragon_fully_healed : 'Socket.doNothing', // 'Dragons.fullyHealed', managing in Jobs
				cursed : 'Socket.doNothing', // not managing
				reconnect_socket : 'Socket.reconnect',
				multiple_windows_open : 'Socket.doNothing', // not managing
				sanctuary_toggle : 'Socket.doNothing', // not yet managing
				refresh_player : 'Socket.doNothing', // i think not necessary ... request economy
				quest_update : 'Socket.doNothing', // not managing
				breeding_completed : 'Socket.doNothing', // not yet managing
				hatching_completed : 'Socket.doNothing', // not yet managing
				feeding_completed : 'Socket.doNothing', // not yet managing
				subscribe : 'Socket.ReceiveSubscribe',
				chat_message : 'CalciumNotifications.showChatMessage', // not managing
				chat_join : 'Socket.doNothing', // not managing
				chat_leave : 'Socket.doNothing', // not managing
			},

			// Socket bridge callback functions
			loaded : function() {
				var t = Socket;
				// SWF loaded OK, ready to connect
				t.shockwave_ok = true;
				t.isready = true;
				t.connect(PUB_SERVER,PUB_PORT);
				t.checkstatus_timer = setInterval(t.checkstatus,t.CHECKSTATUS_DELAY);
			},
			
			shockwaveok : function() {
				var t = Socket;
				t.shockwave_ok = true;
				logit('SWF respond OK');
			},

			connected : function() {
				var t = Socket;
				t.isconnected = true;
				t.SendSubscribe();
			},

			disconnected : function() {
				var t = Socket;
				t.isconnected = false;
				t.ishandshake = false;
				t.connect(PUB_SERVER,PUB_PORT);
			},

			ioError: function(msg) {
				var t = Socket;
				logit('socket error : '+msg);
			},

			securityError: function(msg) {
				var t = Socket;
				logit('security error : '+msg);
			},

			receive: function(msg) {
				logit('Messages.receive --- Start : msg => ' + msg);
				var t = Socket;

				var obj = JSON.parse(msg);
				if (obj.type && obj.data) {
					if (t.message_type[obj.type]) {
						var fn = eval(t.message_type[obj.type]);
						if (typeof fn === 'function') {
							fn(obj.data);
						} else {
							logit('Messages.receive : '+t.message_type[obj.type] + ' is not a function');
						}
					} else {
						logit('receive : no function defined for '+obj.type+';data='+inspect(obj.data,8,1));
					}
				} else {
					logit('receive : type or data undefined , msg='+msg);
				}
			},

			// Functions to communicate with socket bridge
			connect : function(server, port) {
				var t = Socket;
				if (!t.isready) return;

				// Send message Connect to server
				window.postMessage({ type: "TEAMWORK_SOCKET_CONNECT", flashid : UID['TeamWork_SocketBridge'] ,text: (server+':'+port) }, "*");
			},

			close : function() {
				var t = Socket;
				if (!t.isconnected) return;
				// Send message disConnect to server
				window.postMessage({ type: "TEAMWORK_SOCKET_CLOSE", flashid : UID['TeamWork_SocketBridge'] ,text: "none" }, "*");
			},

			write : function(msg) {
				var t = Socket;
				if (!t.isconnected) return;

				window.postMessage({ type: "TEAMWORK_SOCKET_WRITE", flashid : UID['TeamWork_SocketBridge'] ,text: msg }, "*");
			},

			checkstatus : function() {
				var t = Socket;
				if (!t.isready) return;
				t.shockwave_ok = false;

				logit('SWF request');
				window.postMessage({ type: "TEAMWORK_SOCKET_CHECKSTATUS", flashid : UID['TeamWork_SocketBridge'] ,text: "none" }, "*");
				setTimeout(function(){
					var t = Socket;
					if (!t.shockwave_ok) {
						logit('SWF not respond');
						t.isready = false;
						t.isconnected = false;
						t.ishandshake = false;
						clearInterval(t.checkstatus_timer);
						t.reloadSocketBridge();
					}
				},t.CHECKSTATUS_MAXRESP);
			},

			reconnect : function() {
				var t = Socket;
				t.close();
			},

			init : function (m) {
				var t = Socket;
				var mainbox = m;
				t.credentials = {player_id:Seed.player.id};

				setUID('TeamWork_SWF_Container');
				var container = $(UID['TeamWork_SWF_Container']);
				if (!container) {
					var container = document.createElement('div');
					container.setAttribute('id', UID['TeamWork_SWF_Container']);
					mainbox.appendChild(container);
				}

				setUID('TeamWork_Socket_Bridge');
				var swf_player = $(UID['TeamWork_Socket_Bridge']);
				if (!swf_player) {
					var swf_container = $(UID['TeamWork_SWF_Container']);
					var swf_player = document.createElement('div');
					swf_player.setAttribute('id', UID['TeamWork_Socket_Bridge']);
					swf_container.appendChild(swf_player);
				}

				window.addEventListener("message", function(event) {
					var t = Socket;
					// We only accept messages from ourselves
					if (event.source != window) {
						logit('window.addEventListener --- Ejected');
						return;
					}
					
					if (event.data.type && event.data.text && t.EventType[event.data.type]) {
						var fn = t.EventType[event.data.type];
						t[fn](event.data.text);
					}
				}, false);

				// ADD callback function in page (a script)
				var script = document.createElement('script');
				t.scriptid=setUID('Socket_callback');
				script.type = 'text/javascript';
				script.setAttribute('id',t.scriptid);

				var html=
				 '//<![CDATA[\n'
				+'var TeamWork_Socket = {\n'
				+'	loaded : function() {\n'
				+'		window.postMessage({ type: "TEAMWORK_SOCKET_LOADED", text: "none" }, "*");\n'
				+'	},\n'
				+'	statusok : function() {\n'
				+'		window.postMessage({ type: "TEAMWORK_SOCKET_STATUSOK", text: "none" }, "*");\n'
				+'	},\n'
				+'	connected : function() {\n'
				+'		window.postMessage({ type: "TEAMWORK_SOCKET_CONNECTED", text: "none" }, "*");\n'
				+'	},\n'
				+'	disconnected : function() {\n'
				+'		window.postMessage({ type: "TEAMWORK_SOCKET_DISCONNECTED", text: "none" }, "*");\n'
				+'	},\n'
				+'	ioError : function(msg) {\n'
				+'		console.log(" JS Injected : ioError");\n'
				+'		window.postMessage({ type: "TEAMWORK_SOCKET_IOERROR", text: msg }, "*");\n'
				+'	},\n'
				+'	securityError : function(msg) {\n'
				+'		console.log(" JS Injected : securityError");\n'
				+'		window.postMessage({ type: "TEAMWORK_SOCKET_SECURITYERROR", text: msg }, "*");\n'
				+'	},\n'
				+'	receive : function(msg) {\n'
				+'		console.log(" JS Injected : receive. msg = " +  msg);\n'
				+'		window.postMessage({ type: "TEAMWORK_SOCKET_RECEIVE", text: msg }, "*");\n'
				+'	},\n'
				+'};\n'
				+'var EventType = {\n'
				+'	TEAMWORK_SOCKET_CONNECT : \'connect\',\n'
				+'	TEAMWORK_SOCKET_CLOSE: \'close\',\n'
				+'	TEAMWORK_SOCKET_WRITE : \'write\',\n'
				+'	TEAMWORK_SOCKET_CHECKSTATUS : \'checkstatus\',\n'
				+'};\n'
				+'function connect(id,strconnect){\n'
				+'	var swf=document.getElementById(id);\n'
				+'  if (swf) {\n'
				+'		var args=strconnect.split(":");\n'
				+'		swf.connect(args[0],args[1]);\n'
				+'	} else {\n'
				+'		console.log("connect :"+id+" not found");\n'
				+'	}'
				+'};\n'
				+'function close(id){\n'
				+'	var swf=document.getElementById(id);\n'
				+'  if (swf) {\n'
				+'		swf.close();\n'
				+'	} else {\n'
				+'		console.log("close :"+id+" not found");\n'
				+'	}'
				+'};\n'
				+'function write(id,msg){\n'
				+'	var swf=document.getElementById(id);\n'
				+'  if (swf) {\n'
				+'		swf.write(msg);\n'
				+'	} else {\n'
				+'		console.log("write :"+id+" not found");\n'
				+'	}'
				+'};\n'
				+'function checkstatus(id){\n'
				+'	var swf=document.getElementById(id);\n'
				+'  if (swf) {\n'
				+'		swf.areyouok();\n'
				+'	} else {\n'
				+'		console.log("areyouok :"+id+" not found");\n'
				+'	}'
				+'};\n'
				+'function init(){\n'
				+'	window.addEventListener("message", function(event) {\n'
				+'		if (event.source != window ) {\n'
				+'			console.log(" JS Injected : Ejected");\n'
				+'			return;\n'
				+'		}\n'
				+'		if (event.data.type && event.data.flashid && event.data.text && EventType[event.data.type]) {\n'
				+'			var myfunc = EventType[event.data.type];\n'
				+'			var fn=eval(myfunc);\n'
				+'			if (typeof fn == \'function\') {\n'
				+'				fn(event.data.flashid,event.data.text);\n'
				+'			} else {\n'
				+'				console.log(myfunc +" is not a function");\n'
				+'			}\n'
				+'		}\n'
				+'	}, false);\n'
				+'	window.postMessage({ type: "TEAMWORK_SOCKET_SCRIPTREADY", text: "none" }, "*");\n'
				+'};\n'
				+'init();\n'
				+' //]]>';

				script.text=html;

				var s = document.getElementsByTagName('script')[0];
				if (s) {
					s.parentNode.insertBefore(script, s);
				} else {
					logit('no script found');
				}
			},

			scriptready : function()
			{
				var t = Socket;
				t.scriptisready = true;
				t.loadSocketBridge();
			},

			SendSubscribe : function()
			{
				var t = Socket;
				var data_to_send = {type:'subscribe', data:t.credentials};
				var msg = JSON.stringify( data_to_send );
				t.write(msg+t.EOM);
			},

			ReceiveSubscribe : function()
			{
				var t = Socket;
				t.ishandshake=true;
				/*
				 * if (Data.options.sentinel.wall.auto_actions.always_on) {
				 * Sentinel.check_always_on(); }
				 */
			},

			loadSocketBridge : function()
			{
				var t = Socket;

				setUID('TeamWork_Socket_Bridge');
				var swf_player = $(UID['TeamWork_Socket_Bridge']);
				if (!swf_player) {
					var swf_container = $(UID['TeamWork_SWF_Container']);
					var swf_player = document.createElement('div');
					swf_player.setAttribute('id', UID['TeamWork_Socket_Bridge']);
					swf_container.appendChild(swf_player);
				}

				var flashvars = {
					scope : "TeamWork_Socket",
					allowdomain : "*",
					allowinsecuredomain : "*",
					debugMode : 'yes'
				};

				setUID('TeamWork_SocketBridge');
				
				easyswf({
					swf: t.SWF_SOCKET_URL,
					targetDiv: UID['TeamWork_Socket_Bridge'],
					swfid : UID['TeamWork_SocketBridge'],
					width: 1,
					height: 1,
					allowScriptAccess: "always",
					flashvars : {
						scope : "TeamWork_Socket",
						allowdomain : "*",
						allowinsecuredomain : "*",
						debugMode : 'yes'
					},
					movie: t.SWF_SOCKET_URL,
					wmode: 'opaque'
				});
			},

			reloadSocketBridge : function() {
				var t = Socket;
				$(UID['TeamWork_SocketBridge']).remove();
				t.loadSocketBridge();
			},
			
			doNothing : function(obj) {
				return;
			}
		}; // END Socket
		/******************************** Wall package *******************************/
		var Wall = {
			
			checkSetDefenseBusy : false,
			
			init: function() {
				Messages.addBattleReportListener(Wall.readBattleReport);
				Messages.addSpyReportListener(Wall.readSpyReport);
			},
			
			isUnderProtection: function() {
				var ret = false;
				var boosts = getBoosts();
				for (var i = 0; i < boosts.length; i++) {
					if (is_protected() && boosts[i].type == 'safety' && boosts[i].run_at) {
						if (boosts[i].run_at > serverTime()) {
							ret = true;
						}
					}
				}
				return ret;
			},
			
			useMomentaryTruce : function() {
				new MyAjax.useSingleItem('MomentaryTruce', function(rslt) {
					if (rslt.ok) {
						actionLog('<B>' + translate('MomentaryTruce') + '</B> ' + translate('used') + ' ' + translate('Successfully'));
					} else {
						actionLog(translate('Single usage of') + ' ' + translate('MomentaryTruce') + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
					}
				});
			},
			
			hideTroops: function() {
				var t = Wall;
				var units = {};
				t.apply(units);			
			},
			
			apply: function(units) {
				var city = Seed.cities[CAPITAL.id];
				var t = Wall;
				if (t.checkSetDefenseBusy) {
					return false;
				}
				t.checkSetDefenseBusy = true;
				MyAjax.setDefenseForce(city.id, units, function() {
					logit(translate('wall-defenders-updated'));
					t.checkSetDefenseBusy = false;
				});
			
			},
			
			applyPreset: function (id, type) { // type : 'spy', 'attack'
				var t = Wall;
				var presetUnits = Data.options.wall.presets[id].units;
				var units = {};
				for (var pu in presetUnits) {
					var numTroops = getTroopNumbers(CAPITAL.id, pu);
					var unit_max = numTroops.incity + numTroops.indefense;
					if (unit_max < presetUnits[pu] || presetUnits[pu] == -1) { 
						units[pu] = unit_max;
					}
					else  {
						units[pu] = presetUnits[pu];
					}
				}
				t.apply(units);
				if(type == 'attack') {
					if(Data.options.wall.presets[id].armor !== '' && Data.options.wall.presets[id].scales !== '') {
						new MyAjax.setCustomization('GreatDragon', Data.options.wall.presets[id].armor, Data.options.wall.presets[id].scales, function(rslt) {});
					}
				}
			},
			
			readBattleReport: function(rpt) {
				// Parcours des messages du guet
				for(var i = 0 ; i < Data.options.messages_tower.length ; i++) {
					var msg = Data.options.messages_tower[i];
					// Si X, Y et type de messages coincide on continue
					// 
					if (rpt.report.attacker.location.x == Data.options.messages_tower[i].x 
					&& rpt.report.attacker.location.y == Data.options.messages_tower[i].y 
					&& rpt.report.location.terrain == 'City') {
						var results = [];
						var msgTroups = '';
						for (var tr in rpt.report.attacker.units) {
							var unit = numf(rpt.report.attacker.units[tr][0], ' ') + ' ' + translate(tr);
							results.push(unit);
						}
						if (results.length > 0) {
							msgTroups = results.join(', ');
						}
						if(msgTroups == Data.options.messages_tower[i].troups) {
							 Data.options.messages_tower[i].arrive_at = Data.options.messages_tower[i].arrive_at*2000;
						}
					}
				}
				if(Data.options.wall.auto.enable && Data.options.wall.auto.hide_troop_after_last) {
					var detAlert = SoundPlayer.getNbCurrentAlertForAutoWall();
					// Hide troop at the end of the last attack ?? ==> Gérer
					// dans package Wall !
					if(detAlert.nbAttackInProgress == 0 && detAlert.nbSpyInProgress == 0) {
						clearTimeout(Data.options.wall.auto.hide_troop_timeout);
						var troopInDefense = false;
						for (var i = 0; i < all_unit_types.length; i++) {
							var numTroops = getTroopNumbers(CAPITAL.id, all_unit_types[i]);
							if(numTroops.indefense > 0) {
								troopInDefense = true;
							}
						}
						if(troopInDefense) {
							Wall.hideTroops();
						}
					}
				}
			},
			
			readSpyReport: function(rpt) {
				// Parcours des messages du guet
				for(var i = 0 ; i < Data.options.messages_tower.length ; i++) {
					var msg = Data.options.messages_tower[i];
					
					if (rpt.report.attacker.location.x == Data.options.messages_tower[i].x 
					&& rpt.report.attacker.location.y == Data.options.messages_tower[i].y 
					&& rpt.report.location.terrain == 'City') {
						var results = [];
						var msgTroups = '';
						for (var tr in rpt.report.attacker.units) {
							var unit = numf(rpt.report.attacker.units[tr][0], ' ') + ' ' + translate(tr);
							results.push(unit);
						}
						if (results.length > 0) {
							msgTroups = results.join(', ');
						}
						if(msgTroups == Data.options.messages_tower[i].troups) {
							 Data.options.messages_tower[i].arrive_at = Data.options.messages_tower[i].arrive_at*2000;
						}
					}
				}
				if(Data.options.wall.auto.enable && Data.options.wall.auto.hide_troop_after_last) {
					var detAlert = SoundPlayer.getNbCurrentAlertForAutoWall();
					// Hide troop at the end of the last attack ?? ==> Gérer
					// dans package Wall !
					if(detAlert.nbAttackInProgress == 0 && detAlert.nbSpyInProgress == 0) {
						clearTimeout(Data.options.wall.auto.hide_troop_timeout);
						var troopInDefense = false;
						for (var i = 0; i < all_unit_types.length; i++) {
							var numTroops = getTroopNumbers(CAPITAL.id, all_unit_types[i]);
							if(numTroops.indefense > 0) {
								troopInDefense = true;
							}
						}
						if(troopInDefense) {
							Wall.hideTroops();
						}
					}
				}
			},
			
			putWallDefenseOn : function () {
				var wallStatus = Seed.cities[CAPITAL.id].defended;
				if(!wallStatus) {
					new MyAjax.switchDefense(cityId, wallStatus, function(rslt) {
						if (rslt.ok) {
							verboseLog(translate('Successfully'));
						} else {
							verboseLog(translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
				}
			},
			
			putWallDefenseOff : function () {
				var wallStatus = Seed.cities[CAPITAL.id].defended;
				if(wallStatus) {
					new MyAjax.switchDefense(cityId, wallStatus, function(rslt) {
						if (rslt.ok) {
							verboseLog(translate('Successfully'));
						} else {
							verboseLog(translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
				}
			}
		}
		/******************************** MyAjax package *****************************/
		var MyAjax = {
			addMainParams: function() {
				var p = {};
				p['user_id'] = C.attrs.userId;
				p['dragon_heart'] = C.attrs.dragonHeart;
				p['_session_id'] = C.attrs.sessionId;
				p['version'] = api_version;
				p['timestamp'] = toNum(serverTime());
				return p;
			},
			tradeSell: function(product, nbProduct, price, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['offer[product]'] = product;
				p['offer[units]'] = nbProduct;
				p['offer[price]'] = price;
				
				new MyAjaxRequest('trade', 'trades/sell.json', p, mycb, true);
				
				function mycb(rslt) {
					if (rslt.ok) {
						
					} else {
						verboseLog('Ajax.tradeSell ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					}
					if (callback) callback(rslt.dat.result);
					return;
				}
			},
			tradeSearch: function(product, nbProduct, upperPrice, callback) { 
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['offer[product]'] = product;
				p['offer[units]'] = nbProduct;
				p['offer[lower_price]'] = 0;
				p['offer[upper_price]'] = upperPrice;
				
				new MyAjaxRequest('trade', 'trades/search.json', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						
					} else {
						verboseLog('Ajax.tradeSearch ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					}
					if (callback) callback(rslt.dat.result);
					return;
				}
			},
			tradeSearchSell: function(callback) { 
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['offer[product]'] = 'gold';
				p['offer[units]'] = 1000;
				p['offer[lower_price]'] = 1000;
				p['offer[upper_price]'] = 251000;
				
				new MyAjaxRequest('trade', 'trades.json', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						
					} else {
						verboseLog('Ajax.tradeSearch ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					}
					if (callback) callback(rslt.dat.result);
					return;
				}
			},
			tradeBuy: function(idTrade, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				
				new MyAjaxRequest('trade', 'trades/' + idTrade + '/buy.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						Seed.checkAddJob(rslt.dat.result.job);
					} else {
						verboseLog('Ajax.tradeBuy ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					}
					if (callback) callback(rslt);
					return;
				}
			},
			tradeCancel: function(idTrade, callback) {
				var t = MyAjax;
				var p = {};
                p = t.addMainParams();
				p['_method'] = 'delete';
                
				new MyAjaxRequest('trade', 'trades/' + idTrade + '/cancel.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						
					} else {
						verboseLog('Ajax.tradeBuy ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					}
					if (callback) callback(rslt.dat.result);
					return;
				}
			},
			abandonWilderness: function(city_id, x, y, callback) {
				verboseLog('Ajax.abandonWilderness : city_id='+city_id+', x='+x+', y='+y);
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method']	= 'delete';
				p['x']			= x;
				p['y']			= y;
				
				var p2 = {};
				p2 = t.addMainParams();
				p2['x'] = x;
				p2['y'] = y;
				new MyAjaxRequest('wilderness', 'cities/'+ city_id +'/wildernesses/abandon.json', p, mycb, true);
				
				
				function mycb(rslt) {
					if (rslt.ok) {
						var options = {
							x:x,
							y:y,
							force_request:true,
							wild_detail:true
						};
						Map.tileAt(options, mycb2);
						verboseLog('Ajax.abandonWilderness : ' + rslt.ok);
					} else {
						verboseLog('Ajax.abandonWilderness ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					}
					
					function mycb2(rslt) {
						if (rslt.ok) {
							verboseLog('Ajax.tileAt : ' + rslt.ok);
							if (callback) {
								callback(true);
							}
						} else {
							verboseLog('Ajax.tileAt ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
							if (callback) {
								callback(false);
							}
						}
					}
				}
				
				verboseLog('Ajax.abandonWilderness : Fin');
			},
			sanctuaryAbilities: function(callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				new MyAjaxRequest('dragonHandle', 'sanctuary_abilities', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						Data.options.sanctuaryAbilities = rslt.dat.sanctuary_abilities;
						if (callback) {
							callback(true);
						}
					} else {
						verboseLog('Ajax.sanctuaryAbilities ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
						if (callback) {
							callback(false);
						}
					}
				}
			},
			battleReport: function(report_id, player_id, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				new MyAjaxRequest('reports_read', 'reports/battle/' + report_id + '/player/' + player_id + '.json', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						var msg = rslt.dat.result.report_notification;
						var rpt = {
							id: msg.id,
							created_at: msg.created_at,
							summary: msg.summary,
							type: msg.report_type,
							from: msg.from,
							unread: (is_null(msg.read_at) ? true : false),
							report: (rslt.dat.result.report ? rslt.dat.result.report : null)
						};
						if (Messages.activity[report_id])
							Messages.activity[report_id].mergeWith(rpt);
						else Messages.activity[report_id] = cloneProps(rpt);
						if (callback) {
							callback(rpt);
							return;
						}
					} else verboseLog('Ajax.battleReport ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(null);
					return;
				}
			},
			getCustomization: function (callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				
				new MyAjaxRequest('customization', 'player_unit_customization', p, mycb, false);
				
				function mycb(rslt) {
					if(rslt.dat) {
						if (rslt.dat.result) {
							if (rslt.dat.result.success) {
								Seed.armorScale = cloneProps(rslt.dat.result.buffs);
							}
						} else {
							verboseLog('Ajax.getCustomization ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
						}
					} else {
						verboseLog('Ajax.getCustomization ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					}
					if (callback) callback(rslt);
					return;
				}
				
			},
			setCustomization: function(unitName, armor, scales, callback) {
				var t = MyAjax;
				var p = {};

				p = t.addMainParams();
				p['unit_name'] = unitName;

				if (armor) {
					p['customizations'] = scales + ',' + armor;
				} else {
					p['customizations'] = scales;
				}

				new MyAjaxRequest('customization', 'player_unit_customization/update.json', p, mycb, true);

				function mycb(rslt) {
					if(rslt.dat) {
						if (rslt.dat.result) {
							if (rslt.dat.result.success) {
								var dragon_name = rslt.dat.result.unit_type.substring(rslt.dat.result.unit_type.indexOf('::') + 2);
								Seed.dragons[dragon_name].slots = rslt.dat.result.slots;
								if (Seed.dragons[dragon_name].slots.scales == undefined)
									Seed.dragons[dragon_name].slots.scales = "GreenScales";
								if (Seed.dragons[dragon_name].slots.armor == undefined)
									Seed.dragons[dragon_name].slots.armor = "GreenArmor";

							}
						} else {
							verboseLog('Ajax.setCustomization ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
						}
					} else {
						verboseLog('Ajax.setCustomization ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					}
					if (callback) callback(rslt);
					return;
				}
			},
			buildingUpgrade: function(cityId, buildingId, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'put';
				new MyAjaxRequest('building', 'cities/' + cityId + '/buildings/' + buildingId + '.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						if (rslt.dat.result.success) {
							Seed.checkAddJob(rslt.dat.result.job);
						}
					} else verboseLog('Ajax.buildingUpgrade ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			cancelTraining: function(jobId, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['job_id'] = jobId;
				p['_method'] = 'delete';
				new MyAjaxRequest('canceljob', 'jobs/' + jobId + '.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						if (rslt.dat.result.success) {
							delete(Seed.jobs[rslt.dat.result.job.city_id][rslt.dat.result.job.id]);
							Seed.updateCity(rslt.dat.result.city);
						}
					} else verboseLog('Ajax.cancelTraining ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			claimQuest: function(questName, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['quest_name'] = questName;
				p['_method'] = 'put';
				new MyAjaxRequest('claim', 'player_quests/claim.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						try {
							if (rslt.dat.quests.claimed) Seed.player.quests.claimed = cloneProps(rslt.dat.quests.claimed);
							if (rslt.dat.result.items) Seed.player.items = cloneProps(rslt.dat.result.items);
						} catch (e) {
							verboseLog(translate('could-not-claim') + ': ' + e.name + ' - ' + e.message);
						}
					} else verboseLog(translate('could-not-claim') + ': ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			collectResources: function(cityId, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				new MyAjaxRequest('collect', 'cities/' + cityId + '/move_resources.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) Seed.updateCity(rslt.dat.city);
					else verboseLog(translate('Auto-Collect Error') + ': ' + rslt.errmsg);
					if (callback) callback(rslt.ok);
					return;
				}
			},
			/*collectRune: function (callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['item'] = "EternalRune";
				
				new MyAjaxRequest('collect', 'daily_item/claim', p, mycb, true);
				
				function mycb(rslt) {
					if (rslt.ok) Seed.updateCity(rslt.dat.city);
					else verboseLog(translate('Auto-Collect Error') + ': ' + rslt.errmsg);
					if (callback) callback(rslt.ok);
					return;
				}
			},*/
			dragonBreeding: function(male_id, female_id, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'put';
				p['male_id'] = male_id;
				p['female_id'] = female_id;
				new MyAjaxRequest('breeding', 'dragons', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						if (rslt.dat.result.success)
							Seed.checkAddJob(rslt.dat.result.breeding_job);
					} else verboseLog('Ajax.dragonBreeding ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			dragonHandle: function(options, callback) {
				/*
				 * options : { dragon_id, method, building_id } method delete =
				 * Dismiss a dragon method put = Remove a dragon from roost
				 * method put + a roost building id = Set a dragon in the roost
				 * (boosts activated)
				 */
				if (!options.dragon_id) return;
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = (options.method || 'put');
				if (options && options.building_id) p['building_id'] = options.building_id;
				new MyAjaxRequest('dragonHandle', 'dragons/' + options.dragon_id, p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						if (rslt.dat.result.success) {
							if (options.method == 'delete') {
								delete(Seed.sanctuary_dragons[options.dragon_id]);
								if (Data.options.sanctuary.feeding[options.dragon_id]) delete(Data.options.sanctuary.feeding[options.dragon_id]);
							} else {
								Seed.player.boosts = cloneProps(rslt.dat.boosts);
								try {
									for (var i in rslt.dat.result.dragon) {
										var dragon = cloneProps(rslt.dat.result.dragon[i]);
										/*var dragon_name = dragon.type.substring(dragon.type.indexOf('::') + 2);
										dragon_name = (dragon_name == 'CityGreatDragon') ? 'GreatDragon' : dragon_name;
										dragon.name = dragon_name;*/
										var dragon_rank = sanctuaryDragonRank[dragon.rank];
										dragon.type = dragon.gender + '-' + dragon_rank;
										dragon.subtype = ((i == 'city_great_dragon') ? 'great_dragon' : i).replace(/ |_/g, '-');
										Seed.sanctuary_dragons[dragon.id] = cloneProps(dragon);
									}
								} catch (e) {
									rslt.ok = false;
									rslt.errmsg = 'Exception - ' + e.toString();
									verboseLog('Ajax.dragonHandle ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg)
								}
							}
						}
					} else verboseLog('Ajax.dragonHandle ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			dragonFeeding: function(dragon_id, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				new MyAjaxRequest('feeding', 'dragons/' + dragon_id + '/feed', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						if (rslt.dat.result.success)
							Seed.checkAddJob(rslt.dat.result.feeding_job);
					} else verboseLog('Ajax.dragonFeeding ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			getMinigame: function(type, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['ticket_type'] = type;
				new MyAjaxRequest('minigame', 'minigames/index.json', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						if (callback) {
							callback({
								ok: rslt.ok,
								list: rslt.dat.result.prize_list,
								id: rslt.dat.result.minigame_timestamp,
								ticket: rslt.dat.result.has_free_ticket,
								golden: rslt.dat.result.has_free_golden_ticket
							});
							return;
						}
					} else verboseLog('Ajax.getMinigame ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(null);
					return;
				}
			},
			marchRecall: function(cityId, marchId, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'delete';
				new MyAjaxRequest('cancelmarch', 'cities/' + cityId + '/marches/' + marchId + '.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						if (rslt.dat.result.success)
							Seed.updateCity(rslt.dat.result.city);
					} else verboseLog('Ajax.marchRecall ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			marchBusy: false,
			marchSend: function(cityId, x, y, generalId, units, ownerId, callback) {
				var t = MyAjax;

				t.marchBusy = true;
				var dragon_type = null;
				var found_in_list = false;
				var u = {}
				var mt = false;
				var sendTroops = "{";
				for (var pu in units) {
					if (units[pu] > 0) {
						for (var gd = 0; gd < Seed.dragonList.length && !found_in_list; gd++) {
							if (Seed.dragonList[gd].type == units[pu]) {
								found_in_list = true;
								dragon_type = units[pu];
							}
						}
						u[pu] = units[pu];
						if (mt == true) {
							sendTroops += ',';
						}
						sendTroops += '"' + pu + '":' + units[pu];
						mt = true;
					}
				}
				sendTroops += "}";

				var p = {};
				p = t.addMainParams();
				p['march[x]'] = x;
				p['march[y]'] = y;
				p['_method'] = 'post';
				p['march[units]'] = sendTroops;
				p['march[general_id]'] = generalId;
				p['march[march_type]'] = 'attack'; /*
													 * Fix to send only spies in
													 * attack
													 */
				new MyAjaxRequest('marches', 'cities/' + cityId + '/marches.json', p, mycb, true);

				function mycb(rslt) {
					t.marchBusy = false;
					if (rslt.ok) {
						try {
							rslt.dat.result.job.ownerId = ownerId;
							if (rslt.dat.result.city.marches) {
								for (var i = 0; i < rslt.dat.result.city.marches.length; i++) {
									if (rslt.dat.result.city.marches[i].id == rslt.dat.result.job.march_id)
										rslt.dat.result.city.marches[i].ownerId = ownerId;
								}
							}
							Seed.updateCity(rslt.dat.result.city);
							if (dragon_type !== null && Seed.dragons[dragon_type])
								Seed.dragons[dragon_type].is_in_city = false;
						} catch (e) {
							debugLog('***********' + e);
						}
					} else verboseLog('Ajax.marchSend ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			marchSpy: function(cityId, x, y, units, ownerId, callback) {
				var t = MyAjax;

				t.marchBusy = true;
				var u = {}
				var mt = false;
				var sendTroops = "{";
				for (var pu in units) {
					if (units[pu] > 0) {
						u[pu] = units[pu];
						if (mt == true) {
							sendTroops += ',';
						}
						sendTroops += '"' + pu + '":' + units[pu];
						mt = true;
					}
				}
				sendTroops += "}";

				var p = {};
				p = t.addMainParams();
				p['march[march_type]'] = 'spy';
				p['march[y]'] = y;
				p['march[units]'] = sendTroops;
				p['_method'] = 'post';
				p['march[x]'] = x;
				new MyAjaxRequest('marches', 'cities/' + cityId + '/marches.json', p, mycb, true);

				function mycb(rslt) {
					t.marchBusy = false;
					if (rslt.ok) {
						try {
							rslt.dat.result.job.ownerId = ownerId;
							if (rslt.dat.result.city.marches) {
								for (var i = 0; i < rslt.dat.result.city.marches.length; i++) {
									if (rslt.dat.result.city.marches[i].id == rslt.dat.result.job.march_id)
										rslt.dat.result.city.marches[i].ownerId = ownerId;
								}
							}
							Seed.updateCity(rslt.dat.result.city);
						} catch (e) {
							debugLog('***********' + e);
						}
					} else verboseLog('Ajax.marchSpy ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			membership: function(alliance_id, id, method, callback) {
				var t = MyAjax;
				var p = {}, json = 'alliances/' + alliance_id + '/memberships';
				p = t.addMainParams();
				if (method == 'put')
					p['alliance_membership[approved]'] = 'true';
				if (method == 'invite')
					p['alliance_membership[player_id]'] = id;
				else {
					json += '/' + id;
					p['_method'] = method;
				}
				new MyAjaxRequest('membership', json, p, mycb, true);

				function mycb(rslt) {
					if (!rslt.ok) verboseLog('Ajax.membership ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) {
						/*
						 * new
						 * Ajax.Request('script.calciumscript.com/finder.php', {
						 * method: 'post', parameters: { result: rslt, type:
						 * 'membership' } });
						 */
						callback(rslt);
					}
					return;
				}
			},
			messageDetail: function(id, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				new MyAjaxRequest('reports_read', 'reports/' + id + '.json', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						var msg = rslt.dat.result.report_notification;
						var d = {
							id: msg.id,
							created_at: msg.created_at,
							summary: msg.summary,
							type: msg.report_type,
							from: msg.from,
							unread: (is_null(msg.read_at) ? true : false),
							report: (rslt.dat.result.report ? rslt.dat.result.report : null)
						};
						if (Messages.details[msg.id])
							Messages.details[msg.id].mergeWith(d);
						else Messages.details[msg.id] = cloneProps(d);
						Messages.updateUnreadCount();
						if (callback) {
							callback(rslt.dat.result);
							return;
						}
					} else verboseLog('Ajax.messageDetail ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(null);
					return;
				}
			},
			messageDelete: function(ids, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'delete';
				p['ids'] = ids.join('|');
				new MyAjaxRequest('reports_del', 'reports/bulk_delete.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						for (var i = 0; i < ids.length; i++) {
							if (Messages.details[ids[i]]) delete(Messages.details[ids[i]]);
						}
						Messages.updateUnreadCount();
					} else verboseLog('Ajax.messageDelete ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt.ok);
					return;
				}
			},
			messageList: function(cat, numpage, count, callback) {
				var t = MyAjax;
				if (!cat) {
					cat = 'all';
				}
				var npage = (numpage == -1 ? 1 : numpage);
				var p = {};
				p = t.addMainParams();
				p['count'] = count;
				p['category'] = cat;
				p['page'] = npage;
				new MyAjaxRequest('reports', 'reports.json', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						Messages.total_count = rslt.dat.result.total;
						if (rslt.dat.result.report_notifications) {
							var msgs = rslt.dat.result.report_notifications;
							for (var i = 0; i < msgs.length; i++) {
								var d = {
									id: msgs[i].id,
									created_at: msgs[i].created_at,
									summary: msgs[i].summary,
									type: msgs[i].report_type,
									from: msgs[i].from,
									unread: (is_null(msgs[i].read_at) ? true : false)
								};
								if (Messages.details[msgs[i].id])
									Messages.details[msgs[i].id].mergeWith(d);
								else Messages.details[msgs[i].id] = cloneProps(d);
							}
							Messages.updateUnreadCount();
						}
						if (callback) callback(rslt.dat.result);
						return;
					} else verboseLog('Ajax.messageList ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(null);
					return;
				}
			},
			messageSend: function(subject, body, id, to_player, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				if (to_player)
					p['player_id'] = id;
				else p['alliance_id'] = id;
				p['message[subject]'] = subject;
				p['message[message]'] = body;
				new MyAjaxRequest('message', 'messages.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						if (callback) {
							callback(rslt.dat.result);
							return;
						}
					} else verboseLog('Ajax.messageSend ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(null);
				}
			},
			pollingList: function(callback) {
				var t = MyAjax;
				var p = {};
				new MyAjaxRequest('reports', 'poll.json', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						if (callback) {
							callback(rslt.dat.result); /*
														 * should find
														 * unread_count (number)
														 * and next_attack
														 * (number)
														 */
							return;
						}
					} else verboseLog('Ajax.pollingList ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(null);
					return;
				}
			},
			researchStart: function(cityId, researchType, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'post';
				p['research[research_type]'] = researchType;
				new MyAjaxRequest('research', 'cities/' + cityId + '/researches.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						Seed.updateCity(rslt.dat.result.city);
						Seed.checkAddJob(rslt.dat.result.job);
					} else verboseLog('Ajax.researchStart ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			save_sound: function(callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['cookie'] = '{"DoALocalSoundKey":{"sound":0,"music":0}}';
				new MyAjaxRequest('cookie', 'cookie/save.json', p, mycb, true);

				function mycb(rslt) {
					if (!rslt.ok) verboseLog('Ajax.save_sound ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt.ok);
					return;
				}
			},
			saveMinigame: function(id, type, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['ticket_type'] = type;
				p['minigame_timestamp'] = id;
				new MyAjaxRequest('save_minigame', 'minigames/save_result.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						try {
							if (rslt.dat.result.items) Seed.player.items = cloneProps(rslt.dat.result.items);
							Seed.player.tickets.gold_club = rslt.dat.result.tickets.fortunas_chance;
							Seed.player.tickets.fortunas_chance = rslt.dat.result.tickets.gold_club;
							if (callback) {
								callback({
									ok: rslt.ok,
									item: rslt.dat.result.item_won
								});
								return;
							}
						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = e.name + ' - ' + e.message;
							verboseLog(translate('Save minigame Error') + ': ' + e.name + ' - ' + e.message);
						}
					} else verboseLog(translate('Save minigame Error') + ': ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			setDefenseForce: function(cityId, units, callback) {
				var t = MyAjax;
				var u = {};
				var mt = false;
				var defenseForce = "{";
				for (var pu in units) {
					if (units[pu] > 0) {
						u[pu] = units[pu];
						if (mt == true) {
							defenseForce += ',';
						}
						defenseForce += '"' + pu + '":' + units[pu];
						mt = true;
					}
				}
				defenseForce += "}";
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'put';
				p['defense_force[units]'] = defenseForce;
				new MyAjaxRequest('defense', 'cities/' + cityId + '/defense_force.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						try {
							Seed.updateCity(rslt.dat.result.city);
						} catch (e) {
							debugLog('***********' + e);
						}
					} else verboseLog('Ajax.setDefenseForce ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			switchDefensiveTower: function(cityId, onOff, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'put';
				p['defensive_tower'] = onOff ? '0' : '1';
				new MyAjaxRequest('defended', 'cities/' + cityId + '/defensive_tower', p, mycb, true);
				
				function mycb(rslt) {
					if (rslt.ok) {
						verboseLog(translate('switchDefensiveTower OK'));
						Seed.updateCity(rslt.dat.city);
					} else verboseLog(translate('switchDefensiveTower Error') + ': ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
				
			},
			switchDefense: function(cityId, onOff, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['callback'] = 'function Function() {}';
				p['_method'] = 'put';
				p['defended'] = onOff ? '0' : '1';
				new MyAjaxRequest('defended', 'cities/' + cityId + '.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						verboseLog(translate('switchDefense OK'));
						Seed.updateCity(rslt.dat.city);
					} else verboseLog(translate('switchDefense Error') + ': ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			TransportMarch: function(cityId, x, y, units, resources, ownerId, callback) {
				var t = MyAjax;

				t.marchBusy = true;
				var r = {};
				var trs = false;
				var sendResources = "{";
				for (var pr in resources) {
					if (resources[pr] > 0) {
						r[pr] = resources[pr];
						if (trs == true) {
							sendResources += ',';
						}
						sendResources += '"' + pr + '":' + resources[pr];
						trs = true;
					}
				}
				sendResources += "}";
				var u = {};
				var mt = false;
				var sendTroops = "{";
				for (var pu in units) {
					if (units[pu] > 0) {
						u[pu] = units[pu];
						if (mt == true) {
							sendTroops += ',';
						}
						sendTroops += '"' + pu + '":' + units[pu];
						mt = true;
					}
				}
				sendTroops += "}";

				var p = {};
				p = t.addMainParams();
				p['march[type]'] = 'TransportMarch';
				p['march[y]'] = y;
				p['march[resources]'] = sendResources;
				p['march[units]'] = sendTroops;
				p['_method'] = 'post';
				p['march[x]'] = x;
				new MyAjaxRequest('marches', 'cities/' + cityId + '/marches.json', p, mycb, true);

				function mycb(rslt) {
					t.marchBusy = false;
					if (rslt.ok) {
						try {
							rslt.dat.result.job.ownerId = ownerId;
							if (rslt.dat.result.city.marches) {
								for (var i = 0; i < rslt.dat.result.city.marches.length; i++) {
									if (rslt.dat.result.city.marches[i].id == rslt.dat.result.job.march_id)
										rslt.dat.result.city.marches[i].ownerId = ownerId;
								}
							}
							Seed.updateCity(rslt.dat.result.city);
							Data.marches.ressources[rslt.dat.result.job.march_id] = cloneProps(resources);
						} catch (e) {
							debugLog('***********' + e);
						}
					} else verboseLog('Ajax.marchSend ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			troopTraining: function(troopType, troopQty, cityId, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'post';
				p['units[quantity]'] = troopQty;
				p['units[unit_type]'] = troopType;
				new MyAjaxRequest('training', 'cities/' + cityId + '/units.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						Seed.updateCity(rslt.dat.result.city);
						Seed.checkAddJob(rslt.dat.result.job);
					} else verboseLog('Ajax.troopTraining ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			troopReviving: function(troopType, troopQty, cityId, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['units[quantity]'] = troopQty;
				p['_method'] = 'post';
				p['units[unit_type]'] = troopType;
				new MyAjaxRequest('resurrect', 'cities/' + cityId + '/units/resurrect.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) Seed.checkAddJob(rslt.dat.result.job);
					else verboseLog('Ajax.troopReviving ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			useItem: function(cityId, url, jobId, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['job_id'] = jobId;
				p['_method'] = 'delete';
				new MyAjaxRequest('items', 'player_items/' + url + '.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						try {
							if (rslt.dat.result.items) Seed.player.items = cloneProps(rslt.dat.result.items);
						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = e.name + ' - ' + e.message;
							verboseLog(translate('March speedup Error') + ': ' + e.name + ' - ' + e.message);
						}
					} else verboseLog(translate('March speedup Error') + ': ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			useSingleItem: function(url, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'delete';
				p['quantity'] = 1;
				new MyAjaxRequest('items', 'player_items/' + url + '.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						try {
							if (rslt.dat.result.items) {
								var tabIt = [];
								for(var it in rslt.dat.result.items) {
									if(rslt.dat.result.items[it] != Seed.player.items[it]) {
										verboseLog('Push : ' + translate(it));
										tabIt.push(it);
									}
								}
								rslt.diff = tabIt;
								Seed.player.items = cloneProps(rslt.dat.result.items);
							}
						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = e.name + ' - ' + e.message;
							verboseLog(translate('Single item usage Error') + ': ' + e.name + ' - ' + e.message);
						}
					} else verboseLog(translate('Single item usage Error') + ': ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			useMoreItem: function(url, nb, callback) {
				var t = MyAjax;
				var p = {};
				p = t.addMainParams();
				p['_method'] = 'delete';
				p['quantity'] = nb;
				new MyAjaxRequest('items', 'player_items/' + url + '.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						try {
							if (rslt.dat.result.items) {
								var tabIt = [];
								for(var it in rslt.dat.result.items) {
									if(rslt.dat.result.items[it] != Seed.player.items[it]) {
										verboseLog('Push : ' + translate(it));
										tabIt.push(it);
									}
								}
								rslt.diff = tabIt;
								Seed.player.items = cloneProps(rslt.dat.result.items);
							}
						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = e.name + ' - ' + e.message;
							verboseLog(translate('More item usage Error') + ': ' + e.name + ' - ' + e.message);
						}
					} else verboseLog(translate('More item usage Error') + ': ' + rslt.errmsg);
					if (callback) callback(rslt);
					return;
				}
			},
			searchCPT: function(type, search, callback) {
				var t = MyAjax;
				var p = {};
				p['realmId'] = SERVER_ID;
				p['type'] = type;
				p['search'] = search;
                p['version'] = api_version;
				p['timestamp'] = toNum(serverTime());
				new MyAjaxRequest('other', 'https://www.calcium-pro-tool.com/CPT/search.php', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						
					}
					else {
						verboseLog(translate('CPT search error') + ': ' + rslt.errmsg);
					}
					if (callback) {
						callback(rslt);
					}
					return;
				}
			},
            statScript: function() {
				var t = MyAjax;
				var p = {};
				p['realmId'] = SERVER_ID;
				p['tool'] = scriptName;
				p['userId'] = C.attrs.userId;
               new MyAjaxRequest('other', 'https://www.calcium-pro-tool.com/CPT/script.php', p, mycb, false);

				function mycb(rslt) {
					if (rslt.ok) {
						
					}
					else {
						verboseLog(translate('Script stat error') + ': ' + rslt.errmsg);
					}
					return;
				}
			}
		};
		/******************************** Auto-collect package ***********************/
		var AutoCollect = {
			init: function() {
				var t = AutoCollect;
				t.setEnable(Data.options.autoCollect.enabled);
			},

			setEnable: function(onOff) {
				var t = AutoCollect;
				clearTimeout(t.timer);
				Data.options.autoCollect.enabled = onOff;
				if (onOff) {
					var time = (Data.options.autoCollect.delay * Data.options.autoCollect.unit) - serverTime() + Data.options.autoCollect.last_time;
					if (time <= 0) {
						t.doit();
					} else {
						t.timer = setTimeout(t.doit, time * 1000);
					}
				}
			},

			doit: function() {
				var t = AutoCollect,
					offset = 0;
				Data.options.autoCollect.last_time = serverTime();
				if (Seed.player.boosts && Seed.player.boosts.collect_resources) { /*
																					 * Do
																					 * not
																					 * collect
																					 * from
																					 * OP
																					 * if
																					 * nano
																					 * collector
																					 * is
																					 * running
																					 */
					actionLog(translate('Collected resources at outpost') + ' : ' + translate('pause').initCap() + ' (' + translate('boost-collect-week') + ')');
				} else {
					for (var out = 2; out < Seed.cities.length; ++out) { /*
																			 * Start
																			 * at 2
																			 * (0=Capital,
																			 * 1=Spectral)
																			 */
						if (Seed.cities[out] && Seed.cities[out].id && Buildings.getCount(out, 'Silo') > 0) { /*
																												 * Do
																												 * not
																												 * collect
																												 * if
																												 * there's
																												 * no
																												 * silo
																												 * on
																												 * OP
																												 */
							++offset;
							collect(out, offset * Math.randRange(5000, 10000));
						}
					}
				}
				var delay_time = ((Data.options.autoCollect.delay * Data.options.autoCollect.unit) + (Math.random() * 120)) * 1000;
				t.timer = setTimeout(t.doit, delay_time);

				function collect(cityIdx, delay) {
					setTimeout(function() {
						MyAjax.collectResources(Seed.cities[cityIdx].id);
						actionLog(translate('Collected resources at outpost') + ' <B>#' + cityIdx + '</B>');
					}, delay);
				}
			}
		};
		/******************************** Falsh auto-refresh package *****************/
		var AutoRefresh = {
			timer: null,
			current_mouse: [0, 0],
			last_mouse: [0, 0],
			last_time: 0,

			init: function() {
				var t = AutoRefresh;
				t.setEnable(Data.options.flashRefresh.enabled);
			},
			setEnable: function(onOff) {
				var t = AutoRefresh;
				Data.options.flashRefresh.enabled = onOff;
				if (Data.options.flashRefresh.enabled) {
					t.last_time = toNum(serverTime());
					window.addEventListener('mousemove', t.onMouseMove, false);
					t.onTimeout();
				} else {
					window.removeEventListener('mousemove', t.onMouseMove, false);
				}
			},
			onMouseMove: function(event) {
				AutoRefresh.current_mouse = [event.clientX, event.clientY];
			},
			onTimeout: function() {
				logit('AutoRefresh.onTimeout');
				var t = AutoRefresh;
				clearTimeout(t.timer);
				if (t.current_mouse.join() !== t.last_mouse.join()) {
					t.last_time = toNum(serverTime());
					t.last_mouse = [].concat(t.current_mouse);
				}
				if (toNum(serverTime()) - t.last_time > Data.options.flashRefresh.delay * Data.options.flashRefresh.unit) {
					logit('AutoRefresh.onTimeout : ==> toggleFlash, 500 et 5000');
					t.last_time = toNum(serverTime());
					verboseLog('Flash refresh');
					setTimeout(toggleFlash, 500);
					setTimeout(toggleFlash, 5000);
				}
				if (Data.options.flashRefresh.enabled) {
					t.timer = setTimeout(t.onTimeout, 30000);
				}
			}
		}
		/******************************** Buildings package **************************/
		var Buildings = {
			getCount: function(cityIdx, type) {
				var nb = 0;
				for (var i = 0; i < Seed.cities[cityIdx].buildings.length; i++) {
					if (Seed.cities[cityIdx].buildings[i].type === type) nb++;
				}
				return nb;
			},
			getList: function(cityIdx, type) {
				var ret = [];
				for (var i = 0; i < Seed.cities[cityIdx].buildings.length; i++) {
					if (Seed.cities[cityIdx].buildings[i].type === type) ret.push(Seed.cities[cityIdx].buildings[i]);
				}
				return ret;
			},
			getLevel: function(cityIdx, type) {
				var build_list = Buildings.getList(cityIdx, type);
				if (build_list.length < 1) return {
					min: 0,
					max: 0
				};
				build_list.sort(function(a, b) {
					return a.level - b.level;
				});
				return {
					min: build_list[0].level,
					max: build_list[build_list.length - 1].level
				};
			},
			getById: function(cityIdx, bid) {
				for (var i = 0; i < Seed.cities[cityIdx].buildings.length; i++) {
					if (Seed.cities[cityIdx].buildings[i].id == bid) return (Seed.cities[cityIdx].buildings[i]);
				}
				return null;
			},
			setLevel: function(city_id, bid, level) {
				var cityIdx = Seed.cityIdx[city_id];
				for (var i = 0; i < Seed.cities[cityIdx].buildings.length; i++) {
					if (Seed.cities[cityIdx].buildings[i].id == bid) Seed.cities[cityIdx].buildings[i].level = level;
				}
				Tabs.Jobs.buildRefreshLvl = false;
				return null;
			}
		};
		/******************************** Data package *******************************/
		var Data = {
			log: [
				[],
				[]
			],
			defaults: {},
			saveTimer: 0,

			init: function(obj) {
				try {
					/* Saves defaults properties */
					Data.defaults.mergeWith(obj || {});
					for (var item_name in obj) {
						/*
						 * Checks if the object is already defined in the Data
						 * Object
						 */
						if (typeof(Data[item_name]) == 'undefined') {
							/*
							 * Assign default object properties, if defined,
							 * otherwise an empty object
							 */
							Data[item_name] = typeof(obj[item_name]) != 'undefined' ? cloneProps(obj[item_name]) : {};
						}
						/*
						 * Load the data stored, of the current item from
						 * localStorage
						 */
						var stored_object = Data.getObject(item_name);
						/* Clean removed values from stored object ( max depth 2 ) */
						if (stored_object != null && typeof(stored_object) == 'object') {
							verboseLog('Clean Removed Vars from : [ ' + name + ' ]');
							stored_object.cleanRemoved(Data[item_name], 1);
						}
						/* Check if the default object is really an object */
						if (Data[item_name] !== null && typeof(Data[item_name]) == 'object') {
							/*
							 * Assign the properties of stored objeto into the
							 * default object, overwriting the values
							 */
							Data[item_name].mergeWith(stored_object);
						} else {
							Data[item_name] = stored_object;
						}
					}
					Data.cleanRequestsStats();
					if (!Data.saveTimer) Data.saveTimer = setInterval(Data.save, 600000);
				} catch (e) {
					alert('This browser does not support LocalStorage\n\n' + e);
					return false;
				}
			},

			clearStorage: function(keep_map) {
				if (keep_map) {
					var temp_storage = {};
					var keys = getKeys(Data.defaults);
					for (var i = 0; i < keys.length; i++) {
						if (/(map|dynamic)/i.test(keys[i])) {
							var item_name = keys[i];
							temp_storage[item_name] = cloneProps(Data[item_name]);
						}
					}
				}
				localStorage.clear();
				for (var item_name in Data.defaults) {
					Data[item_name] = cloneProps(Data.defaults[item_name]);
				}
				if (keep_map) {
					var keys = getKeys(temp_storage);
					for (var i = 0; i < keys.length; i++) {
						var item_name = keys[i];
						Data[item_name] = cloneProps(temp_storage[item_name]);
						Data.setObject(item_name, Data[item_name]);
					}
				}
				consoleLog('localStorage Deleted!');
			},
			getObject: function(key) {
				var item = localStorage.getItem([SERVER_ID, USER_ID, key].join('_'));
				/*
				 * logit('load setting ['+SERVER_ID+', '+USER_ID+', '+key+' =
				 * '+item);
				 */
				return (item || '').charAt(0) === '{' ? JSON.parse(item || '{}') : eval(item);
			},
			setObject: function(key, value) {
				if (key == 'log') return;
				try {
					/*
					 * logit('save setting ['+SERVER_ID+', '+USER_ID+', '+key+' =
					 * '+JSON.stringify( value ) );
					 */
					localStorage.setItem([SERVER_ID, USER_ID, key].join('_'), JSON.stringify(value));
				} catch (e) {
					if (e === QUOTA_EXCEEDED_ERR || (e.code === 22 && e.name === 'QUOTA_EXCEEDED_ERR')) {
						verboseLog('Error save localstorage , ' + name + '=' + value + ', error=' + inspectObj(e, 8, 1));
						logit(translate('LocalStorage') + ' : ' + translate('Quota exceeded') + '! ' + translate('Please, delete the cache and persistent data in your browser'));
					}
				}
			},
			onUnload: function() {
				if (Data.saveTimer) clearInterval(Data.saveTimer);
				Data.save();
			},
			save: function() {
				verboseLog('Save Data in localStorage');
				Data.cleanRequestsStats();
				var keys = getKeys(Data.defaults);
				for (var i = 0; i < keys.length; i++) {
					var item_name = keys[i];
					Data.setObject(item_name, Data[item_name]);
				}
			},
			cleanRequestsStats: function() {
				if (!Data.stats.requests.ajax_type) return;
				for (var req_type in Data.stats.requests.ajax_type) {
					for (var i = 0; i < Data.stats.requests.ajax_type[req_type].time.length; i++)
						if (toNum(serverTime()) - Data.stats.requests.ajax_type[req_type].time[i] >= 3600) Data.stats.requests.ajax_type[req_type].time.splice(i, 1);
					for (var i = 0; i < Data.stats.requests.ajax_type[req_type].error.length; i++)
						if (toNum(serverTime()) - Data.stats.requests.ajax_type[req_type].error[i] >= 3600) Data.stats.requests.ajax_type[req_type].error.splice(i, 1);
				}
			},

			setDefaultValues: function(tab) {
				switch (tab) {
					case 'alliance':
						setAllianceDefaults();
						break;
					case 'attacks':
						setAttacksDefaults();
						break;
					case 'bookmark':
						setBookmarksDefaults();
						break;
					case 'jobs':
						setJobsDefaults();
						break;
					case 'multiple':
						setMultipleDefaults();
						break;
					case 'options':
						setOptionsDefaults();
						break;
					case 'search':
						setSearchDefaults();
						break;
					case 'spies':
						setSpiesDefaults();
						break;
					case 'waves':
						setWavesDefaults();
						break;
					case 'wheel':
						setWheelDefaults();
						break;
					case 'all':
						setAllianceDefaults();
						setAttacksDefaults();
						setBookmarksDefaults();
						setJobsDefaults();
						setMultipleDefaults();
						setOptionsDefaults();
						setSearchDefaults();
						setSpiesDefaults();
						setWavesDefaults();
						setWheelDefaults();
						break;
					default:
						break;
				}

				function setAllianceDefaults() {
					if (Seed.cities[CAPITAL.id].figures.marches.maximum && is_null(Data.options.alliance.auto.max_marches))
						Data.options.alliance.auto.max_marches = toNum(Seed.cities[CAPITAL.id].figures.marches.maximum);
				}

				function setAttacksDefaults() {
					for (var x = 1; x <= 11; x++) {
						if (!Data.options.attacks.units[x])
							Data.options.attacks.units[x] = {};
						/*
						 * check if troops have been entered. Is not, set to
						 * default
						 */
						var exists = false;
						for (var j = 0; j < attack_unit_types.length && !exists; j++) {
							if (Data.options.attacks.units[x][attack_unit_types[j]] && Data.options.attacks.units[x][attack_unit_types[j]] > 0)
								exists = true;
						}
						if (!exists) {
							for (var j = 0; j < attack_unit_types.length; j++) {
								var num = 0
								switch (x) {
									case 1:
										switch (attack_unit_types[j]) {
											case 'Longbowman':
												num = 110;
												break;
											case 'ArmoredTransport':
												num = 25;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 2:
										switch (attack_unit_types[j]) {
											case 'Longbowman':
												num = 550;
												break;
											case 'ArmoredTransport':
												num = 50;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 3:
										switch (attack_unit_types[j]) {
											case 'Longbowman':
												num = 1050;
												break;
											case 'ArmoredTransport':
												num = 80;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 4:
										switch (attack_unit_types[j]) {
											case 'Longbowman':
												num = 2100;
												break;
											case 'ArmoredTransport':
												num = 100;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 5:
										switch (attack_unit_types[j]) {
											case 'Longbowman':
												num = 5500;
												break;
											case 'ArmoredTransport':
												num = 130;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 6:
										switch (attack_unit_types[j]) {
											case 'Longbowman':
												num = 11000;
												break;
											case 'ArmoredTransport':
												num = 150;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 7:
										switch (attack_unit_types[j]) {
											case 'Longbowman':
												num = 30000;
												break;
											case 'ArmoredTransport':
												num = 1000;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 8:
										switch (attack_unit_types[j]) {
											case 'FireTroop':
												num = 2500;
												break;
											case 'ArmoredTransport':
												num = 1000;
												break;
											default:
												num = 0;
												break;
										}
										break;
					case 9:
										switch (attack_unit_types[j]) {
											case 'FireTroop':
												num = 3000;
												break;
											case 'ArmoredTransport':
												num = 1000;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 10:
										switch (attack_unit_types[j]) {
											case 'FireTroop':
												num = 4000;
												break;
											case 'ArmoredTransport':
												num = 1000;
												break;
											default:
												num = 0;
												break;
										}
										break;
									case 11:
										switch (attack_unit_types[j]) {
											case 'FireTroop':
												num = 50000;
												break;
											case 'ArmoredTransport':
												num = 5000;
												break;
											default:
												num = 0;
												break;
										}
										break;
									default:
										num = 0;
										break;
								}
								if (num > 0) Data.options.attacks.units[x][attack_unit_types[j]] = num;
							}
						}
					}
					for (var x = 1; x <= 11; x++) {
						if (!Data.options.attacks.except_great_dragon[x])
							Data.options.attacks.except_great_dragon[x] = {};
						if (is_null(Data.options.attacks.except_great_dragon[x])) {
							for (var j = 0; j < Seed.dragonList.length; j++) {
								var dragon = Seed.dragonList[j];
								Data.options.attacks.except_great_dragon[x][dragon.type] = false;
							}
						}
					}
					if (Seed.cities[CAPITAL.id].figures.marches.maximum && is_null(Data.options.attacks.max_marches)) {
						Data.options.attacks.max_marches = Seed.cities[CAPITAL.id].figures.marches.maximum;
					}
				}

				function setBookmarksDefaults() {
					if (!Data.options.bookmarks.new_bookmark.dragons)
						Data.options.bookmarks.new_bookmark.dragons = {};
					if (is_null(Data.options.bookmarks.new_bookmark.dragons)) {
						for (var j = 0; j < Seed.dragonList.length; j++) {
							var dragon = Seed.dragonList[j];
							Data.options.bookmarks.new_bookmark.dragons[dragon.type] = false;
						}
					}
					if (Seed.cities[CAPITAL.id].figures.marches.maximum && is_null(Data.options.bookmarks.max_marches))
						Data.options.bookmarks.max_marches = toNum(Seed.cities[CAPITAL.id].figures.marches.maximum);
				}

				function setJobsDefaults() {
					/* Training initialization */
					var initDefault_units = all_unit_types;
					for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
						if (cityIdx != SPECTRAL_OUTPOST.id && cityIdx != SKY_OUTPOST.id  && cityIdx != LUNA_OUTPOST.id) {
							if (!Data.options.training.city[cityIdx]) Data.options.training.city[cityIdx] = {};
							if (!Data.options.training.city[cityIdx].units) Data.options.training.city[cityIdx].units = [];
							var exists = false;
							for (var tt = 0; tt < initDefault_units.length && !exists; tt++) {
								if (Data.options.training.city[cityIdx].units[tt] && Data.options.training.city[cityIdx].units[tt] > 0)
									exists = true;
				}
							if (!exists) {
								for (var tt = 0; tt < initDefault_units.length; tt++) {
									Data.options.training.city[cityIdx].units[tt] = 0;
									/* User defined initialization for units */
									/*
									 * Just change the troops number and
									 * activate the lines to have always the
									 * same settings when cleaning the cache
									 */

									/*
									 * -Remove this line to activate- switch
									 * (initDefault_units[tt]) { case 'Porter' :
									 * num = 0; break; case 'Conscript' : num =
									 * 1000; break; case 'Spy' : num = 2000;
									 * break; case 'Halberdsman' : num = 3000;
									 * break; case 'Minotaur' : num = 4000;
									 * break; case 'Longbowman' : num = 2500;
									 * break; case 'SwiftStrikeDragon': num =
									 * 2000; break; case 'BattleDragon' : num =
									 * 1150; break; case 'ArmoredTransport' :
									 * num = 2000; break; case 'Giant' : num =
									 * 1125; break; case 'FireMirror' : num =
									 * 1000; break; case 'PackDragon' : num =
									 * 1000; break; case 'DarkSlayer' : num =
									 * 750; break; case 'DimensionalRuiner': num =
									 * 1000; break; case 'LightningCannon' : num =
									 * 900; break; case 'ChargeTroop' : num =
									 * 1250; break; case 'VengeWyrm' : num =
									 * 1200; break; case 'AquaTroop' : num =
									 * 1000; break; case 'StoneTroop' : num =
									 * 1250; break; case 'FireTroop' : num =
									 * 900; break; case 'WindTroop' : num =
									 * 1600; break; case 'IceTroop' : num =
									 * 1400; break; case 'SwampTroop' : num =
									 * 2000; break; case 'FrostGiant' : num =
									 * 1125; break; case 'ForestTroop' : num =
									 * 700; break; case 'DesertTroop' : num =
									 * 1600; break; case 'ArcticLeviathan' : num =
									 * 500; break; default : num = 0; break; }
									 * if (num > 0 && isTrainable (cityIdx,
									 * initDefault_units[tt]))
									 * Data.options.training.city[cityIdx].units[tt] =
									 * num; //
									 */

								}
							}
							if (!Data.options.training.city[cityIdx].cap) Data.options.training.city[cityIdx].cap = [];

							var exists = false;
							for (var tt = 0; tt < all_unit_types.length && !exists; tt++) {
								if (Data.options.training.city[cityIdx].cap[tt] && Data.options.training.city[cityIdx].cap[tt] > 0)
									exists = true;
							}
							if (!exists) {
								for (var tt = 0; tt < all_unit_types.length; tt++) {
									Data.options.training.city[cityIdx].cap[tt] = 0;

									/* User defined cap initialization */
									/*
									 * Just change the troops cap and activate
									 * the lines
									 */
									/*
									 * to have always the same cap settings when
									 * cleaning the cache
									 */

									/*
									 * -Remove this line to activate- switch
									 * (all_unit_types[tt]) { case 'Porter' :
									 * num = 10; break; case 'Conscript' : num =
									 * 2000000; break; case 'Spy' : num =
									 * 2000000; break; case 'Halberdsman' : num =
									 * 2000000; break; case 'Minotaur' : num =
									 * 2000000; break; case 'Longbowman' : num =
									 * 2000000; break; case 'SwiftStrikeDragon':
									 * num = 500000; break; case 'BattleDragon' :
									 * num = 500000; break; case
									 * 'ArmoredTransport' : num = 0; break; case
									 * 'Giant' : num = 500000; break; case
									 * 'FireMirror' : num = 100000; break; case
									 * 'PackDragon' : num = 0; break; case
									 * 'DarkSlayer' : num = 1000000; break; case
									 * 'DimensionalRuiner': num = 100000; break;
									 * case 'LightningCannon' : num = 100000;
									 * break; case 'ChargeTroop' : num =
									 * 1000000; break; case 'VengeWyrm' : num =
									 * 1000000; break; case 'AquaTroop' : num =
									 * 1000000; break; case 'StoneTroop' : num =
									 * 0; break; case 'FireTroop' : num = 0;
									 * break; case 'WindTroop' : num = 1000000;
									 * break; case 'IceTroop' : num = 1000000;
									 * break; case 'SwampTroop' : num = 1000000;
									 * break; case 'FrostGiant' : num = 1000000;
									 * break; case 'ForestTroop' : num =
									 * 1000000; break; case 'DesertTroop' : num =
									 * 1000000; break; case 'ArcticLeviathan' :
									 * num = 100000; break; default : num = 0;
									 * break; }
									 * Data.options.training.city[cityIdx].cap[tt] =
									 * num; //
									 */
								}
							}
						}
					}
					/* Build initilization */
					for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
						if (!Data.options.building.level_enable[cityIdx]) Data.options.building.level_enable[cityIdx] = {};
						if (!Data.options.building.level_cap[cityIdx]) Data.options.building.level_cap[cityIdx] = {};
					}
					/* Research initialization */
					for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
						if (!Data.options.research.res_enable[cityIdx]) Data.options.research.res_enable[cityIdx] = {};
						if (!Data.options.research.res_cap[cityIdx]) Data.options.research.res_cap[cityIdx] = {};
					}
					/* Resurrection initialization */
					for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
						if (!Data.options.resurrect.res_enable[cityIdx]) Data.options.resurrect.res_enable[cityIdx] = {};
						if (!Data.options.resurrect.res_max[cityIdx]) Data.options.resurrect.res_max[cityIdx] = {};
						for (tt = 0; tt < all_unit_types.length; tt++) {
							if (!Data.options.resurrect.res_max[cityIdx][all_unit_types[tt]]) {
								Data.options.resurrect.res_max[cityIdx][all_unit_types[tt]] = 0;
							}
						}
					}
					/* Sanctuary dragons feeding initialization */
					if (!Data.options.sanctuary.feeding) Data.options.sanctuary.feeding = {};
					for (var i in Seed.sanctuary_dragons)
						if (!Data.options.sanctuary.feeding[i]) Data.options.sanctuary.feeding[i] = {
							enable: false,
							cap: 9
						};
				}

				function setMultipleDefaults() {
					if (!Data.options.multiple.target.dragons_1) Data.options.multiple.target.dragons_1 = {};
					if (!Data.options.multiple.target.dragons_2) Data.options.multiple.target.dragons_2 = {};
					if (is_null(Data.options.multiple.target.dragons_1)) {
						for (var j = 0; j < Seed.dragonList.length; j++) {
							var dragon = Seed.dragonList[j];
							Data.options.multiple.target.dragons_1[dragon.type] = false;
						}
					}
					if (is_null(Data.options.multiple.target.dragons_2)) {
						for (var j = 0; j < Seed.dragonList.length; j++) {
							var dragon = Seed.dragonList[j];
							Data.options.multiple.target.dragons_2[dragon.type] = false;
						}
					}
					if (Seed.cities[CAPITAL.id].figures.marches.maximum) {
						if (is_null(Data.options.multiple.max_marches))
							Data.options.multiple.max_marches = toNum(Seed.cities[CAPITAL.id].figures.marches.maximum);
						if (is_null(Data.options.multiple.max_secondary))
							Data.options.multiple.max_secondary = toNum(Seed.cities[CAPITAL.id].figures.marches.maximum);
					}
				}

				function setOptionsDefaults() {
					checkDelay();
				}

				function setSearchDefaults() {
					if (!Data.options.search.target.x || Data.options.search.target.x == 999) {
						Data.options.search.target.x = Seed.cities[CAPITAL.id].x;
						Data.options.search.target.y = Seed.cities[CAPITAL.id].y;
					}
					if (is_null(Data.options.search.target.alliance)) Data.options.search.target.alliance = '*';
					if (is_null(Data.options.search.target.player)) Data.options.search.target.player = '*';
					if (is_null(Data.options.search.target.distance)) Data.options.search.target.distance = 14;
					if (is_null(Data.options.search.sort_list)) Data.options.search.sort_list = '0';
					if (is_null(Data.options.search.min_level)) Data.options.search.min_level = 1;
					if (is_null(Data.options.search.max_level)) Data.options.search.max_level = 10;
				}

				function setSpiesDefaults() {
					if (Seed.cities[CAPITAL.id].figures.marches.maximum && is_null(Data.options.spies.max_marches))
						Data.options.spies.max_marches = toNum(Seed.cities[CAPITAL.id].figures.marches.maximum);
				}

				function setWavesDefaults() {
					if (!Data.options.waves.target.dragons) Data.options.waves.target.dragons = {};
					if (is_null(Data.options.waves.target.dragons)) {
						for (var j = 0; j < Seed.dragonList.length; j++) {
							var dragon = Seed.dragonList[j];
							Data.options.waves.target.dragons[dragon.type] = false;
						}
					}
					if (Seed.cities[CAPITAL.id].figures.marches.maximum && is_null(Data.options.waves.max_marches))
						Data.options.waves.max_marches = Seed.cities[CAPITAL.id].figures.marches.maximum;
				}

				function setWheelDefaults() {}
			}
		};
		/******************************** Jobs package *******************************/
		var Jobs = {
			deleteJob: function(cityIdx, job) {
				var cid = Seed.cities[cityIdx].id;
				var jobs = Seed.jobs[cid];
				for (var p in jobs) {
					if (jobs[p] == job) delete jobs[p];
				}
			},
			getBuildingJob: function(cityIdx) {
				var cid = Seed.cities[cityIdx].id;
				for (var p in Seed.jobs[cid]) {
					var job = Seed.jobs[cid][p];
					if (job.queue == 'building') return ({
						job: job,
						building: Buildings.getById(cityIdx, job.city_building_id)
					});
				}
				return null;
			},
			getDefenseTowerHealing : function(cityIdx) {
				var cid = Seed.cities[cityIdx].id;
				for (var p in Seed.jobs[cid]) {
					var job = Seed.jobs[cid][p];
					if (job.queue == 'tower_healing') return ({
						job: job,
						building: Buildings.getById(cityIdx, job.city_building_id)
					});
				}
				return null;
			
			},
			getDefenseTowerJob: function(cityIdx) {
				var cid = Seed.cities[cityIdx].id;
				for (var p in Seed.jobs[cid]) {
					var job = Seed.jobs[cid][p];
					if (job.queue == 'build_tower') return ({
						job: job,
						building: Buildings.getById(cityIdx, job.city_building_id)
					});
				}
				return null;
			},
			getJobs: function(queue, get_first, city_Idx) {
				var ret = [],
					cityIdx = (city_Idx || CAPITAL.id);
				if (cityIdx >= 0 && Seed.cities[cityIdx]) {
					var cid = Seed.cities[cityIdx].id;
					if (cid) {
						for (var p in Seed.jobs[cid]) {
							var job = Seed.jobs[cid][p];
							if (job.queue == queue) {
								ret.push(job);
								if (get_first) return ret;
							}
						}
					}
				} else if (cityIdx == -1) {
					for (var city_idx = 0; city_idx < Seed.cities.length; city_idx++) {
						if (!Data.options.Rcheat_enabled && city_idx != CAPITAL.id && queue == 'research') continue;
						if (Seed.cities[city_idx] && city_idx != undefined && !isNaN(city_idx) && city_idx >= 0 && city_idx < Seed.cities.length &&
							((city_idx != SPECTRAL_OUTPOST.id && city_idx != SKY_OUTPOST.id && city_idx != CAVE_OUTPOST.id && city_idx != LUNA_OUTPOST.id && queue == 'research') || queue != 'research')) {
							var cid = Seed.cities[city_idx].id;
							if (cid) {
								for (var p in Seed.jobs[cid]) {
									var job = Seed.jobs[cid][p];
									if (job.queue == queue) {
										ret.push(job);
										if (get_first) return ret;
									}
								}
							}
						}
					}
				}
				return ret;
			},
			addSingleButton: function(itemId, type, nCell, jobId, tot, classCss) {
				if (!Data.options.jobs_speedups_enabled) return;
				nCell.innerHTML = '';
				nCell.title = translate(time_item_list[itemId].name) + ' x' + tot;
				var num = toNum(Seed.player.items[time_item_list[itemId].name]);
				var button = document.createElement('input');
				button.type = 'button';
				button.setAttribute('ref', time_item_list[itemId].name + '_' + jobId);
				button.value = time_item_list[itemId].text;
				if (num > 0) {
					button.disabled = false;
					button.className = UID[classCss] + ' thin';
					button.addEventListener('click', function(event) {
						var self = event.target;
						self.disabled = true;
						self.className = UID['btn_disabled'] + ' thin';
						logit('' + self.getAttribute('ref'));
						var ids = self.getAttribute('ref').split('_');
						var found = false;
						var confirmation = false;
						var jobs = Seed.cities[ids[1]].jobs;
						for (var x = 0; x < jobs.length && !found; x++)
							if (jobs[x].id == ids[2]) found = true;
						if (!found) return;

						for (var i = 0; i < time_item_list.length; i++) {
							if (time_item_list[i].name == ids[0]) {
								confirmation = time_item_list[i].confirmation;
								break;
							}
						}

						if (confirmation && Data.options.use_speedup_confirmation) {
							dialogConfirm(translate('Do you want to use [0] on this job').replace('[0]', translate(ids[0])) + ' ?',
								/* OK */

								function() {

									MyAjax.useItem(Seed.cities[ids[1]].id, ids[0], ids[2], function(r) {
										if (r.ok && r.dat.result.success) {
											if (r.dat.result.item_response) {
												itmResp = r.dat.result.item_response;
												if (/(units|building|build_tower|dragon|research|breeding|hatching|feeding|resurrection|trade)/.test(itmResp.queue)) {
													var found = false;
													var jobs = Seed.cities[ids[1]].jobs;
													for (var x = 0; x < jobs.length && !found; x++) {
														if (jobs[x].id == itmResp.id) {
															found = true;
															jobs[x].run_at = itmResp.run_at;
															jobs[x].duration = itmResp.duration;
														}
													}
													var job = Seed.jobs[Seed.cities[ids[1]].id][ids[2]];
													if (job) {
														job.run_at = itmResp.run_at;
														job.duration = itmResp.duration;
													}
												}
												var num = toNum(Seed.player.items[ids[0]]);
												if (num > 0) {
													button.disabled = false;
													button.className = UID['btn_green'] + ' thin';
												}
											}
										}
									});

								},
								/* Cancel */

								function() {}, true
							);
						} else {
							MyAjax.useItem(Seed.cities[ids[1]].id, ids[0], ids[2], function(r) {
								if (r.ok && r.dat.result.success) {
									if (r.dat.result.item_response) {
										itmResp = r.dat.result.item_response;
										if (/(units|building|build_tower|dragon|research|breeding|hatching|feeding|resurrection|trade)/.test(itmResp.queue)) {
											var found = false;
											var jobs = Seed.cities[ids[1]].jobs;
											for (var x = 0; x < jobs.length && !found; x++) {
												if (jobs[x].id == itmResp.id) {
													found = true;
													jobs[x].run_at = itmResp.run_at;
													jobs[x].duration = itmResp.duration;
												}
											}
											var job = Seed.jobs[Seed.cities[ids[1]].id][ids[2]];
											if (job) {
												job.run_at = itmResp.run_at;
												job.duration = itmResp.duration;
											}
										}
										var num = toNum(Seed.player.items[ids[0]]);
										if (num > 0) {
											button.disabled = false;
											button.className = UID['btn_green'] + ' thin';
										}
									}
								}
							});
						}


					}, false);
				} else {
					button.disabled = true;
					button.className = UID['btn_disabled'] + ' thin';
				}
				nCell.appendChild(button);
			},
			addSpeedUpButtons: function(table, tableid, jobtype, id) {
				var tot = 0;
				var mtClass = UID['row_marchMine'];
				for (var i = 0; i < time_item_list.length; i++)
					tot += toNum(Seed.player.items[time_item_list[i].name]);
				if (tot > 0) {
					iRow = table.insertRow(-1);
					iRow.className = mtClass;
					iCell = iRow.insertCell(-1);
					iCell.style.textAlign = 'left';
					iCell.style.width = '100%';
					iCell.setAttribute('colspan', '4');
					iCell.innerHTML = '<table id=' + setUID(tableid) + ' class=' + UID['table'] + '></table>';
					var jRow, jCell;
					jRow = document.getElementById(UID[tableid]).insertRow(-1);
					jRow.className = mtClass;
					for (var i = 0; i < time_item_list.length; i++) {
						var num = toNum(Seed.player.items[time_item_list[i].name]);
						if (num > 0 && Jobs.checkItemType(i, jobtype)) {
							jCell = jRow.insertCell(-1);
							jCell.style.textAlign = 'right';
							jCell.innerHTML = '&nbsp;';
							var type = 'N';
							if ((jobtype == 'jobs' && time_item_list[i].type.indexOf('J') == -1) ||
								(jobtype == 'units' && time_item_list[i].type.indexOf('T') == -1) ||
								(jobtype == 'resurrection' && time_item_list[i].type.indexOf('R') == -1)) type = 'C';
							Jobs.addSingleButton(i, type, jCell, id, num, time_item_list[i].classCss);
						}
					}
				}
			},
			checkItemType: function(item, chkType) {
				var type = time_item_list[item].type;
				if ((type.indexOf('T') >= 0 && chkType == 'units') ||
					(type.indexOf('R') >= 0 && chkType == 'resurrection') ||
					(type.indexOf('J') >= 0 && chkType == 'jobs')
				) return (true);
				else return (false);
			},
			updateBuildTable: function(table) {
				var now = toNum(serverTime()),
					idle_cities = [];
				var mtClass = UID['row_marchMine'];
				/* Clear table */
				for (var row = 0; row < table.rows.length; row++) {
					table.deleteRow(row);
					row--;
				}
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx]) {
						var options = {
							noPlayer: true,
							cities: []
						};
						var city = Seed.cities[cityIdx];
						var jobs = Jobs.getJobs('building', true, cityIdx);
						var jobsTD = Jobs.getJobs('build_tower', true, cityIdx);
						
						if (jobs.length == 0 && jobsTD.length == 0)
							idle_cities.push(cityIdx);
						else {
							if(jobs.length != 0) {
								var iRow, iCell;
								iRow = table.insertRow(-1);
								iRow.className = mtClass;
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '20%';
								iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? city.name : translate(city.name)) + '</b>';
								var timeRemaining = ((jobs[0].run_at - serverTime()) > 0) ? timestr(jobs[0].run_at - serverTime()) : 0;
								if (timeRemaining == 0) {
									/*
									 * If we have a job and the timeRemaining is
									 * negative or zero we delete the job and
									 * fetch the Seed - although this does not
									 * always work because the server is laggy
									 * and may not return the correct
									 * information
									 */
									iCell = iRow.insertCell(-1);
									iCell.setAttribute('colspan', '3');
									iCell.innerHTML = translate('Awaiting task completion notification') + '...';
									Jobs.deleteJob(cityIdx, jobs[0]);
									if (Tabs.Jobs.buildStatFetch == false) {
										if (cityIdx != 0) options.cities.push(Seed.cities[CAPITAL.id].id);
										options.cities.push(city.id);
										Seed.fetchPlayer(options);
										Tabs.Jobs.buildStatFetch = true;
									}
								} else {
									iRow.setAttribute('ref', cityIdx + '_' + jobs[0].id);
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'left';
									iCell.style.width = '35%';
									iCell.innerHTML = '<b>' + translate('Building') + ':</b> &nbsp;&nbsp;' + translate(jobs[0].city_building_type) + '  (' + jobs[0].level + ')';
									/* Building cancel Button */
									iCell = iRow.insertCell(-1);
									iCell.style.width = '10%';
									var button = document.createElement('input');
									button.type = 'button';
									button.setAttribute('ref', cityIdx + '_' + jobs[0].id);
									button.value = 'X';
									if (jobs[0].cancelled) {
										button.disabled = true;
										button.className = UID['btn_disabled'] + ' thin';
									} else {
										button.className = UID['btn_red'] + ' thin';
										button.addEventListener('click', function(event) {
											var self = event.target;
											self.disabled = true;
											self.className = UID['btn_disabled'] + ' thin';
											var ids = self.getAttribute('ref').split('_');
											var job = Seed.jobs[Seed.cities[ids[0]].id][ids[1]];
											if (job) {
												job.cancelled = true;
												var desc = translate(job.city_building_type) + ' ' + job.level;
												MyAjax.cancelTraining(ids[1], function(r) {
													if (r.ok && r.dat.result.success) {
														verboseLog(translate('Building job cancelled') + ' (' + desc + ')');
													}
												});
											}
										}, false);
									}
									iCell.appendChild(button);
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'left';
									iCell.style.width = '25%';
									iCell.innerHTML = '<font color=' + TIMER_COLOR + '>' + timeRemaining + '</font>';
									if (!jobs[0].cancelled && Data.options.jobs_speedups_enabled)
										Jobs.addSpeedUpButtons(table, 'tabJobsBuild_speedups_0', 'jobs', cityIdx + '_' + jobs[0].id);

									Tabs.Jobs.buildStatFetch = false;
									try {
										document.getElementById(UID['tabJobBuild_FB_' + cityIdx + '_' + jobs[0].city_building_type]).innerHTML = '<font color=#000>' + translate('Building') + ': ' + translate(jobs[0].city_building_type) + ' ' + translate('Level').toLowerCase() + ' ' + jobs[0].level + '</font>';
									} catch (e) {}
								}
								iRow = table.insertRow(-1);
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '20%';
								iCell.innerHTML = '&nbsp;';
							}
							if(jobsTD.length != 0) {
								var iRow, iCell;
								iRow = table.insertRow(-1);
								iRow.className = mtClass;
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '20%';
								iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? city.name : translate(city.name)) + '</b>';
								var timeRemaining = ((jobsTD[0].run_at - serverTime()) > 0) ? timestr(jobsTD[0].run_at - serverTime()) : 0;
								if (timeRemaining == 0) {
									/*
									 * If we have a job and the timeRemaining is
									 * negative or zero we delete the job and
									 * fetch the Seed - although this does not
									 * always work because the server is laggy
									 * and may not return the correct
									 * information
									 */
									iCell = iRow.insertCell(-1);
									iCell.setAttribute('colspan', '3');
									iCell.innerHTML = translate('Awaiting task completion notification') + '...';
									Jobs.deleteJob(cityIdx, jobsTD[0]);
									if (Tabs.Jobs.buildStatFetch == false) {
										if (cityIdx != 0) options.cities.push(Seed.cities[CAPITAL.id].id);
										options.cities.push(city.id);
										Seed.fetchPlayer(options);
										Tabs.Jobs.buildStatFetch = true;
									}
								} else {
									iRow.setAttribute('ref', cityIdx + '_' + jobsTD[0].id);
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'left';
									iCell.style.width = '35%';
									iCell.innerHTML = '<b>' + translate('Building') + ':</b> &nbsp;&nbsp;' + translate(jobsTD[0].city_building_type) + '  (' + jobsTD[0].level + ')';
									/* Building cancel Button */
									iCell = iRow.insertCell(-1);
									iCell.style.width = '10%';
									var button = document.createElement('input');
									button.type = 'button';
									button.setAttribute('ref', cityIdx + '_' + jobsTD[0].id);
									button.value = 'X';
									if (jobsTD[0].cancelled) {
										button.disabled = true;
										button.className = UID['btn_disabled'] + ' thin';
									} else {
										button.className = UID['btn_red'] + ' thin';
										button.addEventListener('click', function(event) {
											var self = event.target;
											self.disabled = true;
											self.className = UID['btn_disabled'] + ' thin';
											var ids = self.getAttribute('ref').split('_');
											var job = Seed.jobs[Seed.cities[ids[0]].id][ids[1]];
											if (job) {
												job.cancelled = true;
												var desc = translate(job.city_building_type) + ' ' + job.level;
												MyAjax.cancelTraining(ids[1], function(r) {
													if (r.ok && r.dat.result.success) {
														verboseLog(translate('Building job cancelled') + ' (' + desc + ')');
													}
												});
											}
										}, false);
									}
									iCell.appendChild(button);
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'left';
									iCell.style.width = '25%';
									iCell.innerHTML = '<font color=' + TIMER_COLOR + '>' + timeRemaining + '</font>';
									if (!jobsTD[0].cancelled && Data.options.jobs_speedups_enabled)
										Jobs.addSpeedUpButtons(table, 'tabJobsBuild_speedups_0', 'jobs', cityIdx + '_' + jobsTD[0].id);

									Tabs.Jobs.buildStatFetch = false;
									try {
										document.getElementById(UID['tabJobBuild_FB_' + cityIdx + '_' + jobsTD[0].city_building_type]).innerHTML = '<font color=#000>' + translate('Building') + ': ' + translate(jobsTD[0].city_building_type) + ' ' + translate('Level').toLowerCase() + ' ' + jobsTD[0].level + '</font>';
									} catch (e) {}
								}
								iRow = table.insertRow(-1);
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '20%';
								iCell.innerHTML = '&nbsp;';
							}
						}
					}
				}
				for (var cityIdx = 0; cityIdx < idle_cities.length; ++cityIdx) {
					if (Seed.cities[idle_cities[cityIdx]]) {
						var city = Seed.cities[idle_cities[cityIdx]];
						var iRow, iCell;
						iRow = table.insertRow(-1);
						iRow.className = mtClass;
						iCell = iRow.insertCell(-1);
						iCell.style.textAlign = 'left';
						iCell.style.width = '20%';
						iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? city.name : translate(city.name)) + '</b>';
						iCell = iRow.insertCell(-1);
						iCell.innerHTML = translate('Idle');
					}
				}
			},
			updateDragonTable: function(table) {
				var now = toNum(serverTime()),
					idle_cities = [];
				var mtClass = UID['row_marchMine'];
				/* Clear table */
				for (var row = 0; row < table.rows.length; row++) {
					table.deleteRow(row);
					row--;
				}
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx]) {
						var options = {
							noPlayer: true,
							cities: []
						};
						var city = Seed.cities[cityIdx];
						var jobs = Jobs.getJobs('dragon', true, cityIdx);
						
						if(jobs.length != 0) {
							var iRow, iCell;
							iRow = table.insertRow(-1);
							iRow.className = mtClass;
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'left';
							iCell.style.width = '20%';
							iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? city.name : translate(city.name)) + '</b>';
							var timeRemaining = ((jobs[0].run_at - serverTime()) > 0) ? timestr(jobs[0].run_at - serverTime()) : 0;
							if (timeRemaining == 0) {
								/*
								 * If we have a job and the timeRemaining is
								 * negative or zero we delete the job and fetch
								 * the Seed - although this does not always work
								 * because the server is laggy and may not
								 * return the correct information
								 */
								iCell = iRow.insertCell(-1);
								iCell.setAttribute('colspan', '3');
								iCell.innerHTML = translate('Awaiting task completion notification') + '...';
								Jobs.deleteJob(cityIdx, jobs[0]);
								if (cityIdx != 0) options.cities.push(Seed.cities[CAPITAL.id].id);
								options.cities.push(city.id);
								Seed.fetchPlayer(options);
							} else {
								iRow.setAttribute('ref', cityIdx + '_' + jobs[0].id);
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '35%';
								iCell.innerHTML = translate('Dragon') + ' ' + translate('Healing');
								/* Building cancel Button */
								iCell = iRow.insertCell(-1);
								iCell.style.width = '10%';
								/*
								 * var button = document.createElement('input');
								 * button.type = 'button';
								 * button.setAttribute('ref', cityIdx + '_' +
								 * jobs[0].id); button.value = 'X'; if
								 * (jobs[0].cancelled) { button.disabled = true;
								 * button.className = UID['btn_disabled'] + '
								 * thin'; } else { button.className =
								 * UID['btn_red'] + ' thin';
								 * button.addEventListener('click',
								 * function(event) { var self = event.target;
								 * self.disabled = true; self.className =
								 * UID['btn_disabled'] + ' thin'; var ids =
								 * self.getAttribute('ref').split('_'); var job =
								 * Seed.jobs[Seed.cities[ids[0]].id][ids[1]]; if
								 * (job) { job.cancelled = true; var desc =
								 * translate(job.city_building_type) + ' ' +
								 * job.level; MyAjax.cancelTraining(ids[1],
								 * function(r) { if (r.ok &&
								 * r.dat.result.success) {
								 * verboseLog(translate('Building job
								 * cancelled') + ' (' + desc + ')'); } }); } },
								 * false); } iCell.appendChild(button);
								 */
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '25%';
								iCell.innerHTML = '<font color=' + TIMER_COLOR + '>' + timeRemaining + '</font>';
								if (!jobs[0].cancelled && Data.options.jobs_speedups_enabled)
									Jobs.addSpeedUpButtons(table, 'tabJobsDragon_speedups_0', 'jobs', cityIdx + '_' + jobs[0].id);

								// Tabs.Jobs.buildStatFetch = false;
								try {
									// document.getElementById(UID['tabJobDragon_FB_'
									// + cityIdx + '_' +
									// jobs[0].city_building_type]).innerHTML =
									// '<font color=#000>' +
									// translate('Building') + ': ' +
									// translate(jobs[0].city_building_type) + '
									// ' + translate('Level').toLowerCase() + '
									// ' + jobs[0].level + '</font>';
								} catch (e) {}
							}
							iRow = table.insertRow(-1);
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'left';
							iCell.style.width = '20%';
							iCell.innerHTML = '&nbsp;';
						}
					}
				}
				for (var cityIdx = 0; cityIdx < idle_cities.length; ++cityIdx) {
					if (Seed.cities[idle_cities[cityIdx]]) {
						var city = Seed.cities[idle_cities[cityIdx]];
						var iRow, iCell;
						iRow = table.insertRow(-1);
						iRow.className = mtClass;
						iCell = iRow.insertCell(-1);
						iCell.style.textAlign = 'left';
						iCell.style.width = '20%';
						iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? city.name : translate(city.name)) + '</b>';
						iCell = iRow.insertCell(-1);
						iCell.innerHTML = translate('Idle');
					}
				}
			},
			updateTradeTable: function(table) {
				var now = toNum(serverTime()),
					idle_cities = [];
				var mtClass = UID['row_marchMine'];
				/* Clear table */
				for (var row = 0; row < table.rows.length; row++) {
					table.deleteRow(row);
					row--;
				}
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx]) {
						var options = {
							noPlayer: true,
							cities: []
						};
						var city = Seed.cities[cityIdx];
						var jobs = Jobs.getJobs('trade', true, cityIdx);
						
						if(jobs.length != 0) {
							for(var nbT = 0 ; nbT < jobs.length ; nbT++) {
								var iRow, iCell;
								iRow = table.insertRow(-1);
								iRow.className = mtClass;
								iRow.title = numf(jobs[nbT].offer.units, ' ') + ' ' + translate(jobs[nbT].offer.product) + ' ' + translate('for') + ' ' + numf(jobs[nbT].offer.price, ' ') + ' ' + translate('gold') + ' ' + translate('from') + ' ' + jobs[nbT].offer.seller.name + '(' + numf(jobs[nbT].offer.seller.might, ' ') + ')' + ' / ' + (jobs[nbT].offer.seller.alliance.name == '' ? '---' : jobs[nbT].offer.seller.alliance.name ) + '(' + (jobs[nbT].offer.seller.alliance.role == '' ? '---' : translate(jobs[nbT].offer.seller.alliance.role)) + ')';
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '20%';
								iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? city.name : translate(city.name)) + '</b>';
								var timeRemaining = ((jobs[0].run_at - serverTime()) > 0) ? timestr(jobs[0].run_at - serverTime()) : 0;
								if (timeRemaining == 0) {
									iCell = iRow.insertCell(-1);
									iCell.setAttribute('colspan', '3');
									iCell.innerHTML = translate('Awaiting task completion notification') + '...';
									Jobs.deleteJob(cityIdx, jobs[0]);
									if (cityIdx != 0) options.cities.push(Seed.cities[CAPITAL.id].id);
									options.cities.push(city.id);
									Seed.fetchPlayer(options);
								} else {
									iRow.setAttribute('ref', cityIdx + '_' + jobs[0].id);
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'left';
									iCell.style.width = '35%';
									iCell.innerHTML = translate('trade') + ' - ' + translate('buy');
									iCell = iRow.insertCell(-1);
									iCell.style.width = '10%';
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'left';
									iCell.style.width = '25%';
									iCell.innerHTML = '<font color=' + TIMER_COLOR + '>' + timeRemaining + '</font>';
									if (!jobs[0].cancelled && Data.options.jobs_speedups_enabled)
										Jobs.addSpeedUpButtons(table, 'tabJobsTrade_speedups_0', 'jobs', cityIdx + '_' + jobs[0].id);

									// Tabs.Jobs.buildStatFetch = false;
									try {
										// document.getElementById(UID['tabJobDragon_FB_'
										// + cityIdx + '_' +
										// jobs[0].city_building_type]).innerHTML =
										// '<font color=#000>' +
										// translate('Building') + ': ' +
										// translate(jobs[0].city_building_type) + '
										// ' + translate('Level').toLowerCase() + '
										// ' + jobs[0].level + '</font>';
									} catch (e) {}
								}
								iRow = table.insertRow(-1);
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '20%';
								iCell.innerHTML = '&nbsp;';
							}
						}
					}
				}
				for (var cityIdx = 0; cityIdx < idle_cities.length; ++cityIdx) {
					if (Seed.cities[idle_cities[cityIdx]]) {
						var city = Seed.cities[idle_cities[cityIdx]];
						var iRow, iCell;
						iRow = table.insertRow(-1);
						iRow.className = mtClass;
						iCell = iRow.insertCell(-1);
						iCell.style.textAlign = 'left';
						iCell.style.width = '20%';
						iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? city.name : translate(city.name)) + '</b>';
						iCell = iRow.insertCell(-1);
						iCell.innerHTML = translate('Idle');
					}
				}
			},
			updateResearchTable: function(table) {
				var now = toNum(serverTime());
				var mtClass = UID['row_marchMine'];
				/* Clear table */
				for (var row = 0; row < table.rows.length; row++) {
					table.deleteRow(row);
					row--;
				}
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (!Data.options.Rcheat_enabled && cityIdx != CAPITAL.id) continue;
					if (Seed.cities[cityIdx] && cityIdx >= 0 && cityIdx < Seed.cities.length && cityIdx != SPECTRAL_OUTPOST.id && cityIdx != SKY_OUTPOST.id && cityIdx != CAVE_OUTPOST.id && cityIdx != LUNA_OUTPOST.id && cityIdx != COLOSSUS_OUTPOST.id &&
						Seed.cities[cityIdx].figures.queue_lengths && Seed.cities[cityIdx].figures.queue_lengths['research']) {
						var city = Seed.cities[cityIdx];
						var jobs = Jobs.getJobs('research', true, cityIdx);
						var iRow, iCell;
						iRow = table.insertRow(-1);
						iRow.className = mtClass;
						iCell = iRow.insertCell(-1);
						iCell.style.textAlign = 'left';
						iCell.style.width = '20%';
						iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? city.name : translate(city.name)) + '</b>';
						if (jobs.length == 0) {
							iCell = iRow.insertCell(-1);
							iCell.innerHTML = translate('Idle');
						} else {
							var timeRemaining = ((jobs[0].run_at - serverTime()) > 0) ? timestr(jobs[0].run_at - serverTime()) : 0;
							if (timeRemaining == 0) {
								iCell = iRow.insertCell(-1);
								iCell.setAttribute('colspan', '3');
								iCell.innerHTML = translate('Awaiting task completion notification') + '...';
								Jobs.deleteJob(cityIdx, jobs[0]);
								if (Tabs.Jobs.resStatFetch == false) {
									if (cityIdx != 0) options.cities.push(Seed.cities[CAPITAL.id].id);
									options.cities.push(city.id);
									Seed.fetchPlayer(options);
									Tabs.Jobs.resStatFetch = true;
								}
							} else {
								iRow.setAttribute('ref', cityIdx + '_' + jobs[0].id);
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '35%';
								iCell.innerHTML = '<b>' + translate('Researching') + ':</b> &nbsp;&nbsp;' + translate(Tabs.Jobs.resUITranslate(jobs[0].research_type)) + '  (' + jobs[0].level + ')';
								/* Researching cancel Button */
								iCell = iRow.insertCell(-1);
								iCell.style.width = '10%';
								var button = document.createElement('input');
								button.type = 'button';
								button.setAttribute('ref', cityIdx + '_' + jobs[0].id);
								button.value = 'X';
								if (jobs[0].cancelled) {
									button.disabled = true;
									button.className = UID['btn_disabled'] + ' thin';
								} else {
									button.className = UID['btn_red'] + ' thin';
									button.addEventListener('click', function(event) {
										var self = event.target;
										self.disabled = true;
										self.className = UID['btn_disabled'] + ' thin';
										var ids = self.getAttribute('ref').split('_');
										var job = Seed.jobs[Seed.cities[ids[0]].id][ids[1]];
										if (job) {
											job.cancelled = true;
											var desc = translate(Tabs.Jobs.resUITranslate(job.research_type)) + ' ' + job.level;
											MyAjax.cancelTraining(ids[1], function(r) {
												if (r.ok && r.dat.result.success) {
													verboseLog(translate('Research job cancelled') + ' (' + desc + ')');
												}
											});
										}
									}, false);
								}
								iCell.appendChild(button);
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '25%';
								iCell.innerHTML = '<font color=' + TIMER_COLOR + '>' + timeRemaining + '</font>';
								if (!jobs[0].cancelled && Data.options.jobs_speedups_enabled)
									Jobs.addSpeedUpButtons(table, 'tabJobsResearch_speedups_0', 'jobs', cityIdx + '_' + jobs[0].id);

								Tabs.Jobs.resStatFetch = false;
								try {
									document.getElementById(UID['tabJobResearch_FB_' + jobs[0].research_type]).innerHTML = '<font color=#000>' + translate('Researching') + ': ' + translate(Tabs.Jobs.resUITranslate(job[0].research_type)) + ' ' + translate('Level').toLowerCase() + ' ' + jobs[0].level + '</font>';
								} catch (e) {}
							}
							iRow = table.insertRow(-1);
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'left';
							iCell.style.width = '20%';
							iCell.innerHTML = '&nbsp;';
						}
					}
				}
			},
			updateSanctuaryTable: function(table) {
				var now = toNum(serverTime());
				var mtClass = UID['row_marchMine'];

				function addJobTable(type) {
					var last = serverTime();
					var trains = [];
					var cityBreeding = [];

					if (type == 'breeding') {
						for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
							var jobs = (Seed.cities[cityIdx] ? Seed.cities[cityIdx].jobs : []);
							for (var j = 0; j < jobs.length; j++) {
								if (jobs[j].queue == 'breeding' && jobs[j].male_id && jobs[j].female_id && jobs[j].run_at > last) {
									trains.push(jobs[j]);
									cityBreeding.push(cityIdx)
								}
							}
						}
					} else {
						var cityIdx = CAPITAL.id;
						var jobs = Seed.cities[cityIdx].jobs;
						for (var j = 0; j < jobs.length; j++) {
							if (type == 'hatching' && jobs[j].queue == 'hatching' && jobs[j].egg_id && jobs[j].run_at > last) trains.push(jobs[j]);
							if (type == 'feeding' && jobs[j].queue == 'feeding' && jobs[j].dragon_id && jobs[j].run_at > last) trains.push(jobs[j]);
						}
					}
					var iRow, iCell;
					iRow = table.insertRow(-1);
					iRow.className = mtClass;
					iCell = iRow.insertCell(-1);
					iCell.style.textAlign = 'left';
					iCell.style.width = '20%';
					if (type == 'breeding')
						iCell.innerHTML = '<b>' + translate('breeding-dragon') + '</b>';
					else if (type == 'hatching')
						iCell.innerHTML = '<b>' + translate('hatching-egg') + '</b>';
					else if (type == 'feeding')
						iCell.innerHTML = '<b>' + translate('upgrading-dragon') + '</b>';
					else iCell.innerHTML = '<b>' + translate('Unknown') + '</b>';

					if (trains.length == 0) {
						iCell = iRow.insertCell(-1);
						iCell.innerHTML = translate('Idle');
					} else {
						trains.sort(function(a, b) {
							return a.run_at - b.run_at;
						});
						var totTime=0;
						for (var j = 0; j < trains.length; j++) {
							var time_remaining;
							// Oeuf en couveuse ? alors tous entrain de se faire
							// et non pas à la queue leu leu
							if (type == 'hatching') {
								totTime += ((trains[j].run_at - last > 0) ? trains[j].run_at - last : 0);
							} else {
								time_remaining = (j == 0 ? ((trains[j].run_at - last > 0) ? trains[j].run_at - last : 0) : trains[j].duration);
							}
							
							var tot = '';
							if (j != 0) {
								iRow = table.insertRow(-1);
								iRow.className = mtClass;
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '20%';
								iCell.innerHTML = '&nbsp;';
							}
							iRow.setAttribute('ref', cityIdx + '_' + trains[j].id);
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'left';
							iCell.style.width = '35%';
							if (type == 'breeding') {
								var male = '',
									female = '';
								if (!Seed.sanctuary_dragons[trains[j].male_id]) {
									verboseLog('Error: Inexisting dragon ' + trains[j].male_id);
									male = trains[j].male_id;
								} else {
									male = ( Seed.sanctuary_dragons[trains[j].male_id].name != '' ? Seed.sanctuary_dragons[trains[j].male_id].name : translateByKey(Seed.sanctuary_dragons[trains[j].male_id].subtype, 'rank-' + Seed.sanctuary_dragons[trains[j].male_id].type, 'dragons'));
								}
								if (!Seed.sanctuary_dragons[trains[j].female_id]) {
									verboseLog('Error: Inexisting dragon ' + trains[j].female_id);
									female = trains[j].female_id;
								} else {
									female = ( Seed.sanctuary_dragons[trains[j].female_id].name != '' ? Seed.sanctuary_dragons[trains[j].female_id].name : translateByKey(Seed.sanctuary_dragons[trains[j].female_id].subtype, 'rank-' + Seed.sanctuary_dragons[trains[j].female_id].type, 'dragons'));
								}
								iCell.innerHTML = male + ' + ' + female;
							} else if (type == 'hatching') {
								var egg = '';
								if (!Seed.sanctuary_dragons[trains[j].egg_id]) {
									verboseLog('Error: Inexisting dragon ' + trains[j].egg_id);
									egg = trains[j].egg_id;
								} else {
									egg = translateByKey(Seed.sanctuary_dragons[trains[j].egg_id].subtype, 'rank-' + Seed.sanctuary_dragons[trains[j].egg_id].type, 'dragons');
								}
								iCell.innerHTML = egg;
							} else if (type == 'feeding') {
								var dragon = '';
								if (!Seed.sanctuary_dragons[trains[j].dragon_id]) {
									verboseLog('Error: Inexisting dragon ' + trains[j].dragon_id);
									dragon = trains[j].dragon_id;
								} else {
									dragon = ( Seed.sanctuary_dragons[trains[j].dragon_id].name != '' ? Seed.sanctuary_dragons[trains[j].dragon_id].name : translateByKey(Seed.sanctuary_dragons[trains[j].dragon_id].subtype, 'rank-' + Seed.sanctuary_dragons[trains[j].dragon_id].type, 'dragons')) + '&nbsp;(' + (Seed.sanctuary_dragons[trains[j].dragon_id].level+1) + ')';
								}
								iCell.innerHTML = dragon;
							}
							/* Training cancel Button */
							iCell = iRow.insertCell(-1);
							iCell.style.width = '10%';
							var button = document.createElement('input');
							button.type = 'button';
							if (type == 'breeding')
								button.setAttribute('ref', cityBreeding[j] + '_' + trains[j].id);
							else
								button.setAttribute('ref', cityIdx + '_' + trains[j].id);
							button.value = 'X';
							if (trains[j].cancelled) {
								button.disabled = true;
								button.className = UID['btn_disabled'] + ' thin';
							} else {
								button.className = UID['btn_red'] + ' thin';
								button.addEventListener('click', function(event) {
									var self = event.target;
									self.disabled = true;
									self.className = UID['btn_disabled'] + ' thin';
									var ids = self.getAttribute('ref').split('_');
									var found = false;
									var jobs = Seed.cities[ids[0]].jobs;
									for (var x = 0; x < jobs.length && !found; x++) {
										if (jobs[x].id == ids[1]) {
											found = true;
											jobs[x].cancelled = true;
											var desc = translate('breeding-cancel-complete');
											MyAjax.cancelTraining(ids[1], function(r) {
												if (r.ok && r.dat.result.success) {
													verboseLog(desc);
													Seed.fetchPlayer({
														noPlayer: true,
														cities: [],
														jobs: true,
														dragons: true
													});
												}
											});
										}
									}
								}, false);
							}
							iCell.appendChild(button);
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'left';
							iCell.style.width = '35%';
							iCell.innerHTML = '<font color=' + TIMER_COLOR + '>' + timestr((type == 'hatching' ? totTime : time_remaining), true) + '</font>';
							last = trains[j].run_at;
							if (j == 0 && !trains[j].cancelled && Data.options.jobs_speedups_enabled) {
								if (type == 'breeding')
									Jobs.addSpeedUpButtons(table, 'tabJobsSanct_speedups_' + j, 'jobs', cityBreeding[j] + '_' + trains[j].id);
								else
									Jobs.addSpeedUpButtons(table, 'tabJobsSanct_speedups_' + j, 'jobs', cityIdx + '_' + trains[j].id);
							}
						}
					}
					iRow = table.insertRow(-1);
					iCell = iRow.insertCell(-1);
					iCell.style.textAlign = 'left';
					iCell.style.width = '20%';
					iCell.innerHTML = '&nbsp;';
				}
				/* Clear table */
				for (var row = 0; row < table.rows.length; row++) {
					table.deleteRow(row);
					row--;
				}
				addJobTable('breeding');
				addJobTable('hatching');
				addJobTable('feeding');
			},
			updateTrainTable: function(table, type, resurrect) {
				var now = toNum(serverTime());
				var mtClass = UID['row_marchMine'];
				/* Clear table */
				for (var row = 0; row < table.rows.length; row++) {
					table.deleteRow(row);
					row--;
				}
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx] && Seed.cities[cityIdx].jobs && cityIdx != SKY_OUTPOST.id && cityIdx != LUNA_OUTPOST.id && ((cityIdx != SPECTRAL_OUTPOST.id && !resurrect) || (cityIdx == SPECTRAL_OUTPOST.id && resurrect))) {
						var jobs = Seed.cities[cityIdx].jobs;
						var last = serverTime();
						var trains = [];
						for (var j = 0; j < jobs.length; j++) {
							if (type == 'units' && jobs[j].queue == 'units' && jobs[j].unit_type && jobs[j].run_at > last && !resurrect) trains.push(jobs[j]);
							if (type == 'resurrection' && jobs[j].queue == 'resurrection' && jobs[j].unit_type && jobs[j].run_at > last && resurrect) trains.push(jobs[j]);
						}
						var iRow, iCell;
						iRow = table.insertRow(-1);
						iRow.className = mtClass;
						iCell = iRow.insertCell(-1);
						iCell.style.textAlign = 'left';
						iCell.style.width = '20%';
						iCell.innerHTML = '<b>' + ((cityIdx == CAPITAL.id) ? Seed.cities[cityIdx].name : translate(Seed.cities[cityIdx].name)) + '</b>';

						if (trains.length == 0) {
							iCell = iRow.insertCell(-1);
							iCell.innerHTML = translate('Idle');
						} else {
							trains.sort(function(a, b) {
								return a.run_at - b.run_at;
							});
							var timeTot = 0;
							for (var j = 0; j < trains.length; j++) {
								var time_remaining = (j == 0 ? ((trains[j].run_at - last > 0) ? trains[j].run_at - last : 0) : trains[j].duration);
								timeTot = timeTot + time_remaining;
								var tot = '';
								if (j != 0) {
									iRow = table.insertRow(-1);
									iRow.className = mtClass;
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'left';
									iCell.style.width = '20%';
									iCell.innerHTML = '&nbsp;';
									if (j == trains.length - 1)
										tot = ' &nbsp <B>(' + timestrShort((trains[j].run_at - serverTime() > 0) ? trains[j].run_at - serverTime() : 0) + ')</b>';
								}
								iRow.setAttribute('ref', cityIdx + '_' + trains[j].id);
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '35%';
								iCell.innerHTML = numf(trains[j].quantity, ' ') + ' ' + translate(trains[j].unit_type);
								/* Training cancel Button */
								iCell = iRow.insertCell(-1);
								iCell.style.width = '10%';
								var button = document.createElement('input');
								button.type = 'button';
								button.setAttribute('ref', cityIdx + '_' + trains[j].id);
								button.value = 'X';
								if (trains[j].cancelled) {
									button.disabled = true;
									button.className = UID['btn_disabled'] + ' thin';
								} else {
									button.className = UID['btn_red'] + ' thin';
									button.addEventListener('click', function(event) {

										if (Data.options.jobs_cancel_confirmation) {
											var textConfirm = (resurrect ? translate('Do you want to cancel this resurrection') : translate('Do you want to cancel this training'));
											dialogConfirm(textConfirm + ' ?',
												/* OK */

												function() {

													var self = event.target;
													self.disabled = true;
													self.className = UID['btn_disabled'] + ' thin';
													var ids = self.getAttribute('ref').split('_');
													var found = false;
													var jobs = Seed.cities[ids[0]].jobs;
													for (var x = 0; x < jobs.length && !found; x++) {
														if (jobs[x].id == ids[1]) {
															found = true;
															jobs[x].cancelled = true;
															var desc = numf(jobs[x].quantity, ' ') + ' ' + translate(jobs[x].unit_type);
															MyAjax.cancelTraining(ids[1], function(r) {
																if (r.ok && r.dat.result.success) {
																	verboseLog(translate('Training job cancelled') + ' (' + desc + ')');
																}
															});
														}
													}

												},
												/* Cancel */

												function() {}, true
											);
										} else {

											var self = event.target;
											self.disabled = true;
											self.className = UID['btn_disabled'] + ' thin';
											var ids = self.getAttribute('ref').split('_');
											var found = false;
											var jobs = Seed.cities[ids[0]].jobs;
											for (var x = 0; x < jobs.length && !found; x++) {
												if (jobs[x].id == ids[1]) {
													found = true;
													jobs[x].cancelled = true;
													var desc = numf(jobs[x].quantity, ' ') + ' ' + translate(jobs[x].unit_type);
													MyAjax.cancelTraining(ids[1], function(r) {
														if (r.ok && r.dat.result.success) {
															verboseLog(translate('Training job cancelled') + ' (' + desc + ')');
														}
													});
												}
											}
										}

									}, false);
								}
								iCell.appendChild(button);
								iCell = iRow.insertCell(-1);
								iCell.style.textAlign = 'left';
								iCell.style.width = '35%';
								iCell.innerHTML = '<font color=' + TIMER_COLOR + '>' + timestr(time_remaining, true) + '</font>' + tot;
								last = trains[j].run_at;
								if (j == 0 && !trains[j].cancelled && Data.options.jobs_speedups_enabled)
									Jobs.addSpeedUpButtons(table, 'tabJobsTrain_speedups_' + j, type, cityIdx + '_' + trains[j].id);
							}
						}
						// iRow = table.insertRow(-1);
						// iCell = iRow.insertCell(-1);
						// iCell.style.textAlign = 'left';
						// iCell.style.width = '20%';
						// iCell.innerHTML = '&nbsp;';
					}
				}
			}
		};
		/******************************** Manifest package ***************************/
		var Manifest = {
			data: {},

			init: function(callback) {
				Manifest.fetchManifest(function(res) {
					if (res.ok)
						verboseLog(translate('Manifest was Successfully requested from the server'));
					else verboseLog('fetchManifest ' + translate('was returned with a status of') + ' ' + res.ok + ' - ' + res.errmsg);
					if (callback) callback(res);
				});
			},

			fetchManifest: function(callback) {
				var now = new Date().getTime() / 1000;
				var params = {};
				params['cachebreaker'] = 1410030685227;
				//params = MyAjax.addMainParams();
				new MyAjaxRequest('manifest', 'manifest.amf', params, function(res) {
					if (res.ok) {
						Manifest.data = AMF.parse(res.dat);
						try {
							Manifest.updateManifest();
						} catch (e) {
							res.ok = false;
							res.errmsg = 'fetchManifest when calling updateManifest returned this error: ' + e.toString();
						}
					}
					if (callback) callback(res);
				}, false, true);
				
				/*new MyAjaxRequest('manifest', 'manifest.json', params, function(res) {
					if (res.ok) {
						Manifest.data = res.dat;
						try {
							Manifest.updateManifest();
						} catch (e) {
							res.ok = false;
							res.errmsg = 'fetchManifest when calling updateManifest returned this error: ' + e.toString();
						}
					}
					if (callback) callback(res);
				}, false);*/
			},

			buildings: {
				byCityType: function(cityType, buildable, order) {
					var buildings = Manifest.data.buildings;
					var i, j, res = [];
					if (!buildable) buildable = 'all';
					if (!cityType) cityType = 'all';

					if (buildings.length > 0) {
						for (i = 0; i < buildings.length; i = i + 1) {
							if (buildings[i].buildable === buildable || buildable.toLowerCase() === 'all') {
								if (buildings[i].city_type.length > 0) {
									for (j = 0; j < buildings[i].city_type.length; j = j + 1) {
										if (buildings[i].city_type[j] === cityType.toLowerCase() || cityType.toLowerCase() === 'all') {
											res[res.length] = buildings[i];
											break;
										}
									}
								}
							}
						}
					}
					if (order) res = Manifest.buildings.sortBy(res, order);
					return res;
				},

				byLocation: function(location, buildable, order) {
					var buildings = Manifest.data.buildings;
					var i, res = [];
					if (!buildable) buildable = 'all';
					if (!location) cityType = 'all';
					if (buildings.length > 0) {
						for (i = 0; i < buildings.length; i = i + 1) {
							if (buildings[i].buildable === buildable || buildable.toLowerCase() === 'all') {
								if (buildings[i].location === location.toLowerCase() || location.toLowerCase() === 'all') {
									res[res.length] = buildings[i];
								}
							}
						}
					}
					if (order) res = Manifest.buildings.sortBy(res, order);
					return res;
				},

				sortBy: function(data, order) {
					var orderBy;
					if (!order) order = {
						alphabetical: 'asc'
					};
					for (orderBy in order) {
						switch (orderBy) {
							case 'alphabetical':
								orderAlphabetical(order[orderBy]);
								break;
							case 'buildable':
								orderBuildable(order[orderBy]);
								break;
							case 'location':
								orderLocation(order[orderBy]);
								break;
						}
					}
					return data;

					function orderAlphabetical(order) {
						if (order.toLowerCase() === 'asc') {
							data.sort(function(a, b) {
								var typeA = a.type.toLowerCase(),
									typeB = b.type.toLowerCase();
								if (typeA < typeB) {
									return -1
								}
								if (typeA > typeB) {
									return 1
								}
								return 0;
							});
						} else if (order.toLowerCase() === 'desc') {
							data.sort(function(a, b) {
								var typeA = a.type.toLowerCase(),
									typeB = b.type.toLowerCase();
								if (typeA > typeB) {
									return -1
								}
								if (typeA < typeB) {
									return 1
								}
								return 0;
							});
						}
					}

					function orderBuildable(order) {
						if (order === true) {
							data.sort(function(a, b) {
								var buildableA = a.buildable,
									buildableB = b.buildable;
								if (buildableA < buildableB) {
									return -1
								}
								if (buildableA > buildableB) {
									return 1
								}
								return 0;
							});
						} else if (order === false) {
							data.sort(function(a, b) {
								var buildableA = a.buildable,
									buildableB = b.buildable;
								if (buildableA > buildableB) {
									return -1
								}
								if (buildableA < buildableB) {
									return 1
								}
								return 0;
							});
						}
					}

					function orderLocation(order) {
						if (order.toLowerCase() === 'city') {
							data.sort(function(a, b) {
								var locationA = a.location.toLowerCase(),
									locationB = b.location.toLowerCase();
								if (locationA < locationB) {
									return -1
								}
								if (locationA > locationB) {
									return 1
								}
								return 0;
							});
						} else if (order.toLowerCase() === 'field') {
							data.sort(function(a, b) {
								var locationA = a.location.toLowerCase(),
									locationB = b.location.toLowerCase();
								if (locationA > locationB) {
									return -1
								}
								if (locationA < locationB) {
									return 1
								}
								return 0;
							});
						}
					}
				}
			},

			building: function(type) {
				debugLog('Manifest.building');
				var b;

				if (type) {
					for (b = 0; b < Manifest.data.buildings.length; b = b + 1) {}
				} else {
					/* Return an error message because no type was specificed */
				}
			},

			updateManifest: function() {
				var data, i, j;
				/*
				 * Initialise levels for each building & Save requirements and
				 * Stats
				 */
				data = Manifest.data.buildings;
				for (i = 0; i < data.length; i++) {
					if (!Seed.requirements.building[data[i].type]) Seed.requirements.building[data[i].type] = {};
					if (!Seed.requirements.building[data[i].type].level) Seed.requirements.building[data[i].type].level = [];
					if (!Seed.stats.building[data[i].type]) Seed.stats.building[data[i].type] = {};
					if (!Seed.stats.building[data[i].type].level) Seed.stats.building[data[i].type].level = [];
					for (j = 0; j < data[i].levels.length; j++) {
						Seed.requirements.building[data[i].type].level[data[i].levels[j].level] = data[i].levels[j].requirements;
						Seed.stats.building[data[i].type].level[data[i].levels[j].level] = {};
						Seed.stats.building[data[i].type].level[data[i].levels[j].level].time = data[i].levels[j].time;
					}
					if (!is_null(data[i].capacity)) {
						for (var k in data[i].capacity) {
							if (k != "lignore me!") {
								var lvl = k.substring(1);
								Seed.stats.building[data[i].type].level[lvl].capacity = data[i].capacity[k];
							}
						}
					}
				}

				/*
				 * Initialise levels for each research & Save requirements and
				 * Stats
				 */
				data = Manifest.data.research;
				Seed.research = [];
				for (i = 0; i < data.length; i++) {
					Seed.research[i] = data[i].type;
					if (!Seed.requirements.research[data[i].type]) Seed.requirements.research[data[i].type] = {};
					if (!Seed.requirements.research[data[i].type].level) Seed.requirements.research[data[i].type].level = [];
					if (!Seed.stats.research[data[i].type]) Seed.stats.research[data[i].type] = {};
					if (!Seed.stats.research[data[i].type].level) Seed.stats.research[data[i].type].level = [];
					for (j = 0; j < data[i].levels.length; j++) {
						Seed.requirements.research[data[i].type].level[data[i].levels[j].level] = data[i].levels[j].requirements;
						Seed.stats.research[data[i].type].level[data[i].levels[j].level] = {
							time: data[i].levels[j].time
						};
					}
				}
				/* Initialise units & Save requirements and Stats ( by Jawz ) */
				data = Manifest.data.units;
				for (i = 0; i < data.length; i++) {
					if (!Seed.requirements.unit[data[i].type]) Seed.requirements.unit[data[i].type] = [];
					Seed.requirements.unit[data[i].type] = data[i].requirements;
					if (!Seed.stats.unit[data[i].type]) Seed.stats.unit[data[i].type] = {};
					Seed.stats.unit[data[i].type] = data[i].stats;
					Seed.stats.unit[data[i].type].time = data[i].time;
					Seed.stats.unit[data[i].type].upkeep = data[i].upkeep;
					Seed.stats.unit[data[i].type].trainable = data[i].trainable_in;
				}
				/*
				 * Initialise for units an array of cities where the unit is
				 * trainable
				 */
				/*data = Manifest.data.city;
				for (var city in data) {
					units = (data[city]).units;
					for (i = 0; i < units.length; i++) {
						if (units[i].trainable) Seed.stats.unit[units[i].type].trainable.push(city);
					}
				}*/

				/* Initialise troops resurrection requirements and Stats */
				data = Manifest.data.units;
				for (i = 0; i < data.length; i++) {
					if (!Seed.requirements.resurrect[data[i].type]) Seed.requirements.resurrect[data[i].type] = [];
					if(data[i].requirements.spectral) {
						Seed.requirements.resurrect[data[i].type] = data[i].requirements.spectral;
						if (!Seed.stats.resurrect[data[i].type]) Seed.stats.resurrect[data[i].type] = {};
						Seed.stats.resurrect[data[i].type] = data[i].stats;
						Seed.stats.resurrect[data[i].type].time = data[i].time;
						Seed.stats.resurrect[data[i].type].upkeep = data[i].upkeep;						
					}
				}

				/* Initialise levels for master rookery dragons feeding */
				data = Manifest.data.dragon_levels;
				for (i = 0; i < data.length; i++) {
					if (!Seed.requirements.dragon.feeding) Seed.requirements.dragon.feeding = {};
					if (!Seed.requirements.dragon.feeding.level) Seed.requirements.dragon.feeding.level = [];
					if (!Seed.requirements.dragon.feeding.level[data[i].level]) Seed.requirements.dragon.feeding.level[data[i].level] = data[i].requirements;
					if (!Seed.stats.dragon.feeding) Seed.stats.dragon.feeding = {};
					if (!Seed.stats.dragon.feeding.level) Seed.stats.dragon.feeding.level = [];
					if (!Seed.stats.dragon.feeding.level[data[i].level]) Seed.stats.dragon.feeding.level[data[i].level] = {
						time: data[i].time
					};
				}

				/* Save quests manifest */
				data = Manifest.data.quests;
				for (i = 0; i < data.length; i++) {
					if (!Seed.quests.category[i]) Seed.quests.category[i] = [];
					Seed.quests.category[i] = data[i][0];
					for (j = 0; j < data[i][1].length; j++) {
						if (!Seed.quests.list[data[i][0]]) Seed.quests.list[data[i][0]] = [];
						var rec = {
							name: data[i][1][j].name,
							recommended: data[i][1][j].recommended,
							reward: data[i][1][j].reward
						};
						Seed.quests.list[data[i][0]].push(rec);
					}
				}

				/* Save item types & list from store manifest */
				data = Manifest.data.store;
				for (var i in data) {
					if (!Seed.items[i]) Seed.items[i] = [];
					for (j = 0; j < data[i].length; j++) {
						Seed.items[i].push({
							type: data[i][j].type,
							price: (data[i][j].price ? data[i][j].price : 0),
							usable: data[i][j].usable
						});
					}
				}
				
				/* Save armors manifest */
				data = Manifest.data.armors;
				for (var i in data) {
					Seed.armors.push(data[i].head[0]);
					Seed.armors.push(data[i].body[0]);
					Seed.armors.push(data[i].claws[0]);
					Seed.armors.push(data[i].tail[0]);
				}
				// Fix for spectral armor and Sky
				Seed.armors.push('SpectralDragonHead');Seed.armors.push('SpectralDragonTalons');Seed.armors.push('SpectralDragonTail');Seed.armors.push('SpectralDragonBody');
				Seed.armors.push('KaiserDragonTailGuard');Seed.armors.push('KaiserDragonClawGuards');Seed.armors.push('KaiserDragonHelmet');Seed.armors.push('KaiserDragonBodyArmor');
				
				/* Save Great dragons statistics by level */
				var greatDragonLvlsManifest = Manifest.data.great_dragon_levels;
				var waterDragonLvlsManifest = Manifest.data.water_dragon_levels;
				var stoneDragonLvlsManifest = Manifest.data.stone_dragon_levels;
				var fireDragonLvlsManifest = Manifest.data.fire_dragon_levels;
				var windDragonLvlsManifest = Manifest.data.wind_dragon_levels;
				var iceDragonLvlsManifest = Manifest.data.ice_dragon_levels;
				var swampDragonLvlsManifest = Manifest.data.swamp_dragon_levels;
				var forestDragonLvlsManifest = Manifest.data.forest_dragon_levels;
				var desertDragonLvlsManifest = Manifest.data.desert_dragon_levels;
				var chronoDragonLvlsManifest = Manifest.data.chrono_dragon_levels;
				var kaiserDragonLvlsManifest = Manifest.data.kaiser_dragon_levels;
				var spectralDragonLvlsManifest = Manifest.data.spectral_dragon_levels;
				var caveDragonLvlsManifest = Manifest.data.cave_dragon_levels;
				var lunaDragonLvlsManifest = Manifest.data.luna_dragon_levels;
				var colossusDragonLvlsManifest = Manifest.data.colossus_dragon_levels;
				for (var m = 1; m < 20; m++) {
					if (greatDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.GreatDragon[m]) Seed.greatDragons.GreatDragon[m] = [];
						Seed.greatDragons.GreatDragon[m] = greatDragonLvlsManifest[m];
					}
					if (waterDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.WaterDragon[m]) Seed.greatDragons.WaterDragon[m] = [];
						Seed.greatDragons.WaterDragon[m] = waterDragonLvlsManifest[m];
					}
					if (stoneDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.StoneDragon[m]) Seed.greatDragons.StoneDragon[m] = [];
						Seed.greatDragons.StoneDragon[m] = stoneDragonLvlsManifest[m];
					}
					if (fireDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.FireDragon[m]) Seed.greatDragons.FireDragon[m] = [];
						Seed.greatDragons.FireDragon[m] = fireDragonLvlsManifest[m];
					}
					if (windDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.WindDragon[m]) Seed.greatDragons.WindDragon[m] = [];
						Seed.greatDragons.WindDragon[m] = windDragonLvlsManifest[m];
					}
					if (iceDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.IceDragon[m]) Seed.greatDragons.IceDragon[m] = [];
						Seed.greatDragons.IceDragon[m] = iceDragonLvlsManifest[m];
					}
					if (swampDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.SwampDragon[m]) Seed.greatDragons.SwampDragon[m] = [];
						Seed.greatDragons.SwampDragon[m] = swampDragonLvlsManifest[m];
					}
					if (forestDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.ForestDragon[m]) Seed.greatDragons.ForestDragon[m] = [];
						Seed.greatDragons.ForestDragon[m] = forestDragonLvlsManifest[m];
					}
					if (desertDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.DesertDragon[m]) Seed.greatDragons.DesertDragon[m] = [];
						Seed.greatDragons.DesertDragon[m] = desertDragonLvlsManifest[m];
					}
					if (chronoDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.ChronoDragon[m]) Seed.greatDragons.ChronoDragon[m] = [];
						Seed.greatDragons.ChronoDragon[m] = chronoDragonLvlsManifest[m];
					}
					if (kaiserDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.KaiserDragon[m]) Seed.greatDragons.KaiserDragon[m] = [];
						Seed.greatDragons.KaiserDragon[m] = kaiserDragonLvlsManifest[m];
					}
					if (spectralDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.SpectralDragon[m]) Seed.greatDragons.SpectralDragon[m] = [];
						Seed.greatDragons.SpectralDragon[m] = spectralDragonLvlsManifest[m];
					}
					if (caveDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.CaveDragon[m]) Seed.greatDragons.CaveDragon[m] = [];
						Seed.greatDragons.CaveDragon[m] = caveDragonLvlsManifest[m];
					}
					if (lunaDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.LunaDragon[m]) Seed.greatDragons.LunaDragon[m] = [];
						Seed.greatDragons.LunaDragon[m] = lunaDragonLvlsManifest[m];
					}
					if (colossusDragonLvlsManifest[m]) {
						if (!Seed.greatDragons.ColossusDragon[m]) Seed.greatDragons.ColossusDragon[m] = [];
						Seed.greatDragons.ColossusDragon[m] = colossusDragonLvlsManifest[m];
					}
				}
			}
		};
		/******************************** Map package ********************************/
		var Map = {
			map_bin: null,
			is_refreshing: false,
			x: 0,
			y: 0,
			names: {
				type: {
					0: 'bog',
					1: 'plain',
					2: 'mountain',
					3: 'forest',
					4: 'hill',
					5: 'grassland',
					6: 'lake',
					7: 'City',
					8: 'AnthropusCamp',
					9: 'Clouds',
					10: 'Spectral',
					11: 'Water',
					12: 'Stone',
					13: 'Fire',
					14: 'Wind',
					15: 'Ice',
					16: 'Swamp',
					17: 'Forest',
					18: 'Desert',
					19: 'Chrono',
					20: 'Sky',
					21: 'Cave',
					22: 'Luna',
					23: 'Colossus',
					'bog': 0,
					'plain': 1,
					'mountain': 2,
					'forest': 3,
					'hill': 4,
					'grassland': 5,
					'lake': 6,
					'City': 7,
					'AnthropusCamp': 8,
					'Clouds': 9,
					'Spectral': 10,
					'Water': 11,
					'Stone': 12,
					'Fire': 13,
					'Wind': 14,
					'Ice': 15,
					'Swamp': 16,
					'Forest': 17,
					'Desert': 18,
					'Chrono': 19,
					'Sky': 20,
					'Cave': 21,
					'Luna': 22,
					'Colossus': 23
				}
			},
			targets: {
				AnthropusCamp: [],
				forest: [],
				grassland: [],
				hill: [],
				lake: [],
				mountain: [],
				plain: [],
				City: [],
				Outpost: []
			},
			to_refresh: {
				forest: [],
				grassland: [],
				hill: [],
				lake: [],
				mountain: [],
				plain: [],
				City: []
			},
			/*
			 * List of coords indicated as camps or wilds but that are in fact
			 * clouds - Added list of all known clouds
			 */
			to_avoid: ['45,651', '45,652', '45,653', '45,654', '45,655', '46,651', '46,652', '46,653', '46,654', '46,655', '47,651', '47,652', '47,653', '47,654', '47,655', '48,651', '48,652', '48,653', '48,654', '48,655', '49,651', '49,652', '49,653', '49,654', '49,655',
				'134,189', '134,190', '134,191', '134,192', '134,193', '135,189', '135,190', '135,191', '135,192', '135,193', '136,189', '136,190', '136,191', '136,192', '136,193', '137,189', '137,190', '137,191', '137,192', '137,193', '138,189', '138,190', '138,191', '138,192', '138,193',
				'141,235', '141,236', '141,237', '141,238', '141,239', '142,235', '142,236', '142,237', '142,238', '142,239', '143,235', '143,236', '143,237', '143,238', '143,239', '144,235', '144,236', '144,237', '144,238', '144,239', '145,235', '145,236', '145,237', '145,238', '145,239',
				'158,632', '158,633', '158,634', '158,635', '158,636', '159,632', '159,633', '159,634', '159,635', '159,636', '160,632', '160,633', '160,634', '160,635', '160,636', '161,632', '161,633', '161,634', '161,635', '161,636', '162,632', '162,633', '162,634', '162,635', '162,636',
				'196,183', '196,184', '196,185', '196,186', '196,187', '197,183', '197,184', '197,185', '197,186', '197,187', '198,183', '198,184', '198,185', '198,186', '198,187', '199,183', '199,184', '199,185', '199,186', '199,187', '200,183', '200,184', '200,185', '200,186', '200,187',
				'206,240', '206,241', '206,242', '206,243', '206,244', '207,240', '207,241', '207,242', '207,243', '207,244', '208,240', '208,241', '208,242', '208,243', '208,244', '209,240', '209,241', '209,242', '209,243', '209,244', '210,240', '210,241', '210,242', '210,243', '210,244',
				'319,341', '319,342', '319,343', '319,344', '319,345', '320,341', '320,342', '320,343', '320,344', '320,345', '321,341', '321,342', '321,343', '321,344', '321,345', '322,341', '322,342', '322,343', '322,344', '322,345', '323,341', '323,342', '323,343', '323,344', '323,345',
				'343,676', '343,677', '343,678', '343,679', '343,680', '344,676', '344,677', '344,678', '344,679', '344,680', '345,676', '345,677', '345,678', '345,679', '345,680', '346,676', '346,677', '346,678', '346,679', '346,680', '347,676', '347,677', '347,678', '347,679', '347,680',
				'423,510', '423,511', '423,512', '423,513', '423,514', '424,510', '424,511', '424,512', '424,513', '424,514', '425,510', '425,511', '425,512', '425,513', '425,514', '426,510', '426,511', '426,512', '426,513', '426,514', '427,510', '427,511', '427,512', '427,513', '427,514',
				'451,46', '451,47', '451,48', '451,49', '451,50', '452,46', '452,47', '452,48', '452,49', '452,50', '453,46', '453,47', '453,48', '453,49', '453,50', '454,46', '454,47', '454,48', '454,49', '454,50', '455,46', '455,47', '455,48', '455,49', '455,50',
				'459,284', '459,285', '459,286', '459,287', '459,288', '460,284', '460,285', '460,286', '460,287', '460,288', '461,284', '461,285', '461,286', '461,287', '461,288', '462,284', '462,285', '462,286', '462,287', '462,288', '463,284', '463,285', '463,286', '463,287', '463,288',
				'636,669', '636,670', '636,671', '636,672', '636,673', '637,669', '637,670', '637,671', '637,672', '637,673', '638,669', '638,670', '638,671', '638,672', '638,673', '639,669', '639,670', '639,671', '639,672', '639,673', '640,669', '640,670', '640,671', '640,672', '640,673',
				'660,445', '660,446', '660,447', '660,448', '660,449', '661,445', '661,446', '661,447', '661,448', '661,449', '662,445', '662,446', '662,447', '662,448', '662,449', '663,445', '663,446', '663,447', '663,448', '663,449', '664,445', '664,446', '664,447', '664,448', '664,449',
				'684,483', '684,484', '684,485', '684,486', '684,487', '685,483', '685,484', '685,485', '685,486', '685,487', '686,483', '686,484', '686,485', '686,486', '686,487', '687,483', '687,484', '687,485', '687,486', '687,487', '688,483', '688,484', '688,485', '688,486', '688,487',
				'701,384', '701,385', '701,386', '701,387', '701,388', '702,384', '702,385', '702,386', '702,387', '702,388', '703,384', '703,385', '703,386', '703,387', '703,388', '704,384', '704,385', '704,386', '704,387', '704,388', '705,384', '705,385', '705,386', '705,387', '705,388',
				'712,87', '712,88', '712,89', '712,90', '712,91', '713,87', '713,88', '713,89', '713,90', '713,91', '714,87', '714,88', '714,89', '714,90', '714,91', '715,87', '715,88', '715,89', '715,90', '715,91', '716,87', '716,88', '716,89', '716,90', '716,91',
				'730,551', '730,552', '730,553', '730,554', '730,555', '731,551', '731,552', '731,553', '731,554', '731,555', '732,551', '732,552', '732,553', '732,554', '732,555', '733,551', '733,552', '733,553', '733,554', '733,555', '734,551', '734,552', '734,553', '734,554', '734,555',
				'738,712', '738,713', '738,714', '738,715', '738,716', '739,712', '739,713', '739,714', '739,715', '739,716', '740,712', '740,713', '740,714', '740,715', '740,716', '741,712', '741,713', '741,714', '741,715', '741,716', '742,712', '742,713', '742,714', '742,715', '742,716'
			],

			coords_to_avoid: {},
			to_check: [],

			initMapData: function(callback) {
				Map.fetchMap(function(res) {
					if (res.ok) {
						verboseLog(translate('Map was Successfully requested from the server'));
					} else {
						verboseLog('fetchMap ' + translate('was returned with a status of') + ' ' + res.ok + ' - ' + res.errmsg);
					}
					if (callback) {
						callback(res);
					}
				});
			},

			fetchMap: function(callback) {
				var now = new Date().getTime() / 1000;
				var params = {};
				params['b'] = MAP_BIN_CACHEBREAKER;
				new MyAjaxRequest('map', S3_SERVER + S3_SWF_PREFIX + '/map.bin', params, function(res) {
					if (res.errors) {
						res.ok = false;
						res.errmsg = res.errors;
					} else if (res.dat) {
						try {
							Map.map_bin = new jDataView(res.dat);
						} catch (e) {
							res.ok = false;
							res.errmsg = 'fetchMap when decoding map.bin returned this error: ' + e;
						}
					}
					if (callback) callback(res);
				}, false, true);
			},

			init: function() {
				var t = Map;
				/* Save our coords */
				t.x = Seed.cities[CAPITAL.id].x || 0;
				t.y = Seed.cities[CAPITAL.id].y || 0;

				Data.init({
					map: {
						terrains: {},
						players: {},
						evolution: {},
						alliance: {},
						coords: {}
					}
				});

				/*
				 * Initialize the coords_to_avoid object using the array of
				 * coords to avoid
				 */
				for (var c = 0; c < t.to_avoid.length; c++)
					t.coords_to_avoid[t.to_avoid[c]] = {
						x: 0
					}; /*
						 * Just add the coord in the object. The check will be
						 * done regarding if a row exists or not.
						 */

				/* Check Our Coords */
				t.checkOurCoords();
				/* set Ourselves Data Map */
				t.setOurselves();
			},

			setOurselves: function() {
				var t = Map;
				for (var i = 0; i < Seed.player.player_wildernesses.length; i++) {
					var wilderness = Seed.player.player_wildernesses[i];
					var xy = wilderness.x + ',' + wilderness.y;
					Data.map.terrains[xy] = [
						Seed.player.id,
						Seed.player.name,
						t.checkType(wilderness.type),
						wilderness.level
					];
					Data.map.coords[xy] = {
						A: 0,
						la: 0
					};
				}
				var alliance_id = Seed.player.alliance && Seed.player.alliance.id ? Seed.player.alliance.id : 0;
				Data.map.players[Seed.player.id] = [
					Seed.player.name,
					Seed.player.level,
					Seed.player.might,
					alliance_id,
					1
				];
				if (alliance_id) Data.map.alliance[alliance_id] = Seed.player.alliance.name;
			},

			getCities: function(options) {
				var t = Map;
				var cities = [];
				var radius = options.radius || 16;
				var _x = options.x;
				var _y = options.y;
				if (isNaN(_x)) _x = t.x;
				if (isNaN(_y)) _y = t.y;
				for (var x = _x - radius; x < _x + radius; x++) {
					for (var y = _y - radius; y < _y + radius; y++) {
						var coord_x = t.normalize(x);
						var coord_y = t.normalize(y);
						var tile = t.map_bin.getUint8(coord_y + (coord_x * 750) + 2);
						var type = (tile >> 4) & 0x0f;
						var level = tile & 0x0f;

						if (!tile) continue;
						var xy = coord_x + ',' + coord_y;
						var to_skip = (t.coords_to_avoid[xy]) ? true : false;
						if (to_skip) continue;
						if (!type || (type != 0 && type != 7 && type <= 9)) /*
																			 * Search
																			 * for
																			 * Cities &
																			 * outposts ;
																			 * and
																			 * type
																			 * is
																			 * not
																			 * corresponding
																			 */
							continue;
						var _type = type;
						var terrain = Data.map.terrains[xy];
						if (terrain) {
							_type = t.checkType(terrain[2]);
							if (_type == 7 || _type > 9) cities.push({
								x: coord_x,
								y: coord_y
							});
						}
					}
				}
				return cities;
			},

			getTargets: function(options) {
				var t = Map;
				var terrains = {
					AnthropusCamp: [],
					forest: [],
					grassland: [],
					hill: [],
					lake: [],
					mountain: [],
					plain: [],
					City: [],
					Outpost: []
				};
				var radius = options.radius || 16;
				var _x = options.x;
				var _y = options.y;
				if (isNaN(_x)) _x = t.x;
				if (isNaN(_y)) _y = t.y;
				var _type = options.map_type || 'all';
				/* Terrains */
				for (var x = _x - radius; x < _x + radius; x++) {
					for (var y = _y - radius; y < _y + radius; y++) {
						var coord_x = t.normalize(x);
						var coord_y = t.normalize(y);
						var tile = t.map_bin.getUint8(coord_y + (coord_x * 750) + 2);
						var type = (tile >> 4) & 0x0f;
						var level = tile & 0x0f;

						if (!tile) continue;
						var xy = coord_x + ',' + coord_y;
						var to_skip = (t.coords_to_avoid[xy]) ? true : false;
						if (to_skip) continue;
						/* Skip Clouds */
						if ((!type || type == 9) || (_type != 'all' &&
							(_type == 'C' && type != 7 && type <= 9) && /*
																		 * Search
																		 * for
																		 * Cities &
																		 * outposts ;
																		 * and
																		 * type
																		 * is
																		 * not
																		 * corresponding
																		 */
							(_type == 'W' && (type == 0 || type >= 7)))) /*
																			 * Search
																			 * for
																			 * Wildernesses ;
																			 * and
																			 * type
																			 * is
																			 * not
																			 * corresponding
																			 */ {
							continue;
						}
						if (!Data.map.coords[xy]) Data.map.coords[xy] = {
							A: 1,
							la: 0
						};
						var obj = {
							x: coord_x,
							y: coord_y,
							t: type,
							l: level,
							A: ((Data.map.coords[xy].A == 0) ? false : true),
							la: Data.map.coords[xy].la
						};
						var terrain = Data.map.terrains[xy];
						if (terrain) {
							obj.id = terrain[0] || 0; /* player_id */
							obj.cn = terrain[1]; /* city name */
							obj.t = t.checkType(terrain[2]); /* city type */
							obj.l = (terrain[3] || obj.l); /* level */
							if (obj.id) {
								var player = Data.map.players[obj.id];
								if (player) {
									obj.n = player[0];
									obj.pl = player[1];
									obj.m = player[2];
									obj.ai = player[3];
									obj.a = Data.map.alliance[player[3]] || player[3];
									var coords_A = (Data.map.coords[xy].A == 0) ? false : true;
									obj.A = coords_A = obj.a ? false : true;
									obj.F = player[4];
								}
							}
						} else {
							if (type == 7) obj.l = 1;
						}
						obj.d = getDistance(_x, _y, coord_x, coord_y);
						var terrain_type = t.names.type[type];
						if (obj.t > 9) terrain_type = 'Outpost';
						if ((obj.t == 7 && is_null(obj.n) && is_null(obj.cn))) continue; /*
																							 * City
																							 * without
																							 * name,
																							 * should
																							 * be a
																							 * wamp.
																							 * Do
																							 * not
																							 * take
																							 * it
																							 * into
																							 * account
																							 */
						terrains[terrain_type].push(obj);
					}
				}
				Map.targets = terrains;
				return terrains;
			},

			tileAt: function(options, callback) {				
				var t = Map,
					x, y;
				if (!isNaN(options.x)) x = t.normalize(options.x);
				else x = t.normalize(t.x);
				if (!isNaN(options.y)) y = t.normalize(options.y);
				else y = t.normalize(t.y);

				var tile = t.map_bin.getUint8(y + (x * 750) + 2);
				var type = (tile >> 4) & 0x0f;
				var level = tile & 0x0f;
				if (!tile) return (null);

				var xy = x + ',' + y;
				if (!Data.map.coords[xy]) Data.map.coords[xy] = {
					A: 1,
					la: 0
				};
				var target = {
					x: x,
					y: y,
					t: type,
					l: level,
					A: Data.map.coords[xy].A,
					la: Data.map.coords[xy].la
				};
				/* No need to request more data for AnthropusCamp */
				if (type == 8) {
					target.ok = true;
					callback(target);
					return;
				}

				/* We make sure we have the necessary data in our database */
				if (Data.map.terrains[xy] && Data.map.terrains[xy][0]) {
					var terrain_xy = Data.map.terrains[xy];
					target.id = terrain_xy[0]; /* player_id */
					target.cn = terrain_xy[1]; /* city name */
					target.t = t.checkType(terrain_xy[2]); /* city type */
					target.l = terrain_xy[3]; /* level */

					if (Data.map.players[target.id] && Data.map.players[target.id][0]) {
						var player = Data.map.players[target.id];
						target.n = player[0];
						target.pl = player[1];
						target.m = player[2];
						target.ai = player[3];
						target.a = Data.map.alliance[target.ai] || target.ai;
						target.F = player[4];
						if (!options.force_request && (!options.wild_detail || (options.wild_detail && target.l < 7))) {
							target.ok = true;
							if (callback) callback(target);
							return;
						}
					}
				}
				if (target.n && !options.force_request) {
					target.ok = true;
					if (callback) callback(target);
					return;
				}

				var p = {};
				p = MyAjax.addMainParams();
				p['x'] = x;
				p['y'] = y;
				new MyAjaxRequest('tile_at', 'map/tile_at.json', p, mycb, true);

				function mycb(rslt) {
					if (rslt.ok) {
						if (rslt.dat.map_player && rslt.dat.map_player != null && rslt.dat.map_player.id) {
							var alliance = 0;
							var is_friend = 0;
							var xy = rslt.dat.map_terrain.x + ',' + rslt.dat.map_terrain.y;
							if (rslt.dat.map_player.alliance) {
								alliance = rslt.dat.map_player.alliance.id;
								Data.map.alliance[alliance] = rslt.dat.map_player.alliance.name;
								target.A = Data.map.coords[xy].A = 0;
								if (Seed.player.alliance && rslt.dat.map_player.alliance.id === Seed.player.alliance.id) {
									is_friend = 1;
								}
							}
							Data.map.players[rslt.dat.map_player.id] = [
								rslt.dat.map_player.name,
								rslt.dat.map_player.level,
								rslt.dat.map_player.might,
								alliance,
								is_friend
							];
							target.n = rslt.dat.map_player.name;
							target.pl = rslt.dat.map_player.level;
							target.m = rslt.dat.map_player.might;
							target.ai = alliance;
							target.a = Data.map.alliance[alliance] || alliance;
							target.F = is_friend;
							var city_type = rslt.dat.map_terrain.type ? Map.names.type[rslt.dat.map_terrain.type] : type;
							var city_name = rslt.dat.map_terrain.name;

							Data.map.terrains[xy] = [
								rslt.dat.map_terrain.map_player_id,
								city_name,
								Map.checkType(city_type), (rslt.dat.map_terrain.level || target.l)
							];
							target.id = rslt.dat.map_terrain.map_player_id;
							target.cn = city_name;
							target.t = Map.checkType(city_type);
							target.l = Data.map.terrains[xy][3];
						} else {
							if (rslt.dat.map_terrain) {
								target.t = Map.checkType((rslt.dat.map_terrain.type ? Map.names.type[rslt.dat.map_terrain.type] : type));
								target.l = rslt.dat.map_terrain.level;
							} else {
								target.t = Map.checkType(type);
								target.l = level;
							}
							target.id = null;
							target.cn = null;
							target.n = null;
							target.pl = null;
							target.m = null;
							target.ai = null;
							target.a = null;
							target.F = null;
							var xy = rslt.dat.x + ',' + rslt.dat.y;
							Data.map.terrains[xy] = [null, 0, target.t, target.l];
						}
						target.ok = true;
						if (callback) callback(target);
						return;
					} else {
						verboseLog('Map tileAt ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
						if (callback) callback(rslt);
						return;
					}
				}
			},

			scanMap: function(options, callback) {
				var t = Map;

				t.callback = callback;
				t.radius = (!options.radius || options.radius < 8) ? 8 : options.radius;
				t.pos_x = t.normalize(options.x - t.radius + 4);
				t.pos_y = t.normalize(options.y - t.radius + 8);
				t.step_x = t.step_y = 0;
				t.steps_x = Math.ceil((t.radius * 2) / 8);
				t.steps_y = Math.ceil((t.radius * 2) / 16);
				t.steps = toNum(t.steps_x * t.steps_y) + 1;
				t.step = 0;
				t.percent = toNum(t.step * 100 / t.steps);
				t.tile_count = 0;
				t.total_tiles = 0;
				t.old_percent = 0;
				t.tile_percent = toNum(t.tile_count * 100 / ((t.total_tiles == 0) ? 1 : t.total_tiles));
				t.forwards = true;
				t.city_detail = options.city_detail || false;
				t.wild_detail = options.wild_detail || false;
				t.force_request = options.force_request || false;

				t.options = options;
				t.to_check = cloneProps(t.getCities({
					x: options.x,
					y: options.y,
					radius: t.radius
				}));
				var p = {};
				p = MyAjax.addMainParams();
				p['x'] = t.pos_x;
				p['y'] = t.pos_y;
				p['width'] = 8;
				p['height'] = 16;
				new MyAjaxRequest('map', 'map.json', p, t.gotMapCities, true);
			},

			gotMapCities: function(r) {
				var t = Map;
				var m = Data.map;
				t.tile_count = 0;
				t.total_tiles = 0;

				if (!r.ok) {
					if (t.callback) t.callback(null);
					return;
				}

				var to_refresh = {
					forest: [],
					grassland: [],
					hill: [],
					lake: [],
					mountain: [],
					plain: [],
					City: []
				};

				/* Cities & Outpost */
				for (var i = 0; i < r.dat.map_cities.length; i++) {
					var target = r.dat.map_cities[i];
					var alliance = 0;
					var is_friend = 0;
					if (target.alliance_name) {
						alliance = target.alliance_name;
						if (Seed.player.alliance && target.alliance_name === Seed.player.alliance.name) {
							is_friend = 1;
						}
					}
					if (!Data.map.players[target.map_player_id]) {
						/* [Player Name, Level, Might, Alliance, isFriend ] */
						Data.map.players[target.map_player_id] = [
							0,
							0,
							target.might,
							alliance,
							is_friend
						];
					} else {
						if (!Data.map.players[target.map_player_id][3]) Data.map.players[target.map_player_id][3] = alliance;
					}
					var xy = target.x + ',' + target.y;
					/* [ player_id, city_name, city_type, level] */
					Data.map.terrains[xy] = [
						target.map_player_id, (target.name || 0),
						t.checkType(target.type), (target.level || 0)
					];
					var found = false;
					for (var c = 0; c < t.to_check.length && !found; c++) {
						if (t.to_check[c].x == target.x && t.to_check[c].y == target.y) {
							found = true;
							t.to_check.splice(c, 1);
						}
					}
					if (!Data.map.coords[xy]) Data.map.coords[xy] = {
						A: 1,
						la: 0
					};
					Data.map.coords[xy].A = alliance ? 0 : 1;
					if (Seed.player.id === target.map_player_id) Data.map.coords[xy].A = 0;
					if (t.city_detail) {
						var loc_to_refresh = {
							x: target.x,
							y: target.y
						};
						to_refresh.City.push(loc_to_refresh);
					}
				}
				/* Wildernesses */
				if (t.wild_detail) {
					var _x = t.pos_x;
					var _y = t.pos_y;
					for (var x = _x - t.radius; x < _x + t.radius; x++) {
						for (var y = _y - t.radius; y < _y + t.radius; y++) {
							var wild_x = t.normalize(x);
							var wild_y = t.normalize(y);
							var tile = t.map_bin.getUint8(wild_y + (wild_x * 750) + 2);
							var type = (tile >> 4) & 0x0f;
							var level = tile & 0x0f;
							if (tile) {
								var xy = wild_x + ',' + wild_y;
								var to_skip = (t.coords_to_avoid[xy]) ? true : false;
								if (type > 0 && type < 7 && level >= 7 && !to_skip) {
									var terrain_type = t.names.type[type];
									to_refresh[terrain_type].push({
										x: wild_x,
										y: wild_y
									});
								}
							}
						}
					}
				}
				if (t.city_detail || t.wild_detail) {
					for (var map_type in to_refresh) {
						if ((to_refresh[map_type]).length > 0) {
							(to_refresh[map_type]).shuffle();
						}
					}
					Map.to_refresh = to_refresh;
					Map.is_refreshing = true;
					for (var map_type in Map.to_refresh) {
						t.total_tiles += ((Map.to_refresh[map_type]).length || 0);
					}
					t.getDetails();
				}
				t.callNext();
			},

			scanWilds: function(options, callback) {
				var t = Map;
				var m = Data.map;

				t.callback = callback;
				t.radius = (!options.radius || options.radius < 8) ? 8 : options.radius;
				var _x = options.x;
				var _y = options.y;
				if (isNaN(_x)) _x = t.x;
				if (isNaN(_y)) _y = t.y;
				t.steps = 1;
				t.step = 0;
				t.percent = toNum(t.step * 100 / t.steps);
				t.tile_count = 0;
				t.total_tiles = 0;
				t.old_percent = 0;
				t.tile_percent = toNum(t.tile_count * 100 / ((t.total_tiles == 0) ? 1 : t.total_tiles));
				t.options = options;

				var to_refresh = {
					forest: [],
					grassland: [],
					hill: [],
					lake: [],
					mountain: [],
					plain: [],
					City: []
				};

				for (var x = _x - t.radius; x < _x + t.radius; x++) {
					for (var y = _y - t.radius; y < _y + t.radius; y++) {
						var wild_x = t.normalize(x);
						var wild_y = t.normalize(y);
						var tile = t.map_bin.getUint8(wild_y + (wild_x * 750) + 2);
						var type = (tile >> 4) & 0x0f;
						var level = tile & 0x0f;
						if (tile) {
							var xy = wild_x + ',' + wild_y;
							var to_skip = (t.coords_to_avoid[xy]) ? true : false;
							if ((type > 0 && type < 7 && level >= 7 && !to_skip) &&
								((type == 1 && Data.options.search.plain) ||
									(type == 2 && Data.options.search.mountain) ||
									(type == 3 && Data.options.search.forest) ||
									(type == 4 && Data.options.search.hill) ||
									(type == 5 && Data.options.search.grassland) ||
									(type == 6 && Data.options.search.lake))) {
								var terrain_type = t.names.type[type];
								to_refresh[terrain_type].push({
									x: wild_x,
									y: wild_y
								});
							}
						}
					}
				}
				for (var map_type in to_refresh) {
					if ((to_refresh[map_type]).length > 0) {
						(to_refresh[map_type]).shuffle();
					}
				}
				Map.to_refresh = to_refresh;
				Map.is_refreshing = true;
				for (var map_type in Map.to_refresh) {
					t.total_tiles += ((Map.to_refresh[map_type]).length || 0);
				}
				t.getDetails();
				t.callNextWilds();
			},

			checkOurCoords: function() {
				var t = Map;
				if (Data.options.map.x != Seed.cities[CAPITAL.id].x || Data.options.map.y != Seed.cities[CAPITAL.id].y) {
					Data.options.map.x = Seed.cities[CAPITAL.id].x;
					Data.options.map.y = Seed.cities[CAPITAL.id].y;
				}
			},
			normalize: function(x) {
				if (x == 0) return 0;
				if (x > 749) return x - 750;
				if (x < 0) return x + 750;
				return x;
			},
			checkType: function(type) {
				var ret = type;
				if (type >= 0 && type <= 20) ret = type; /*
															 * Add 1 if new OP
															 * type
															 */
				else ret = (Map.names.type[type] || type);
				return ret;
			},
			callNext: function() {
				var t = Map;
				if (t.is_refreshing) {
					setTimeout(t.callNext, 1000);
				} else {
					t.step = t.step + 1;
					t.percent = toNum(t.step * 100 / t.steps);
					progressBar.update({
						step: t.percent
					});
					if (t.forwards) {
						++t.step_x;
						if (t.step_x >= t.steps_x) {
							++t.step_y;
							t.forwards = false;
							--t.step_x;
						}
					} else {
						--t.step_x;
						if (t.step_x < 0) {
							++t.step_y;
							t.forwards = true;
							++t.step_x;
						}
					}

					if (t.step_y >= t.steps_y) {
						if (t.to_check.length > 0) {
							t.is_refreshing = true;
							t.tile_count = 0;
							t.total_tiles = t.to_check.length + 1;
							t.old_percent = 0;
							t.tile_percent = toNum(t.tile_count * 100 / ((t.total_tiles == 0) ? 1 : t.total_tiles));
							t.checkOldCities(function(ret) {
								Map.is_refreshing = false;
							});
							setTimeout(t.callNext, 1000);
						} else {
							if (t.callback) {
								t.callback({
									done: true,
									terrains: t.terrains
								});
								return;
							}
						}
					}
					t.callback({
						done: false
					});

					setTimeout(function() {
						var p = {};
						p = MyAjax.addMainParams();
						p['x'] = t.normalize(t.pos_x + (t.step_x * 8));
						p['y'] = t.normalize(t.pos_y + (t.step_y * 16));
						p['width'] = 8;
						p['height'] = 16;
						new MyAjaxRequest('map', 'map.json', p, t.gotMapCities, true);
					}, TILE_DELAY * Math.floor(Math.random() * (-1) + 2));
				}
			},
			callNextWilds: function() {
				var t = Map;
				if (t.is_refreshing) {
					setTimeout(t.callNextWilds, 1000);
				} else {
					if (t.callback) {
						t.callback({
							done: true,
							terrains: t.terrains
						});
						return;
					}
				}
			},
			checkOldCities: function(feedback) {
				var t = Map;
				if (t.to_check.length > 0) {
					var refresh_x = t.to_check[0].x;
					var refresh_y = t.to_check[0].y;
					Map.tileAt({
						x: refresh_x,
						y: refresh_y,
						force_request: true
					}, function(target) {
						if (target && target.ok) {
							t.to_check.splice(0, 1);
							t.tile_count++;
							t.tile_percent = Math.floor(t.tile_count * 100 / ((t.total_tiles == 0) ? 1 : t.total_tiles));
							t.percent = toNum(t.step * 100 / t.steps);
							t.percent = t.percent + (t.tile_percent / t.steps);
							if (t.percent != t.old_percent) {
								progressBar.update({
									step: t.percent,
									stepText: translate('Please wait...') + '<br>' + translate('Step') + ' ' + (t.step + 1) + '/' + t.steps + ' : ' + translate('Got') + ' ' + t.tile_count + '/' + t.total_tiles + ' (' + translate('Checking old city coords') + ')'
								});
								t.old_percent = t.percent;
							}
							setTimeout(t.checkOldCities, TILE_DELAY * Math.floor(Math.random() * (-1) + 2));
						} else {
							verboseLog('Map tileAt ' + translate('was returned with a status of') + ' ' + target.ok + ' - ' + target.errmsg);
							var error_msg = target.errmsg;
							var waitTime = 600;
							switch (target.status) {
								case 400:
									error_msg = translate('<b>Bad request!</b>');
									waitTime = 0;
									break;
								case 403:
									error_msg = translate('<b>Forbidden!</b>');
									waitTime = 0;
									break;
								case 429:
									error_msg = '<b>API </b>' + translate('<b>Rate Limit Exceeded</b>, too many requests!');
									waitTime = E429_DELAY;
									break;
								case 509:
									error_msg = translate('<b>Rate Limit Exceeded</b>, too many requests!');
									waitTime = 300;
									break;
							}
							if (waitTime > 0) {
								progressBar.update({
									stepText: error_msg + ' - ' + translate('Retry in') + ' ' + waitTime
								});
								setTimeout(t.checkOldCities, waitTime * 1000);
							} else {
								progressBar.update({
									stepText: error_msg
								});
								t.to_check.splice(0, 1);
								setTimeout(t.checkOldCities, TILE_DELAY * Math.floor(Math.random() * (-1) + 2));
							}
						}
					});
				}
				if (t.to_check.length == 0) Map.is_refreshing = false;
				if (feedback && t.to_check.length == 0) feedback({
					done: true
				});
			},
			getDetails: function() {
				var t = Map;
				for (var map_type in t.to_refresh) {
					if ((t.to_refresh[map_type]).length > 0) {
						var refresh_x = (t.to_refresh[map_type])[0].x;
						var refresh_y = (t.to_refresh[map_type])[0].y;
						var refresh_type = map_type;
						Map.tileAt({
							x: refresh_x,
							y: refresh_y
						}, function(target) {
							if (target && target.ok) {
								(t.to_refresh[refresh_type]).splice(0, 1);
								t.tile_count++;
								t.tile_percent = Math.floor(t.tile_count * 100 / ((t.total_tiles == 0) ? 1 : t.total_tiles));
								t.percent = toNum(t.step * 100 / t.steps);
								/*
								 * logit('getDetails :
								 * tile_count='+t.tile_count+', tile_percent =
								 * toNum( '+t.tile_count+' * 100 /
								 * '+t.total_tiles+') = '+t.tile_percent+',
								 * t.percent = '+t.percent+' +
								 * ('+t.tile_percent+' / '+t.steps+')');
								 */
								t.percent = t.percent + (t.tile_percent / t.steps);
								if (t.percent != t.old_percent) {
									progressBar.update({
										step: t.percent,
										stepText: translate('Please wait...') + '<br>' + translate('Step') + ' ' + (t.step + 1) + '/' + t.steps + ' : ' + translate('Got') + ' ' + t.tile_count + '/' + t.total_tiles + ' (' + translate(refresh_type) + ')'
									});
									t.old_percent = t.percent;
								}
								setTimeout(t.getDetails, TILE_DELAY * Math.floor(Math.random() * (-1) + 2));
							} else {
								verboseLog('Map tileAt ' + translate('was returned with a status of') + ' ' + target.ok + ' - ' + target.errmsg);
								var error_msg = target.errmsg;
								var waitTime = 600;
								switch (target.status) {
									case 400:
										error_msg = translate('<b>Bad request!</b>');
										waitTime = 0;
										break;
									case 403:
										error_msg = translate('<b>Forbidden!</b>');
										waitTime = 0;
										break;
									case 429:
										error_msg = '<b>API </b>' + translate('<b>Rate Limit Exceeded</b>, too many requests!');
										waitTime = E429_DELAY;
										break;
									case 509:
										error_msg = translate('<b>Rate Limit Exceeded</b>, too many requests!');
										waitTime = 300;
										break;
								}
								if (waitTime > 0) {
									progressBar.update({
										stepText: error_msg + ' - ' + translate('Retry in') + ' ' + waitTime
									});
									setTimeout(t.getDetails, waitTime * 1000);
								} else {
									progressBar.update({
										stepText: error_msg
									});
									(t.to_refresh[refresh_type]).splice(0, 1);
									setTimeout(t.getDetails, TILE_DELAY * Math.floor(Math.random() * (-1) + 2));
								}
							}
						});
						break;
					}
				}
				var done = true;
				for (var map_type in t.to_refresh) {
					if ((t.to_refresh[map_type]).length > 0) done = false;
				}
				if (done) Map.is_refreshing = false;
			}
		};
		/******************************** March package ******************************/
		var Marches = {
			table_output: {
				attacks: {},
				bookmark: {},
				waves: {},
				spies: {},
				transport: {},
				multiple: {}
			},
			count: {
				attacks: 0,
				bookmark: 0,
				waves: 0,
				spies: 0,
				transport: 0,
				multiple: 0
			},

			init: function() {
				var t = Marches;
				Data.init({
					marches: {
						start_at: 0,
						attacks: {},
						bookmark: {},
						waves: {},
						spies: {},
						transport: {},
						multiple: {},
						count_limit: 1,
						ressources: {}
					}
				});
			},

			add: function(march, type) {
				var t = Marches;
				if (is_null(type)) {
					if (Data.marches.attacks[march.id] === undefined &&
						Data.marches.bookmark[march.id] === undefined &&
						Data.marches.waves[march.id] === undefined &&
						Data.marches.spies[march.id] === undefined &&
						Data.marches.transport[march.id] === undefined &&
						Data.marches.multiple[march.id] === undefined
					) {
						if (!is_null(march.ownerId)) type = march.ownerId;
						else {
							switch (march.march_type) {
								case 'TransportMarch':
									type = 'transport';
									break;
								default:
									type = 'attacks';
									break;
							}
						}
					}
				}
				(Data.marches[type])[march.id] = cloneProps(march);
				(Data.marches[type])[march.id].has_report = ((type == 'transport') ? true : false);
				/* t.trace('Marches.add', march.id); */
			},
			remove: function(march_id, type) {
				var t = Marches;
				if (march_id)
					if (is_null(type)) {
						for (var type in Data.marches) {
							if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
							if ((Data.marches[type])[march_id]) {
								/* t.trace('Marches.remove', march_id); */
								delete((Data.marches[type])[march_id]);
							}
							if (Data.marches.ressources[march_id]) delete(Data.marches.ressources[march_id]);
						}
					} else {
						/* t.trace('Marches.remove', march_id); */
						delete((Data.marches[type])[march_id]);
					}
			},
			update: function(march) {
				var t = Marches;
				var found = false;
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
					var m = (Data.marches[type])[march.id];
					if (m) {
						m.mergeWith(march);
						if (is_null(m.real_run_at) && m.run_at && m.duration && m.status == 'marching') m.real_run_at = m.run_at + toNum(m.duration);
						/* t.trace('Marches.update', march.id); */
					}
				}
			},
			find: function(march_id) {
				var t = Marches;
				var found = false;
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
					for (var id in Data.marches[type]) {
						var march = Data.marches[type][id];
						if (march.id == march_id) {
							found = true;
							return (march);
						}
					}
				}
				if (!found) return null;
			},
			purge: function() {
				var t = Marches,
					now = toNum(serverTime());
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
					for (var id in Data.marches[type]) {
						var march = (Data.marches[type])[id];
						if (march && !t.findInSeed(id) && ((march.real_run_at && now > march.real_run_at) || !march.realrun_at)) t.remove(id, type);
					}
				}
			},
			findInSeed: function(march_id) {
				var found = false;
				for (var marchId in Seed.cities[CAPITAL.id].marches) {
					var march = Seed.cities[CAPITAL.id].marches[marchId];
					if (march.id == march_id) {
						found = true;
					}
				}
				return (found);
			},

			checkTimer: null,
			check: function() {
				var t = Marches;
				var now = toNum(serverTime());
				clearTimeout(t.checkTimer);
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) {
						continue;
				}
					var marches = Data.marches[type];
					for (var id in marches) {
						if (marches[id].run_at < (now - 60) && !(marches[id].has_report)) {
							/*
							 * Will force at least 5 minute wait for the report
							 * to come in before it gives up on it. (fixed by
							 * Lord Mimir)
							 */
							if (marches[id].retry && marches[id].run_at < (now - 300)) {
								++Data.options.messages.missing;
								if (DEBUG_MARCHES) debugLog('March report never received! (now=' + now + ')\n' + inspectObj(marches[id], 6, 1));
								marches[id].has_report = true;
							} else {
								marches[id].retry = true;
								Messages.checkMessages({
									category: 'reports'
								});
							}
						}
					}
				}
				t.checkTimer = setTimeout(t.check, Math.randRange(30000, 70000));
			},
			updateCounters: function() {
				var t = Marches;
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
					(Marches.count[type]) = 0;
					for (var id in Data.marches[type]) {
						(Marches.count[type])++;
					}
				}
			},

			trace: function(caller, march_id) {
				var ret = [];
				var t = Marches;
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
					for (var id in Data.marches[type]) {
						var march = (Data.marches[type])[id];
						if (march.status == 'encamped') continue;
						if (march_id) {
							if (march_id == id)
								ret.push({
									march: 'id=' + id + ', ownerId=' + (march.ownerId ? march.ownerId : '') + ', job_id=' + (march.job_id ? march.job_id : '') + ', status=' + march.status + ', inSeed=' + t.findInSeed(march.id) + ', has_report=' + (march.has_report ? march.has_report : ''),
									times: 'now=' + timestrh(toNum(serverTime())) + ', run_at=' + (march.run_at ? timestrh(march.run_at) : '') + ', duration=' + (march.duration ? march.duration : '') + ', real_run_at=' + (march.real_run_at ? timestrh(march.real_run_at) : '')
								});
						} else
							ret.push({
								march: 'id=' + id + ', ownerId=' + (march.ownerId ? march.ownerId : '') + ', job_id=' + (march.job_id ? march.job_id : '') + ', status=' + march.status + ', inSeed=' + t.findInSeed(march.id) + ', has_report=' + (march.has_report ? march.has_report : ''),
								times: 'now=' + timestrh(toNum(serverTime())) + ', run_at=' + (march.run_at ? timestrh(march.run_at) : '') + ', duration=' + (march.duration ? march.duration : '') + ', real_run_at=' + (march.real_run_at ? timestrh(march.real_run_at) : '')
							});
					}
				}
				if (ret && ret.length > 0) logit(caller + ' : ' + inspectObj(ret, 8, 1));
			},

			updateTable: function(table, type) {
				var t = Marches;
				var now = toNum(serverTime());

				if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) return;
				/* shortcut for current table_output */
				var table_output = t.table_output[type];
				/* Clear table of old data (by Lord Mimir) */
				var cleared = 0;
				for (var row = 0; row < table.rows.length; row++) {
					var id = table.rows[row].getAttribute('ref');
					var march = (Data.marches[type])[id];
					if (!march || (!t.findInSeed(id) && ((march.real_run_at && now > march.real_run_at) || !march.realrun_at))) {
						cleared++;
						table.deleteRow(row);
						delete table_output[id];
						row--;
						if (march) t.remove(id, type);
						continue;
					} else if (cleared > 0) table_output[id].row -= cleared;
				}
				(t.count[type]) = 0;
				for (var id in Data.marches[type]) {
					if (t.findInSeed(id))(t.count[type])++;
				}
				Marches.updateCounters(type);

				/*
				 * NOTE: We use a dual system, the first one to create the rows
				 * and the another to update it. We do it in this way because we
				 * don't want to lose the event listeners of the buttons.
				 */
				for (var id in Data.marches[type]) {
					var iRow, iCell;
					var march = (Data.marches[type])[id];
					var retreating = (march.status === 'retreating');
					var time_left = march.run_at - now;
					if (!time_left || time_left < 0) time_left = (march.real_run_at ? march.real_run_at : march.run_at) - now;
					var time_format;
					if (time_left < 0 && march.status !== 'encamped') {
						time_format = '...';
					} else if (isNaN(time_left) || (time_left < 0 && march.status === 'encamped')) {
						time_format = '---';
					} else {
						time_format = timestr(time_left, true);
					}

					var units = '';
					for (var unit_type in march.units)
						units += ' ' + translate(unit_type) + ': ' + numf(march.units[unit_type], ' ') + ' +';
					units = units.substr(1, units.length - 2);

					var ressources = '';
					if (Data.marches.ressources[id]) {
						ressources = ' +' + translate('Resources') + ': +';
						for (var r in Data.marches.ressources[id]) {
							if (Data.marches.ressources[id][r] > 0)
								ressources += ' ' + translate(r) + ': ' + numf(Data.marches.ressources[id][r], ' ') + ' +';
						}
						ressources = ressources.substr(1, ressources.length - 2);
					}

					/* Inserting Row */
					if (table_output[id] === undefined && (time_left || march.status === 'encamped' || (!time_left && (march.real_run_at - now) > 0))) {
						/* Insert a new row */
						iRow = table.insertRow(0); /*
													 * iRow =
													 * table.insertRow(-1);
													 */
						/*
						 * associates the current row number to the id of the
						 * march
						 */
						table_output[id] = {}; /*
												 * table_output[id] =
												 * {row:table.rows.length-1};
												 */
						iRow.setAttribute('ref', id);
						iRow.title = [
							'(' + (march.general && march.general.name ? march.general.name : '----') + ')', march.target_name, march.terrain_level, '[' + march.x + '/' + march.y + ']\n', units.replace(/\+/g, '\n'), ressources.replace(/\+/g, '\n')
						].join(' ');
						/* Retreating case */
						if (retreating) {
							table_output[id].row_status = 2; /*
																 * Retreating
																 * mode
																 */
							/* march Status */
							iCell = iRow.insertCell(-1);
							iCell.innerHTML = '<b>' + translate('Returning') + ':</b>';
							/* march Target */
							iCell = iRow.insertCell(-1);
							iCell.className = 'wrap';
							iCell.innerHTML = march.target_name.nowrap();
							/* march Coords */
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'right';
							iCell.innerHTML = '&nbsp;<b>&lt;</b>&nbsp;';
							/* march time_left */
							iCell = iRow.insertCell(-1);
							iCell.innerHTML = time_format;
							/* march Recall Button */
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'right';
							iCell.innerHTML = '&nbsp;';
							/* Speedups buttons */
							for (var i = 0; i < time_item_list.length; i++) {
								if (time_item_list[i].type.indexOf('M') >= 0 &&
									toNum(Seed.player.items[time_item_list[i].name]) > 0) {
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'right';
									iCell.innerHTML = '&nbsp;';
									t.addSpeedUpButton(i, iCell, iRow.cells[3], id, time_item_list[i].classCss);
								}
							}
						}

						/* Marching case */
						else {
							table_output[id].row_status = 1; /* Marching mode */
							/* march Status */
							iCell = iRow.insertCell(-1);
							switch (march.march_type) {
								case 'TransportMarch':
									iCell.innerHTML = '<b>' + (RecallMarch.exists(id) ? translate('Yoyo') : translate('Transport')).capitalize() + ':</b>';
									break;
								case 'SpyMarch':
									iCell.innerHTML = '<b>' + translate('Spy').capitalize() + ':</b>';
									break;
								default:
									iCell.innerHTML = '<b>' + translate(march.status).capitalize() + ':</b>';
									break;
							}
							/* march Target */
							iCell = iRow.insertCell(-1);
							iCell.className = 'wrap';
							iCell.innerHTML = march.target_name.nowrap() + '&nbsp;' + march.terrain_level + '&nbsp;';
							/* march Coords */
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'right';
							iCell.innerHTML = '<span class=jewel> [' + march.x + '/' + march.y + ']</span>&nbsp;<b>&gt;</b>&nbsp;';
							/* march time_left */
							iCell = iRow.insertCell(-1);
							iCell.style.textAlign = 'right';
							iCell.innerHTML = time_format;
							/* march Recall Button */
							iCell = iRow.insertCell(-1);

							var button = document.createElement('input');
							button.type = 'button';
							/*
							 * Save the current March id in the attibute "ref"
							 * of the button
							 */
							button.setAttribute('ref', id);
							if (march.status === 'encamped') {
								button.className = 'thin';
								button.value = 'X';
							} else {
								button.className = UID['btn_red'] + ' thin';
								button.value = 'X';
							}
							button.addEventListener('click', function(event) {
								var self = event.target;
								self.disabled = true;
								self.style.display = 'none';
								/* Take the march id from the "ref" attribute */
								var march_id = self.getAttribute('ref');
								/*
								 * Verify that the march really exists in
								 * Data.marches
								 */
								if ((Data.marches[type])[march_id]) {
									var city_id = (Data.marches[type])[march_id].city_id;
									MyAjax.marchRecall(city_id, march_id, function(r) {
										if (r.ok && r.dat.result.success) {
											(Data.marches[type])[march_id].status = 'retreating';
										}
									});
								}
							}, false);
							iCell.appendChild(button);
							/* Speedups buttons */
							for (var i = 0; i < time_item_list.length; i++) {
								if (time_item_list[i].type.indexOf('M') >= 0 &&
									toNum(Seed.player.items[time_item_list[i].name]) > 0) {
									iCell = iRow.insertCell(-1);
									iCell.style.textAlign = 'right';
									iCell.innerHTML = '&nbsp;';
									if (march.status != 'encamped') t.addSpeedUpButton(i, iCell, iRow.cells[3], id, time_item_list[i].classCss);
								}
							}
						}
					}

					/* Upgrade Row */
					else {
						if (table_output[id] === undefined) continue;
						/* iRow = table.rows[ table_output[id].row ]; */
						for (var row = 0; row < table.rows.length; row++) {
							if (table.rows[row].getAttribute('ref') == id) {
								iRow = table.rows[row];
								break;
							}
						}
						if (iRow === undefined) {
							delete table_output[id];
							continue;
						}
						/* Row Status cases */
						switch (table_output[id].row_status) {
							/* Finish state */
							case 0:
								if (retreating && time_left > 0) { /*
																	 * added a
																	 * check to
																	 * prevent
																	 * hidding
																	 * of
																	 * marches
																	 * before
																	 * they
																	 * finish
																	 * retreating.
																	 */
									table_output[id].row_status = 2;
									/* march Recall Button */
									iRow.cells[4].innerHTML = '';
									/* Speedups buttons */
									var ofs = 0;
									for (var i = 0; i < time_item_list.length; i++) {
										if (time_item_list[i].type.indexOf('M') >= 0) {
											iRow.cells[(5 + ofs)].innerHTML = '';
											ofs++;
										}
									}
									continue;
								}
								iRow.style.display = 'none';
								table_output[id].row_status = -1;
								continue;
								break;
								/* Marching state (Waiting for retreating) */
							case 1:
							case 2:
								if (retreating) {
									table_output[id].row_status = 3; /*
																		 * Change
																		 * to
																		 * retreating
																		 * state
																		 */
									/* march Status */
									var html_status = '';
									html_status += '<b>' + translate('Returning') + ':</b>';
									iRow.cells[0].innerHTML = html_status;
									/* march Target */
									iRow.cells[1].innerHTML = march.target_name.nowrap();
									/* march Coords */
									iRow.cells[2].innerHTML = '&nbsp;<b>&lt;</b>&nbsp;';
									/* march Recall Button */
									iRow.cells[4].innerHTML = '';
									var ofs = 0;
									for (var i = 0; i < time_item_list.length; i++) {
										if (time_item_list[i].type.indexOf('M') >= 0 &&
											toNum(Seed.player.items[time_item_list[i].name]) > 0) {
											iRow.cells[(5 + ofs)].innerHTML = '';
											t.addSpeedUpButton(i, iRow.cells[(5 + ofs)], iRow.cells[3], id, time_item_list[i].classCss);
											ofs++;
										}
									}
								} else if ((isNaN(time_left) || time_left < 0) && (table_output[id].row_status === 1 || table_output[id].row_status === 2)) {
									if (march.terrain_type && !(/(Anthropus|City|Outpost|Bog)/.test(march.terrain_type))) {
										if (march.status === 'marching') {
											table_output[id].row_status = 2; /*
																				 * Change
																				 * to
																				 * Waiting
																				 * for
																				 * retreating
																				 * (Action
																				 * Taken)
																				 */
										} else if (march.status === 'encamped') {
											table_output[id].row_status = 4; /*
																				 * Change
																				 * to
																				 * encamped
																				 */
											var html_status = '';
											html_status += '<b>' + translate(march.status).capitalize() + ':</b>';
											iRow.cells[0].innerHTML = html_status;
											/* Change button to show recall */
											/* first clear old button. */
											iRow.cells[4].innerHTML = '';
											/* now create button */
											var button = document.createElement('input');
											button.type = 'button';
											/*
											 * Save the current March id in the
											 * attibute "ref" of the button
											 */
											button.setAttribute('ref', id);
											button.className = 'thin';
											button.value = 'X';
											button.addEventListener('click', function(event) {
												var self = event.target;
												self.disabled = true;
												self.style.display = 'none';
												/*
												 * Take the march id from the
												 * "ref" attribute
												 */
												var march_id = self.getAttribute('ref');
												/*
												 * Verify that the march really
												 * exists in Data.marches
												 */
												if ((Data.marches[type])[march_id]) {
													var city_id = (Data.marches[type])[march_id].city_id;
													MyAjax.marchRecall(city_id, march_id, function(r) {
														if (r.ok && r.dat.result.success) {
															(Data.marches[type])[march_id].status = 'retreating';
														}
													});
												}
											}, false);
											iRow.cells[4].appendChild(button);
											var ofs = 0;
											for (var i = 0; i < time_item_list.length; i++) {
												if (time_item_list[i].type.indexOf('M') >= 0) {
													if (iRow.cells[(5 + ofs)])
														iRow.cells[(5 + ofs)].innerHTML = '';
													ofs++;
												}
											}
										}
									}
								}
								break;
								/* retreating state (Waiting for finish) */
							case 3:
								if (isNaN(time_left) || time_left < 0) {
									table_output[id].row_status = 0; /*
																		 * Change
																		 * to
																		 * Finish
																		 * state
																		 */
								}
								break;
								/* units encamped; */
							case 4:
								if (retreating) {
									table_output[id].row_status = 3; /*
																		 * Change
																		 * to
																		 * retreating
																		 * state
																		 */
									/* march Status */
									iRow.cells[0].innerHTML = '<b>' + translate('Retreating') + ':</b>';
									/* march Target */
									iRow.cells[1].innerHTML = march.target_name.nowrap();
									/* march Coords */
									iRow.cells[2].innerHTML = '&nbsp;<b>&lt;</b>&nbsp;';
									/* march Recall Button */
									iRow.cells[4].innerHTML = '';
									var ofs = 0;
									for (var i = 0; i < time_item_list.length; i++) {
										if (time_item_list[i].type.indexOf('M') >= 0 &&
											toNum(Seed.player.items[time_item_list[i].name]) > 0) {

											iRow.cells[(5 + ofs)].innerHTML = '';
											t.addSpeedUpButton(i, iRow.cells[(5 + ofs)], iRow.cells[3], id, time_item_list[i].classCss);
											ofs++;
										}
									}
								}
								break;
						}
						/* march time_left */
						iRow.cells[3].innerHTML = time_format;
					}
				}
			},
			addSpeedUpButton: function(itemId, nCell, nTimeCell, marchId, classCss) {
				if (!Data.options.speedups_enabled) return;
				var t = Marches;
				nCell.innerHTML = '';
				var num = toNum(Seed.player.items[time_item_list[itemId].name]);
				var button = document.createElement('input');
				button.type = 'button';
				/* Save the current March id in the attibute "ref" of the button */
				button.setAttribute('ref', time_item_list[itemId].name + '_' + marchId);
				button.value = time_item_list[itemId].text;
				if (num > 0) {
					button.disabled = false;
					button.className = UID[classCss] + ' thin';
					button.addEventListener('click', function(event) {
						var self = event.target;
						/* Take the march id from the "ref" attribute */
						var ids = self.getAttribute('ref').split('_');
						/* Verify that the march really exists in Data.marches */
						var march = Marches.find(ids[1]);
						if (march != null) {
							var city_id = march.city_id;

							if (time_item_list[itemId].confirmation && Data.options.use_speedup_confirmation) {

								dialogConfirm(translate('Do you want to use [0] on this march').replace('[0]', translate(time_item_list[itemId].name)) + ' ?',
									function() {
										self.disabled = true;
										self.className = UID['btn_disabled'] + ' thin';
										MyAjax.useItem(city_id, ids[0], march.job_id, function(r) {
											if (r.ok && r.dat.result.success) {
												if (r.dat.result.item_response) {
													itmResp = r.dat.result.item_response;
													marchResp = Marches.find(itmResp.march_id);

													var job = cloneProps(itmResp);
													delete(job.type);
													Seed.checkAddJob(job);

													if (itmResp.queue == 'march' && marchResp) {
														marchResp.run_at = itmResp.run_at;
														marchResp.duration = itmResp.duration;
														var time_left = marchResp.run_at - toNum(serverTime());
														var time_format;
														if (time_left < 0) {
															time_format = '...';
														} else if (isNaN(time_left)) {
															time_format = '---';
														} else {
															time_format = timestr(time_left, true);
														}
														nTimeCell.innerHTML = time_format;
													}
												}
												var num = toNum(Seed.player.items[ids[0]]);
												if (num > 0) {
													button.disabled = false;
													button.className = UID[classCss] + ' thin';
												}
											}
										});

									},
									function() {}, true
								);

							} else {
								self.disabled = true;
								self.className = UID['btn_disabled'] + ' thin';

								MyAjax.useItem(city_id, ids[0], march.job_id, function(r) {
									if (r.ok && r.dat.result.success) {
										if (r.dat.result.item_response) {

											itmResp = r.dat.result.item_response;
											marchResp = Marches.find(itmResp.march_id);

											var job = cloneProps(itmResp);
											delete(job.type);
											Seed.checkAddJob(job);

											if (itmResp.queue == 'march' && marchResp) {
												marchResp.run_at = itmResp.run_at;
												marchResp.duration = itmResp.duration;
												var time_left = marchResp.run_at - toNum(serverTime());
												var time_format;
												if (time_left < 0) {
													time_format = '...';
												} else if (isNaN(time_left)) {
													time_format = '---';
												} else {
													time_format = timestr(time_left, true);
												}
												nTimeCell.innerHTML = time_format;
											}
										}
										var num = toNum(Seed.player.items[ids[0]]);
										if (num > 0) {
											button.disabled = false;
											button.className = UID[classCss] + ' thin';
										}
									}
								});
							}

						}
					}, false);
				} else {
					button.disabled = true;
					button.className = UID['btn_disabled'] + ' thin';
				}
				nCell.appendChild(button);
			}
		};
		/******************************** MemberShips package ************************/
		var MemberShips = {
			fetchMembership: function(id, callback, doDetail) {
				var t = MemberShips;
				t.callback = callback;
				t.doDetail = doDetail;
				if (id) {
					var p = {};
					p = MyAjax.addMainParams();
					p['count'] = 120;
					p['approved'] = 1;
					var jsonType = 'alliances/' + id + '/memberships';
					new MyAjaxRequest('membership', jsonType, p, t.updateMemberships, false);
				}
			},
			updateMemberships: function(rslt) {
				var t = MemberShips;
				if (!rslt.ok) {
					t.callback(rslt);
					return;
				}
				var memberList = rslt.dat.alliance_memberships;
				var ret = {
					member: []
				};
				for (var m = 0; m < memberList.length; m++) {
					var d = {
						player: memberList[m].player.name,
						id: memberList[m].player.id,
						role: memberList[m].role,
						might: memberList[m].player.might,
						joined: memberList[m].created_at_i * 1000,
						city: memberList[m].player.city.name,
						x: memberList[m].player.city.x,
						y: memberList[m].player.city.y,
						dragon: memberList[m].player.city.dragon_slots,
						req_id: memberList[m].id,
						dist: getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, memberList[m].player.city.x, memberList[m].player.city.y)
					};
					ret.member.push(d);
				}
				ret.done = true;
				t.callback(ret);
				return;
			},
			fetchApplicants: function(id, callback, doDetail) {
				var t = MemberShips;
				t.callback = callback;
				t.doDetail = doDetail;
				if (id) {
					var p = {};
					p = MyAjax.addMainParams();
					p['page'] = 1;
					p['count'] = 30;
					p['approved'] = 0;
					p['sort'] = 'might';
					var jsonType = 'alliances/' + id + '/memberships';
					new MyAjaxRequest('membership', jsonType, p, t.updateApplicants, false);
				}
			},
			updateApplicants: function(rslt) {
				var t = MemberShips;
				if (!rslt.ok) {
					t.callback(rslt);
					return;
				}
				var memberList = rslt.dat.alliance_memberships;
				var ret = {
					member: []
				};
				for (var m = 0; m < memberList.length; m++) {
					var d = {
						player: memberList[m].player.name,
						id: memberList[m].player.id,
						role: 'applicant',
						might: memberList[m].player.might,
						joined: memberList[m].created_at_i * 1000,
						city: memberList[m].player.city.name,
						x: memberList[m].player.city.x,
						y: memberList[m].player.city.y,
						dragon: memberList[m].player.city.dragon_slots,
						req_id: memberList[m].id,
						dist: getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, memberList[m].player.city.x, memberList[m].player.city.y)
					};
					ret.member.push(d);
				}
				ret.done = true;
				t.callback(ret);
				return;
			},
			fetchAlliances: function(callback) {
				var t = MemberShips;
				t.results = {
					alliance: [],
					friends: [],
					foes: []
				};
				t.callback = callback;
				t.steps = 5;
				t.step = 1;
				t.percent = toNum(t.step * 100 / t.steps);
				progressBar.update({
					step: t.percent
				});
				var p = {};
				p = MyAjax.addMainParams();
				p['q'] = '';
				p['sort'] = 'might';
				p['count'] = 20;
				p['page'] = t.step;
				new MyAjaxRequest('alliances', 'alliances', p, t.updateAlliances, false);
			},
			updateAlliances: function(rslt) {
				var t = MemberShips;
				var allianceList = rslt.dat.alliances;
				if (!rslt.ok) {
					if (t.callback) t.callback(rslt);
					return;
				}
				if (allianceList) {
					for (var m = 0; m < allianceList.length; m++) {
						var d = {
							name: allianceList[m].name,
							id: allianceList[m].id,
							count: allianceList[m].member_count,
							rank: allianceList[m].rank,
							might: allianceList[m].might,
							lord: allianceList[m].overlord.name,
							lord_id: allianceList[m].overlord.id,
							desc: allianceList[m].description
						};
						t.results.alliance.push(d);
					}
					if (rslt.dat.friend_ids) {
						for (var f = 0; f < rslt.dat.friend_ids.length; f++)
							t.results.friends.push(rslt.dat.friend_ids[f]);
					}
					if (rslt.dat.foe_ids) {
						for (var f = 0; f < rslt.dat.foe_ids.length; f++)
							t.results.foes.push(rslt.dat.foe_ids[f]);
					}
				}
				t.callNextPage();
			},
			callNextPage: function() {
				var t = MemberShips;
				t.step++;
				t.percent = toNum(t.step * 100 / t.steps);
				progressBar.update({
					step: t.percent
				});
				if (t.step > t.steps) {
					if (t.callback) {
						t.results.done = true;
						t.callback(t.results);
					}
					return;
				}
				setTimeout(function() {
					var p = {};
					p = MyAjax.addMainParams();
					p['q'] = '';
					p['sort'] = 'might';
					p['count'] = 20;
					p['page'] = t.step;
					new MyAjaxRequest('alliances', 'alliances', p, t.updateAlliances, false);
				}, MAP_DELAY * Math.floor(Math.random() * (-1) + 2));
			},
			fetchActivity: function(id, callback) {
				var t = MemberShips;
				t.results = {
					battle: []
				};
				t.callback = callback;
				t.steps = 10;
				t.step = 0;
				t.id = id;
				t.percent = toNum(t.step * 100 / t.steps);
				progressBar.update({
					step: t.percent
				});
				if (id) {
					var p = {};
					p = MyAjax.addMainParams();
					p['offset'] = 0;
					p['approved'] = 0;
					p['limit'] = 20;
					p['sort'] = 'might';
					var jsonType = 'alliances/' + id + '/activity';
					new MyAjaxRequest('activity', jsonType, p, t.updateActivity, false);
				}
			},
			updateActivity: function(rslt) {
				var t = MemberShips;
				var activityList = rslt.dat.activity;
				if (!rslt.ok || (rslt.errmsg)) {
					t.callback(rslt);
					return;
				}
				if (activityList) {
					for (var m = 0; m < activityList.length; m++) {
						var d = {
							won: activityList[m].alliance_member_won,
							id: activityList[m].battle_report_id,
							def: activityList[m].alliance_member_attacked,
							time: activityList[m].battle_time_i,
							aid: activityList[m].alliance_player.id,
							aname: activityList[m].alliance_player.name,
							amight: activityList[m].alliance_player.might,
							ax: activityList[m].alliance_player.capital_x,
							ay: activityList[m].alliance_player.capital_y,
							pname: activityList[m].non_alliance_player.name,
							pmight: activityList[m].non_alliance_player.might,
							px: activityList[m].non_alliance_player.capital_x,
							py: activityList[m].non_alliance_player.capital_y,
							palli: activityList[m].non_alliance_player.alliance.name
						};
						t.results.battle.push(d);
					}
				}
				t.callNextActivity();
			},
			callNextActivity: function() {
				var t = MemberShips;
				t.step++;
				t.percent = toNum(t.step * 100 / t.steps);
				progressBar.update({
					step: t.percent
				});
				if (t.step > t.steps) {
					if (t.callback) {
						t.results.done = true;
						t.callback(t.results);
					}
					return;
				}
				setTimeout(function() {
					var p = {};
					p = MyAjax.addMainParams();
					p['offset'] = toNum(t.step) * 20;
					p['approved'] = 0;
					p['limit'] = 20;
					p['sort'] = 'might';
					var jsonType = 'alliances/' + t.id + '/activity';
					new MyAjaxRequest('activity', jsonType, p, t.updateActivity, false);
				}, MAP_DELAY * Math.floor(Math.random() * (-1) + 2));
			}
		}
		/******************************** Messages package ***************************/
		var Messages = {
			readList: [],
			fetchTimer: null,
			mainTimer: 0,
			lastQueued: 0,
			unread_count: 0,
			total_count: 0,
			known_count: 0,
			checkBusy: false,
			battleReportListeners: [],
			alarmReportListeners: [],
			spyReportListeners: [],
			delete_queue: [],
			details: {},
			activity: {},
			/* Messages deletion */
			messageDeletion: false,
			readPagesTimer: null,
			pagesMessages: 0,
			pageReading: 0,
			toRead: [],
			idsToDelete: [],

			init: function() {
				var t = Messages;
				t.checkMessages({
					wait: 1000
				});
				window.addEventListener('unload', t.onUnload, false);
				t.mainTimer = setTimeout(t.messageTick, 1000);
			},

			messageTick: function() {
				var t = Messages;
				var found = false;
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
					for (var id in Data.marches[type]) {
						var march = Data.marches[type][id];
						if (march.status == 'retreating' && !march.has_report) found = true;
					}
				}
				clearTimeout(t.mainTimer);
				if (found && !t.messageDeletion) {
					t.checkMessages({
						category: (Data.options.disable_inbox ? 'reports' : 'all'),
						wait: Math.randRange(2000, 3000),
						bypass: false
					});
					t.mainTimer = setTimeout(t.messageTick, 5000);
				} else {
					if ((Data.options.tower.enabled || !Data.options.disable_inbox) && !t.messageDeletion) {
						var delay = (Data.options.disable_inbox ? 600000 : 60000);
						var tower_delay = (Data.options.tower.delay * Data.options.tower.unit * 1000);
						/*
						 * Do not check tower sentinel warning if currently
						 * under protection
						 */
						var protection_remaining = getProtectionTime() * 1000;
						if (tower_delay < protection_remaining) tower_delay = protection_remaining;
						if (Data.options.tower.enabled) delay = (tower_delay > delay ? delay : tower_delay);
						t.checkMessages({
							category: (Data.options.disable_inbox ? 'reports' : 'all'),
							wait: delay,
							bypass: true
						});
					}
					t.mainTimer = setTimeout(t.messageTick, 1000);
				}
			},

			deleteMessage: function(msgId) {
				var t = Messages;
				t.delete_queue.push(msgId);
				if (t.delete_queue.length >= Math.randRange(5, 12)) doit();

				function doit() {
					var t = Messages;
					MyAjax.messageDelete(t.delete_queue, function(rslt) {
						var t = Messages;
						t.delete_queue = [];
					});
				}
			},

			onUnload: function() {
				var t = Messages;
				if (t.delete_queue.length > 0) MyAjax.messageDelete(t.delete_queue);
			},

			newWarning : function(obj) {
				logit('Messages.newWarning --- Start');
				var t = Messages;
				t.checkMessages({
					category: (Data.options.disable_inbox ? 'reports' : 'all'),
					wait: 1,
					bypass: true
				});
				logit('Messages.newWarning --- End');
			},
			
			sendTchatMessage: function(msg, allianceId) {
				var ts=serverTime();
				var pid=Seed.player.id;
				var rid=SERVER_ID;
				var aid=allianceId;
				var ut=serverTime();
				var msgJSON = '{"data":{"message":"","timestamp":$TS$,"player_id":"$PID$","room":"realm_$RID$:alliance_$AID$","user_time":$UT$},"type":"chat_message"}';
				msgJSON = msgJSON.replace('$TS$',ts).replace('$PID$', pid).replace('$RID$',rid).replace('$AID$',aid).replace('$UT$', ut);
				Socket.write(msgJSON);
			},
			
			/* check for battle reports */
			checkMessages: function(options) {
				var t = Messages;
				if (t.battleReportListeners.length == 0 &&
					t.alarmReportListeners.length == 0 &&
					t.spyReportListeners.length == 0 &&
					Data.options.disable_inbox) return; /*
														 * Do not check messages
														 * if no active report
														 * listener and if inbox
														 * is disabled
														 */
				var category = (options.category || 'all').toLowerCase();
				var waitTime = options.wait || 20000;

				if (!RequestQueue.isPending('checkMessages', waitTime)) RequestQueue.add('checkMessages', function() {
					doit(category);
				}, waitTime, options.bypass);

				function doit(category) {
					MyAjax.messageList(category, 1, 12, function(rslt) {
						var t = Messages;
						if (rslt == null) return;
						var msgs = rslt.report_notifications;
						if (msgs == null) return;
						for (var i = msgs.length - 1; i >= 0; i--) {
							if (msgs[i].report_type === 'BattleReport' && !msgs[i].read_at && t.battleReportListeners.length != 0) {
								if (t.readList.indexOf(msgs[i].id) < 0) {
									t.readList.push(msgs[i].id);
								}
							}
							if (msgs[i].report_type === 'SpyReport' && !msgs[i].read_at && t.spyReportListeners.length != 0) {
								if (t.readList.indexOf(msgs[i].id) < 0) {
									t.readList.push(msgs[i].id);
								}
							}
							if (msgs[i].report_type === 'SentinelWarning' && (!msgs[i].read_at || Tabs.Tower.startup) && t.alarmReportListeners.length != 0) { /*
																																								 * &&
																																								 * Data.options.tower.enabled){
																																								 */
								var found = false;
								for (var j = 0; j < Data.options.messages_tower.length; j++) {
									if (Data.options.messages_tower[j].id == msgs[i].id) {
										found = true;
										break;
									}
								}
								if (!found) t.readList.push(msgs[i].id);
							}
						}
						clearTimeout(t.fetchTimer);
						if (t.readList.length > 0) t.fetchTimer = setTimeout(t.fetchNext, Math.randRange(2000, 4000));
					});
				}
			},
			fetchNext: function() {
				var t = Messages;
				var id = t.readList[0];
				if (!id || id == null) {
					verboseLog('Messages.fetchNext BAD MESSAGE ID:\n' + inspectObj(t.readList, 8, 1));
					return;
				}
				clearTimeout(t.fetchTimer);
				MyAjax.messageDetail(id, function(rslt) {
					var t = Messages;
					t.readList.shift();
					if (rslt && rslt.report_notification && rslt.report_notification.report_type === 'BattleReport') t.gotReport('battle', rslt);
					if (rslt && rslt.report_notification && rslt.report_notification.report_type === 'SpyReport') t.gotReport('spy', rslt);
					if (rslt && rslt.report_notification && rslt.report_notification.report_type === 'SentinelWarning') t.gotReport('alarm', rslt, id); /*
																																						 * &&
																																						 * Data.options.tower.enabled
																																						 */
					if (t.readList.length > 0) t.fetchTimer = setTimeout(t.fetchNext, Math.randRange(2000, 4000));
				});
			},
			gotReport: function(type, rpt, id) {
				var t = Messages,
					listeners = null;
				if (!rpt || !rpt.report) return;
				switch (type) {
					case 'battle':
						listeners = t.battleReportListeners;
						break;
					case 'spy':
						listeners = t.spyReportListeners;
						break;
					default:
						listeners = t.alarmReportListeners;
						break;
				}
				for (var i = 0; i < listeners.length; i++) {
					if (id) listeners[i](rpt, id);
					else listeners[i](rpt);
				}
			},
			removeReportListener: function(type, notify) {
				var t = Messages,
					listeners = null,
					counter = 0;
				switch (type) {
					case 'attacks':
					case 'waves':
					case 'multiple':
					case 'bookmark':
						listeners = t.battleReportListeners;
						counter = (Marches.count[type]);
						break;
					case 'spies':
						listeners = t.spyReportListeners;
						counter = (Marches.count[type]);
						break;
					default:
						listeners = t.alarmReportListeners;
						break;
				}
				var i = listeners.indexOf(notify);
				if (i >= 0) {
					if (counter == 0) listeners.splice(i, 1);
					else setTimeout(t.removeReportListener, 1000, type, notify);
				}
			},
			addAlarmReportListener: function(notify) {
				var i = Messages.alarmReportListeners.indexOf(notify);
				if (i <= 0) Messages.alarmReportListeners.push(notify);
			},
			addBattleReportListener: function(notify) {
				var i = Messages.battleReportListeners.indexOf(notify);
				if (i <= 0) Messages.battleReportListeners.push(notify);
			},
			addSpyReportListener: function(notify) {
				var i = Messages.spyReportListeners.indexOf(notify);
				if (i <= 0) Messages.spyReportListeners.push(notify);
			},

			/* Inbox functions */
			deleteSingleMsg: function(id, notify) {
				var t = Messages,
					ids = [];
				ids.push(id);
				MyAjax.messageDelete(ids, function(rslt) {
					var t = Messages;
					if (notify) notify(true);
				});
			},
			displayBattleReport: function(report, aname) {
				var rep = report.report;
				var att = rep.attacker;
				var def = rep.defender;
				var boLo =  rep.boost_logger;
				/* Battle report header section */
				var main_result = '';
				var sub_result = '';
				var is_defender = false;
				if (att.name == (aname || Seed.player.name)) {
					if (rep.winner == 'attacker') {
						main_result = 'victory';
						switch (rep.location.terrain) {
							case 'City':
								sub_result = 'attack-city-win';
								break;
							case 'Outpost':
								sub_result = 'attack-outpost-win';
								break;
							case 'AnthropusCamp':
								sub_result = 'attack-camp-win';
								break;
							default:
								sub_result = 'attack-wild-win';
								break;
						}
					} else {
						main_result = 'defeat';
						switch (rep.location.terrain) {
							case 'City':
								sub_result = 'attack-city-lose';
								break;
							case 'Outpost':
								sub_result = 'attack-outpost-lose';
								break;
							case 'AnthropusCamp':
								sub_result = 'attack-camp-lose';
								break;
							default:
								sub_result = 'attack-wild-lose';
								break;
						}
					}
				} else {
					is_defender = true;
					if (rep.winner == 'defender') {
						main_result = 'victory';
						switch (rep.location.terrain) {
							case 'City':
								sub_result = 'defend-city-win';
								break;
							case 'Outpost':
								sub_result = 'defend-outpost-win';
								break;
							default:
								sub_result = 'defend-wild-win';
								break;
						}
					} else {
						main_result = 'defeat';
						switch (rep.location.terrain) {
							case 'City':
								sub_result = 'defend-city-lose';
								break;
							case 'Outpost':
								sub_result = 'defend-outpost-lose';
								break;
							default:
								sub_result = 'defend-wild-lose';
								break;
						}
					}
				}
				var m = '<table style="margin-top:3px" width=98%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><b><span class=' + UID['red'] + '><b>' + translate(main_result).toUpperCase() + '</b></span></b> - <b>' + translate(sub_result) + '</b></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=98%>' + '	<tr valign=top align=left>' + '		<td width=49%>' + '			<label>' + translate('report-no') + ' :</label><b>' + report.id + '</b><br>' + '			<label>' + new Date(report.created_at * 1000).myString() + '</label><br><br>' + '			<label>' + translate(rep.location.terrain) + ' ' + translate('level') + ' ' + rep.location.level + '</label><br>';
				var location = (rep.location.terrain == 'Outpost' ? translate(rep.location.title) : (rep.location.terrain == 'City' ? rep.location.title : ''));
				if (location != '') {
					m += '			<table width=100%><tr>' + '				<td width=5%><label>' + translate('location') + ' : </td><td width=95%><b>' + location + '</b></td></tr>' + '			<tr><td></td><td><label><b>' + rep.location.x + ', ' + rep.location.y + '</b></label></td></tr>' + '			</table><br>';
				} else {
					m += '			<label>' + translate('location') + ' : <b>' + rep.location.x + ', ' + rep.location.y + '</b></label><br>';
				}
				if (def.great_dragon) {
					var dmg = def.great_dragon.starting_life - def.great_dragon.ending_life;
					var life = ((dmg / def.great_dragon.starting_life) * 100).toFixed(2);
					var scales = '',
						scales_bonus = '';
					var armor = '',
						armor_bonus = '';
					if (def.buffs && def.buffs[0]) {
						scales = (def.buffs ? translate(def.buffs[0].name) : '');
						for (var s in def.buffs[0].stats) {
							if (def.buffs[0].stats[s] > 0)
								scales_bonus += translate(s) + ' +' + numf(def.buffs[0].stats[s], ' ') + ', ';
						}
						scales_bonus = scales_bonus.substr(0, scales_bonus.length - 2);
					}
					if (def.buffs && def.buffs[1]) {
						armor = (def.buffs ? translate(def.buffs[1].name) : '');
						for (var s in def.buffs[1].stats) {
							if (def.buffs[1].stats[s] > 0)
								armor_bonus += translate(s) + ' +' + numf(def.buffs[0].stats[s], ' ') + ', ';
						}
						armor_bonus = armor_bonus.substr(0, armor_bonus.length - 2);
					}
					m += '		<table width=100%><tr>' + '			<td width=20%>' + translate('GreatDragon') + ' ' + def.great_dragon.level + ' : </td>' + '			<td width=80%><b>' + numf(dmg, ' ') + '</b>' + translate(' damages taken') + '</td></tr>' + '		<tr><td></td><td><b>' + life + '%</b> ' + translate('life lost') + '</td></tr>';
					if (scales != '') m += '<tr><td colspan=2 style="white-space:normal;"><b>' + scales + '</b>&nbsp;&nbsp;(' + scales_bonus + ')</td></tr>';
					if (armor != '') m += '<tr><td colspan=2 style="white-space:normal;"><b>' + armor + '</b>&nbsp;&nbsp;(' + armor_bonus + ')</td></tr>';
					m += '		</table><br>';
				}
				m += '		</td>' + '		<td width=2%>&nbsp</td>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '			<tr class=' + UID['row_headers'] + '><td colspan=2 class=left>' + translate('Resources') + '</td></tr>';
				var res = rep.spoils.resources;
				for (var r = 0; r < transportable_resource_types.length; r++) {
					var desc = transportable_resource_types[r];
					
					var found = false;
					if (res) {
						for (var p in res) { 
							if (p == transportable_resource_types[r]) {
								var res_value = (toNum(res[p]) > 0 ? '<b>' + numf(is_defender ? toNum(res[p]) * -1 : toNum(res[p])) + '</b>' : 0);
								m += '		<tr><td class=left width=50%>' + translate(desc) + '</td><td align=right width=50%>' + res_value + '</td></tr>';
								found = true;
							}
						}
					}
					if (!found && desc != 'blue_energy' && desc != 'lunar_energy' && desc !='enchanting') {
						m += '		<tr><td class=left width=50%>' + translate(desc) + '</td><td align=right width=50%>0</td></tr>';
					}
				}
				var kitm = rep.spoils.kill_items;
				if (kitm) {
					for (var p in kitm)
						m += '		<tr><td class=left width=50%>' + translate(p) + '</td><td align=right width=50%>' + numf(toNum(kitm[p]), ' ') + '</td></tr>';
				}
				var itm = rep.spoils.items;
				if (itm && itm.length > 0) {
					for (var o = 0; o < itm.length; o++)
						m += '		<tr><td class=left colspan=2>' + translate(itm[o]) + '</td></tr>';
				} else {
					m += '		<tr><td class=left colspan=2>' + translate('battle-report-no-items') + '</td></tr>';
				}
				m += '			</table>' + '		</td>' + '	</tr>' + '</table><br>' + '<div style="height:350px; max-height:350px; overflow-y:auto; white-space:pre-wrap;" width=98%>';
				/* Battle report troops section */
				if (att.location) att_loc = att.location.x + ', ' + att.location.y;
				else att_loc = rep.location.x + ', ' + rep.location.y;
				if (def.location) def_loc = def.location.x + ', ' + def.location.y;
				else def_loc = rep.location.x + ', ' + rep.location.y;
				m += '<table style="margin-top:1px" width=98%>' + '	<tr valign=top align=center>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr>' + '					<td valign=middle colspan=3><b>' + att.name + '</b> (' + att_loc + ')&nbsp;<span class=' + UID['red'] + '>' + ((rep.winner == 'attacker') ? translate('victorious') : translate('defeated')) + '</span></td>' + '				</tr><tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=40%><b>' + translate('Troops') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Fought') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('lost') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Might') + '</b></td>' + '				</tr>';
				if (att.units) {
					var total_might_lost = 0;
					for (var p in att.units) {
						if (p && att.units[p]) {
							var lost_troops_nb = (att.units[p][0] != att.units[p][1] ? att.units[p][0] - att.units[p][1] : 0);
							var lost_troops = (att.units[p][0] != att.units[p][1] ? '<span class=' + UID['red'] + '><b>' + numf(att.units[p][0] - att.units[p][1]) + '</b></span>' : 0);
							var total_might = 0;

							for (var i = 0; i < all_unit_types.length; i++) {
								if (all_unit_types[i] == p) {
									total_might = lost_troops_nb * Seed.stats.unit[all_unit_types[i]].power;
									total_might_lost += total_might;
									break;
								}
							}

							m += '			<tr>' + '				<td class=left>' + translate(p) + '</td>' + '				<td align=right>' + numf(att.units[p][0]) + '</td>' + '				<td align=right>' + lost_troops + '</td>' + '				<td align=right>' + numf(total_might) + '</td>' + '			</tr>';
						}
					}
					m += '	<tr>' + '		<td class=left><b>' + translate('Total lost') + '</b></td>' + '		<td align=right colspan=3><span class=' + UID['green'] + '><b>' + numf(total_might_lost) + '</b></span></td>' + '	</tr>';
					if(rep.battle_record[1]) {
						if(rep.battle_record[1].march) {
							var typeAb = '';
							switch (rep.attacker.great_dragon_info.type) {
								case 'Dragons::GreatDragon':
									break;
								case 'Dragons::WaterDragon':
									typeAb = 'water';
									break;
								case 'Dragons::StoneDragon':
									typeAb = 'stone';
									break;
								case 'Dragons::FireDragon':
									typeAb = 'fire';
									break;
								case 'Dragons::WindDragon':
									typeAb = 'wind';
									break;
								case 'Dragons::SpectralDragon':
									break;
								case 'Dragons::IceDragon':
									typeAb = 'ice';
									break;
								case 'Dragons::SwampDragon':
									typeAb = 'swamp';
									break;
								case 'Dragons::ForestDragon':
									typeAb = 'forest';
									break;
								case 'Dragons::DesertDragon':
									typeAb = 'desert';
									break;
								case 'Dragons::ChronoDragon':
									typeAb = 'chrono';
									break;
								case 'Dragons::KaiserDragon':
									typeAb = 'kaiser';
									break;
								case 'Dragons::CaveDragon':
									typeAb = 'cave';
									break;
								case 'Dragons::LunaDragon':
									typeAb = 'luna';
									break;
								case 'Dragons::ColossusDragon':
									typeAb = 'colossus';
									break;
							}
	
							for(var ba=0 ; ba<rep.battle_record[1].march.length ; ba++) {
								m 	+= '	<tr>' + '<td class=left><b>' + translate('battle-arts') + '</b></td>' 
									+ '<td class=left colspan=2>' + translate('dragonpower-' + rep.battle_record[1].march[ba].name.replace(/_/g, '')) + '</td>' 
									+ '<td class=left>' 
									+ '	<span class="' + UID['information'] + '" style="width:auto !important;" title="' + (translate(typeAb+'dragonpower-'+rep.battle_record[1].march[ba].slot+'-report')).replace('%num', numf(rep.battle_record[1].march[ba].amount, ' ')).replace(/"/g, '\"') + '">&nbsp;&nbsp;&nbsp;</span>';
									+ '</td></tr>';
							}
						}
					}
				}
				m += '			</table>' + '		</td>' + '		<td width=2%>&nbsp</td>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr>' + '					<td valign=middle colspan=3><b>' + def.name + '</b> (' + def_loc + ')&nbsp;<span class=' + UID['red'] + '>' + ((rep.winner != 'attacker') ? translate('victorious') : translate('defeated')) + '</span></td>' + '				</tr><tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=40%><b>' + translate('Troops') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Fought') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('lost') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Might') + '</b></td>' + '				</tr>';
				if (def.units) {
					var total_might_lost = 0;
					for (var p in def.units) {
						if (p && def.units[p]) {
							var name = translate(p),
								multiplier = 1;
							if (def.anthropus) {
								switch (p) {
									case 'Porter':
										name = "Brats";
										multiplier = 3;
										break;
									case 'Conscript':
										name = "Cannibals";
										break;
									case 'Spy':
										name = "Stench";
										break;
									case 'Halberdsman':
										name = "She-Devils";
										multiplier = 2;
										break;
									case 'Minotaur':
										name = "Clubbers";
										multiplier = 2;
										break;
									case 'Longbowman':
										name = "Hurlers";
										multiplier = 3;
										break;
									case 'SwiftStrikeDragon':
										name = "Shredders";
										multiplier = 4;
										break;
									case 'BattleDragon':
										name = "Chieftan";
										multiplier = 4;
										break;
									case 'ArmoredTransport':
										name = "Shaggies";
										multiplier = 5;
										break;
									case 'Giant':
										name = "Bloods";
										multiplier = 5;
										break;
									case 'FireMirror':
										name = "Ragers";
										multiplier = 10;
										break;
									case 'AquaTroop':
										name = "Smash";
										multiplier = 5;
										break;
									case 'StoneTroop':
										name = "Launchers";
										multiplier = 5;
										break;
									case 'FireTroop':
										name = "Gnashers";
										multiplier = 5;
										break;
									case 'WindTroop':
										name = "Divers";
										multiplier = 5;
										break;
									default:
										name = translate(p);
										break;
								}
							}
							var qty = def.units[p][0] * multiplier;
							var survival = def.units[p][1] * multiplier;

							var lost_troops_nb = (qty != survival ? qty - survival : 0);
							var lost_troops = (qty != survival ? '<span class=' + UID['red'] + '><b>' + numf(qty - survival) + '</b></span>' : 0);

							var total_might = 0;

							for (var i = 0; i < all_unit_types.length; i++) {
								if (all_unit_types[i] == p) {
									total_might = lost_troops_nb * Seed.stats.unit[all_unit_types[i]].power;
									total_might_lost += total_might;
									break;
								}
							}

							m += '			<tr>' + '				<td class=left>' + name + '</td>' + '				<td align=right>' + numf(qty) + '</td>' + '				<td align=right>' + lost_troops + '</td>' + '				<td align=right>' + numf(total_might) + '</td>' + '			</tr>';
						}
					}
					m += '	<tr>' + '		<td class=left><b>' + translate('Total lost') + '</b></td>' + '		<td align=right colspan=3><span class=' + UID['green'] + '><b>' + numf(total_might_lost) + '</b></span></td>' + '	</tr>';
				}
				m += '			</table>' + '		</td>' + '	</tr>' + '</table>';
				/* Boosts section */
				if(boLo || boLo.march || boLo.target) {
					m += '<table style="margin-top:1px" width=98%>' + '	<tr valign=top align=center>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '><td colspan=3 class=left>' + translate('boost-combat') + '</td></tr>';
					if (boLo.march) {
						for (var o in boLo.march) {
							var rate = ((boLo.march[o] < 5) ? numf(Math.round(boLo.march[o] * 100)) + '%' : numf(boLo.march[o]));
							var name = translateByKey('name', o.replace(/ |_/g, '-'), 'boosts').replace(':', '');
							if ((name.indexOf('n%') <= 0) && (name.indexOf('%boost%') <= 0))
								m += '			<tr><td align=left colspan=2>' + name + '</td><td><b>' + rate + '</b></td></tr>';
							else {
								if (name.indexOf('n%') > 0) name = name.replace('n%', rate);
								if (name.indexOf('%boost%') > 0) name = name.replace('%boost%', rate);
								m += '			<tr><td align=left colspan=3>' + name + '</td></tr>';
							}
						}
					}
					m += '			</table>' + '		</td>' + '		<td width=2%>&nbsp</td>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '><td colspan=3 class=left>' + translate('boost-combat') + '</td></tr>';
					if (boLo.target) {
						for (var o in boLo.target) {
							var rate = ((boLo.target[o] < 5) ? numf(Math.round(boLo.target[o] * 100)) + '%' : numf(boLo.target[o]));
							var name = translateByKey('name', o.replace(/ |_/g, '-'), 'boosts').replace(':', '');
							if ((name.indexOf('n%') <= 0) && (name.indexOf('%boost%') <= 0))
								m += '			<tr><td align=left colspan=2>' + name + '</td><td><b>' + rate + '</b></td></tr>';
							else {
								if (name.indexOf('n%') > 0) name = name.replace('n%', rate);
								if (name.indexOf('%boost%') > 0) name = name.replace('%boost%', rate);
								m += '			<tr><td align=left colspan=3>' + name + '</td></tr>';
							}
						}
					}
					m += '			</table>' + '		</td>' + '	</tr>' + '</table>';
				}
				
				/* Bonus items section */
				if ((att.items && att.items.length > 0) || (def.items && def.items.length > 0)) {
					m += '<table style="margin-top:1px" width=98%>' + '	<tr valign=top align=center>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '><td colspan=3 class=left>' + translate('bonus-items') + '</td></tr>';
					if (att.items && att.items.length > 0) {
						for (var o = 0; o < att.items.length; o++)
							m += '			<tr><td align=left colspan=3>' + translate(att.items[o]) + '</td></tr>';
					}
					m += '			</table>' + '		</td>' + '		<td width=2%>&nbsp</td>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '><td colspan=3 class=left>' + translate('bonus-items') + '</td></tr>';
					if (def.items && def.items.length > 0) {
						for (var o = 0; o < def.items.length; o++)
							m += '			<tr><td align=left colspan=3>' + translate(def.items[o]) + '</td></tr>';
					}
					m += '			</table>' + '		</td>' + '	</tr>' + '</table>';
				}
				/* Battle report souls section */
				if (att.souls || def.souls) {
					m += '<table style="margin-top:1px" width=98%>' + '	<tr valign=top align=center>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=70%><b>' + translate('Troops') + '</b></td>' + '					<td valign=middle width=30%><b>' + translate('Souls') + '</b></td>' + '				</tr>';
					if (att.souls) {
						var mausoleumsFull = false;
						if (att.souls.soul_capacity == true) {
							mausoleumsFull = true;
							delete att.souls.soul_capacity;
						}
						for (var p in att.souls) {
							if (p && !isNaN(att.souls[p]) && att.souls[p] > 0) {
								m += '			<tr>' + '				<td class=left>' + translate(p) + '</td>' + '				<td align=right>' + numf(att.souls[p]) + '</td>' + '			</tr>';
							}
						}
						if (mausoleumsFull) {
							m += '	<tr>' + '		<td class=left colspan=2><span class=' + UID['red'] + '><b>' + translate('mausoleums-full') + '</b></span></td>' + '	</tr>';
						}
					}
					m += '			</table>' + '		</td>' + '		<td width=2%>&nbsp</td>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=60%><b>' + translate('Troops') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Souls') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Reaped') + '</b></td>' + '				</tr>';
					if (def.souls) {
						var mausoleumsFull = false;
						if (def.souls.soul_capacity == true) {
							mausoleumsFull = true;
							delete def.souls.soul_capacity;
						}
						for (var p in def.souls) {
							if (p && !isNaN(def.souls[p]) && def.souls[p] > 0) {
								var souls = def.souls[p];
								var reaped = 0;
								if (def.souls.reaped_souls && def.souls.reaped_souls[p] && !isNaN(def.souls.reaped_souls[p]) && def.souls.reaped_souls[p] > 0) {
									reaped = def.souls.reaped_souls[p];
									souls -= def.souls.reaped_souls[p];
									if (souls < 0) souls = 0;
								}
								m += '			<tr>' + '				<td class=left>' + translate(p) + '</td>' + '				<td align=right>' + numf(souls) + '</td>' + '				<td align=right>' + numf(reaped) + '</td>' + '			</tr>';
							}
						}
						if (mausoleumsFull) {
							m += '	<tr>' + '		<td class=left colspan=3><span class=' + UID['red'] + '><b>' + translate('mausoleums-full') + '</b></span></td>' + '	</tr>';
						}
					}
					m += '			</table>' + '		</td>' + '	</tr>' + '</table>';
				}
				m += '</div>';
				return m;
			},
			displayBreedingReport: function(report) {
				var rep = report.report;
				var m = '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><span class=' + UID['red'] + '><b>' + translate('breeding-report').toUpperCase() + '</b></span></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=left>' + '		<td width=70%>' + '			<label><b>' + translate('breeding-report-description') + '</b></label></td>' + '		<td width=30%>' + '			<label>' + translate('report-no') + ' :</label><b>' + report.id + '</b><br>' + '			<label>' + new Date(report.created_at * 1000).myString() + '</label></td>' + '	</tr>' + '</table><br><br>' + '<div style="height:360px; max-height:360px; overflow-y:auto; white-space:pre-wrap;" width=100%>';
				var dragon = rep.egg;
				for (var i in dragon) {
					var dragon_name = dragon[i].type.substring(dragon[i].type.indexOf('::') + 2);
					dragon_name = (dragon_name == 'CityGreatDragon') ? 'GreatDragon' : dragon_name;
					var dragon_rank = sanctuaryDragonRank[dragon[i].rank];
					dragon_type = dragon[i].gender + '-' + dragon_rank;
					dragon_subtype = ((i == 'city_great_dragon') ? 'great_dragon' : i).replace(/ |_/g, '-');

					m += '<center><table style="margin-top:3px" width=100%>' + '	<tr valign=top>' + '		<td width=100% align=center>' + '			<table class=' + UID['row_style'] + ' width=92%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=100% colspan=2><b>' + translateByKey(dragon_subtype, 'rank-' + dragon_type, 'dragons') + '</b></td>' + '				</tr><tr style="border-bottom: 1px solid #898989;">' + '					<td colspan=2>' + translate(dragon[i].gender) + ' ' + translate('level') + ' ' + dragon[i].level + '</td>' + '				</tr>';
					if (dragon[i].abilities || obj.length > 0) {
						var abi = dragon[i].abilities;
						for (var a = 0; a < abi.length; a++) {
							var name = translateByKey('name', abi[a].name.replace(/ |_/g, '-'), 'boosts') + ' ' + abi[a].level;
							var desc = translateByKey('description', abi[a].name.replace(/ |_/g, '-'), 'boosts');
							var rate = ((abi[a].rate < 1) ? numf(abi[a].rate * 100) + '%' : numf(abi[a].rate));
							if (desc.indexOf('n%') > 0) desc = desc.replace('n%', rate);
							if (desc.indexOf('%boost%') > 0) desc = desc.replace('%boost%', rate);
							m += '<tr><td width=40%><b>' + name + '</b></td><td width=60%><span class=jewel>' + desc + '</span></td></tr>';
						}
					}
					m += '			</table>' + '		</td>' + '	</tr>' + '</table></center>';
				}
				m += '</div>';
				return m;
			},
			displayCurseReport: function(report) {
				var t = Messages;
				var rep = report.report;
				var body = translate('curse-report-received-body');
				if (typeof body == 'object') body = body['from-non-alliance'];
				var m = '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><span class=' + UID['red'] + '><b>' + translate('curse-report-received').toUpperCase() + '</b></span></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><b>' + translate('curse-report-received-subtitle') + '</b></td>' + '	</tr><tr><td>&nbsp;</td>' + '	</tr><tr valign=top align=left>' + '		<td><label>' + translate('report-no') + ' :</label><b>' + report.id + '</b></td>' + '	</tr><tr valign=top align=left>' + '		<td><label>' + new Date(report.created_at * 1000).myString() + '</label></td>' + '	</tr>' + '</table><br><br>' + '<center><div style="width:90%; max-width:90%; white-space:pre-wrap;" align=left>' + body.replace('$PlayerName$', '<b>' + rep.cursor_name + '</b>').replace('$ResourceName$', '<b>' + translate(rep.resource_affected) + '</b>').replace('$ResourceName$', '<b>' + translate(rep.resource_affected) + '</b>') + '</div></center>';
				return m;
			},
			displayHatchingReport: function(report) {
				var rep = report.report;
				var m = '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><span class=' + UID['red'] + '><b>' + translate('hatching-report').toUpperCase() + '</b></span></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=left>' + '		<td width=70%>' + '			<label><b>' + translate('hatching-report-description') + '</b></label></td>' + '		<td width=30%>' + '			<label>' + translate('report-no') + ' :</label><b>' + report.id + '</b><br>' + '			<label>' + new Date(report.created_at * 1000).myString() + '</label></td>' + '	</tr>' + '</table><br><br>' + '<div style="height:360px; max-height:360px; overflow-y:auto; white-space:pre-wrap;" width=100%>';
				var dragon = rep.dragon;
				for (var i in dragon) {
					var dragon_name = dragon[i].type.substring(dragon[i].type.indexOf('::') + 2);
					dragon_name = (dragon_name == 'CityGreatDragon') ? 'GreatDragon' : dragon_name;
					var dragon_rank = sanctuaryDragonRank[dragon[i].rank];
					dragon_type = dragon[i].gender + '-' + dragon_rank;
					dragon_subtype = ((i == 'city_great_dragon') ? 'great_dragon' : i).replace(/ |_/g, '-');

					m += '<center><table style="margin-top:3px" width=100%>' + '	<tr valign=top>' + '		<td width=100% align=center>' + '			<table class=' + UID['row_style'] + ' width=92%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=100% colspan=2><b>' + translateByKey(dragon_subtype, 'rank-' + dragon_type, 'dragons') + '</b></td>' + '				</tr><tr style="border-bottom: 1px solid #898989;">' + '					<td colspan=2>' + translate(dragon[i].gender) + ' ' + translate('level') + ' ' + dragon[i].level + '</td>' + '				</tr>';
					if (dragon[i].abilities || obj.length > 0) {
						var abi = dragon[i].abilities;
						for (var a = 0; a < abi.length; a++) {
							var name = translateByKey('name', abi[a].name.replace(/ |_/g, '-'), 'boosts') + ' ' + abi[a].level;
							var desc = translateByKey('description', abi[a].name.replace(/ |_/g, '-'), 'boosts');
							var rate = ((abi[a].rate < 1) ? numf(abi[a].rate * 100) + '%' : numf(abi[a].rate));
							if (desc.indexOf('n%') > 0) desc = desc.replace('n%', rate);
							if (desc.indexOf('%boost%') > 0) desc = desc.replace('%boost%', rate);
							m += '<tr><td width=40%><b>' + name + '</b></td><td width=60%><span class=jewel>' + desc + '</span></td></tr>';
						}
					}
					m += '			</table>' + '		</td>' + '	</tr>' + '</table></center>';
				}
				m += '</div>';
				return m;
			},
			displayMessage: function(report) {
				var t = Messages;
				var rep = report.report;
				var from = '<b>' + (report.from ? report.from.name : translate('system-title')).toUpperCase() + '</b>' + ((report.from && report.from.alliance) ? ' / ' + report.from.alliance.name : '');
				var to = (rep.alliance ? rep.alliance.name : Seed.player.name);
				var m = '<table style="margin-top:3px" width=95% align=center>' + '	<tr valign=top align=center>' + '		<td width=100%><br><b>' + from + '</b></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width="520px" align=center>' + '	<tr valign=top>' + '		<td width=70% align=left><b>' + translate('To') + ' : </b>' + to + '<br>' + '		<td width=30% align=right><b>' + translate('Subject') + ' : </b>' + new Date(report.created_at * 1000).myString() + '</td>' + '	</tr><tr valign=top>' + '		<td colspan=2 align=left style="white-space:pre-wrap"><b>' + translate('Subject') + ' : </b>' + report.summary + '</td>' + '	</tr>' + '</table><br>' + '<center><div class=' + UID['status_ticker'] + '	 style="height:470px; max-height:470px; width:520px; max-width:520px; overflow-y:auto; white-space:pre-wrap; background-color:white;" align=left>' + rep.message + '</div></center>';
				return m;
			},
			displayReinforcement: function(report) {
				var rep = report.report;
				var from = rep.sender;
				var from_loc = from.location;
				var to = rep.recipient;
				var to_loc = rep.location;
				var m = '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><span class=' + UID['red'] + '><b>' + translate('reinforcements-have-arrived').toUpperCase() + '</b></span></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=left>' + '		<td width=70%>' + '			<label>' + translate('From') + ' : </label><b>' + from.name + '</b>&nbsp;(' + from_loc.title + ' ' + translate('at') + ' ' + from_loc.x + ' / ' + from_loc.y + ')</td>' + '		<td width=30%>' + '			<label>' + translate('report-no') + ' :</label><b>' + report.id + '</b></td>' + '	</tr><tr valign=top align=left>' + '		<td width=70%>&nbsp;</td>' + '		<td width=30%>' + '			<label>' + new Date(report.created_at * 1000).myString() + '</label></td>' + '	</tr><tr valign=top align=left>' + '		<td colspan=2>' + '			<label>' + translate('To') + ' : </label><b>' + to.name + '</b>&nbsp;(' + (to_loc.terrain == 'Outpost' ? translate(to_loc.title) : to_loc.title) + ' ' + translate('at') + ' ' + to_loc.x + ' / ' + to_loc.y + ')</td>' + '	</tr>' + '</table><br><br>' + '<div style="height:360px; max-height:360px; overflow-y:auto; white-space:pre-wrap;" width=100%>' + '<center><table style="margin-top:3px" width=60%>' + '	<tr valign=top>' + '		<td width=100%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=60%><b>' + translate('Troops') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Quantity') + '</b></td>' + '				</tr>';
				if (from.units) {
					for (var p in from.units) {
						if (p && from.units[p]) {
							m += '			<tr>' + '				<td class=left>' + translate(p) + '</td>' + '				<td align=right>' + numf(from.units[p][0]) + '</td>' + '			</tr>';
						}
					}
				}
				m += '			</table>' + '		</td>' + '	</tr>' + '</table></center>' + '</div>';
				return m;
			},
			displaySentinelReport: function(report) {
				var t = Messages;
				var rep = report.report;
				var from = '<b>Dragon of Atlantis</b>';
				var to = Seed.player.name;
				var m = '<table style="margin-top:3px" width=95% align=center>' + '	<tr valign=top align=center>' + '		<td width=100%><br><b>' + from + '</b></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width="520px" align=center>' + '	<tr valign=top>' + '		<td width=70% align=left><b>' + translate('To') + ' : </b>' + to + '<br>' + '		<td width=30% align=right><b>' + translate('Subject') + ' : </b>' + new Date(report.created_at * 1000).myString() + '</td>' + '	</tr><tr valign=top>' + '		<td colspan=2 align=left style="white-space:pre-wrap"><b>' + translate('Subject') + ' : </b>' + report.summary + '</td>' + '	</tr>' + '</table><br>' + '<center><div class=' + UID['status_ticker'] + '	 style="height:470px; max-height:470px; width:520px; max-width:520px; overflow-y:auto; white-space:pre-wrap; background-color:white;" align=left>';
				if (rep.warnings) {
					var warn = rep.warnings,
						attacker = '',
						verb = '',
						city_name = Seed.cities[CAPITAL.id].name;
					if (warn.attacker_name) attacker = warn.attacker_name;
					if (warn.attacker_title && warn.attacker_title.alliance) {
						if (attacker) attacker = attacker + ' / ' + warn.attacker_title.alliance;
						else attacker = warn.attacker_title.alliance;
					}
					if (warn.march_type && warn.march_type == 'SpyMarch') verb = translate('sentinel-warning-verb-spy');
					else verb = translate('sentinel-warning-verb-attack');
					if (warn.outpost_attack) {
						var found = false;
						for (var cityIdx = 0; cityIdx < Seed.cities.length && !found; ++cityIdx) {
							if (Seed.cities[cityIdx] && Seed.cities[cityIdx].id == warn.march_incoming) {
								if (Seed.cities[cityIdx].type == 'Outpost')
									city_name = translate(Seed.cities[cityIdx].outpost_type);
								else city_name = Seed.cities[cityIdx].name;
								found = true;
							}
						}
					}

					m += '	<br>' + translate('sentinel-warning-march-incoming').replace('$CITY_NAME$', '<b>' + city_name + '</b>') + '	<br><br>' + translate('sentinel-warning-march-type').replace('$MARCH_VERB$', '<b>' + verb + '</b>');
					if (warn.march_arrival_time)
						m += '	<br><br>' + translate('sentinel-warning-march-arrival-time').replace('$ARRIVES_AT$', '<b>' + warn.march_arrival_time + '</b>');
					if (warn.attacker_coords)
						m += '	<br><br>' + translate('sentinel-warning-attacker-coords').replace('$CITY_X$', '<b>' + warn.attacker_coords.x + '</b>&nbsp;').replace('$CITY_Y$', '&nbsp;<b>' + warn.attacker_coords.y + '</b>');
					if (warn.attacker_units) {
						var units = [],
							troops = '';
						for (var tr in warn.attacker_units) {
							var unit = '- ' + numf(warn.attacker_units[tr], ' ') + ' ' + translate(tr);
							units.push(unit);
						}
						if (units.length > 0) troops = units.join('<br>');
						if (troops) m += '	<br><br>' + translate('sentinel-warning-attacker-types').replace('$UNITS$', '<br><b>' + troops + '</b>');
					}
					if (!is_null(attacker)) m += '<br><br>' + translate('sentinel-warning-attacker-name').replace('$ATTACKER_RACE$', '<b>' + warn.attacker_title.race + '</b>').replace('$ATTACKER_NAME$', '<b>' + attacker + '</b>');
				}
				m += '<br><br>' + translate('sentinel-warning-prepare-for-battle') + '</div></center>';
				return m;
			},
			displaySpyReport: function(report) {
				var rep = report.report;
				var att = rep.attacker;
				var def = rep.defender;
				/* Battle report header section */
				var main_result = '';
				var sub_result = '';
				var is_defender = false;
				var location = (rep.location.terrain == 'Outpost' ? translate(rep.location.title) : (rep.location.terrain == 'City' ? rep.location.title : ''));
				if (location == '')
					location = translate(rep.location.terrain) + ' ' + translate('level') + ' ' + rep.location.level;
				var m = '<table style="margin-top:3px" width=98%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><b><span class=' + UID['red'] + '><b>' + translate('spy-report-title').toUpperCase() + '</b></span></b></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=98%>' + '	<tr valign=top>' + '		<td width=50% align=left><label>' + translate('report-no') + ' :</label><b>' + report.id + '</b></td>' + '		<td width=50% align=right><label>' + translate('location') + ' :</label><b>' + location + '</b></td>' + '	</tr><tr valign=top>' + '		<td width=50% align=left><label>' + new Date(report.created_at * 1000).myString() + '</label></td>' + '		<td width=50% align=right><b>' + rep.location.x + ' / ' + rep.location.y + '</b></td>' + '	</tr>' + '</table><br><br>'
				/* Battle report troops section */
				+ '<table style="margin-top:3px" width=98%>' + '	<tr valign=top align=center>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr>' + '					<td valign=middle colspan=3><b>' + att.name + '</b>&nbsp;<span class=' + UID['red'] + '>' + ((rep.winner == 'attacker') ? translate('victorious') : translate('defeated')) + '</span></td>' + '				</tr><tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=60%><b>' + translate('Troops') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Fought') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('lost') + '</b></td>' + '				</tr>';
				if (att.units) {
					for (var p in att.units) {
						if (p && att.units[p]) {
							var lost_troops = (att.units[p][0] != att.units[p][1] ? '<span class=' + UID['red'] + '><b>' + numf(att.units[p][0] - att.units[p][1]) + '</b></span>' : 0);
							m += '			<tr>' + '				<td class=left>' + translate(p) + '</td>' + '				<td align=right>' + numf(att.units[p][0]) + '</td>' + '				<td align=right>' + lost_troops + '</td>' + '			</tr>';
						}
					}
				}
				m += '			</table>' + '		</td>' + '		<td width=2%>&nbsp</td>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr>' + '					<td valign=middle colspan=3><b>' + def.name + '</b>&nbsp;<span class=' + UID['red'] + '>' + ((rep.winner != 'attacker') ? translate('victorious') : translate('defeated')) + '</span></td>' + '				</tr><tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=60%><b>' + translate('Troops') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Fought') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('lost') + '</b></td>' + '				</tr>';
				if (def.units) {
					for (var p in def.units) {
						if (p && def.units[p]) {
							var name = translate(p),
								multiplier = 1;
							if (def.anthropus) {
								switch (p) {
									case 'Porter':
										name = "Brats";
										multiplier = 3;
										break;
									case 'Conscript':
										name = "Cannibals";
										break;
									case 'Spy':
										name = "Stench";
										break;
									case 'Halberdsman':
										name = "She-Devils";
										multiplier = 2;
										break;
									case 'Minotaur':
										name = "Clubbers";
										multiplier = 2;
										break;
									case 'Longbowman':
										name = "Hurlers";
										multiplier = 3;
										break;
									case 'SwiftStrikeDragon':
										name = "Shredders";
										multiplier = 4;
										break;
									case 'BattleDragon':
										name = "Chieftan";
										multiplier = 4;
										break;
									case 'ArmoredTransport':
										name = "Shaggies";
										multiplier = 5;
										break;
									case 'Giant':
										name = "Bloods";
										multiplier = 5;
										break;
									case 'FireMirror':
						name = "Ragers";
										multiplier = 10;
										break;
									case 'AquaTroop':
										name = "Smash";
										multiplier = 5;
										break;
									case 'StoneTroop':
										name = "Launchers";
										multiplier = 5;
										break;
									case 'FireTroop':
										name = "Gnashers";
										multiplier = 5;
										break;
									case 'WindTroop':
										name = "Divers";
										multiplier = 5;
										break;
									default:
										name = translate(p);
										break;
								}
							}
							var qty = def.units[p][0] * multiplier;
							var survival = def.units[p][1] * multiplier;
							var lost_troops = (qty != survival ? '<span class=' + UID['red'] + '><b>' + numf(qty - survival) + '</b></span>' : 0);
							m += '			<tr>' + '				<td class=left>' + name + '</td>' + '				<td align=right>' + numf(qty) + '</td>' + '				<td align=right>' + lost_troops + '</td>' + '			</tr>';
						}
					}
				}
				m += '			</table>' + '		</td>' + '	</tr>' + '</table><br><br>' + '<div style="height:380px; max-height:380px; overflow-y:auto;" width=98%>' + '<table style="margin-top:3px" width=98%>' + '	<tr valign=top align=center>' + '		<td width=49%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '><td colspan=2 class=left>' + translate('Resources') + '</td></tr>';
				var res = def.intel.resources
				for (var r = 0; r < transportable_resource_types.length; r++) {
					var desc = transportable_resource_types[r];
					if (desc == 'blue_energy') desc = 'blueenergy250k';
					var found = false;
					if (res) {
						for (var p in res) {
							if (p == transportable_resource_types[r]) {
								var res_value = (toNum(res[p]) > 0 ? '<b>' + numf(is_defender ? toNum(res[p]) * -1 : toNum(res[p])) + '</b>' : 0);
								m += '		<tr><td class=left width=50%>' + translate(desc) + '</td><td align=right width=50%>' + res_value + '</td></tr>';
								found = true;
							}
						}
					}
					if (!found)
						m += '		<tr><td class=left width=50%>' + translate(desc) + '</td><td align=right width=50%>0</td></tr>';
				}
				m += '			</table><br>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td class=left width=70%>' + translate('Research') + '</td>' + '					<td class=left width=30%>' + translate('Level') + '</td></tr>'
				var rsc = def.intel.research
				if (rsc) {
					for (var p in rsc)
						m += '		<tr><td class=left width=50%>' + translate(p) + '</td><td align=right width=50%>' + toNum(rsc[p]) + '</td></tr>';
				}
				m += '			</table>' + '		</td>' + '		<td width=2%>&nbsp</td>' + '		<td width=49% align=left>';
				if (def.intel.last_login)
					m += '		<label>' + translate('last-time-awake') + ' :</label><b>' + new Date(def.intel.last_login * 1000).myString() + '</b><br><br>';
				m += '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td class=left width=50%>' + translate('Units') + '</td>' + '					<td class=left width=50%>' + translate('Qty') + '</td></tr>'
				var trp = def.intel.defenders
				if (trp) {
					for (var r = 0; r < all_unit_types.length; r++) {
						for (var p in trp) {
							if (p == all_unit_types[r] && toNum(trp[p]) > 0)
								m += '		<tr><td class=left width=50%>' + translate(p) + '</td><td align=right width=50%>' + toNum(trp[p]) + '</td></tr>';
						}
					}
				}
				m += '			</table>' + '		</td>' + '	</tr>' + '</table><br>';
				var lvl = Seed.player.research['Clairvoyance'];
				if (!lvl) lvl = 0;
				else if (lvl > 10) lvl = 10;
				m += '<center><div align=left width=98% style="white-space:pre-wrap;"><label>' + translate('spy-tip-' + lvl) + '&nbsp;' + translate('spy-tip-prefix') + '</label></div></center><br>' + '</div>';
				return m;
			},
			displayTournamentAwardMessage: function(report) {
				var rep = report.report,
					m = '',
					desc = '';
				if (rep.leaderboard)
					desc = translate('award-tournament-description').replace('$type', translate('you-placed')).replace('$rank', rep.leaderboard.rank);
				else desc = translate('award-tournament-description').replace('$type', translate('you-placed'));
				var m = '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><span class=' + UID['red'] + '><b>' + translate('award-tournament-subject').toUpperCase() + '</b></span></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=left>' + '		<td width=70% align=left style="white-space:pre-wrap;">' + '			<label><b>' + desc + '</b></label></td>' + '		<td width=30%>' + '			<label>' + translate('report-no') + ' :</label><b>' + report.id + '</b><br>' + '			<label>' + new Date(report.created_at * 1000).myString() + '</label></td>' + '	</tr>' + '</table><br><br>' + '<div style="height:360px; max-height:360px; overflow-y:auto; white-space:pre-wrap;" width=100%>' + '<center><table style="margin-top:3px" width=70%>' + '	<tr valign=top class=' + UID['row_headers'] + '>' + '		<td valign=middle width=100%><b>' + translate('you-won') + '</b></td>' + '	</tr>';
				if (rep.prize)
					m += '		<tr><td>' + rep.prize.quantity + ' ' + translate(rep.prize.item_type) + '</td></tr>';
				m += '</table></center></div>';
				return m;
			},
			displayContestPrizeReport: function(report) {
				var rep = report.report,
					m = '';

				var m = '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><span class=' + UID['red'] + '><b>' + report.summary.toUpperCase() + '</b></span></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=left>' + '		<td width=70% align=left style="white-space:pre-wrap;">' + '			<label><b>' + report.summary + '</b></label></td>' + '		<td width=30%>' + '			<label>' + translate('report-no') + ' :</label><b>' + report.id + '</b><br>' + '			<label>' + new Date(report.created_at * 1000).myString() + '</label></td>' + '	</tr>' + '</table><br><br>' + '<div style="height:360px; max-height:360px; overflow-y:auto; white-space:pre-wrap;" width=100%>' + '<center><table style="margin-top:3px" width=70%>' + '	<tr valign=top class=' + UID['row_headers'] + '>' + '		<td valign=middle width=100%><b>' + translate('you-won') + '</b></td>' + '	</tr>';
				for (var i = 0; i < rep.prizes.length; i++)
					m += '		<tr><td>' + rep.prizes[i].quantity + ' ' + translate(rep.prizes[i].name) + '</td></tr>';
				m += '</table></center></div>';
				return m;
			},
			displayTradingReport: function(report) {
				var desc = '',
					title = '',
					user, trade, detail, offer, buyer_seller = '';
				var rep = report.report;
				if (rep.trading_report) trade = rep.trading_report;
				if (trade && trade.details) detail = trade.details;
				if (detail) {
					offer = detail.offer;
					switch (detail.type) {
						case 'sale':
							desc = 'sale-summary';
							title = 'Buyer';
							user = detail.purchaser;
							break;
						case 'delivery':
							desc = 'delivery-summary';
							title = 'Seller';
							user = offer.seller;
							break;
						case 'pillaged':
							desc = 'pillaged-summary';
							break;
						case 'expired':
							desc = 'expired-summary';
							break;
					}
				} else {
					desc = 'unknown';
					title = 'unknown';
				}
				if (!is_null(user))
					buyer_seller = translate(title) + '&nbsp;:&nbsp;<b>' + user.name.toUpperCase() + '</b>' + (user.alliance ? ' / ' + user.alliance.name : '');
				var m = '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><span class=' + UID['red'] + '><b>' + translate('trading-report').toUpperCase() + '</b></span></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=left>' + '		<td width=70%>' + '			<label><b>' + translate(desc) + '</b></label></td>' + '		<td width=30%>' + '			<label>' + translate('report-no') + ' :</label><b>' + report.id + '</b></td>' + '	</tr><tr valign=top align=left>' + '		<td width=70%>&nbsp;</td>' + '		<td width=30%>' + '			<label>' + (trade ? TimeStampToDate(trade.created_at).myString() : new Date(report.created_at * 1000).myString()) + '</label></td>';
				if (!is_null(user))
				   	m += '	</tr><tr valign=top align=left>' + '		<td colspan=2>' + buyer_seller + '</td>';
				m += '	</tr>' + '</table><br><br>' + '<div style="height:360px; max-height:360px; overflow-y:auto; white-space:pre-wrap;" width=100%>' + '<center><table style="margin-top:3px" width=60%>' + '	<tr valign=top>' + '		<td width=100%>' + '			<table class=' + UID['row_style'] + ' width=90%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=60%><b>' + translate('Ressource') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Quantity') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Price') + '</b></td>' + '				</tr>';
				if (offer) {
					m += '			<tr>' + '				<td>' + translate(offer.product) + '</td>' + '				<td>' + numf(offer.units) + '</td>' + '				<td>' + numf(offer.price) + '</td>' + '			</tr>';
				}
				m += '			</table>' + '		</td>' + '	</tr>' + '</table></center>' + '</div>';
				return m;
			},
			displayTransportReport: function(report) {
				var rep = report.report;
				var from = rep.sender;
				var from_loc = from.location;
				var to = rep.recipient;
				var to_loc = rep.location;
				var res = rep.spoils;
				var m = '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=center>' + '		<td width=100%><br><span class=' + UID['red'] + '><b>' + translate('transfer-goods').toUpperCase() + '</b></span></td>' + '	</tr></table><br>' + '<table style="margin-top:3px" width=100%>' + '	<tr valign=top align=left>' + '		<td width=70%>' + '			<label>' + translate('From') + ' : </label><b>' + from.name + '</b>&nbsp;(' + from_loc.title + ' ' + translate('at') + ' ' + from_loc.x + ' / ' + from_loc.y + ')</td>' + '		<td width=30%>' + '			<label>' + translate('report-no') + ' :</label><b>' + report.id + '</b></td>' + '	</tr><tr valign=top align=left>' + '		<td width=70%>&nbsp;</td>' + '		<td width=30%>' + '			<label>' + new Date(report.created_at * 1000).myString() + '</label></td>' + '	</tr><tr valign=top align=left>' + '		<td colspan=2>' + '			<label>' + translate('To') + ' : </label><b>' + to.name + '</b>&nbsp;(' + (to_loc.terrain == 'Outpost' ? translate(to_loc.title) : to_loc.title) + ' ' + translate('at') + ' ' + to_loc.x + ' / ' + to_loc.y + ')</td>' + '	</tr>' + '</table><br><br>' + '<div style="height:360px; max-height:360px; overflow-y:auto; white-space:pre-wrap;" width=100%>' + '<center><table style="margin-top:3px" width=60%>' + '	<tr valign=top>' + '		<td width=100%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=60%><b>' + translate('Troops') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Quantity') + '</b></td>' + '				</tr>';
				if (from.units) {
					for (var p in from.units) {
						if (p && from.units[p]) {
							m += '			<tr>' + '				<td class=left>' + translate(p) + '</td>' + '				<td align=right>' + numf(from.units[p][0]) + '</td>' + '			</tr>';
						}
					}
				}
				m += '			</table>' + '		</td>' + '	</tr><tr valign=top><td>&nbsp;</td>' + '	</tr><tr valign=top>' + '		<td width=100%>' + '			<table class=' + UID['row_style'] + ' width=100%>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td valign=middle width=60%><b>' + translate('Resources') + '</b></td>' + '					<td valign=middle width=20%><b>' + translate('Quantity') + '</b></td>' + '				</tr>';
				if (res) {
					for (var r = 0; r < transportable_resource_types.length; r++) {
						var desc = transportable_resource_types[r];
						if (desc == 'blue_energy') desc = 'blueenergy250k';
						var found = false;
						for (var p in res) {
							if (p == transportable_resource_types[r]) {
								m += '		<tr><td class=left width=50%>' + translate(desc) + '</td><td align=right width=50%><b>' + numf(toNum(res[p])) + '</b></td></tr>';
								found = true;
							}
						}
						if (!found)
							m += '		<tr><td class=left width=50%>' + translate(desc) + '</td><td align=right width=50%>0</td></tr>';
					}
				}
				m += '			</table>' + '		</td>' + '	</tr>' + '</table></center>' + '</div>';
				return m;
			},
			getFirstPage: function(type, callback) {
				var category = 'all';
				MyAjax.messageList(category, 1, MAX_READ, function(rslt) {
					/*
					 * var types = []; for (var i in Messages.details) { var
					 * found = false; for (var j=0; j<types.length && !found;
					 * j++) { if (Messages.details[i].type == types[j]) found =
					 * true; } if (!found) types.push(Messages.details[i].type); }
					 * logit('Message types = '+inspectObj(types,6,1));
					 */
					if (callback) callback(Messages.details);
				});
			},
			updateUnreadCount: function() {
				var t = Messages,
					total = 0,
					count = 0,
					color = '';
				for (var i in t.details) {
					total++;
					count += (t.details[i].unread ? 1 : 0);
				}
				t.unread_count = count;
				t.known_count = total;
				if (document.getElementById(UID['tabInbox_UnreadCount'])) {
					if (Data.options.currentTab == 'Inbox') color = 'yellow';
					else color = 'red';
					document.getElementById(UID['tabInbox_UnreadCount']).innerHTML = translate('Inbox') + (t.unread_count > 0 ? '&nbsp<font color=' + color + '>' + t.unread_count + '</font>' : '');
				}
			},

			/* Inbox messages deletion */
			dealMessages: function(mode, period, callback) {
				var t = Messages;
				t.mode = mode;
				t.period = period;
				t.callback = callback;
				t.messageDeletion = true;
				t.totMessages = 0;
				t.pagesMessages = 0;
				t.steps = ((mode == 'del') ? 3 : 1);
				t.step = 0;
				t.percent = toNum(t.step * 100 / t.steps);
				t.read_battle = 0;
				t.total_battle = 0;
				t.delete_count = 0;
				t.total_to_delete = 0;
				t.old_percent = 0;
				t.result_count = 0;

				progressBar.update({
					step: t.percent
				});
				MyAjax.messageList('all', -1, 12, function(rslt) {
					var t = Messages;
					if (rslt == null || rslt.total == null) {
						t.messageDeletion = false;
						return;
					}
					var t = Messages;
					t.totMessages = toNum(rslt.total);
					/*
					 * logit('Messages.deleteMessages : Total number of messages =
					 * '+t.totMessages);
					 */
					if (t.totMessages == 0) {
						t.messageDeletion = false;
						return;
					} else {
						t.pagesMessages = toNum(t.totMessages / MAX_READ);
						if (t.totMessages % MAX_READ != 0) t.pagesMessages++;
						t.steps += t.pagesMessages;
						t.pageReading = t.pagesMessages;
						clearTimeout(t.readPagesTimer);
						t.readPagesTimer = setTimeout(t.readPages, 2000);
					}
				});
				t.waitCompletion();
			},
			deleteMessages: function(callback) {
				var t = Messages;
				t.callback = callback;
				t.messageDeletion = true;
				t.steps = 1;
				t.step = -1;
				t.percent = 0;
				t.delete_count = 0;
				t.total_to_delete = 0;
				t.delete_percent = 0;
				t.old_percent = 0;
				t.result_count = 0;
				progressBar.update({
					step: t.percent
				});

				for (var i in Messages.details) {
					if (Messages.details[i].checked) t.total_to_delete++;
				}
				if (t.total_to_delete > 0) t.deleteSelected();
				else t.messageDeletion = false;
				t.waitCompletion();
			},
			waitCompletion: function() {
				var t = Messages;
				if (t.messageDeletion) {
					setTimeout(t.waitCompletion, 1000);
				} else {
					if (t.callback) {
						t.callback({
							done: true,
							count: t.result_count
						});
						return;
					}
				}
			},
			readPages: function() {
				var t = Messages;
				if (t.pageReading > 0) {
					var pages_min = (((t.pageReading - 1) * MAX_READ) / 12) + 1;
					var pages_max = ((t.pageReading * MAX_READ) / 12);
					var max_physical = toNum(t.totMessages / 12) + ((t.totMessages % 12 != 0) ? 1 : 0);
					if (pages_max > max_physical) pages_max = max_physical;
					var steptext = translate('Read pages ') + pages_min + ' ' + translate('to') + ' ' + pages_max + ' ' + translate('of') + ' ' + max_physical;
					clearTimeout(t.readPagesTimer);
					t.step++;
					t.percent = toNum(t.step * 100 / t.steps);
					progressBar.update({
						step: t.percent,
						stepText: steptext
					});
					MyAjax.messageList('all', t.pageReading, MAX_READ, function(rslt) {
						var t = Messages;
						/*
						 * logit('Messages.readPages : Num page =
						 * '+t.pageReading+(rslt ? '\n'+inspectObj(rslt,8,1) :
						 * ''));
						 */
						if (rslt != null && rslt.report_notifications && rslt.report_notifications != null && t.pageReading > 0) {
							t.pageReading--;
							t.readPagesTimer = setTimeout(t.readPages, 2000);
						}
					});
				} else {
					clearTimeout(t.readPagesTimer);
					if (t.mode == 'del')
						t.readPagesTimer = setTimeout(t.selectMessages, 2000);
					else t.messageDeletion = false;
				}
			},
			selectMessages: function() {
				var t = Messages;
				t.step++;
				t.percent = toNum(t.step * 100 / t.steps);
				progressBar.update({
					step: t.percent,
					stepText: translate('Selecting messages to delete') + '...'
				});
				for (var i in Messages.details) {
					var msgToDelete = false,
						msg = Messages.details[i];
					if (!is_null(msg)) {
						switch (msg.type) {
							case 'BattleReport':
								if (!is_null(msg.report)) {
									if (Data.options.messages_delete.rptBattle && msg.report.sanctuary) {
										msgToDelete = msg.report.sanctuary;
										if (msgToDelete && (
											(Data.options.messages_delete.rptExceptMyAttacks && msg.report.attacker.name == Seed.player.name) ||
											(Data.options.messages_delete.rptExceptYourAttacks && msg.report.attacker.name != Seed.player.name)))
											msgToDelete = false;
									} else if (Data.options.messages_delete.rptAnthropus && msg.report.defender.anthropus) {
										msgToDelete = msg.report.defender.anthropus;
									}
								} else if (Data.options.messages_delete.rptBattle || Data.options.messages_delete.rptAnthropus) {
									t.toRead.push(i);
									t.total_battle++;
								}
								break;
							case 'CurseReport':
								msgToDelete = Data.options.messages_delete.rptCurse;
								break;
							case 'SentinelWarning':
								msgToDelete = Data.options.messages_delete.msgSentinel;
								break;
							case 'SpyReport':
								msgToDelete = Data.options.messages_delete.rptSpy;
								break;
							case 'ReinforcementsReport':
								msgToDelete = Data.options.messages_delete.rptReinforcement;
								break;
							case 'TradingReport':
								msgToDelete = Data.options.messages_delete.rptTrading;
								break;
							case 'TransportMarchReport':
								msgToDelete = Data.options.messages_delete.rptTransport;
								break;
							case 'PlayerMessage':
								msgToDelete = Data.options.messages_delete.msgPlayer;
								break;
							case 'AllianceMessage':
								msgToDelete = Data.options.messages_delete.msgAlliance;
								break;
							case 'SystemMessage':
							case 'Leaderboard::TournamentAwardMessage':
							case 'TargetedMessage':
								msgToDelete = Data.options.messages_delete.msgGame;
								break;
							case 'Messages::Breeding':
							case 'Messages::Hatching':
								msgToDelete = Data.options.messages_delete.rptBreeding;
								break;
							default:
								msgToDelete = false;
						}
						if (msgToDelete && !Data.options.messages_delete.dateAll)
							if (msg.created_at < t.period[0] || msg.created_at > t.period[1])
								msgToDelete = false;
						if (msgToDelete || msg.checked) {
							msg.checked = true;
							t.total_to_delete++;
						}
					}
				}
				clearTimeout(t.readPagesTimer);
				if (t.total_battle > 0 && t.toRead.length > 0)
					t.readPagesTimer = setTimeout(t.readBattles, 2000);
				else
					t.readPagesTimer = setTimeout(t.deleteSelected, 2000);
			},
			readBattles: function() {
				var t = Messages;
				clearTimeout(t.readPagesTimer);
				t.read_battle++;
				t.battle_percent = Math.floor(t.read_battle * 100 / ((t.total_battle == 0) ? 1 : t.total_battle));
				t.percent = toNum(t.step * 100 / t.steps);
				t.percent = t.percent + (t.battle_percent / t.steps);
				if (t.percent != t.old_percent) {
					progressBar.update({
						step: t.percent,
						stepText: translate('Reading battle reports') + '...' + '<br>' + t.read_battle + '/' + t.total_battle
					});
					t.old_percent = t.percent;
				}
				var id = t.toRead[0];
				if (!id) {
					t.toRead.shift();
					if (t.toRead.length > 0)
						t.readPagesTimer = setTimeout(t.readBattles, 1500);
					else
						t.readPagesTimer = setTimeout(t.deleteSelected, 2000);
					return;
				}
				/*
				 * logit('Messages.readBattles : message '+id+ ' call to
				 * MyAjax.messageDetail');
				 */
				MyAjax.messageDetail(id, function(rslt) {
					var t = Messages;
					if (rslt != null && rslt.report_notification && rslt.report) {
						var msgToDelete = false,
							msg = Messages.details[rslt.report_notification.id];
						if (!is_null(msg.report)) {
							if (Data.options.messages_delete.rptBattle && msg.report.sanctuary) {
								msgToDelete = msg.report.sanctuary;
								if (msgToDelete && (
									(Data.options.messages_delete.rptExceptMyAttacks && msg.report.attacker.name == Seed.player.name) ||
									(Data.options.messages_delete.rptExceptYourAttacks && msg.report.attacker.name != Seed.player.name)))
									msgToDelete = false;
							} else if (Data.options.messages_delete.rptAnthropus && msg.report.defender.anthropus) {
								msgToDelete = msg.report.defender.anthropus;
							}
						} else msgToDelete = true;
						if (msgToDelete && !Data.options.messages_delete.dateAll)
							if (msg.created_at < t.period[0] || msg.created_at > t.period[1])
								msgToDelete = false;
						if (msgToDelete) {
							msg.checked = msgToDelete;
							t.total_to_delete++;
						}
					}
					t.toRead.shift();
					if (t.toRead.length > 0)
						t.readPagesTimer = setTimeout(t.readBattles, 1500);
					else {
						t.readPagesTimer = setTimeout(t.deleteSelected, 2000);
					}
				});
			},
			deleteSelected: function() {
				var t = Messages;
				t.step++;
				t.percent = toNum(t.step * 100 / t.steps);
				t.old_percent = 0;
				for (var i in Messages.details) {
					if (Messages.details[i].checked) {
						t.delete_count++;
						t.delete_percent = Math.floor(t.delete_count * 100 / ((t.total_to_delete == 0) ? 1 : t.total_to_delete));
						t.percent = toNum(t.step * 100 / t.steps);
						t.percent = t.percent + (t.delete_percent / t.steps);
						if (t.percent != t.old_percent) {
							progressBar.update({
								step: t.percent,
								stepText: translate('Deleting messages') + '...' + '<br>' + t.delete_count + '/' + t.total_to_delete
							});
							t.old_percent = t.percent;
						}
						if (t.idsToDelete.length > MAX_DELETE) {
							MyAjax.messageDelete(t.idsToDelete);
							t.idsToDelete = [];
						}
						t.idsToDelete.push(i);
						t.result_count++;
					}
				}
				if (t.idsToDelete.length > 0) {
					MyAjax.messageDelete(t.idsToDelete);
					t.idsToDelete = [];
				}
				setTimeout(t.deleteComplete, Math.randRange(2000, 5000));
				return;
			},
			deleteComplete: function() {
				var t = Messages;
				t.messageDeletion = false;
			}
		};
		/******************************** Names package ******************************/
		var Names = {
			troops: {
				'names': [
					[0, 'Porter', 'Porter'],
					[1, 'Conscript', 'Conscr'],
					[2, 'Spy', 'Spy'],
					[3, 'Halberdsman', 'Halbrd'],
					[4, 'Minotaur', 'Mino'],
					[5, 'Longbowman', 'LBM'],
					[6, 'SwiftStrikeDragon', 'SSDrg'],
					[7, 'BattleDragon', 'BatDrg'],
					[8, 'ArmoredTransport', 'ATrans'],
					[9, 'Giant', 'Giant'],
					[10, 'FireMirror', 'FireM'],
					[11, 'GreatDragon', 'GrtDrg'],
					[12, 'WaterDragon', 'WatDrg'],
					[13, 'StoneDragon', 'StnDrg'],
					[14, 'FireDragon', 'FireDrg'],
					[15, 'WindDragon', 'WndDrg'],
					[16, 'IceDragon', 'IceDrg'],
					[17, 'SwampDragon', 'SwpDrg'],
					[18, 'SpectralDragon', 'SpctDrg'],
					[19, 'AquaTroop', 'Fang'],
					[20, 'StoneTroop', 'Ogre'],
					[21, 'FireTroop', 'Magma'],
					[22, 'WindTroop', 'Banshee'],
					[23, 'IceTroop', 'SReaper'],
					[24, 'SwampTroop', 'Venom'],
					[25, 'PackDragon', 'PackDrg'],
					[26, 'FrostGiant', 'FGiant'],
					[27, 'ForestDragon', 'ForDrg'],
					[28, 'ForestTroop', 'Titan'],
					[29, 'DesertDragon', 'DesDrg'],
					[30, 'DesertTroop', 'Strider'],
					[31, 'DarkSlayer', 'Slayer'],
					[32, 'LightningCannon', 'LCannon'],
					[33, 'ChargeTroop', 'Storm'],
					[34, 'ChronoDragon', 'Chrono'],
					[35, 'VengeWyrm', 'Wyrm'],
					[36, 'DimensionalRuiner', 'Ruiner'],
					[37, 'KaiserDragon', 'Kaiser'],
					[38, 'ArcticLeviathan', 'Leviathan'],
					[39, 'Harrier', 'Harr.'],
					[40, 'CaveDragon', 'CavDrg'],
					[41, 'LunaDragon', 'LunDrg'],
					[42, 'Defendo', 'Defen'],
					[43, 'ShadowStalker', 'ShadStalk'],
					[44, 'Shaman', 'Shaman'],
					[45, 'WarScarab', 'Scarab'],
					[46, 'VoltRanger', 'Ranger'],
					[47, 'DragonRider', 'DrgRid'],
					[48, 'ColossusDragon', 'ColDrg'],
					[49, 'ColossalMite', 'Mite']
				]
			},

			transco: {
				'AquaTroopRespiratorStack100': ['AquaTroopRespirator', 100],
				'AquaTroopRespiratorStack500': ['AquaTroopRespirator', 500],
				'AquaTroopRespiratorStack1000': ['AquaTroopRespirator', 1000],
				'StoneTroopItemStack100': ['StoneTroopItem', 100],
				'StoneTroopItemStack500': ['StoneTroopItem', 500],
				'StoneTroopItemStack1000': ['StoneTroopItem', 1000],
				'FireTroopItemStack100': ['FireTroopItem', 100],
				'FireTroopItemStack500': ['FireTroopItem', 500],
				'FireTroopItemStack1000': ['FireTroopItem', 1000],
				'WindTroopItemStack100': ['WindTroopItem', 100],
				'WindTroopItemStack500': ['WindTroopItem', 500],
				'WindTroopItemStack1000': ['WindTroopItem', 1000],
				'IceTroopItemStack100': ['IceTroopItem', 100],
				'IceTroopItemStack500': ['IceTroopItem', 500],
				'IceTroopItemStack1000': ['IceTroopItem', 1000],
				'SwampTroopItemStack100': ['SwampTroopItem', 100],
				'SwampTroopItemStack500': ['SwampTroopItem', 500],
				'SwampTroopItemStack1000': ['SwampTroopItem', 1000],
				'FrostGiantItemStack100': ['FrostGiantItem', 100],
				'FrostGiantItemStack500': ['FrostGiantItem', 500],
				'FrostGiantItemStack1000': ['FrostGiantItem', 1000],
				'ForestTroopItemStack100': ['ForestTroopItem', 100],
				'ForestTroopItemStack500': ['ForestTroopItem', 500],
				'ForestTroopItemStack1000': ['ForestTroopItem', 1000],
				'DarkSlayerItemStack100': ['DarkSlayerItem', 100],
				'DarkSlayerItemStack500': ['DarkSlayerItem', 500],
				'DarkSlayerItemStack1000': ['DarkSlayerItem', 1000]
			},

			init: function() {
				var t = Names;
				t.makeIdx(t.troops);
			},
			getTroopAbbr: function(name) {
				var x = Names.troops.byName[name];
				if (x) return x[2];
				return name.substr(0, 14);
			},
			makeIdx: function(o) {
				byAbbr = {};
				byName = {};
				var n = o.names;
				for (var i = 0; i < n.length; i++) {
					byAbbr[n[i][2]] = n[i];
					byName[n[i][1]] = n[i];
				}
				o.byAbbr = byAbbr;
				o.byName = byName;
			}
		};
		/******************************** Recall march package ***********************/
		var RecallMarch = {
			init: function() {
				var t = RecallMarch;
				if (is_null(Data.dynamic.recall_marches)) Data.dynamic.recall_marches = [];
				t.timer = setTimeout(t.doit, 1000);
			},

			doit: function() {
				var t = RecallMarch;
				for (var m = 0; m < Data.dynamic.recall_marches.length; m++) {
					if (Data.dynamic.recall_marches[m] === undefined)
						Data.dynamic.recall_marches.splice(m, 1);
					else if ((Data.dynamic.recall_marches[m] !== undefined) && (Marches.find(Data.dynamic.recall_marches[m].marchId) == null)) {
						debugLog('***** March to recall missing from seed: ' + inspectObj(Data.dynamic.recall_marches[m]));
						Data.dynamic.recall_marches.splice(m, 1);
					}
				}
				for (var m = 0; m < Data.dynamic.recall_marches.length; m++) {
					if ((Data.dynamic.recall_marches[m] !== undefined) && (Marches.find(Data.dynamic.recall_marches[m].marchId) !== null)) {
						var now = toNum(serverTime());
						if ((Data.dynamic.recall_marches[m].run_at - now) < 60 && !Data.dynamic.recall_marches[m].recalling) {
							Data.dynamic.recall_marches[m].recalling = true;
							verboseLog('Recalling march ' + Data.dynamic.recall_marches[m].marchId +
								' arrives at ' + timestr(Data.dynamic.recall_marches[m].run_at, true) + ' ' +
								', current time ' + timestr(now, true) + ', diff ' + (Data.dynamic.recall_marches[m].run_at - now) + 's');
							doRecallMarch(Data.dynamic.recall_marches[m]);
						}
					}
				}
				t.timer = setTimeout(t.doit, 1000);

				function doRecallMarch(march) {
					var targMsg = 'Recall march ' + march.marchId;
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.marchRecall(march.cityId, march.marchId, function(rslt) {
						if (rslt.ok) {
							delete(march);
							actionLog(targMsg);
							verboseLog(targMsg + ' ' + translate('succeeded'));
						} else {
							march.recalling = false;
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
				}
			},
			exists: function(march_id) {
				var t = RecallMarch;
				if (!Data.dynamic.recall_marches || Data.dynamic.recall_marches.length === 0) return false;
				var found = false;
				for (var m = 0; m < Data.dynamic.recall_marches.length && !found; m++) {
					if (Data.dynamic.recall_marches[m].marchId == march_id) found = true;
				}
				return found;
			}
		};
		/******************************** RequestQueue package ***********************/
		var RequestQueue = {
			que: {},
			add: function(id, func, maxWaitMillis, can_be_bypassed) {
				var t = RequestQueue;
				var now = serverTime(),
					maxWait = 0;
				if (isNaN(maxWaitMillis)) maxWait = 1000;
				else maxWait = maxWaitMillis;
				if (t.que[id]) {
					if (now + maxWait >= t.que[id][2]) return;
					clearTimeout(t.que[id][1]);
				}
				var timer = setTimeout(function() {
					myFunc(id)
				}, maxWait);
				t.que[id] = [func, timer, now + maxWait, can_be_bypassed];

				function myFunc(id) {
					var t = RequestQueue;
					var func = t.que[id][0];
					delete t.que[id];
					func();
				}
			},
			dispQ: function(msg) {
				var now = serverTime();
				var m = msg + ' (now=' + timestrh(now) + ') :\n';
				for (var p in RequestQueue.que) {
					m += p + ' : ' + RequestQueue.que[p][1] + ' : ' + RequestQueue.que[p][2] + ' (' + (RequestQueue.que[p][2] - now) + ')\n';
				}
				debugLog(m);
			},
			isPending: function(id, maxWait) {
				var t = RequestQueue;
				if (t.que[id] && maxWait) {
					var now = serverTime();
					if ((now + maxWait < t.que[id][2]) && t.que[id][3]) return false;
					else return true;
				} else return t.que[id] ? true : false;
			}
		};
		/******************************** Seed package *******************************/
		var Seed = {
			cities: [],
			/* cities */
			cityIdx: {},
			/* 'indicies' */
			cityTs: {},
			/* timestamps of last update */
			cityInit: [],
			jobs: {},
			/* by city */
			numMarches: 0,
			generals: {},
			requirements: {
				building: [],
				research: [],
				resurrect: [],
				unit: [],
				dragon: []
			},
			stats: {
				building: {},
				dragons: {},
				research: {},
				resurrect: {},
				unit: {},
				dragon: {}
			},
			refresh_cities: [],
			greatDragons: {
				GreatDragon: [],
				WaterDragon: [],
				StoneDragon: [],
				FireDragon: [],
				WindDragon: [],
				IceDragon: [],
				SwampDragon: [],
				ForestDragon: [],
				DesertDragon: [],
				ChronoDragon: [],
				SpectralDragon: [],
				KaiserDragon: [],
				CaveDragon: [],
				LunaDragon: [],
				ColossusDragon: []
			},
			dragonList: [],
			dragons: {},
			items: {},
			sanctuary_dragons: {},
			quests: {
				category: [],
				list: []
			},
			numGenerals: 0,
			serverTimeOffset: 0,
			lastRefresh: 0,
			tickTimer: 0,
			numCities: 0,
			updatingCity: false,
			research: [],
			armors: [],
			armorScale: {},

			init: function(callback) {
				var t = Seed;
				t.fetchPlayer(function(rslt) {
					if (rslt.ok)
						verboseLog(translate('Player data was Successfully requested from the server'));
					else verboseLog('fetchPlayer ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
				}, {
					noCities: true
				});
				clearInterval(t.tickTimer);
				t.tickTimer = setInterval(t.tick, 1000);
				MyAjax.getCustomization();
			},

			fetchPlayer: function(callback, options) {
				var city;
				if (callback instanceof Function) {
					var callback = callback;
					var options = options || {};
				} else {
					var options = callback;
					var callback = null;
				}

				if (options && options.noPlayer) {
					/* options.cities (array) */
					/* only fetch the cities id in the array */
					if (options && options.cities) {
						for (var i = 0; i < options.cities.length; i++) {
							if (Seed.cityIdx[options.cities[i]] !== undefined) {
								verboseLog('FetchPlayer : Call fetchCity');
								setTimeout(Seed.fetchCity, Math.randRange(i * 1000, i * 3000), options.cities[i], callback);
							}
						}
						if (!options.jobs && !options.dragons) return;
					}
					if (options && options.jobs) {
						setTimeout(Seed.fetchJobs, Math.randRange(i * 1000, i * 3000), callback);
						if (!options.dragons) return;
					}
					if (options && options.dragons) {
						setTimeout(Seed.fetchDragons, Math.randRange(i * 1000, i * 3000), callback);
						return;
					}
				}

				var p = {};
				p = MyAjax.addMainParams();
				new MyAjaxRequest('player', 'player.json', p, function(rslt) {
					if (rslt.ok) {
						if (rslt.dat.timestamp) {
							Seed.serverTimeOffset = rslt.dat.timestamp - (new Date().getTime() / 1000);
						}
						Seed.player = rslt.dat;
						/* options.cities (array) */
						/* only fetch the cities id in the array */
						if (options && options.cities) {
							for (var i = 0; i < options.cities.length; i++) {
								if (Seed.cityIdx[options.cities[i]] !== undefined) {
									verboseLog('FetchPlayer / player.json : Call fetchCity');
									setTimeout(Seed.fetchCity, Math.randRange(i * 1000, i * 3000), options.cities[i], callback);
								}
							}
							if (!options.jobs && !options.dragons) return;
						}
						if (options && options.jobs) {
							setTimeout(Seed.fetchJobs, Math.randRange(i * 1000, i * 3000), callback);
							if (!options.dragons) return;
						}
						if (options && options.dragons) {
							setTimeout(Seed.fetchDragons, Math.randRange(i * 1000, i * 3000), callback);
							return;
						}

						/* Fill the cityInit array */
						/*
						 * (used here & in the StartUp process so it must be
						 * before to verified options.noCities)
						 */
						var i = 0;
						for (city in rslt.dat.cities) {
							if (Seed.cityInit[i] === undefined) {
								Seed.cityInit[i] = {};
							}
							Seed.cityInit[i].id = rslt.dat.cities[city].id;
							Seed.cityInit[i].type = city;
							i++;
						}

						/* option.noCities (boolean) */
						/*
						 * Don't fetch Cities if we are from StartUp, because we
						 * do from there
						 */
						if (options && options.noCities) {
							if (callback) callback(rslt);
							return;
						}
						/* OK, fetch all cities */
						try {
							for (var i = 0; i < Seed.cityInit.length; i++) {
								if (Seed.cityInit[i].timer) {
									clearTimeout(Seed.cityInit[i].timer);
								}
								verboseLog('FetchPlayer / all cities : Call fetchCity');
								Seed.cityInit[i].timer = setTimeout(Seed.fetchCity, Math.randRange(i * 2000, i * 4000), Seed.cityInit[i].id, callback);
							}
						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = e.toString();
						}
					}
					if (callback) callback(rslt);
					return;
				});
			},

			fetchCity: function(cityId, callback) {
				if (!cityId) return;
				var t = Seed;
				var p = {};
				p = MyAjax.addMainParams();
				new MyAjaxRequest('cities', 'cities/' + cityId + '.json', p, function(rslt) {
					if (rslt.ok) {
						if (rslt.dat.timestamp) {
							t.serverTimeOffset = rslt.dat.timestamp - (new Date().getTime() / 1000);
							if (rslt.dat.city.type == 'Capital')
								t.lastRefresh = serverTime();
						}
						try {
							t.updateCity(rslt.dat.city);
						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = 'Exception - ' + e.toString();
						}
					}
					if (!rslt.ok) verboseLog('fetchCity ' + translate('attempt for') + ' ' + cityId + ' ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					var found = false;
					for (var c = 0; c < t.refresh_cities.length && !found; c++) {
						if (t.refresh_cities[c].id == cityId) {
							t.refresh_cities[c].isRefreshing = false;
							found = true;
						}
					}
					if (callback) callback(rslt);
				}, true);
			},

			fetchJobs: function(callback) {
				var t = Seed;
				var p = {};
				p = MyAjax.addMainParams();
				new MyAjaxRequest('jobs', 'player/jobs.json', p, function(rslt) {
					if (rslt.ok) {
						try {
							for (var city in rslt.dat.result.result) {
								var jobs_list = rslt.dat.result.result[city];
								if (jobs_list && jobs_list.length > 0) {
									for (var j = 0; j < jobs_list.length; j++) {
										Seed.checkAddJob(jobs_list[j]);
									}
								}
								Seed.checkRemoveJobs();
							}
						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = 'Exception - ' + e.toString();
						}
					}
					if (!rslt.ok) verboseLog('fetchJobs ' + translate('attempted') + ' ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
				});
			},

			fetchDragons: function(callback) {
				var t = Seed;
				var p = {};
				p = MyAjax.addMainParams();
				new MyAjaxRequest('dragons', 'dragons/', p, function(rslt) {
					if (rslt.ok) {
						try {
							var dragons = cloneProps(rslt.dat.result.dragons);
							Seed.sanctuary_dragons = {};
							for (var i = 0; i < dragons.length; i++) {
								for (var j in dragons[i]) {
									var dragon = cloneProps(dragons[i][j]);
									/*var dragon_name = dragon.type.substring(dragon.type.indexOf('::') + 2);
									dragon_name = (dragon_name == 'CityGreatDragon') ? 'GreatDragon' : dragon_name;
									dragon.name = dragon_name*/
									var dragon_rank = sanctuaryDragonRank[dragon.rank];
									dragon.type = dragon.gender + '-' + dragon_rank;
									dragon.subtype = ((j == 'city_great_dragon') ? 'great_dragon' : j).replace(/ |_/g, '-');
									Seed.sanctuary_dragons[dragon.id] = cloneProps(dragon);
									if (!Data.options.sanctuary.feeding[dragon.id]) Data.options.sanctuary.feeding[dragon.id] = {
										enable: false,
										cap: 9
									};
								}
							}
							/*
							 * Clean data.options.sanctuary.feeding of all
							 * missing dragons
							 */
							for (var d in Data.options.sanctuary.feeding) {
								if (!Seed.sanctuary_dragons[d]) delete(Data.options.sanctuary.feeding[d]);
							}

							Seed.sanctuary_dragons.player_slots = rslt.dat.result.master_rookery.player_slots;

						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = 'Exception - ' + e.toString();
						}
					}
					if (!rslt.ok) verboseLog('fetchDragons ' + translate('attempted') + ' ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					if (callback) callback(rslt);
				});
			},

			addToRefresh: function(cityId, is_refreshing) {
				var t = Seed;
				var found = false;
				var now = serverTime();
				for (var c = 0; c < t.refresh_cities.length && !found; c++)
					if (t.refresh_cities[c].id == cityId) found = true;
					/*
					 * if city not queued to refresh and time elapsed since last
					 * refresh done is greater than 1 minute
					 */
				if (!found) t.refresh_cities.push({
					id: cityId,
					isRefreshing: is_refreshing
				});
			},

			tick: function() { /*
								 * called once per second - to check for job
								 * completion
								 */
				var t = Seed;
				var now = toNum(serverTime());
				var lock_food = false;
				try {
					for (var p = 0; p < all_resource_types.length; p++) {
						var production = t.cities[CAPITAL.id].figures.resource_rates[all_resource_types[p]];
						var actual = t.cities[CAPITAL.id].resources[all_resource_types[p]];
						if (t.player.boosts && t.player.boosts.collect_resources && all_resource_types[p] == 'food' && actual > production.capacity) lock_food = true;
						if (((actual < production.capacity && production.rate > 0) ||
							(actual > (production.vault_capacity || 0) && production.rate < 0)) && !lock_food) {
							if (t.lastRefresh && t.lastRefresh != 0) {
								/*
								 * Case when a delay is to take into account
								 * when city data has just been updated
								 */
								actual = actual + ((production.rate / 3600) * toNum(now - t.lastRefresh));
								t.lastRefresh = 0;
							} else
								actual = actual + (production.rate / 3600);
							if (actual > production.capactity) actual = production.capacity;
							if (actual < (production.vault_capacity || 0)) actual = (production.vault_capacity || 0); /*
																														 * Case
																														 * of
																														 * food
																														 * with
																														 * negative
																														 * production
																														 * rate
																														 */
							/*
							 * update the Seed resource total only if the city
							 * is not queued for refresh
							 */
							if (!t.refresh_cities[CAPITAL.id])
								t.cities[CAPITAL.id].resources[all_resource_types[p]] = actual;
						}
					}
				} catch (e) {
					verboseLog(translate('Resources stock levels update failed') + ': ' + inspectObj(e, 8, 1));
					clearInterval(t.tickTimer);
					setTimeout(t.restartTick, 30000);
					return;
				}

				/* check for job completion */
				for (var cityIdx in t.jobs) {
					for (var jobId in t.jobs[cityIdx]) {
						var job = t.jobs[cityIdx][jobId];
						if (job.done) {
							if (now > (job.run_at - 1)) {
								var to_delete = true;
								var march = Marches.find(job.march_id);
								if (march) {
									switch (march.status) {
										case 'marching':
											if (now > march.run_at + 10) t.addToRefresh(cityIdx, false);
											break;
										case 'retreating':
											if ((now < march.real_run_at) || t.updatingCity) {
												to_delete = false;
												break;
											}
											if (march.general_id) {
												if (!t.generals[march.general_id]) {
													t.generals[march.general_id] = {};
													debugLog('ERROR in Seed.tick() : could not be found General Id: ' + march.general_id + ' in Seed.generals. Creating an entry to fix the problem.');
												}
												t.generals[march.general_id].busy = false;
												t.generals[march.general_id].x = march.x;
												t.generals[march.general_id].y = march.y;
												t.generals[march.general_id].status = march.status;
											}
											var dragon_type = null;
											var found_in_list = false;
											for (var unit_type in march.units) {
												for (var gd = 0; gd < Seed.dragonList.length && !found_in_list; gd++) {
													if (Seed.dragonList[gd].type == unit_type) {
														found_in_list = true;
														dragon_type = unit_type;
													}
												}
											}
											if (dragon_type !== null && Seed.dragons[dragon_type])
												Seed.dragons[dragon_type].is_in_city = true;
											t.addToRefresh(t.cities[CAPITAL.id].id, false);
											if (march.units['WaterDragon']) t.addToRefresh(t.cities[WATER_OUTPOST.id].id, false);
											if (march.units['StoneDragon']) t.addToRefresh(t.cities[STONE_OUTPOST.id].id, false);
											if (march.units['FireDragon']) t.addToRefresh(t.cities[FIRE_OUTPOST.id].id, false);
											if (march.units['WindDragon']) t.addToRefresh(t.cities[WIND_OUTPOST.id].id, false);
											if (march.units['IceDragon']) t.addToRefresh(t.cities[ICE_OUTPOST.id].id, false);
											if (march.units['SwampDragon']) t.addToRefresh(t.cities[SWAMP_OUTPOST.id].id, false);
											if (march.units['ForestDragon']) t.addToRefresh(t.cities[FOREST_OUTPOST.id].id, false);
											if (march.units['DesertDragon']) t.addToRefresh(t.cities[DESERT_OUTPOST.id].id, false);
											if (march.units['ChronoDragon']) t.addToRefresh(t.cities[CHRONO_OUTPOST.id].id, false);
											if (march.units['KaiserDragon']) t.addToRefresh(t.cities[SKY_OUTPOST.id].id, false);
											if (march.units['CaveDragon']) t.addToRefresh(t.cities[CAVE_OUTPOST.id].id, false);
											if (march.units['LunaDragon']) t.addToRefresh(t.cities[LUNA_OUTPOST.id].id, false);
											if (march.units['ColossusDragon']) t.addToRefresh(t.cities[COLOSSUS_OUTPOST.id].id, false);
											Marches.remove(march.id);
											break;
									}
								}
								if (to_delete) delete(t.jobs[cityIdx][jobId]);
							}
						} else {
							if (now > (job.run_at - 1)) {
								job.done = true;
								switch (job.queue) {
									case 'breeding':
										Seed.fetchPlayer({
											noPlayer: true,
											cities: [],
											jobs: true,
											dragons: true
										});
										break;
									case 'building':
										SoundPlayer.PlaySound(job.queue);
										Tabs.Jobs.buildRefreshLvl = true;
										Buildings.setLevel(cityIdx, job.city_building_id, job.level);
										Tabs.Jobs.buildRefreshTab = true;
										break;
									case 'feeding':
										Seed.fetchPlayer({
											noPlayer: true,
											cities: [],
											jobs: true,
											dragons: true
										});
										break;
									case 'hatching':
										Seed.fetchPlayer({
											noPlayer: true,
											cities: [],
											jobs: true,
											dragons: true
										});
										break;
									case 'march':
										var march = Marches.find(job.march_id);
										if (march && march.status == 'marching') t.addToRefresh(cityIdx, false);
										break;
									case 'research':
										SoundPlayer.PlaySound(job.queue);
										Seed.player.research[job.research_type] = job.level;
										break;
									case 'units':
										SoundPlayer.PlaySound(job.queue);
										Seed.cities[CAPITAL.id].units[job.unit_type] += job.quantity;
										break;
									default:
										t.addToRefresh(cityIdx, false);
								}
							}
						}
					}
				}
				t.numMarches = 0;
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
					for (var id in Data.marches[type])
						t.numMarches++;
				}
				if (Data.marches) Marches.updateCounters();

				if (t.refresh_cities.length) {
					for (var idx = t.refresh_cities.length - 1; idx >= 0; idx--) {
						var city_id = t.refresh_cities[idx];
						if (!city_id.isRefreshing) {
							city_id.isRefreshing = true;
							verboseLog('Seed.tick : Call fetchCity for ' + city_id.id);
							t.fetchCity(city_id.id, function(res) {
								if (res.ok) {
									Seed.refresh_cities.splice(idx, 1);
								} else {
									var error_msg;
									var delay = 30000;
									if (res.status === 429) {
										error_msg = '<b>API Rate Limit Exceeded</b>, too many requests!';
										delay = E429_DELAY * 1000;
									} else if (res.status === 509) {
										error_msg = '<b>Rate Limit Exceeded</b>, too many requests!';
										delay = 1800000;
									} else error_msg = res.errmsg;
									verboseLog('Seed.tick : Call fetchCity returned code ' + res.status + ' - ' + error_msg); /* res.errmsg); */
									if (Seed.refresh_cities[idx] && Seed.refresh_cities[idx].isRefreshing) Seed.refresh_cities[idx].isRefreshing = false;
									clearInterval(Seed.tickTimer);
									setTimeout(Seed.restartTick, delay);
									return;
								}
							});
						}
					}
				}
			},
			restartTick: function() {
				var t = Seed;
				if (t.tickTimer) clearInterval(t.tickTimer);
				t.tickTimer = setInterval(t.tick, 1000);
			},

			updateCity: function(city) {
				var t = Seed;
				if (!city) return;
				t.updatingCity = true;
				verboseLog(translate('Updating City values') + ': ' + city.name);
				var cityIdx = (city.type == 'Capital') ? CAPITAL.id : (city.name.charAt(city.name.length - 1));
				if (typeof t.cityIdx[city.id] !== 'undefined' && t.cityIdx[city.id] !== null) {
					cityIdx = t.cityIdx[city.id];
				} else if (city.type == 'Capital') {
					cityIdx = CAPITAL.id;
				} else {
					logit(city.outpost_type);
					switch (city.outpost_type) {
						case WATER_OUTPOST.name:
							cityIdx = WATER_OUTPOST.id;
							break;
						case STONE_OUTPOST.name:
							cityIdx = STONE_OUTPOST.id;
							break;
						case FIRE_OUTPOST.name:
							cityIdx = FIRE_OUTPOST.id;
							break;
						case WIND_OUTPOST.name:
							cityIdx = WIND_OUTPOST.id;
							break;
						case ICE_OUTPOST.name:
							cityIdx = ICE_OUTPOST.id;
							break;
						case SWAMP_OUTPOST.name:
							cityIdx = SWAMP_OUTPOST.id;
							break;
						case FOREST_OUTPOST.name:
							cityIdx = FOREST_OUTPOST.id;
							break;
						case DESERT_OUTPOST.name:
							cityIdx = DESERT_OUTPOST.id;
							break;
						case SPECTRAL_OUTPOST.name:
							cityIdx = SPECTRAL_OUTPOST.id;
							break;
						case CHRONO_OUTPOST.name:
							cityIdx = CHRONO_OUTPOST.id;
							break;
						case SKY_OUTPOST.name:
							cityIdx = SKY_OUTPOST.id;
							break;
						case CAVE_OUTPOST.name:
							cityIdx = CAVE_OUTPOST.id;
							break;
						case LUNA_OUTPOST.name:
							cityIdx = LUNA_OUTPOST.id;
							break;
						case COLOSSUS_OUTPOST.name:
							cityIdx = COLOSSUS_OUTPOST.id;
							break;
						default:
							cityIdx = SPECTRAL_OUTPOST.id;
					}

					if (cityIdx == CAPITAL.id) cityIdx = ICE_OUTPOST.id;

					if (typeof t.cities[cityIdx] !== 'undefined' && t.cities[cityIdx] !== null) {
						t.cityIdx[t.cities[cityIdx].id] = t.cities.length;
						t.cities[t.cities.length] = t.cities[cityIdx];
					}
				}

				t.cities[cityIdx] = city;
				t.cityIdx[city.id] = cityIdx;
				t.cityTs[city.id] = serverTime();

				/* Add dragons object (by Didi) */
				var dragon = null;
				switch (toNum(cityIdx)) {
					case CAPITAL.id:
						dragon = city.great_dragon;
						break;
					case WATER_OUTPOST.id:
						dragon = city.water_dragon;
						break;
					case STONE_OUTPOST.id:
						dragon = city.stone_dragon;
						break;
					case FIRE_OUTPOST.id:
						dragon = city.fire_dragon;
						break;
					case WIND_OUTPOST.id:
						dragon = city.wind_dragon;
						break;
					case ICE_OUTPOST.id:
						dragon = city.ice_dragon;
						break;
					case SWAMP_OUTPOST.id:
						dragon = city.swamp_dragon;
						break;
					case FOREST_OUTPOST.id:
						dragon = city.forest_dragon;
						break;
					case DESERT_OUTPOST.id:
						dragon = city.desert_dragon;
						break;
					case CHRONO_OUTPOST.id:
						dragon = city.chrono_dragon;
						break;
					case SKY_OUTPOST.id:
						dragon = city.kaiser_dragon;
						break;
					case CAVE_OUTPOST.id:
						dragon = city.cave_dragon;
						break;
					case LUNA_OUTPOST.id:
						dragon = city.luna_dragon;
						break;
					case COLOSSUS_OUTPOST.id:
						dragon = city.colossus_dragon;
						break;
					default:
						dragon = null;
						break;
				}
				if (dragon !== null) {
					var dragon_type = dragon.type.substring(dragon.type.indexOf('::') + 2);
					dragon_type = (dragon_type == 'CityGreatDragon') ? 'GreatDragon' : dragon_type;
					var aerial_combat_level = (Seed.player.research['AerialCombat']) ? Seed.player.research['AerialCombat'] : 0;
					t.dragons[dragon_type] = dragon;
					t.dragons[dragon_type].name = dragon_type;
					t.dragons[dragon_type].can_attack = (t.checkArmorDragon(dragon_type) && t.dragons[dragon_type].level >= 8 && aerial_combat_level > 0 && dragon_type != 'SpectralDragon');
					t.dragons[dragon_type].city_id = city.id;

					if (dragon.life !== dragon.maximum_life) {
						t.dragons[dragon_type].cure_at = serverTime() + ((dragon.maximum_life - dragon.life) / dragon.recovery_rate) * 3600;
					} else {
						t.dragons[dragon_type].cure_at = serverTime();
					}
					var found_in_list = false;
					for (var gd = 0; gd < t.dragonList.length && !found_in_list; gd++)
						if (t.dragonList[gd].type == dragon_type) found_in_list = true;
					if (!found_in_list) {
						t.dragonList.push({
							type: dragon_type,
							city: cityIdx
						});
						t.dragonList.sort(function(a, b) {
							return a.city - b.city;
						});
					}
				}

				if (cityIdx == CAPITAL.id) {
					/* generals */
					for (var i = 0; i < city.generals.length; i++) {
						t.generals[city.generals[i].id] = city.generals[i];
					}
					t.numGenerals = city.generals.length;

					/* Purge expired marches */
					Marches.purge();
					/* marches */
					for (var i = 0; i < city.marches.length; i++) {
						var march = city.marches[i];
						if (march.general_id) {
							if (!t.generals[march.general_id]) {
								t.generals[march.general_id] = {};
								debugLog('ERROR in updateCity() : could not be found General Id: ' + march.general_id + ' in Seed.generals. Creating an entry to fix the problem.');
							}
							t.generals[march.general_id].busy = true;
							t.generals[march.general_id].x = march.x;
							t.generals[march.general_id].y = march.y;
							t.generals[march.general_id].status = march.status;
						}
						var dragon_type = null;
						var found_in_list = false;
						for (var unit_type in march.units) {
							for (var gd = 0; gd < t.dragonList.length && !found_in_list; gd++) {
								if (t.dragonList[gd].type == unit_type) {
									found_in_list = true;
									dragon_type = unit_type;
								}
							}
						}
						if (dragon_type !== null && t.dragons[dragon_type])
							t.dragons[dragon_type].is_in_city = false;

						var m = cloneProps(march);
						m.target_name = m.destination_name ? translate('City') + ' ' + m.destination_name : translate(m.terrain_type);
						if ((cur_march = Marches.find(m.id)) == null) {
							Marches.add(m, (m.ownerId ? m.ownerId : null));
						} else {
							Marches.update(m);
						}
					}
				}
				for (var i = 0; i < city.jobs.length; i++) {
					t.checkAddJob(city.jobs[i]);
				}
				t.checkRemoveJobs();

				t.updatingCity = false;
				for (var i = 0; i < t.cityInit.length; i++) {
					if (t.cityInit[i].id === city.id && !t.cityInit[i].loaded) {
						t.cityInit[i].loaded = true;
						var message = translate('City') + ' ' + city.id + ' ' + translate('Successfully initialized');
						verboseLog(message);
						debugLog(message);
					}
				}
			},

			/* Function to count number of piece armor (by Didi) */
			checkArmorDragon: function(dragon_type) {
				var t = Seed;
				var armors = ['BodyArmor', 'ClawGuards', 'TailGuard', 'Helmet'];
				var ret = 0;
				for (var i = 0; i < armors.length; i++) {
					if (toNum(Seed.player.items[dragon_type + armors[i]]) !== 0) {
						ret++;
					}
				}
				if (ret == 4) return true;
				else return false;
			},

			checkAddJob: function(job) {
				var t = Seed;
				var cityId = job.city_id;

				if (!job.run_at) {
					debugLog('checkAddJob job.run_at is null:\n' + inspectObj(job, 5, 1));
				} else {
					job.run_at += 1;
				}

				if (!t.jobs[cityId]) {
					t.jobs[cityId] = {};
				}
				if (job.queue == 'march') {

					if ((march = Marches.find(job.march_id)) == null) {

						if (job.run_at < serverTime()) {
							return;
						}
						debugLog('checkAddJob MISSING MARCH:\n' + inspectObj(job, 5, 1)); /*
																							 * +'\n'+
																							 * inspectObj(Data.marches,
																							 * 6,
																							 * 1));
																							 */

					} else {

						march.run_at = job.run_at;
						march.duration = job.duration;
						march.job_id = job.id;
						if (march.status == 'marching') march.real_run_at = job.run_at + toNum(job.duration);
						if (march.real_run_at < march.run_at) march.real_run_at = march.run_at; /*
																								 * Take
																								 * into
																								 * account
																								 * the
																								 * server
																								 * overload
																								 * :))
																								 */
						/* Marches.trace('CheckAddJob', march.id); */

					}
				}
				if (!t.jobs[cityId][job.id]) t.jobs[cityId][job.id] = cloneProps(job);

				// if (job.queue == 'march') return;
				if (job.queue == 'building') {

					Tabs.Jobs.last_built[cityId] = {
						id: job.city_building_id,
						level: job.level
					};
					// logit('Last built =
					// '+inspectObj(Tabs.Jobs.last_built,6,1));

				}
				var found = false;

				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					var city = Seed.cities[cityIdx];
					if (city && city.id == cityId) {
						for (var j = 0; j < city.jobs.length && !found; j++) {
							if (city.jobs[j].id == job.id) {
								city.jobs[j].mergeWith(job);
								found = true;
							}
						}
						if (!found)
							city.jobs.push(job);
					}
				}
			},
			checkRemoveJobs: function() {
				/*
				 * Remove jobs in Seed.jobs that has been cancelled through the
				 * flash game
				 */
				var t = Seed;
				if (!Seed.cities || Seed.cities.length == 0) return;
				for (var cityIdx = 0; cityIdx < Seed.cities.length; cityIdx++) {
					if (!Seed.cities[cityIdx]) continue;
					var cid = Seed.cities[cityIdx].id;
					var city = Seed.cities[cityIdx];
					for (var p in Seed.jobs[cid]) {
						var job = Seed.jobs[cid][p],
							found = false;
						if (job.queue != 'march') {
							for (var i = 0; i < city.jobs.length && !found; i++)
								if (p == city.jobs[i].id) found = true;
							if (!found) {
								debugLog('checkRemoveJob delete job :\n' + inspectObj(job, 5, 1));
								delete(Seed.jobs[cid][p]);
							}
						}
					}
				}
			}
		};
		/******************************** SoundPlayer package ************************/
		var SoundPlayer = {
			alertString: '',
			shortString: '',
			checkInterval: null,
			attack_active: false,
			attack_repeat_timer: null,
			spy_active: false,
			spy_repeat_timer: null,

			SWF_PLAYER_URL: 'https://wackoscripts.com/mp3/teamwork.swf',
			SOUND_TYPES: ['attack', 'spy', 'building', 'research', 'units', 'fortuna'],
			DEFAULT_SOUND_URL: {
				attack: 'https://wackoscripts.com/mp3/tower.mp3',
				spy: 'https://wackoscripts.com/mp3/spy.mp3',
				building: 'https://wackoscripts.com/mp3/construction.mp3',
				units: 'https://wackoscripts.com/mp3/training.mp3',
				research: 'https://wackoscripts.com/mp3/research.mp3',
				fortuna: 'https://wackoscripts.com/mp3/wheel.mp3'
			},


			init: function() {
				var t = SoundPlayer;
				t.oldAlertCount = 0;
				t.checkInterval = setInterval(t.checkAlerts, 1000);
			},
			loadPlayer: function(sound_type, url) {
				var t = SoundPlayer;
				if (!url) {
					if (!Data.options.sound['URL_' + sound_type]) {
						if (!t.DEFAULT_SOUND_URL[sound_type]) return;
						url = t.DEFAULT_SOUND_URL[sound_type];
					} else url = Data.options.sound['URL_' + sound_type];
				}
				var player_url = (Data.options.sound['URL_player'] || SoundPlayer.SWF_PLAYER_URL);
				var player_id = 'SwfPlyr_' + sound_type;
				var container_id = 'div_SwfPlyr_' + sound_type;
				var container = document.getElementById(UID[container_id]);
				var audio = '<object class="playerpreview" id="' + player_id + '" type="application/x-shockwave-flash" data="' + player_url + '" width="50" height="0">' + '	<param name="movie" value="' + player_url + '">' + '	<param name="AllowScriptAccess" value="always" />' + '	<param name="FlashVars" value="mp3=' + url + '&amp;autoplay=1" />' + '</object>';
				if (container) try {
					container.innerHTML = audio;
				} catch (e) {}
			},
			PlaySound: function(sound_type, sample, do_repeat, repeat_delay) {
				var t = SoundPlayer;
				var container_id = 'div_SwfPlyr_' + sound_type;
				var container = document.getElementById(UID[container_id]);
				if ((!sample && (
					((/(building|units|research)/.test(sound_type)) && Data.options.sound.enable_jobs) ||
					((/(attack|spy)/.test(sound_type)) && Data.options.sound.enable_sentinel) ||
					(sound_type == 'fortuna' && Data.options.sound.enable_fortuna))) || sample) {
					t.loadPlayer(sound_type);
					if (!sample && do_repeat && repeat_delay) {
						if (sound_type == 'attack') {
							t.attack_active = true;
							t.attack_repeat_timer = setTimeout(function() {
								t.PlaySound(sound_type, sample, do_repeat, repeat_delay);
							}, repeat_delay * 60000);
						}
						if (sound_type == 'spy') {
							t.spy_active = true;
							t.spy_repeat_timer = setTimeout(function() {
								t.PlaySound(sound_type, sample, do_repeat, repeat_delay);
							}, repeat_delay * 60000);
						}
					}
				}
			},
			StopSound: function(sound_type) {
				var t = SoundPlayer;
				var container_id = 'div_SwfPlyr_' + sound_type;
				var container = document.getElementById(UID[container_id]);
				if (container) container.innerHTML = '';
				if (sound_type == 'attack') {
					t.attack_active = false;
					if (t.attack_repeat_timer) {
						clearTimeout(t.attack_repeat_timer);
						t.attack_repeat_timer = null;
					}
				}
				if (sound_type == 'spy') {
					t.spy_active = false;
					if (t.spy_repeat_timer) {
						clearTimeout(t.spy_repeat_timer);
						t.spy_repeat_timer;
					}
				}
			},
			getNbCurrentAlertForAutoWall: function() {
				var t = SoundPlayer;
				var attacks = 0;
				var spies = 0;
				var d;
				var ret = {
					nbSpyInProgress: 0,
					maxSpy: 0,
					nbAttackInProgress: 0,
					maxTimeArrived: 0
				};
				if (Data.options.messages_tower.length != 0) {
					for (var i = 0; i < Data.options.messages_tower.length; i++) {
						d = Date.parse(Data.options.messages_tower[i].arrive_at) / 1000;
						var now = toNum(serverTime());
						var diff = d - now;
						if (diff > 0) {
							if(diff > ret.maxTimeArrived) {
								ret.maxTimeArrived = diff;
							}
							/*
							 * Counts only sentinel reports for which the
							 * theroical arrival time is not past
							 */
							if (Data.options.messages_tower[i].type == 0) {
								if(!(Data.options.messages_tower[i].warnings && Data.options.messages_tower[i].warnings.outpost_attack)) {
									ret.nbAttackInProgress++;
								}
							}
							if (Data.options.messages_tower[i].type == 1) {
								if(!(Data.options.messages_tower[i].warnings && Data.options.messages_tower[i].warnings.outpost_attack)) {
									ret.nbSpyInProgress++;
									if(Data.options.messages_tower[i].units['Spy']  > ret.maxSpy) {
										ret.maxSpy=Data.options.messages_tower[i].units['Spy'];
									}
								}
							}
						}
					}
				}
				return ret;
			},
			checkAlerts: function() {
				var t = SoundPlayer;
				t.alertString = '';
				t.shortString = '';
				var attacks = 0;
				var spies = 0;
				var raise_attack = false,
					raise_spy = false,
					send_msg = false,
					d;
				if (Data.options.messages_tower.length != 0) {
					for (var i = 0; i < Data.options.messages_tower.length; i++) {
						d = Date.parse(Data.options.messages_tower[i].arrive_at) / 1000;
						var now = toNum(serverTime());
						var diff = now - d;
						if (diff < 0) {
							/* Raise alarm sound only for new reports */
							if (!Data.options.messages_tower[i].warned) {
								Data.options.messages_tower[i].warned = true;
								if (Data.options.messages_tower[i].type == 0) raise_attack = true;
								else raise_spy = true;
							}
							/* Send message to all alliance members if enabled */
							if (!Data.options.messages_tower[i].sent && Data.options.tower.send_message &&
								(Data.options.tower.msg_subject && Data.options.tower.msg_subject != null) &&
								(Data.options.tower.msg_body && Data.options.tower.msg_body != null) &&
								(Data.options.messages_tower[i].type == 0)) {
								Data.options.messages_tower[i].sent = true;
								if (Seed.player.alliance && Seed.player.alliance.id > 0) t.send_message(i);
							}
							/*
							 * Counts only sentinel reports for which the
							 * theroical arrival time is not past
							 */
							if (Data.options.messages_tower[i].type == 0) attacks++;
							if (Data.options.messages_tower[i].type == 1) spies++;
						}
					}
				}
				if (attacks == 0 && t.attack_active) t.StopSound('attack'); /*
																			 * Stop
																			 * attack
																			 * sound
																			 * if
																			 * no
																			 * anymore
																			 * incoming
																			 * attack
																			 */
				if (spies == 0 && t.spy_active) t.StopSound('spy'); /*
																	 * Stop spy
																	 * sound if
																	 * no
																	 * anymore
																	 * incoming
																	 * spy
																	 */
				if (attacks + spies > 0) {
					t.alertString += '<div class=' + UID['info_alerts'] + '>' + translate('Warning') + ' : <B>';
					if (attacks == 0) {
						if (spies > 1) {
							t.alertString += spies + ' ' + translate('spies') + ' (&incoming_spy&)';
							t.shortString += spies + ' ' + translate('spies');
						} else {
							t.alertString += '1 ' + translate('spy') + ' (&incoming_spy&)';
							t.shortString += '1 ' + translate('spy');
						}
					} else if (attacks > 1) {
						if (spies > 1) {
							t.alertString += spies + ' ' + translate('spies') + ' (&incoming_spy&)' + translate('</B> and <B>') + attacks + ' ' + translate('attacks') + ' (&incoming_attack&)';
							t.shortString += spies + ' ' + translate('spies') + ' / ' + attacks + ' ' + translate('attacks');
						} else if (spies == 1) {
							t.alertString += '1 ' + translate('spy') + ' (&incoming_spy&)' + translate('</B> and <B>') + attacks + ' ' + translate('attacks') + ' (&incoming_attack&)';
							t.shortString += '1 ' + translate('spy') + ' / ' + attacks + ' ' + translate('attacks');
						} else {
							t.alertString += attacks + ' ' + translate('attacks') + ' (&incoming_attack&)';
							t.shortString += attacks + ' ' + translate('attacks');
						}
					} else {
						if (spies > 1) {
							t.alertString += spies + ' ' + translate('spies') + ' (&incoming_spy&)' + translate('</B> and <B>') + '1 ' + translate('attack') + ' (&incoming_attack&)';
							t.shortString += spies + ' ' + translate('spies') + ' / 1 ' + translate('attack');
						} else if (spies == 1) {
							t.alertString += '1 ' + translate('spy') + ' (&incoming_spy&)' + translate('</B> and <B>') + '1 ' + translate('attack') + ' (&incoming_attack&)';
							t.shortString += '1 ' + translate('spy') + ' / 1 ' + translate('attack');
						} else {
							t.alertString += '1 ' + translate('attack') + ' (&incoming_attack&)';
							t.shortString += '1 ' + translate('attack');
						}
					}
					t.alertString += '</B> ' + translate('in progress') + '</div>';
					t.shortString = '<input id=' + UID['short_alerts'] + ' type=button class=' + UID['btn_off'] + ' value="' + t.shortString + '" />';
				}
				if (Data.options.tower.enabled && Data.options.sound.enable_sentinel && (raise_attack || raise_spy)) {
					if (raise_attack)
						t.PlaySound('attack', false, (!t.attack_active ? Data.options.sound.repeat_attack : false), Data.options.sound.attack_rdelay);
					else t.PlaySound('spy', false, (!t.spy_active ? Data.options.sound.repeat_spy : false), Data.options.sound.spy_rdelay);
				}
			},
			getFirstAlert: function() {
				var t = SoundPlayer,
					attacks = [],
					spies = [],
					ret = {
						attack: '',
						spy: ''
					};
				if (Data.options.messages_tower.length != 0) {
					for (var i = 0; i < Data.options.messages_tower.length; i++) {
						var diff = toNum(serverTime()) - (Date.parse(Data.options.messages_tower[i].arrive_at) / 1000);
						if (diff < 0) {
							if (Data.options.messages_tower[i].type == 0)
								attacks.push(Data.options.messages_tower[i].arrive_at);
							else spies.push(Data.options.messages_tower[i].arrive_at);
						}
					}
				}
				if (attacks.length > 0) {
					attacks.sort(function(a, b) {
						return a - b;
					});
					ret.attack = timestrh(Date.parse(attacks[0]) / 1000 - toNum(serverTime()));
				}
				if (spies.length > 0) {
					spies.sort(function(a, b) {
						return a - b;
					});
					ret.spy = timestrh(Date.parse(spies[0]) / 1000 - toNum(serverTime()));
				}
				return ret;
			},
			send_message: function(id) {
				var t = SoundPlayer,
					body = Data.options.tower.msg_body,
					msg = Data.options.messages_tower[id],
					found = false,
					city;
				var arrival_time = ((msg.arrive_at != 0) ? new Date(msg.arrive_at).formatDate() + ' ' + new Date(msg.arrive_at).formatTime() : '');
				body = body.replace("%1", msg.alliance);
				body = body.replace("%2", msg.x + ',' + msg.y);
				body = body.replace("%3", msg.troups);
				body = body.replace("%4", arrival_time);
				body = body.replace("%5", Seed.player.name);
				if (toNum(msg.op) != 0) {
					for (var cityIdx = 0; cityIdx < Seed.cities.length && !found; ++cityIdx) {
						if (Seed.cities[cityIdx] && Seed.cities[cityIdx].id == toNum(msg.op)) {
							city = Seed.cities[cityIdx];
							found = true;
						}
					}
				}
				if (!found) city = Seed.cities[CAPITAL.id];
				body = body.replace("%6", translate(city.name));
				body = body.replace("%7", city.x + ',' + city.y);
				MyAjax.messageSend(Data.options.tower.msg_subject, body, Seed.player.alliance.id, false);
			}
		}
		/******************************** Player package *****************************/
		var Player = {
			
			getWildernesses : function() {
				return Seed.player.player_wildernesses;
			},
			
			getNbWildernesses : function() {
				return Player.getWildernesses().length;
			},
			
			addWildernesses : function(w) {
				Player.getWildernesses().push(w);
			},
			
			removeWildernesses : function(w) {
			}
		};
		/******************************** Translation package ************************/
		var Translation = {
			loaded: false,
			xml: {},
			available_langs: [{
				code: 'de',
				desc: 'German'
			}, {
				code: 'en',
				desc: 'English'
			}, {
				code: 'es',
				desc: 'Spanish'
			}, {
				code: 'fr',
				desc: 'French'
			}, {
				code: 'nl',
				desc: 'Dutch'
			}, {
				code: 'sv',
				desc: 'Swedish'
			}],

			/* WARNING: DON'T CHANGE THIS ORDER */
			_section: [
				'items',
				'common',
				'boosts',
				'buildings',
				'messages',
				'dialogs',
				'dragons',
				'levels',
				'troops',
				'map',
				'alliances',
				'outposts',
				'research',
				'quests',
				'trading',
				'activerecord'
			],

			init: function(notify) {
				var t = Translation;
				t.fetchLocale(function(rslt) {
					if (rslt.ok) {
						verboseLog(translate('Locale data was Successfully requested from the sever'));
						t.loaded = true;
						t.fixResults();
					} else verboseLog('fetchLocale ' + translate('was returned with a status of') + ' ' + rslt.ok + ' - ' + rslt.errmsg);
					/* logit(inspectObj(Translation.xml.outposts,8,1)); */
					if (notify) notify(rslt);
				});
			},

			fetchLocale: function(notify) {
				var t = Translation;
				new MyAjaxRequest('locales', 'locales/' + C.attrs.locale + '.xml', {
					'_swf_session_id': C.attrs.sessionId
				}, function(rslt) {
					if (rslt.ok) {
						try {
							t.parseXML(rslt.dat);
						} catch (e) {
							rslt.ok = false;
							rslt.errmsg = e.toString();
						}
					} else if (rslt.errmsg.indexOf('404') !== -1) {
						new MyAjaxRequest('locales', 'locales/en.xml', {
							'%5Fswf%5Fsession%5Fid': C.attrs.sessionId
						}, function(rslt) {
							if (rslt.ok) {
								try {
									t.parseXML(rslt.dat);
								} catch (e) {
									rslt.ok = false;
									rslt.errmsg = e.toString();
								}
							}
							if (notify) notify(rslt);
							return;
						});
					}
					if (notify) notify(rslt);
				});
			},

			parseXML: function(xmlStr) {
				var t = Translation;
                var now = parseInt( serverTime() );
                
				/* Remove sections where invalid tags ar present */
				if (xmlStr.indexOf('<targeted-messages>') > 0) xmlStr = xmlStr.substring(0, xmlStr.indexOf('<targeted-messages>')) + xmlStr.substring(xmlStr.indexOf('</targeted-messages>') + 20);

				xmlStr = xmlStr.replace(/<[0-9]+/g, '<');
				xmlStr = xmlStr.replace(/<\/[0-9]+/g, '<\/');
				
				// Didi : complete empty balise
				xmlStr = xmlStr.replace(/<>/g,'<Teamwork_'+now+'>');
				xmlStr = xmlStr.replace(/<\/>/g,'<\/Teamwork_'+now+'>');

				// Didi : replace illegal starting char
				xmlStr = xmlStr.replace(/<[-;,\.<>]/g,'<Teamwork-');
				xmlStr = xmlStr.replace(/<\/[-;,\.<>]/g,'<\/Teamwork-');
				
				xmlTmpObj = new XML.ObjTree();
				var dat = xmlTmpObj.parseXML(xmlStr);

				if (dat.translations) {
					if (dat.translations.parsererror) {
						debugLog('erreur parsing : ' + inspectObj(dat.translations.parsererror, 8, 1));
					}
					for (sect in dat.translations) {
						var to_keep = false;
						for (i = 0; i < t._section.length && !to_keep; i++) {
							if (sect === t._section[i]) to_keep = true;
						}
						if (!to_keep) delete dat.translations[sect];
					}
					t.xml = dat.translations;
				} else
					verboseLog('Error in the XML file structure: <translations> element not found!');
			},

			fixResults: function() {
				var t = Translation.xml;

				function objectToFlat(obj) {
					var r = {};
					for (var key in obj) {
						if (typeof obj[key] === 'object') {
							for (var subkey in obj[key]) {
								if (typeof(obj[key])[subkey] === 'object') {
									for (var subsubkey in (obj[key])[subkey]) {
										if (subsubkey === 'title' || subsubkey === 'name')
											r[key + '-' + subkey] = ((obj[key])[subkey])[subsubkey];
										else
											r[key + '-' + subkey + '-' + subsubkey] = ((obj[key])[subkey])[subsubkey];
									}
								} else {
									if (subkey === 'title' || subkey === 'name')
										r[key] = (obj[key])[subkey];
									else
										r[key + '-' + subkey] = (obj[key])[subkey];
								}
							}
						} else {
							r[key] = obj[key];
						}
					}
					return r;
				}

				var section = ['dialogs', 'messages', 'activerecord', 'dragons', 'alliances']; /* ,'errors','confirmations' */
				for (var i = 0; i < section.length; i++) {
					if (t[section[i]]) t[section[i]] = objectToFlat(t[section[i]]);
				}

				var newObjQuests = {};
				for (var key in t.quests) {
					if (typeof t.quests[key] == 'object') {
						for (var subkey in t.quests[key]) {
							switch (subkey) {
								case 'title':
									newObjQuests[key] = (t.quests[key])[subkey];
									break;
								case 'objectives':
									newObjQuests[key + '-' + subkey] = (t.quests[key])[subkey];
									break;
								default:
									break;
							}
						}
					} else {
						newObjQuests[key] = t.quests[key];
					}
				}
				Translation.xml['quests'] = cloneProps(newObjQuests);

				try {
					t.common.information = t.common.info;
					t.common.Info = t.common.info;
					t.common.omit = t.common.skip;
					t.common['spy-on'] = t.common.spy;
					t.dialogs.researching = t.dialogs.research;

					t.common['enter-coords'] = t.dialogs['attack-screen-enter-coords'];
					t.common['battle-report'] = t.messages['battle-report-title'];
					t.common['auto-collection-of-resources'] = t.dialogs['boost-collect-day'].replace(/:/, '');

					t.common['has-too-many-marches'] = t.activerecord['errors-models-march']['attributes']['player-id']['has-too-many-marches'];
					t.common['not-enough-units'] = t.activerecord['errors-models-march']['attributes']['city-id']['not-enough-units'];
					t.common['could-not-claim'] = t.activerecord['errors-models-player-quest']['could-not-claim'];

					t.common.levels = findSimilarWord(t.common.level, t.messages['spy-tip-prefix']);

					for (var o in t.outposts) {
						if (o.indexOf('-outpost')) {
							var x = o.replace('-outpost', '_dragon') + '-outpost';
							t.outposts[x] = t.outposts[o];
						}
					}
					delete t.common.error;
					delete t.common.home;
					delete t.common.info;
					delete t.common['ranged-attack'];
					delete t.common.skip;
					delete t.common.spy;
					delete t.messages.date;
					delete t.messages.fought;
					delete t.messages.subject;
					delete t.messages.to;
					delete t.dialogs.research;
					delete t.dialogs.spy;
					delete t.dialogs.unavailable;
					delete t.dialogs.upkeep;
				} catch (e) {
					debugLog('Error whilst fixing translation matrix results :\n' + inspectObj(e, 8, 1));
				}
			},

			_normalize: function(str) {
				return (str.toString() || '').toLowerCase().replace(/ /g, '-');
			},

			getContent: function(section, key, subkey) {
				key = Translation._normalize(key);
				if (Translation.xml[section] != undefined) {
					if ((Translation.xml[section])[key] != undefined) {
						return subkey ? ((Translation.xml[section])[key])[subkey] : (Translation.xml[section])[key];
					}
				}
				return false;
			},
			alliances: function(key) {
				return Translation.getContent('alliances', key);
			},
			buildings: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('buildings', key, subkey);
			},
			common: function(key) {
				return Translation.getContent('common', key);
			},
			activerecord: function(key) {
				return Translation.getContent('activerecord', key);
			},
			items: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('items', key, subkey);
			},
			boosts: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('boosts', key, subkey);
			},
			dragons: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('dragons', key, subkey);
			},
			dialogs: function(key) {
				return Translation.getContent('dialogs', key);
			},
			levels: function(key) {
				return Translation.getContent('levels', key, 'title');
			},
			map: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('map', key, subkey);
			},
			messages: function(key) {
				return Translation.getContent('messages', key);
			},
			outposts: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('outposts', key, subkey);
			},
			trading: function(key) {
				return Translation.getContent('trading', key);
			},
			troops: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('troops', key, subkey);
			},
			research: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('research', key, subkey);
			},
			quests: function(key, subkey) {
				subkey = subkey != undefined ? subkey : 'name';
				return Translation.getContent('quests', key, subkey);
			}
		};

		/* Provide language translation services based on the browswer language */
		var needTranslate = {};

		function translate(str, ignore) {
			if (TRANSLATION_ARRAY[str] != undefined) {
				return TRANSLATION_ARRAY[str];
			} else if (Translation.loaded) {
				if( str != undefined) {
					var newStr;
					for (var i = 0; i < Translation._section.length; ++i) {
						newStr = Translation[Translation._section[i]](str);
						if (newStr) return newStr;
					}
				}
				if (IS_NOT_NATIVE_LANG && needTranslate[str] == undefined) {
					needTranslate[str] = 1;
					if (Tabs.Log && !ignore) logit('( Translate ) -> "' + str + '"');
				}
			}
			return str;
		}

		function translateByKey(str, key, section) {
			if (Translation.loaded) {
				var newStr;
				if (section) {
					if (key) newStr = Translation[section](key, str);
					else newStr = Translation[section](str);
					if (newStr) return newStr;
				}
				for (var i = 0; i < Translation._section.length; ++i) {
					if (key) newStr = Translation[Translation._section[i]](key, str);
					else newStr = Translation[Translation._section[i]](str);
					if (newStr) return newStr;
				}
			} else if (TRANSLATION_ARRAY[str] != undefined) {
				return TRANSLATION_ARRAY[str];
			}
			if (IS_NOT_NATIVE_LANG && needTranslate[str] == undefined) {
				needTranslate[str] = 1;
				if (Tabs.Log) logit('( Translate ) -> "' + str + '"');
			}
			return str;
		}
		/******************************** Translation package ************************/

		/******************************** VerboseLog package *************************/
		var VerboseLog = {
			init: function() {
				VerboseLog.setEnable(Data.options.verboseLog.enabled);
			},

			setEnable: function(onOff) {
				Data.options.verboseLog.enabled = onOff;
			}
		};
		/******************************** VerboseLog package *************************/

		/******************************** Wackoscript package ************************/
		var WackoScript = {
			/* Didi : Internet Ressource manager */
			url_binary_file: [],

			init: function() {
				var t = WackoScript;
				for (var type in Data.options.sound) {
					if (/URL_/.test(type))
						t.url_binary_file.push({
							url: Data.options.sound[type],
							type: type,
							load_timer: null,
							retries: 0
						});
				}
				for (var i = 0; i < t.url_binary_file.length; i++)
					t.url_binary_file[i].load_timer = setTimeout(t.LoadBinary, 1000, t.url_binary_file[i].url, i, false);
			},
			LoadBinary: function(url, index, degraded) {
				var t = WackoScript,
					p = {}, method = 'GET';
				if (degraded && url.indexOf('wackoscripts') > 0) { /*
																	 * manage
																	 * www
																	 * string
																	 * for
																	 * wackoscripts
																	 * URL (SSL
																	 * certificate
																	 * that
																	 * needs www
																	 * for
																	 * chrome,
																	 * and not
																	 * for FF)
																	 */
					if (url.indexOf('//www.') > 0) url = url.replace('//www.', '//');
					else url = url.replace('//wacko', '//www.wacko');
				}
				new MyAjaxRequest('binary', url, p, mycb, false, true);

				function mycb(rslt) {
					if (rslt.ok) {
						logit('url ' + url + ' loaded ==> OK');
						var type = t.url_binary_file[index].type;
						if ((/URL_/.test(type)) && Data.options.sound[type] != url) {
							Data.options.sound[type] = url;
							logit('New url for Data.options.sound.' + type + ' = ' + url);
						}
					} else {
						clearTimeout(t.url_binary_file[index].load_timer);
						t.url_binary_file[index].retries++;
						t.url_binary_file[index].load_timer = null;
						if (t.url_binary_file[index].retries < 6) {
							logit('url ' + url + ' not loaded ==> Retry in 5 seconds');
							t.url_binary_file[index].load_timer = setTimeout(t.LoadBinary, 5000, url, index, true);
						} else {
							logit('url ' + url + ' not loaded ==> This sound won\'t probably work when needed...');
						}
					}
					return;
				}
			}
		};
		/******************************** Wackoscript package ************************/
		
		/** ************** Functions *************** */
		function buttonSpyNow(container, target) {
			function checkSpy(targetObj, notify) {
				var cityId = Seed.cities[CAPITAL.id].id;
				var cityIdx = CAPITAL.id;
				var units = [];
				units['Spy'] = 1;
				var attackUnits = checkTroops(CAPITAL.id, units);
				if (attackUnits != null) {
					notify(getErrorText(attackUnits, 'fb'));
					return;
				}
				var targMsg = '<B>' + translate('Manual spy sent to') + '</B>: ' + targetObj.n + ' ' + translate('at') + ' ' + targetObj.x + '/' + targetObj.y;
				verboseLog(targMsg + ' ' + translate('attempted'));
				new MyAjax.marchSpy(cityId, targetObj.x, targetObj.y, units, 'attacks', function(rslt) {
					if (rslt.ok && rslt.dat.result.success) {
						verboseLog(targMsg + ' ' + translate('Successfully'));
						actionLog(targMsg);
						if (notify) notify('OK');
					} else {
						verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						if (notify) notify(translate('Error') + ': ' + rslt.errmsg);
					}
				});
			}
			var dial = new ModalDialog(container, 300, 150, '', false);
			dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
			dial.getContentDiv().innerHTML = translate('Spying');
			checkSpy(target, notify);

			function notify(rslt) {
				if (rslt != 'OK') {
					dial.getContentDiv().innerHTML = '<b>' + rslt + '</b>';
					dial.allowClose(true);
				} else {
					dial.getContentDiv().innerHTML = '<b>' + translate('OK') + '</b>';
					setTimeout(function() {
						dial.destroy()
					}, 1000);
				}
			}
		}

		function checkCoords(tab, units, options) {
			var ex = document.getElementById(UID[tab + '_CoordsX']);
			var ey = document.getElementById(UID[tab + '_CoordsY']);
			var x = toNum(ex.value);
			var y = toNum(ey.value);
			ex.value = x;
			ey.value = y;

			if (!is_null(units)) {
				var time = getMarchTime(x, y, units);
				document.getElementById(UID[tab + '_Distance']).innerHTML = getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, x, y) + ' (' + timestrShort(time) + ')';
			}
			document.getElementById(UID[tab + '_Tile']).innerHTML = '&nbsp;';

			if (x < 0 || x > 749) {
				if (x < 0) {
					while (x < 0) x = 750 + x;
				} else {
					while (x > 749) x = x - 750;
				}
				ex.style.backgroundColor = 'red';
				return;
			}
			if (y < 0 || y > 749) {
				if (y < 0) {
					while (y < 0) y = 750 + y;
				} else {
					while (y > 749) y = y - 750;
				}
				ey.style.backgroundColor = 'red';
				return;
			}
			options.x = x;
			options.y = y;
			ey.style.backgroundColor = '';
			ex.style.backgroundColor = '';

			Map.tileAt({
				x: x,
				y: y,
				force_request: true
			}, function(target) {
				if (target && target.ok) {
					var cfeedBack = '';
					options.level = target.l;
					if (options.ai) options.ai = target.ai;
					var attColor = target.A ? '#000' : '#C22';

					var type_name = Map.names.type[target.t] || target.t;
					var type = 'C';
					if (target.t != 7 && target.t < 10) type = 'W'; /* 7 = city, from 10 = outposts */

					var tile = '<font color=' + attColor + '>' + '<b>' + translate(type_name) + '&nbsp;' + translate('Level') + '&nbsp;' + target.l + '</b>' + '</font>';
					if (target.cn != undefined && type != 'W') {
						options.id = target.id;
						options.n = target.n;
						tile += '<br>' + translate('City') + ': <b>' + target.cn + '</b> - ' + translate('Alliance') + ': <b>' + ((target.a != undefined && target.a != 0) ? target.a : '----') + '</b>' + '<br>' + translate('Name') + ': <b>' + target.n + '</b> - ' + translate('Level') + ': <b>' + target.l + '</b> - ' + translate('Might') + ': <b>' + target.m + '</b>';
						cFeedBack = translate(type_name) + ' ' + target.n + ' (' + numf(target.m) + ')' + ((target.a != undefined && target.a != 0) ? ' / ' + target.a : '');
					} else {
						options.id = target.id;
						options.n = '';
						cFeedBack = translate(type_name) + ' ' + translate('Level') + ' ' + target.l;
					}
					options.type = cFeedBack;
					if (document.getElementById(UID[tab + '_Tile']))
						document.getElementById(UID[tab + '_Tile']).innerHTML = tile;
					else
						logit('checkCoords : UID[' + tab + '_Tile] not defined');
				}
			});
		}

		function checkMarch(targetMsg, feedback_element, marchCount, retryDelay, count_type, max_type, generalId, checkGeneral) {
			var checkresult = 0;
			if (MyAjax.marchBusy) {
				checkresult = 1;
				raiseMessage(targetMsg, feedback_element, checkresult, false, retryDelay);
				return (checkresult);
			}
			if ((marchCount > Seed.cities[CAPITAL.id].figures.marches.maximum) || (count_type >= max_type)) {
				checkresult = 2;
				raiseMessage(targetMsg, feedback_element, checkresult, true, retryDelay);
				return (checkresult);
			}
			if (generalId === null && checkGeneral) {
				checkresult = 3;
				raiseMessage(targetMsg, feedback_element, checkresult, false, retryDelay);
				return (checkresult);
			}
			return (checkresult);
		}

		function checkTroops(cityIdx, units) {
			/* returns null if ok, else error message */
			var totalTroops = 0,
				unit_qty = 0,
				muster_point = getMusterPoint(cityIdx);
			for (var p in units) {
				unit_qty = toNum(units[p]);
				if (unit_qty > 0) {
					totalTroops += unit_qty;
					if (Seed.cities[cityIdx].units[p] < unit_qty)
						return (translate('not-enough-units') + ' ' + translate(p));
				}
			}
			if (totalTroops <= 0) return (4);
			for (var p in units) {
				unit_qty = toNum(units[p]);
				if (unit_qty > 0) {
					if (unit_qty > muster_point.max_troops) return (2);
				}
			}
			if (totalTroops > muster_point.max_troops) return (2);
			if (muster_point.slots <= 0) return (2);
			return null;
		}

		function dispFeedback(target, msg) {
			if (msg && msg != '')
				msg = new Date().toTimeString().substring(0, 8) + ' ' + msg;
			if (target && document.getElementById(target)) document.getElementById(target).innerHTML = msg;
		}

		function objAddTo(o, name, val, transcoding) {
			var qty, item;
			if (Names.transco[name] && transcoding) {
				qty = Names.transco[name][1] * val;
				item = Names.transco[name][0];
			} else {
				qty = val;
				item = name;
			}
			if (!o[item]) o[item] = qty;
			else o[item] += qty;
		}

		function generalList(cityIdx) {
			var ret = {};
			var generals = Seed.cities[cityIdx].generals;
			for (var i = 0; i < generals.length; i++) {
				ret[generals[i].id] = generals[i].name + ' (' + translate('rank') + ':' + generals[i].rank + ' / ' + translate('victory')  + ':' + generals[i].victory + ')';
			}
			return ret;
		}

		function getAllianceRelationship(id, name) {
			var found = false;
			var ret = name;
			if (Data.dynamic.players.friends) {
				for (var x = 0; x < Data.dynamic.players.friends.length && !found; x++) {
					if (Data.dynamic.players.friends[x] == id) {
						found = true;
						ret = '<span class=' + UID['green'] + '>' + name + '</span>';
					}
				}
			}
			if (Data.dynamic.players.foes && !found) {
				for (var x = 0; x < Data.dynamic.players.foes.length && !found; x++) {
					if (Data.dynamic.players.foes[x] == id) {
						found = true;
						ret = '<span class=' + UID['red'] + '>' + name + '</span>';
					}
				}
			}
			return ret;
		}

		function getAllianceState(id) {
			var found = false;
			var ret = '0';
			if (Data.dynamic.players.friends) {
				for (var x = 0; x < Data.dynamic.players.friends.length && !found; x++) {
					if (Data.dynamic.players.friends[x] == id) {
						found = true;
						ret = '1';
					}
				}
			}
			if (Data.dynamic.players.foes && !found) {
				for (var x = 0; x < Data.dynamic.players.foes.length && !found; x++) {
					if (Data.dynamic.players.foes[x] == id) {
						found = true;
						ret = '-1';
					}
				}
			}
			return ret;
		}

		function getAvailableDragon(include_exclude, dragon_list) {
			/*
			 * include_exclude : true = list of dragons that can be sent, false =
			 * list of dragons to not send
			 */
			var found = false;
			for (var gd = 0; gd < Seed.dragonList.length && !found; gd++) {
				var dragon = Seed.dragons[Seed.dragonList[gd].type];
				var curName = dragon.name;
				var isInCity = dragon.is_in_city;
				var canAttack = dragon.can_attack;
				var curLife = dragon.life;
				var maxLife = dragon.maximum_life;
				var is_in_list = true;
				if (dragon_list) is_in_list = dragon_list[Seed.dragonList[gd].type];
				if (((curLife / maxLife) >= 0.75) && isInCity && canAttack &&
					((include_exclude && is_in_list) || (!include_exclude && !is_in_list))) {
					found = true;
				}
			}
			if (found)
				return curName;
			else
				return null;
		}

		function getAvailableGeneral() {
			var general = null;
			var rank = 6;
			for (var p in Seed.generals) {
				if (!Seed.generals[p].busy) {
					if (Seed.generals[p].rank < rank) {
						rank = Seed.generals[p].rank;
						general = Seed.generals[p]
					}
				}
			}
			return general;
		}

		function getBoosts() {
			var ret = [];
			for (var i in Seed.player.boosts) {
                var longName = '';
				if (i == 'curser') continue;
				for (var j = 0; j < Seed.player.boosts[i].length; j++) {
					var id = 0,
						name = '';
					var boost = Seed.player.boosts[i][j];
					switch (i) {
						case 'safety':
							id = 0;
							name = 'Protection';
							break;
						case 'collect_resources':
							id = 2;
							name = translate('boost-collect-week');
							break;
						case 'food':
						case 'ore':
						case 'stone':
						case 'wood':
							id = 2;
							name = translateByKey('name', ('nano-' + i).replace(/ |_/g, '-'), 'boosts');
							break;
						case 'gold':
							id = 2;
							name = translateByKey('name', i.replace(/ |_/g, '-'), 'boosts');
							break;
						case 'food_curse':
							id = 5;
							name = translate('curselocusts');
							break;
						case 'ore_curse':
						case 'stone_curse':
						case 'wood_curse':
						case 'blue_curse':
							id = 5;
							name = translate(i.substring(0, i.indexOf('_')));
							if (boost.amount && boost.amount != null && boost.amount != '')
								name += ' (' + ((boost.amount < 1) ? numf(boost.amount * 100) + '%' : numf(boost.amount)) + ')';
							break;
						default:
							if (boost.source == 'timer') {
								id = 2;
								name = translate('boost-combat-' + i.replace(/ |_/g, '-'));
							} else if (boost.source == 'dragon') {
								id = 3;
								var rate = ((boost.amount < 5) ? numf(Math.round(boost.amount * 100)) + '%' : numf(boost.amount));
								name = translateByKey('name', i.replace(/ |_/g, '-'), 'boosts') + ' (' + rate + ')';
								//if (name.indexOf('n%') > 0) name = name.substring(0, name.indexOf('n%')) + rate + name.substring(name.indexOf('n%') + 2);
                                //if (name.indexOf('%boost%') > 0) name = name.substring(0, name.indexOf('%boost%')) + rate + name.substring(name.indexOf('%boost%') + 7);
							} else {
								id = 4;
								name = translate(i.replace(/ |_/g, '-'));
							}
							break;
					}
                    longName = name;
                    if(name.length > 94) {
                        name = name.substring(0,43) + '[...]' + name.substring(name.length-43,name.length);
                    }
					ret.push({
						id: id,
						type: i,
						name: name,
                        longName: name,
						run_at: boost.expires_at
					});
				}
			}
			/* sort by id and name */
			ret.sort(function(a, b) {
				if (a.id > b.id) return 1;
				else if (a.id < b.id) return -1;
				else {
					a = a.name.toLowerCase();
					b = b.name.toLowerCase();
					if (a > b) return 1;
					else if (a < b) return -1;
					return 0;
				}
			});
			return ret;
		}

		function getBuildingById(cityIdx, bId) {
			var b = Seed.cities[cityIdx].buildings;
			for (var i = 0; i < b.length; i++) {
				if (b[i].id == bId) return b[i].type;
			}
			return '';
		}

		function getCityType(id) {
			var type = '';
			for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
				if (Seed.cities[cityIdx] && Seed.cities[cityIdx].id == id) {
					if (Seed.cities[cityIdx].type == 'Outpost') {
						switch (Seed.cities[cityIdx].outpost_type) {
							case 'WaterDragonOutpost':
								type = 'Water';
								break;
							case 'StoneDragonOutpost':
								type = 'Stone';
								break;
							case 'FireDragonOutpost':
								type = 'Fire';
								break;
							case 'WindDragonOutpost':
								type = 'Wind';
								break;
							case 'IceDragonOutpost':
								type = 'Ice';
								break;
							case 'SwampDragonOutpost':
								type = 'Swamp';
								break;
							case 'ForestDragonOutpost':
								type = 'Forest';
								break;
							case 'DesertDragonOutpost':
								type = 'Desert';
								break;
							case 'ChronoDragonOutpost':
								type = 'Chrono';
								break;
							case 'KaiserDragonOutpost':
								type = 'Sky';
								break;
							case 'CaveDragonOutpost':
								type = 'Cave';
								break;
							case 'LunaDragonOutpost':
								type = 'Luna';
								break;
							case 'ColossusDragonOutpost':
								type = 'Colossus';
								break;
							default:
								type = '';
						}
					}
				}
			}
			if (type != '') {
				if (Data.options.disable_alliance) type = '<br><span class=' + UID['bold_red'] + '>OP : ' + translate(type) + '</span>';
				else type = '<br><U><div id=' + setUID('goto_reinforcement') + ' ref="' + id + '"><A><span class=' + UID['bold_red'] + '>OP : ' + translate(type) + '</span></A></div></U>';
			}
			return type;
		}

		function getCityShortType(cityIdx) {
			var type = '';
			switch (toNum(cityIdx)) {
				case CAPITAL.id:
					type = CAPITAL.type;
					break;
				case WATER_OUTPOST.id:
					type = WATER_OUTPOST.type;
					break;
				case STONE_OUTPOST.id:
					type = STONE_OUTPOST.type;
					break;
				case FIRE_OUTPOST.id:
					type = FIRE_OUTPOST.type;
					break;
				case WIND_OUTPOST.id:
					type = WIND_OUTPOST.type;
					break;
				case ICE_OUTPOST.id:
					type = ICE_OUTPOST.type;
					break;
				case SWAMP_OUTPOST.id:
					type = SWAMP_OUTPOST.type;
					break;
				case FOREST_OUTPOST.id:
					type = FOREST_OUTPOST.type;
					break;
				case DESERT_OUTPOST.id:
					type = DESERT_OUTPOST.type;
					break;
				case CHRONO_OUTPOST.id:
					type = CHRONO_OUTPOST.type;
					break;
				case SKY_OUTPOST.id:
					type = SKY_OUTPOST.type;
					break;
				case CAVE_OUTPOST.id:
					type = CAVE_OUTPOST.type;
					break;
				case LUNA_OUTPOST.id:
					type = LUNA_OUTPOST.type;
					break;
				case COLOSSUS_OUTPOST.id:
					type = COLOSSUS_OUTPOST.type;
					break;
				default:
					break;
			}
			return type;
		}

		function getErrorText(error, type) {
			return (isNaN(error) ? error : translate(marchErrorTexts[error][type]));
		}

		function getMarchTime(x, y, units) {
			var dist = getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, x, y);
			var speed = 99999;
			for (var unit in units) {
				if (units[unit] > 0) {
					if (Seed.stats.unit[unit]) {
						if (Seed.stats.unit[unit].speed < speed) speed = Seed.stats.unit[unit].speed;
					} else speed = 100;
				}
			}
			var time = dist / ((Seed.cities[CAPITAL.id].figures.marches.speed_multiplier * speed) / 6000) + 30;
			return time;
		}

		function getMinDelay() {
			var count = 0,
				delay = 0,
				min_time = 700000,
				max_time = 0;
			for (var type in Data.marches) {
				if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
				for (var id in Data.marches[type]) {
					var march = (Data.marches[type])[id];
					++count;
					var left_time = (march.run_at - toNum(serverTime())) + (march.status == 'marching' ? march.duration : 0);
					if (left_time > 0) {
						min_time = min_time < left_time ? min_time : left_time;
						max_time = max_time > left_time ? max_time : left_time;
					}
				}
			}
			if (min_time === 700000 || max_time === 0) min_time = 3;
			delay = min_time + Math.randRange(2, 5);
			return {
				count: count,
				delay: delay
			};
		}

		function getMusterPoint(cityIdx) {
			var lvl = (Buildings.getLevel(cityIdx, 'MusterPoint')).max;
			if (is_null(Seed.cities[cityIdx].figures.marches.maximum_troops)) {
				if (lvl)
					if (lvl <= 10) var maxLvl = lvl * 10000;
					else var maxLvl = ((lvl - 10) * 20000) + 100000;
			} else var maxLvl = Seed.cities[cityIdx].figures.marches.maximum_troops;
			return ({
				slots: ((!lvl) ? 0 : lvl - Seed.numMarches),
				max_troops: maxLvl
			});
		}

		function getProtectionTime() {
			var protection_time = 0,
				found = false;
			if (is_protected() && Seed.player.boosts.safety) {
				for (var i = 0; i < Seed.player.boosts.safety.length && !found; i++) {
					var time = Seed.player.boosts.safety[i].expires_at;
					protection_time = (time > serverTime()) ? (time - serverTime()) : 0;
					found = true;
				}
			}
			return protection_time;
		}

		function getSoulCapacity() {
			if (Seed.cities[SPECTRAL_OUTPOST.id]) {
				var min = 0;
				if (Seed.cities[CAPITAL.id].souls) {
					for (var troop in Seed.cities[CAPITAL.id].souls)
						min += Seed.cities[CAPITAL.id].souls[troop];
				}
				return {
					min: min,
					max: Seed.cities[CAPITAL.id].figures.soul_cap
				};
			} else {
				return {
					min: 0,
					max: 0
				};
			}
		}

		function getTotTrainTable() {
			var now = serverTime();
			var totalTrain = [];
			for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
				var time = 0;
				if (Seed.cities[cityIdx] && Seed.cities[cityIdx].jobs) {
					var jobs = Seed.cities[cityIdx].jobs;
					var trains = [];
					for (var j = 0; j < jobs.length; j++)
						if (jobs[j].queue == 'units' && jobs[j].unit_type && jobs[j].run_at > now) trains.push(jobs[j]);
					if (trains.length > 0) {
						trains.sort(function(a, b) {
							return a.run_at - b.run_at;
						});
						var time = trains[trains.length - 1].run_at - now;
					}
				}
				if (Seed.cities[cityIdx] && cityIdx != SPECTRAL_OUTPOST.id && cityIdx != SKY_OUTPOST.id && cityIdx != LUNA_OUTPOST.id) totalTrain.push({
					cityIdx: cityIdx,
					total: time
				});
			}
			totalTrain.sort(function(a, b) {
				return a.total - b.total
			});
			return totalTrain;
		}

		function getTroopNumbers(cityIdx, troopType) {
			var incity = 0,
				indefense = 0,
				marches = 0,
				intraining = 0,
				inresurrection = 0,
				inmosauleum = 0;
			var city = (typeof cityIdx == 'number') ? Seed.cities[cityIdx] : cityIdx;
			incity = city.units[troopType] ? city.units[troopType] : 0;
			if (city.defense_force) indefense = city.defense_force[troopType] ? city.defense_force[troopType] : 0;
			for (var type in Data.marches) {
				if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
				for (var id in Data.marches[type]) {
					var march = (Data.marches[type])[id];
					for (var name in march.units) {
						if (troopType == name)
							marches += march.units[name];
					}
				}
			}
			for (var city_idx = 0; city_idx < Seed.cities.length; city_idx++) {
				var trains = Jobs.getJobs('units', false, city_idx);
				for (var i = 0; i < trains.length; i++) {
					if (troopType === trains[i].unit_type)
						intraining += trains[i].quantity;
				}
			}
			for (var city_idx = 0; city_idx < Seed.cities.length; city_idx++) {
				var resurrect = Jobs.getJobs('resurrection', false, city_idx);
				for (var i = 0; i < resurrect.length; i++) {
					if (troopType === resurrect[i].unit_type)
						inresurrection += resurrect[i].quantity;
				}
			}
			var souls = Seed.cities[0].souls;
			if (souls && souls[troopType]) inmosauleum += souls[troopType];

			return {
				incity: incity,
				indefense: indefense,
				marches: marches,
				intraining: intraining,
				inresurrection: inresurrection,
				souls: inmosauleum,
				total: incity + marches + indefense,
				all: incity + marches + indefense + intraining + inresurrection + inmosauleum
			};
		}

		function getTroops(trps, sep) {
			var result = '';
			var tRes = [];
			for (var i in trps) {
				if (trps[i] > 0) tRes.push(numf(trps[i], ' ') + ' ' + translate(i));
				else if (trps[i] == -1) tRes.push('Max ' + translate(i));
			}
			if (tRes.length > 0) result = tRes.join(',' + sep);
			return result;
		}

		function isTrainable(cityIdx, unit) {
			var trainables = Seed.stats.unit[unit].trainable,
				found = false;
			var city_type = getCityShortType(cityIdx);
			for (i = 0; i < trainables.length && !found; i++) {
				if (city_type == trainables[i]) found = true;
			}
			return found;
		}

		function isUnderProtection() {
			if (Seed.player.boosts.safety) return true;
			else return false;
		}

		function onClickMsg(event) {
			var ids = event.target.getAttribute('ref').split('_');
			dialogSendMsg(ids[1], ids[0], true);
		}

		function raiseMessage(what, element, error, prefix, delay) {
			var prefixMsg = (prefix ? getErrorText(0, 'vb') + ' ' : '');
			var verboseMsg = prefixMsg + getErrorText(error, 'vb');
			var feedbackMsg = getErrorText(error, 'fb');
			verboseLog(what + ' ' + verboseMsg + ': ' + translate('Retry in') + ' ' + delay + ' ' + translate('seconds'));
			dispFeedback(element, feedbackMsg + ': ' + translate('Retry in') + ' ' + delay + ' ' + translate('seconds'));
		}

		function refreshPlayerData(container, notify) {
			var options = {
				cities: [],
				jobs: true,
				dragons: true
			};
			options.cities.push(Seed.cities[CAPITAL.id].id);
			var dial = new ModalDialog(container, 300, 165, '', false, null);
			dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
			dial.getContentDiv().innerHTML = translate('Refreshing player and cities data');
			Seed.fetchPlayer(function(rslt) {
				if (rslt.ok) {
					verboseLog(translate('Player data was Successfully requested from the server'));
					try {
						dial.destroy();
					} catch (e) {}
					if (notify) notify(true);
					return;
				} else {
					try {
						dial.getContentDiv().innerHTML = translate('Error while retrieving player data') + '&nbsp;\n' + rslt.errmsg; /* inspectObj(rslt,6,1)); */
						dial.allowClose(true);
					} catch (e) {}
					if (notify) notify(false);
					return;
				}
			}, options);
		}

		function saveBookmark(container, x, y, type, level, id, name, units, ai, include_great_dragon, include_exclude, great_dragons, comment, cptDESC) {
			var target_desc = '';
            if( typeof(cptDESC) !== 'undefined' )
                target_desc = cptDESC;
            if (Data.options.bookmarks.targets && Data.options.bookmarks.targets.length > 0) {
				var h = cloneProps(Data.options.bookmarks.targets);
				for (var i = h.length - 1; i >= 0; i--) {
					if ((h[i].x == x) && (h[i].y == y))
						Data.options.bookmarks.targets.splice(i, 1);
				}
			}
			var target_id = id,
				target_name = name;
			var target_type = 0;
			Map.tileAt({
				x: x,
				y: y,
				force_request: false
			}, function(target) {
				if (target && target.ok) {
					if (target.t == 7 || target.t >= 10) target_type = 0;
					else if (target.t == 8) target_type = 1;
					else target_type = 2;
					var type_name = Map.names.type[target.t] || target.t;
					if (target.cn != undefined && target_type == 0) {
						target_desc = translate(type_name) + ' ' + target.n + ' (' + numf(target.m) + ')' + ((target.a != undefined && target.a != 0) ? ' / ' + target.a : '');
						target_id = target.id;
						target_name = target.n;
					} else {
						target_desc = translate(type_name) + ' ' + target.l;
						target_id = '';
						target_name = '';
					}
				}
			});
			var dragon_list = {};
			if (include_great_dragon) {
				for (var gd = 0; gd < Seed.dragonList.length; gd++) {
					var dragon = Seed.dragonList[gd].type;
					var is_in_list = (include_exclude ? false : true);
					if (great_dragons)
						is_in_list = great_dragons[Seed.dragonList[gd].type];
					if ((include_exclude && is_in_list) || (!include_exclude && !is_in_list)) {
						dragon_list[dragon] = true;
					} else {
						dragon_list[dragon] = false;
					}
				}
			}

			var rec = {
				x: x,
				y: y,
				t: target_type,
				/* 0 = city, outpost, 1 = Anthro, 2 = Wilderness */
				d: getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, x, y),
				ti: getMarchTime(x, y, units),
				type: target_desc,
				level: level,
				id: target_id,
				n: target_name,
				units: cloneProps(units),
				dragons: dragon_list,
				inc: include_great_dragon,
				comment: comment
			};
			Data.options.bookmarks.targets.push(rec);
			var dial = new ModalDialog(container, 300, 150, '', false);
			dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
			dial.getContentDiv().innerHTML = translate('Bookmark saved');
			setTimeout(function() {
				dial.destroy()
			}, 1000);
		}

		function setButtonStyle(button, enabled, class_enabled, class_disabled) {
			if (!button) return;
			if (enabled) {
				button.disabled = false;
				Element.removeClassName(button, (class_disabled ? UID[class_disabled] : UID['btn_disabled']));
				Element.addClassName(button, (class_enabled ? UID[class_enabled] : UID['btn_blue']));
			} else {
				button.disabled = true;
				Element.removeClassName(button, (class_enabled ? UID[class_enabled] : UID['btn_blue']));
				Element.addClassName(button, (class_disabled ? UID[class_disabled] : UID['btn_disabled']));
			}
		}

		function set_defense_forces(container, city_id, units, notify) {
			var dial = new ModalDialog(container, 300, 165, '', false, null);
			dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
			dial.getContentDiv().innerHTML = translate('wall-choose-defenders');
			MyAjax.setDefenseForce(city_id, units, callback);

			function callback(dat) {
				if (dat.ok) {
					if (notify) notify(true);
					dial.destroy();
				} else {
					dial.getContentDiv().innerHTML = translate('Error while setting defense choice');
					dial.allowClose(true);
					if (notify) notify(false);
					return;
				}
			}
		}

		function setTroopTable(tab, rownum, prefix, unit_types, units, units_save, listener, multilines) {
			var row = [];
			row.push(tab.insertRow(rownum));
			row.push(tab.insertRow(rownum + 1));
			var val, r = 0,
				c = 0;
			for (var i = 0; i < unit_types.length; ++i) {
				if (c == 9) {
					r = r + 2;
					row.push(tab.insertRow(rownum + r));
					row.push(tab.insertRow(rownum + r + 1));
					c = 0;
				}
				row[r].insertCell(c).innerHTML = translate(Names.getTroopAbbr(unit_types[i]));
				var inp = document.createElement('input');
				inp.type = 'text';
				inp.size = '1';
				inp.style.width = '40px';
				inp.title = translate(unit_types[i]);
				if (i < 3) inp.style.border = '1px solid grey';
				else if (i < 6) inp.style.border = '1px solid green';
				else if (i < 12) inp.style.border = '1px solid blue';
				else inp.style.border = '1px solid red';
				inp.maxlength = '6';
				if (units[unit_types[i]] == undefined)
					units[unit_types[i]] = 0;
				val = units[unit_types[i]];
				if (!is_null(units_save)) {
					if (units_save[unit_types[i]] == undefined)
						units_save[unit_types[i]] = 0;
					val = units_save[unit_types[i]];
				}
				if (!val) val = 0;
				inp.value = val;
				inp.name = prefix + '_' + i;
				inp.addEventListener('change', listener, false);
				row[r + 1].insertCell(c).appendChild(inp);
				c++;
			}
			return tab;
		}

		function is_protected() {
			return Seed.cities[CAPITAL.id].protected
		}


		/******************************** Info Tab ***********************************/
		Tabs.Info = {
			tabOrder: INFO_TAB_ORDER,
			tabLabel: 'Info',
			tabDisabled: !INFO_TAB_ENABLE,
			container: null,
			timer: null,
			contentType: 0,
			/* 0 = overview, 1 = inventory, 2 = quests, 3 = About, 4 = My might */
			troopsContentType: 0,
			/* 0 = Might, 1 = Food consumption, 2 = Statistics */
			infoScrollPos: 0,
			infoScrollLeft: 0,
			lastSubTab: 'tabInfoOverview',
			refreshPlayerBusy: false,
			show_fulscreen: false,
			dragonTimer: null,
			diff: null,

			init: function(div) {
				var t = Tabs.Info;

				/* Jawz - Purge completed & claimed quests */
				for (var i = 0; i < Seed.quests.category.length; i++) {
					for (var j = 0; j < Seed.quests.list[Seed.quests.category[i]].length; j++) {
						var quest = Seed.quests.list[Seed.quests.category[i]][j];
						var claimed = false;
						if (Seed.player.quests.claimed) {
							for (var x = 0; x < Seed.player.quests.claimed.length && !claimed; x++) {
								if (name == Seed.player.quests.claimed[x]) claimed = true;
							}
						}
						if (claimed) Seed.quests.list[Seed.quests.category[i]].splice(j, 1);
					}
				}
				t.container = div;

				$(div).update(
					'<div class=' + UID['title_main'] + ' style="padding-top:3px; padding-bottom:3px;">' + '<table width=80% align=center>' + '	<tr align=center><td width="100px"><a id=' + setUID('tabInfo_ScriptUpdate') + ' style="color:#FFFFFF;text-decoration:none;">' + translate('Version update') + '</a></td>' + '		<td width="100px"><a href="' + Data.options.wikiUrl + '" target="_blank" style="color:#FFFFFF;text-decoration:none;">' + kWikiLink + '</a></td>' + '		<td width="100px"><a href="' + Data.options.forumUrl + '" target="_blank" style="color:#FFFFFF;text-decoration:none;">' + kForumLink + '</a></td>' + '</tr></table></div>' + '<table width=100%><tr>' + '	<td width=20%><input id=' + setUID('tabInfo_Refresh') + ' type=button value="' + translate('Refresh') + '"></input></td>' + '	<td width=20% align=center><input id=' + setUID('tabInfo_Toggle') + ' type=button value="' + translate('Toggle Flash') + '"></input></td>' + '	<td width=20% align=center>' + ((REALM_URL == null || REALM_URL == '' || !REALM_URL) ? '' : '<input id=' + setUID('tabInfo_Reload') + ' type=button value="' + translate('Reload') + '"></input>') + '</td>'
					+ '	<td width=20% align=center><input style="margin-left:5px;width:100px;" class="' + UID[t.show_fulscreen ? 'btn_on' : 'btn_off'] + '" type=button value="Fullscreen" id=' + setUID('Tabs.Info.fullScreen') + ' /></td>' + '</tr></table>' 
					+ '<ul class=tabs style="border-bottom:none; padding-bottom:0;height:23px">' 
					+ '	<li class="tab first line1"><a id=' + setUID('tabInfoOverview') + '>' + translate('Overview') + '</a></li>' 
					+ '	<li class="tab line1"><a id=' + setUID('tabInfoInventory') + '>' + translate('items-panel') + '</a></li>' 
					+ '	<li class="tab line1"><a id=' + setUID('tabInfoQuests') + '>' + translate('Quests') + '</a></li>' 
					+ '	<li class="tab line1"><a id=' + setUID('tabInfoTroops') + '>' + translate('Troops') + '</a></li>' 
					+ '	<li class="tab line1"><a id=' + setUID('tabInfoStats') + '>' + translate('Stats') + '</a></li>'  
					+ '	<li class="tab line1"><a id=' + setUID('tabInfoHelp') + '>' + translate('About') + '</a></li>' 
					+ '</ul>'
					+ '<ul class="tabs first line2">'
					+ '	<li class="tab line2"><a id=' + setUID('tabInfoWilderness') + '>' + translate('wildernesses') + '</a></li>'
					+ '</ul>'
					+ '<div id=' + setUID('tabInfo_Content') + ' class="' + UID['scrollable'] + '" style="margin-top:1px !important; height:650px; max-height:650px;"></div>');

				$(UID['tabInfo_Refresh']).observe('click', t.refresh);
				$(UID['tabInfo_Toggle']).observe('click', toggleFlash);
				$(UID['tabInfoOverview']).observe('click', t.tabInfoOverview);
				$(UID['tabInfo_ScriptUpdate']).observe('click', AutoUpdater.manualCheck);
				$(UID['tabInfoInventory']).observe('click', t.tabInfoInventory);
				$(UID['tabInfoQuests']).observe('click', t.tabInfoQuests);
				$(UID['tabInfoTroops']).observe('click', t.tabInfoTroops);
				$(UID['tabInfoStats']).observe('click', t.tabInfoStats);
				$(UID['tabInfoHelp']).observe('click', t.tabInfoHelp);
				$(UID['tabInfoWilderness']).observe('click', t.tabInfoWilderness);
				$(UID['Tabs.Info.fullScreen']).observe('click', toggleFulscreen);
				if (REALM_URL && REALM_URL != null && REALM_URL != '') {
					$(UID['tabInfo_Reload']).observe('click', reloadTools);
				}

				t.contentType = Data.options.info.current_tab;
				t.show();

				function switchOffSound() {
					try {
						logit('Mute sound');
						swf_object.musicMute();
					} catch (e) {}
					MyAjax.save_sound();
				}

				function toggleFulscreen(event) {
						var maxWidth = document.body.offsetWidth - 570;
					if (maxWidth < 760) {
						maxWidth = 760;
					}
					t.show_fulscreen = !t.show_fulscreen;
					event.target.className = UID[t.show_fulscreen ? 'btn_on' : 'btn_off'];
					swf_width = t.show_fulscreen ? '99%' : maxWidth + 'px';

					$('container').setStyle({
						width: swf_width
					});
					$('castlemania_swf').setStyle({
						width: swf_width
					});
					$('castlemania_swf_container').setStyle({
						width: swf_width
					});
				}
			},

			show: function() {
				var t = Tabs.Info;
				switch (toNum(t.contentType)) {
					case 0:
						t.tabInfoOverview();
						break;
					case 1:
						t.tabInfoInventory();
						break;
					case 2:
						t.tabInfoQuests();
						break;
					case 3:
						t.tabInfoHelp();
						break;
					case 4:
						t.tabInfoTroops();
						break;
					case 5:
						t.tabInfoStats();
						break;
					case 6:
						t.tabInfoWilderness();
						break;
				}
			},

			hide: function() {
				clearTimeout(Tabs.Info.timer);
			},

			onUnload: function() {
				logit('===============  Tabs.Info.onUnload');
				Data.options.info.current_tab = Tabs.Info.contentType;
			},

			tabInfoOverview: function() {
				var t = Tabs.Info;
				var city = Seed.cities[CAPITAL.id];
				var m = '<div class=' + UID['status_ticker'] + '>';
				var alliance_name = (Seed.player.alliance) ? Seed.player.alliance.name : '';
				var wallStatus = translate((Seed.cities[CAPITAL.id].defended) ? 'wall-orders-defend-city' : 'wall-orders-hide').toUpperCase();
				var towerStatus = false;
				if(Seed.cities[CAPITAL.id].defensive_tower) {
					var towerStatus = translate((Seed.cities[CAPITAL.id].defensive_tower.tower_defending) ? 'defensivetower-orders-defend-city' : 'defensivetower-orders-inactive').toUpperCase();
				}
				var loc = '';

				clearTimeout(t.timer);

				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInfoOverview']).className = 'selected';
				$(UID['tabInfoOverview']).style.zIndex = 1;

				t.lastSubTab = 'tabInfoOverview';
				t.contentType = 0;
				Data.options.info.current_tab = t.contentType;
				
				m += '<div class=' + UID['subtitle'] + '><table class=' + UID['table'] + ' width=100%">' 
					+ '<tr><td align=left>' + city.name + '</td>' 
					+ '<td align=center>' + city.x + ',' + city.y + '</td>' 
					+ '<td align=center><font color=yellow>' + alliance_name + '</font></td>'
					+ '<td align=right>'
					+ translate('Wall')
					+ '	<div class="onoffswitch">'
					+    	'<input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="myonoffswitch" ' + (Seed.cities[CAPITAL.id].defended ? '' : 'checked') + ' >'
					+    	'<label class="onoffswitch-label" for="myonoffswitch">'
					+        '<span class="onoffswitch-inner"></span>'
					+        '<span class="onoffswitch-switch"></span>'
					+    	'</label>'
					+ '	</div>'
					+ '</td>'
					
					+ '<td align=right><input id=' + setUID('tabInfo_setDefense') + ' type=button value="' + translate('Wall') + ' ' + wallStatus + '" class=' + UID[(Seed.cities[CAPITAL.id].defended ? 'btn_off' : 'btn_on')] + '></input>';
				if(Seed.cities[CAPITAL.id].defensive_tower != null)
					m += '&nbsp;<input id=' + setUID('tabInfo_setDefensiveTower') + ' type=button value="' + translate('DefensiveTower') + ' ' + towerStatus + '" class=' + UID[(Seed.cities[CAPITAL.id].defensive_tower.tower_defending ? 'btn_off' : 'btn_on')] + '></input></td>';
				m += '</tr></table></div>';
				
				m += dispCurrRessources(CAPITAL.id) + dispCurrPopulation(CAPITAL.id) + dispOneHourBan() + SoundPlayer.alertString.replace('&incoming_spy&', (SoundPlayer.getFirstAlert()).spy).replace('&incoming_attack&', (SoundPlayer.getFirstAlert()).attack) + dispUnits(CAPITAL.id) + '<br>' + '<table class=' + UID['table'] + ' width=100%>' + dispBoosts() + '	<tr>' + '		<td class=right width=20%>' + translate('Marching') + ': </td>' + '		<td width=30%>' + Seed.numMarches + dispMarchesCount() + '</td>' + '		<td class=right width=20%>' + translate('Wildernesses') + ': </td>' + '		<td width=30%>' + dispWildsCount() + '</td>' + '	</tr>' + dispOutpostJob('dragon', CAPITAL.id) + dispDefenseTowerHealing(CAPITAL.id) + dispOutpostJob('outpost', CAPITAL.id) + dispBuildingJob(CAPITAL.id) + dispDefenseTowerJob(CAPITAL.id) + dispResearchJob(CAPITAL.id) + dispTrainingJobs(CAPITAL.id) + '</table>' + '</div>';

				/* Outposts ... */
				if (Seed.cities.length > 0) {
					for (var cityIdx = 1; cityIdx < Seed.cities.length; ++cityIdx) {
						if (Seed.cities[cityIdx]) {
							m += '<div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' + t.cityTitle(cityIdx) + '<table class=' + UID['table'] + ' width=100%>' + ((cityIdx == SPECTRAL_OUTPOST.id) ? dispSoulCapacity() : '') + dispOutpostJob('dragon', cityIdx) + dispOutpostJob('outpost', cityIdx) + dispBuildingJob(cityIdx) + dispResearchJob(cityIdx) + dispTrainingJobs(cityIdx) + dispResurrectionJobs(cityIdx) + '</table>' + '</div>';
						}
					}
				}

				m += '<br><div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' + '<div class=' + UID['subtitle'] + '><table class=' + UID['table'] + '>' + '<tr><td align=left width=35%>' + translate('dragon-sanctuary') + '</td>' + '<td align=right width=65%>&nbsp;</td>' + '</tr></table></div>' + '<table class=' + UID['table'] + ' width=100%>' + dispBreedingJob() + dispFeedHatchJob('hatching', CAPITAL.id) + dispFeedHatchJob('feeding', CAPITAL.id) + '</table>' + '</div>' + '<br>' + '<table style="margin-top:3px" width=100%>' + '	<tr class=' + UID['row_headers'] + ' align=center>' + '		<td width=50%>' + translate('Generals').toUpperCase() + '</td>' + '		<td width=50%>' + translate('Great dragons').toUpperCase() + '</td>' + '	</tr>' + '	<tr valign=top align=center>' + '		<td width=50% style="border-right: 1px solid;">';

				/* Generals */
				m += '		<table class=' + UID['table'] + '>';

				for (var i = 0; i < city.generals.length; i++) {

					for (var type in Data.marches) {

						if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) {
							continue;
						}

						for (var pm in Data.marches[type]) {
							var march = (Data.marches[type])[pm];

							if (march.march_type != "TransportMarch" && march.march_type != "SpyMarch") {

								try {
									if (city.generals[i].name == march.general.first_name) {

										loc = march.x + ',' + march.y;
										if (march.status == 'encamped')
											className = 'bluejwl';
										else
											className = 'jewel';
									}

								} catch (e) {
									verboseLog(translate('Error') + ': ' + 'general first_name not available' + e.name + ' ' + e.message);
								}
							}
						}
					}

					m += '		<tr>' 
                       + '			<td width=50% align=right><font color="#000000">' + city.generals[i].name + ' (' + translate('rank') + ':' + city.generals[i].rank + ' / ' + translate('victory') + ':' + city.generals[i].victories + ')</font></td>' 
                       + '			<td width=50%>' + (city.generals[i].busy ? '<span class="' + className + '">[' + loc + ']</span>' : '') + '</td>' 
                       + '		</tr>';
				}

				m += '		</table>' + '	</td>' + '	<td width=50% style=" padding-left:7px">' + '		<table class=' + UID['table'] + '>';

				for (var gd = 0; gd < Seed.dragonList.length; gd++) {

					var dragon = Seed.dragons[Seed.dragonList[gd].type];
					var dragStatus = '';
					var dragonlife = ' (' + numf(Math.round((dragon.life / dragon.maximum_life) * 100), ' ') + ' %)';

					if (((dragon.life / dragon.maximum_life) >= 0.75) && dragon.is_in_city && dragon.can_attack) {
						dragStatus = translate('Ready') + dragonlife;
					} else if (!dragon.is_in_city && dragon.can_attack) {
						dragStatus = translate('Attacking');
					} else if (!dragon.can_attack) {
						dragStatus = translate('Not ready') + countArmorDragon(Seed.dragonList[gd].type);
					} else if ((dragon.life / dragon.maximum_life) < 0.75) {
						dragStatus = translate('Healing') + dragonlife;
					} else {
						dragStatus = translate('Not ready') + countArmorDragon(Seed.dragonList[gd].type);
					}

					m += '		<tr>' + '			<td width=50% align=right><font color="#000000">' + translate(dragon.name) + '</font></td>' + '			<td width=50%><span class=jewel>' + dragStatus + '</span></td>' + '		</tr>';
				}

				m += '		</table>' + '		</td>' + '	</tr>' + '</table>'

				/* Marches, building, research, training */
				$(UID['tabInfo_Content'])
					.update(m)
					.observe('scroll', onScroll)
					.scrollTop = t.infoScrollPos;

				$(UID['tabInfo_Unitsbox'])
					.observe('scroll', onScrollLeft)
					.scrollLeft = t.infoScrollLeft;

				$(UID['tabInfo_setDefense'])
					.observe('click', switchDefense);
				
				if(Seed.cities[CAPITAL.id].defensive_tower != null)
					$(UID['tabInfo_setDefensiveTower'])
						.observe('click', switchDefensiveTower);

				/* Review the rows height in the Units table to realign rows */
				var rU = $(UID['tabInfoUnits_Unit']).getElementsByTagName('TR');
				var rD = $(UID['tabInfoUnits_Detail']).getElementsByTagName('TR');

				for (var n = 0; n < rU.length; n++) {

					var x = rU[n].getElementsByTagName('TD')[0];
					var y = rD[n].getElementsByTagName('TD')[0];

					if (x.offsetHeight != y.offsetHeight) {
						var new_height = ((x.offsetHeight > y.offsetHeight) ? x.offsetHeight : y.offsetHeight) - 2;
						x.setAttribute('height', new_height);
						y.setAttribute('height', new_height);
					}
				}
				/* End of review of the rows height in the Units table */

				t.timer = setTimeout(t.show, 5000);
				
				function onScroll(event) {
					if (t.contentType == 0) {
						t.infoScrollPos = $(UID['tabInfo_Content']).scrollTop;
					}
				}

				function onScrollLeft(event) {
					if (t.contentType == 0) {
						t.infoScrollLeft = $(UID['tabInfo_Unitsbox']).scrollLeft;
					}
				}

				function countArmorDragon(dragon_type) {
					var armors = ['BodyArmor', 'ClawGuards', 'TailGuard', 'Helmet'],
						ret = 0,
						retour = '';

					for (var i = 0; i < armors.length; i++) {
						if (toNum(Seed.player.items[dragon_type + armors[i]]) !== 0) {
							ret++;
						}
					}

					if (ret != 4) {
						retour = ' (' + translate('Got') + ' ' + ret + '/4)';
					}

					return retour;
				}

				function dispBoosts() {
					var x = '',
						m = '',
						boosts = getBoosts();

					for (var i = 0; i < boosts.length; i++) {

						if (is_protected() && boosts[i].type == 'safety' && boosts[i].run_at) {
							if (boosts[i].run_at > serverTime()) {
								var expir = timestr(boosts[i].run_at - serverTime(), true);
								x += '<tr><td width=100% colspan=4><div class=' + UID['info_protect'] + '>Protection : ' + expir + '</div></td></tr>';
							}
						}

						if (boosts[i].type != 'safety') {

							var boost = boosts[i];

							if (boosts[i].run_at && boosts[i].run_at > serverTime()) {

								var expir = timestr(boosts[i].run_at - serverTime(), true);

								if (boosts[i].id == 2) { /*
															 * combat boosts &
															 * ressource boosts
															 */
									m += '<tr><td width=100%><font color="yellow">' + boosts[i].name + ' : ' + expir + '</font></td></tr>';
								} else if (boosts[i].id == 5) { /* curses */
									m += '<tr><td width=100%><font color="orange">' + boosts[i].name + ' : ' + expir + '</font></td></tr>';
								} else {
									m += '<tr><td width=100%><span style="width:auto !important;" title="' + boosts[i].longName + '">' + boosts[i].name + ' : ' + expir + '</span></td></tr>';
								}

							} else if (!boosts[i].run_at || boosts[i].run_at == null || boosts[i].run_at == '') {
								m += '<tr><td width=100%>' + boosts[i].name + '</td></tr>';
							}
						}
					}

					if (m != '') {
						x += '<tr><td width=100% colspan=4><div class=' + UID['info_boosts'] + '><table width=100%>' + m + '</table></div></td></tr>';
					}

					return x;
				}

				function dispBreedingJob() {
					var m = '',
						jobs = Jobs.getJobs('breeding', false, -1);

					for (var i = 0; i < jobs.length; i++) {

						var left = '',
							timeRemaining = 0,
							male = '',
							female = '';

						if (i == 0) {
							left = translate('breeding-dragon') + ':';
							timeRemaining = (jobs[i].run_at - serverTime() > 0) ? jobs[i].run_at - serverTime() : 0;
						} else {
							timeRemaining = jobs[i].duration;
						}

						if (!Seed.sanctuary_dragons[jobs[i].male_id]) {
							male = jobs[i].male_id;
							verboseLog('Error: Inexisting dragon ' + jobs[i].male_id);
						} else {
							male = translateByKey(Seed.sanctuary_dragons[jobs[i].male_id].subtype, 'rank-' + Seed.sanctuary_dragons[jobs[i].male_id].type, 'dragons');
						}

						if (!Seed.sanctuary_dragons[jobs[i].female_id]) {
							verboseLog('Error: Inexisting dragon ' + jobs[i].female_id);
							female = jobs[i].female_id;
						} else {
							female = translateByKey(Seed.sanctuary_dragons[jobs[i].female_id].subtype, 'rank-' + Seed.sanctuary_dragons[jobs[i].female_id].type, 'dragons');
						}

						m += '<tr>' + '		<td class=right width=20%>' + left + '</td>' + '		<td align=left width=50% colspan=2>' + male + ' + ' + female + '</td>' + '     <td width=30%><font color=' + TIMER_COLOR + '>' + timestr(timeRemaining, true) + '</font></td>' + '</tr>';
					}
					return m;
				}

				function dispBuildingJob(cityIdx) {
					var m = '<tr><td width=20% class=right>' + translate('Building') + ': </td>',
						job = Jobs.getBuildingJob(cityIdx);

					if (job && job.job.run_at > serverTime()) {

						m += '<td width=50% align=left colspan=2>' + translate(job.building.type) + ' (' + job.job.level + ') &nbsp;</td>' + '<td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.job.run_at - serverTime(), true) + '</font></td>' + '</tr>';
					} else {
						m += '<td align=left width=80% colspan=3><span class=' + UID['bold_red'] + '>' + translate('None').toUpperCase() + '</span></td></tr>';
					}

					return m;
				}
				
				function dispDefenseTowerJob(cityIdx) {
					var m = '<tr><td width=20% class=right>' + translate('Building') + ': </td>',
						job = Jobs.getDefenseTowerJob(cityIdx);

					if (job && job.job.run_at > serverTime()) {

						m += '<td width=50% align=left colspan=2>' + translate(job.building.type) + ' (' + job.job.level + ') &nbsp;</td>' + '<td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.job.run_at - serverTime(), true) + '</font></td>' + '</tr>';
					} else {
						m += '<td align=left width=80% colspan=3><span class=' + UID['bold_red'] + '>' + translate('DefensiveTower') + ' ' + translate('None').toUpperCase() + '</span></td></tr>';
					}

					return m;
				}
				
				function dispDefenseTowerHealing(cityIdx) {
					var m = '<tr><td width=20% class=right>' + translate('Repairing') + ': </td>',
						job = Jobs.getDefenseTowerHealing(cityIdx);

					if (job && job.job.run_at > serverTime()) {

						m += '<td width=50% align=left colspan=2><span class=' + UID['bold_red'] + '>' + translate('DefensiveTower') + '</span> &nbsp;</td>' + '<td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.job.run_at - serverTime(), true) + '</font></td>' + '</tr>';
					} else {
						m += '<td align=left width=80% colspan=3><span class=' + UID['bold_red'] + '>' + translate('DefensiveTower') + ' ' + translate('None').toUpperCase() + '</span></td></tr>';
					}

					return m;
				}
				
				function dispCurrRessources(cityIdx) {
					var m = '<table style="margin-top:3px" width=100% class=' + UID['row_style'] + '>' + '	<tr class=' + UID['row_headers'] + ' align=center>' + '		<td width=20%>' + translate('Type') + '</td>' + '		<td width=20%>' + translate('Reserves') + '</td>' + '		<td width=15%>' + translate('Per Hour') + '</td>' + '		<td width=20%>' + translate('Consumption') + '</td>' + '		<td width=25%>' + translate('Capacity') + '</td>' + '	</tr>';

					for (var p = 0; p < all_resource_types.length; p++) {
						var lock_food = false;
						var production = Seed.cities[cityIdx].figures.resource_rates[all_resource_types[p]];
						var actualStock = numf(toNum(Seed.cities[cityIdx].resources[all_resource_types[p]]));

						if (all_resource_types[p] == 'food' && Seed.player.boosts && Seed.player.boosts.collect_resources && toNum(Seed.cities[cityIdx].resources[all_resource_types[p]]) > production.capacity) {
							lock_food = true;
						}

						desc = all_resource_types[p];

						if (all_resource_types[p] == 'blue_energy') {
							desc = 'blueenergy250k';
						}
						if (all_resource_types[p] == 'lunar_energy') {
							desc = 'lunar-energy';
						}

						m += '	<tr valign=top align=center>' + '		<td align=right class=jewel>' + translate(desc) + '</td>' + '		<td align=right class=jewel>' + actualStock + '</td>' + '		<td align=right class=jewel>' + (lock_food ? '<font color=blue><b>0</b></font>' : numf(toNum(production.rate))) + '</td>' + '		<td align=right class=jewel>' + numf(toNum(production.unit_consumption || production.general_salaries || 0)) + '</td>' + '		<td align=right class=jewel>' + (production.capacity === 1E+18 ? translate('Unlimited') : numf(production.capacity)) + '</td>' + '	</tr>';
					}

					m += '</table>';

					return m;
				}

				function dispCurrPopulation(cityIdx) {
					var city = Seed.cities[cityIdx].figures.population;
					var num = city.current - city.laborers - city.armed_forces;

					num = (num < 0) ? 0 : num;

					var m = '<table style="margin-top:3px" width=100%>' + '	<tr class=' + UID['row_headers'] + ' align=center>' + '		<td width=20%>' + translate('Population') + '</td>' + '		<td width=20%>' + translate('Laborers') + '</td>' + '		<td width=20%>' + translate('Army') + '</td>' + '		<td width=20%>' + translate('IdlePopulation').replace(translate('Population'), '') + '</td>' + '		<td width=20%>' + translate('Capacity') + '</td>' + '	</tr>' + '	<tr>' + '		<td align=right>' + numf(city.current) + '</td>' + '		<td align=right>' + numf(city.laborers) + '</td>' + '		<td align=right>' + numf(city.armed_forces) + '</td>' + '		<td align=right>' + numf(num) + '</td>' + '		<td align=right>' + numf(city.limit) + '</td>' + '	</tr>' + '</table>';

					return m;
				}

				function dispFeedHatchJob(type, cityIdx) {
					var m = '',
						jobs = Jobs.getJobs(type, false, cityIdx);

					for (var i = 0; i < jobs.length; i++) {
						var left = '',
							timeRemaining = 0,
							dragon = '';
						var dragon_id = (type == 'feeding') ? jobs[i].dragon_id : jobs[i].egg_id;

						if (i == 0) {
							left = translate(((type == 'feeding') ? 'upgrading-dragon' : 'hatching-egg')) + ':';
							timeRemaining = (jobs[i].run_at - serverTime() > 0) ? jobs[i].run_at - serverTime() : 0;
						} else {
							timeRemaining = jobs[i].duration;
						}

						if (!Seed.sanctuary_dragons[dragon_id]) {
							dragon = dragon_id;
							verboseLog('Error: Inexisting dragon ' + dragon_id);
						} else {
							dragon = translateByKey(Seed.sanctuary_dragons[dragon_id].subtype, 'rank-' + Seed.sanctuary_dragons[dragon_id].type, 'dragons');
						}

						m += '<tr>' + '		<td class=right width=20%>' + left + '</td>' + '		<td align=left width=50% colspan=2>' + dragon + '</td>' + '     <td width=30%><font color=' + TIMER_COLOR + '>' + timestr(timeRemaining, true) + '</font></td>' + '</tr>';
					}

					return m;
				}

				function dispMarchesCount() {
					var left = '',
						m = '';

					if (Marches.count.attacks > 0) {
						m = Marches.count.attacks + ' At';
						left = ' + ';
					}

					if (Marches.count.waves > 0) {
						m += left + Marches.count.waves + ' Wa';
						left = ' + ';
					}

					if (Marches.count.bookmark > 0) {
						m += left + Marches.count.bookmark + ' Bo';
						left = ' + ';
					}

					if (Marches.count.transport > 0) {
						m += left + Marches.count.transport + ' Tr';
						left = ' + ';
					}

					if (Marches.count.spies > 0) {
						m += left + Marches.count.spies + ' Sp';
						left = ' + ';
					}

					if (Marches.count.multiple > 0) {
						m += left + Marches.count.multiple + ' Mu';
					}

					if (m != '') {
						m = ' (' + m + ')';
					}

					return m;
				}

				function dispOneHourBan() {
					var t = Tabs.Info,
						m = '';

					if (E429_TIMER) {
						if (E429_TIMER > toNum(serverTime())) {
							var remaining = timestrh(E429_TIMER - toNum(serverTime()));
							m = '<div class=' + UID['info_alerts'] + ' width=100%><br><b>API</b> ' + translate('<b>Rate Limit Exceeded</b>, too many requests!') + ' <b>&nbsp;&nbsp;' + remaining + '</b><br>&nbsp;</div>';
						} else {
							E429_TIMER = 0;
						}
					}

					return m;
				}

				function dispOutpostJob(type, cityIdx) {
					var m = '',
						job = Jobs.getJobs(type, true, cityIdx)[0];

					if (job && job.run_at > serverTime()) {
						m += '<tr><td class=right width=20%>' + translate(((type == 'outpost') ? 'Repairing' : 'Healing')) + ':</td>' + '<td width=50% colspan=2><SPAN class=' + UID['bold_red'] + '>' + translate(((type == 'outpost') ? 'outpost-progress' : 'Dragon healing')) + '</span></td>' + '<td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.run_at - serverTime(), true) + '</font></td></tr>';
					}

					return m;
				}

				function dispResearchJob(cityIdx) {
					var m = '<tr>' + '		<td class=right width=20%>' + translate('Researching') + ': </td>';
					var job = Jobs.getJobs('research', true, cityIdx)[0];

					if (job && job.run_at > serverTime()) {
						m += '<td width=50% align=left colspan=2>' + translate(job.research_type) + ' (' + job.level + ') &nbsp;</td>' + '<td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.run_at - serverTime(), true) + '</font></td>' + '</tr>';
					} else if (cityIdx == CAPITAL.id) {
						m += '<td align=left width=80% colspan=3><span class=' + UID['bold_red'] + '>' + translate('None').toUpperCase() + '</span></td></tr>';
					} else {
						m = '';
					}

					return m;
				}

				function dispResurrectionJobs(cityIdx) {
					var m = '',
						trains = [];
					for (var i = 0; i < Seed.cities[cityIdx].jobs.length; i++) {
						if (Seed.cities[cityIdx].jobs[i].queue == 'resurrection' &&
							Seed.cities[cityIdx].jobs[i].unit_type &&
							Seed.cities[cityIdx].jobs[i].run_at > serverTime()
						) {
							trains.push(Seed.cities[cityIdx].jobs[i]);
						}
					}
					trains.sort(function(a, b) {
						return a.run_at - b.run_at
					});
					for (var i = 0; i < trains.length; i++) {
						var left = '',
							tot = '',
							timeRemaining = 0;
						if (i == 0) {
							left = translate('Resurrection') + ':';
							timeRemaining = (trains[i].run_at - serverTime() > 0) ? trains[i].run_at - serverTime() : 0;
						} else if (i == trains.length - 1) {
							timeRemaining = (trains[i].run_at - serverTime() > 0) ? trains[i].run_at - serverTime() : 0;
							tot = '&nbsp;<b>(' + timestrShort(timeRemaining) + ')</b>';
							timeRemaining = trains[i].duration;
						} else {
							timeRemaining = trains[i].duration;
						}
						m += '<tr>' + '		<td class=right width=20%>' + left + '</td>' + '		<td align=left width=50% colspan=2>' + numf(trains[i].quantity, ' ') + '&nbsp;&nbsp;' + translate(trains[i].unit_type) + '&nbsp;</td>' + '     <td width=30%><font color=' + TIMER_COLOR + '>' + timestr(timeRemaining, true) + '</font>&nbsp' + tot + '</td>' + '</tr>';
					}
					return m;
				}

				function dispSoulCapacity() {
					var m = '',
						cap = getSoulCapacity(),
						percentage = '';
					if (cap && cap.max > 0) {
						var pct = cap.min / cap.max * 10000;
						if (pct > 9000)
							percentage = '<span class=' + UID['bold_red'] + '>' + numf(Math.round(pct / 100), ' ') + '%</span>';
						else percentage = '<font color=' + TIMER_COLOR + '>' + numf(Math.round(pct / 100), ' ') + '%</font>';
						m += '<tr><td class=right width=20%>' + translate('Capacity') + ':</td>' + '	<td width=50% colspan=2><font color=' + TIMER_COLOR + '><b>' + numf(cap.min, ' ') + ' / ' + numf(cap.max, ' ') + '</b></span></td>' + '	<td width=30%>' + percentage + '</td>' + '</tr>';
					}
					return m;
				}

				function dispTrainingJobs(cityIdx) {
					var m = '',
						trains = [];
					for (var i = 0; i < Seed.cities[cityIdx].jobs.length; i++) {
						if (Seed.cities[cityIdx].jobs[i].queue == 'units' &&
							Seed.cities[cityIdx].jobs[i].unit_type &&
							Seed.cities[cityIdx].jobs[i].run_at > serverTime()
						) {
							trains.push(Seed.cities[cityIdx].jobs[i]);
						}
					}
					trains.sort(function(a, b) {
						return a.run_at - b.run_at
					});
					for (var i = 0; i < trains.length; i++) {
						var left = '',
							tot = '',
							timeRemaining = 0;
						if (i == 0) {
							left = translate('Training') + ':';
							timeRemaining = (trains[i].run_at - serverTime() > 0) ? trains[i].run_at - serverTime() : 0;
						} else if (i == trains.length - 1) {
							timeRemaining = (trains[i].run_at - serverTime() > 0) ? trains[i].run_at - serverTime() : 0;
							tot = '&nbsp;<b>(' + timestrShort(timeRemaining) + ')</b>';
							timeRemaining = trains[i].duration;
						} else {
							timeRemaining = trains[i].duration;
						}
						m += '<tr>' + '		<td class=right width=20%>' + left + '</td>' + '		<td align=left width=50% colspan=2>' + numf(trains[i].quantity, ' ') + '&nbsp;&nbsp;' + translate(trains[i].unit_type) + '&nbsp;</td>' + '     <td width=30%><font color=' + TIMER_COLOR + '>' + timestr(timeRemaining, true) + '</font>&nbsp' + tot + '</td>' + '</tr>';
					}
					return m;
				}

				function dispUnits(cityIdx) {
					var m = '<table width=100% style="margin-top:3px;">' + '	<tr valign=top>' + '		<td width="180px">' + '			<table class=' + UID['row_style'] + ' width=100% id=' + setUID('tabInfoUnits_Unit') + '>' + '				<tr class=' + UID['row_headers'] + ' align=center>' + '					<td width="180px">' + translate('Troops') + '</td>' + '				</tr>';
					for (var i = 0; i < all_unit_types.length; i++) {
						var numTroops = getTroopNumbers(city, all_unit_types[i]);
						m += '			<tr valign=top>' + '				<td class=right>' + translate(all_unit_types[i]) + ':</td>' + '			</tr>';
					}
					m += '			</table>' + '		</td>' + '		<td width="345px">' + '			<div id=' + setUID('tabInfo_Unitsbox') + ' style="width:345px; max-width:345px; overflow-x:auto;">' + '			<div id=' + setUID('tabInfo_UnitsTable') + ' style="width:560px; max-width:560px">' + '			<table class=' + UID['row_style'] + ' width=100% id=' + setUID('tabInfoUnits_Detail') + '>' + '				<tr class=' + UID['row_headers'] + '>' + '					<td width="70px">' + translate('Army') + '</td>' + '					<td width="70px">' + translate('Defense') + '</td>' + '					<td width="70px">' + translate('In city') + '</td>' + '					<td width="70px">' + translate('In march') + '</td>' + '					<td width="80px">' + translate('Total') + '</td>' + '					<td width="70px">' + translate('Train') + '</td>' + '					<td width="70px">' + translate('Resurrect') + '</td>' + '					<td width="60px">' + translate('Souls') + '</td>' + '				</tr>';
					for (var i = 0; i < all_unit_types.length; i++) {
						var numTroops = getTroopNumbers(city, all_unit_types[i]);
						m += '			<tr valign=top>' + '				<td align=right>' + numf(numTroops.total, ' ') + '</td>' + '				<td align=right>' + numf(numTroops.indefense, ' ') + '</td>' + '				<td align=right>' + numf(numTroops.incity, ' ') + '</td>' + '				<td align=right>' + (numTroops.marches ? '&nbsp;+&nbsp;<b>' + numf(numTroops.marches, ' ') + '</b>' : '') + '</td>' + '				<td align=right><b>' + numf(numTroops.all, ' ') + '</b></td>' + '				<td align=right>' + (numTroops.intraining ? numf(numTroops.intraining, ' ') : '') + '</td>' + '				<td align=right>' + (numTroops.inresurrection ? numf(numTroops.inresurrection, ' ') : '') + '</td>' + '				<td align=right>' + (numTroops.souls ? numf(numTroops.souls, ' ') : '') + '</td>' + '			</tr>';
					}
					m += '			</table>' + '			</div></div>' + '		</td>' + '	</tr>' + '</table>';
					return m;
				}

				function dispWildsCount() {
					var max = toNum(Seed.player.max_wildernesses);
					var cur = toNum(Seed.player.player_wildernesses.length);
					var m = (cur < max) ? '<span class=' + UID['bold_red'] + '>' + cur + '</span>' : cur;
					m += ' / ' + max;
					return m;
				}

				function switchDefensiveTower(event) {
					var t = Tabs.Info;
					var button = event.target;
					var cityId = Seed.cities[CAPITAL.id].id;
					var towerStatus = Seed.cities[CAPITAL.id].defensive_tower.tower_defending;
					var targMsg = translate('Switching tower defense');
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.switchDefensiveTower(cityId, towerStatus, function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('Successfully'));
							actionLog(targMsg);
							button.className = UID[(Seed.cities[CAPITAL.id].defensive_tower.tower_defending ? 'btn_off' : 'btn_on')];
							button.value = translate('DefensiveTower') + ' ' + translate(Seed.cities[CAPITAL.id].defensive_tower.tower_defending ? 'defensivetower-orders-defend-city' : 'defensivetower-orders-inactive').toUpperCase();
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
					var state = Seed.cities[CAPITAL.id].defensive_tower.tower_defending;
					button.className = UID[(state ? 'btn_off' : 'btn_on')];
					button.value = translate('DefensiveTower') + ' ' + translate(state ? 'defensivetower-orders-defend-city' : 'defensivetower-orders-inactive').toUpperCase();
				}
				
				function switchDefense(event) {
					var t = Tabs.Info;
					var button = event.target;
					var cityId = Seed.cities[CAPITAL.id].id;
					var wallStatus = Seed.cities[CAPITAL.id].defended;
					var targMsg = translate('Switching defense');
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.switchDefense(cityId, wallStatus, function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('Successfully'));
							actionLog(targMsg);
							button.className = UID[(Seed.cities[CAPITAL.id].defended ? 'btn_off' : 'btn_on')];
							button.value = translate('Wall') + ' ' + translate(Seed.cities[CAPITAL.id].defended ? 'wall-orders-defend-city' : 'wall-orders-hide').toUpperCase();
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
					var state = Seed.cities[CAPITAL.id].defended;
					button.className = UID[(state ? 'btn_off' : 'btn_on')];
					button.value = translate('Wall') + ' ' + translate(state ? 'wall-orders-defend-city' : 'wall-orders-hide').toUpperCase();
				}
			},

			tabInfoInventory: function() {
				clearTimeout(Tabs.Info.timer);
				var t = Tabs.Info;
				clearTimeout(t.timer);
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInfoInventory']).className = 'selected';
				$(UID['tabInfoInventory']).style.zIndex = 1;
				t.lastSubTab = 'tabInfoInventory';
				t.contentType = 1;
				Data.options.info.current_tab = t.contentType;
				var m = '<div class=' + UID['status_ticker'] + '>';
				m += t.cityTitle(CAPITAL.id);
				m += '<table style="margin-top:3px" width=100%>';
				var city = Seed.cities[CAPITAL.id],
					iu = [],
					ium = [],
					types = [];
				for (var type in Seed.items) {
					if ((/(featured)/.test(type))) continue;
					types.push({
						type: type,
						desc: translate(type)
					});
				}
				types.sort(function(a, b) {
					a = a.desc.toLowerCase();
					b = b.desc.toLowerCase();
					if (a > b) return 1;
					if (a < b) return -1;
					return 0;
				});
				for (var it = 0; it < types.length; it++) {
					var type = types[it].type,
						items = [];
					for (item = 0; item < Seed.items[type].length; item++) {
						var is_armor = false;
						for (var a = 0; a < Seed.armors.length && !is_armor; a++)
							if (Seed.items[type][item].type == Seed.armors[a] || 
								Seed.items[type][item].type + 'Helmet' == Seed.armors[a] ||
								Seed.items[type][item].type + 'Armor' == Seed.armors[a] ||
								Seed.items[type][item].type + 'Guard' == Seed.armors[a] ||
								Seed.items[type][item].type + 'Guards' == Seed.armors[a]) {
								is_armor = true;
							}
						num = toNum(Seed.player.items[Seed.items[type][item].type]);
						if (num > 0 && !is_armor) items.push({
							type: Seed.items[type][item].type,
							desc: translate(Seed.items[type][item].type),
							qty: num,
							usable: Seed.items[type][item].usable
						});
					}
					if (items.length > 0) {
						items.sort(function(a, b) {
							a = a.desc.toLowerCase();
							b = b.desc.toLowerCase();
							if (a > b) return 1;
							if (a < b) return -1;
							return 0;
						});
						m += '<tr class=' + UID['row_headers'] + ' align=center><td style="border-bottom: 1px solid; border-bottom: 1px solid;" colspan=2>' + translate(type) + '</td></tr><tr valign=top align=center>' + '<td width=50% style="border-right: 1px solid;"><table class=' + UID['row_style'] + ' width=100%>';
						for (var i = 0; i < Math.ceil(items.length / 2); i++) {
							m += '<tr><td align=left width=70%><span id=' + setUID('tabInfoInv_' + items[i].type + '_hl') + '>' + items[i].desc + '</span></td><td align=left width=20%>' + numf(items[i].qty, ' ') + '</td>' + '<td align=center valign=middle width=10%>';
							if (items[i].usable) {
								m += '<input id=' + setUID('tabInfoInv_' + items[i].type) + ' ref=' + items[i].type + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Use') + '" />';
								if ((/(arsenal|chest)/.test(type))) {
									m += '<input id=' + setUID('tabInfoInv_' + items[i].type + '_nb') + ' ref=' + items[i].type + ' class="short" type=textbox value=1 />';
									ium.push(items[i].type);
								}
								else {
									iu.push(items[i].type);
								}
							} else m += '&nbsp';
							m += '</td></tr>';
						}
						m += '</table></td><td width=50%><table class=' + UID['row_style'] + ' width=100%>';
						for (var i = Math.ceil(items.length / 2); i < items.length; i++) {
							m += '<tr><td align=left width=70%><span id=' + setUID('tabInfoInv_' + items[i].type + '_hl') + '>' + items[i].desc + '</span></td><td align=left width=20%>' + numf(items[i].qty, ' ') + '</td>' + '<td align=center valign=middle width=10%>';
							if (items[i].usable) {
								m += '<input id=' + setUID('tabInfoInv_' + items[i].type) + ' ref=' + items[i].type + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Use') + '" />';
								if ((/(arsenal|chest)/.test(type))) {
									m += '<input id=' + setUID('tabInfoInv_' + items[i].type + '_nb') + ' ref=' + items[i].type + ' class="short" type=textbox value=1 />';
									ium.push(items[i].type);
								}
								else {
									iu.push(items[i].type);
								}
							} else m += '&nbsp';
							m += '</td></tr>';
						}
						m += '</table></td></tr><tr><td> &nbsp </td></tr>';
					}
				}
				m += '</table></div>';
				$(UID['tabInfo_Content']).innerHTML = m;
				for (var i = 0; i < iu.length; i++)
					$(UID['tabInfoInv_' + iu[i]]).addEventListener('click', useSingleItem, false);
				
				for (var i = 0; i < ium.length; i++) {
					$(UID['tabInfoInv_' + ium[i]]).addEventListener('click', useMoreItem, false);
					$(UID['tabInfoInv_' + ium[i] + '_nb']).addEventListener('change', ctrlNbItem, false);
				}

				function ctrlNbItem(event) {
					var nb = toNum(event.target.value);
					if (nb > 50) {
						event.target.style.backgroundColor = 'red';
					} else {
						event.target.style.backgroundColor = '';
					}
				}
				function useSingleItem(event) {
					var id = event.target.getAttribute('ref');
					event.target.disabled = true;
					Element.removeClassName(event.target, UID['btn_green']);
					Element.addClassName(event.target, UID['btn_disabled']);
					new MyAjax.useSingleItem(id, function(rslt) {
						if (rslt.ok) {
							actionLog('<B>' + translate(id) + '</B> ' + translate('used') + ' ' + translate('Successfully'));
						} else {
							actionLog(translate('Single usage of') + ' ' + translate(id) + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
						t.timer = setTimeout(t.show, 100);
					});
				}
				function useMoreItem(event) {
					var id = event.target.getAttribute('ref');
					var nb = $(UID['tabInfoInv_' + id + '_nb']).value;
					event.target.disabled = true;
					Element.removeClassName(event.target, UID['btn_green']);
					Element.addClassName(event.target, UID['btn_disabled']);
					new MyAjax.useMoreItem(id, nb, function(rslt) {
						if (rslt.ok) {
							actionLog('<B>' + nb + 'x ' + translate(id) + '</B> ' + translate('used') + ' ' + translate('Successfully'));
							Tabs.Info.diff = rslt.diff;
						} else {
							actionLog(translate('More usage of') + ' ' + translate(id) + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
						Tabs.Info.diff = rslt.diff;
						Tabs.Info.timer = setTimeout(Tabs.Info.show, 100);
						setTimeout(Tabs.Info.highLightDiff, 600);
					});
				}
			},

			tabInfoQuests: function() {
				var t = Tabs.Info;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInfoQuests']).className = 'selected';
				$(UID['tabInfoQuests']).style.zIndex = 1;
				t.lastSubTab = 'tabInfoQuests';
				t.contentType = 2;
				Data.options.info.current_tab = t.contentType;

				var city = Seed.cities[CAPITAL.id];
				var m = '<div class=' + UID['status_ticker'] + ' stype="width:540px; max-width:540px;">';
				m += t.cityTitle(CAPITAL.id);
				m += '<table style="margin-top:3px" width=100%>';

				for (var i = 0; i < Seed.quests.category.length; i++) {
					if (Data.options.collapsed.quests[i] == undefined)
						Data.options.collapsed.quests[i] = false;
				}

				var cl = [],
					ql = [];
				for (var i = 0; i < Seed.quests.category.length; i++) {
					var questListId = 'tabInfo_questList_' + i;
					var categoryId = 'tabInfo_categ_' + i;
					var accordionId = 'tabInfo_accordion_' + i;
					var first = true;
					for (var j = 0; j < Seed.quests.list[Seed.quests.category[i]].length; j++) {
						var quest = Seed.quests.list[Seed.quests.category[i]][j];
						var questId = 'tabInfo_quest_' + i + '_' + j;
						var questFbId = 'tabInfo_QFb_' + i + '_' + j;
						var questname = Translation.xml['quests'][_normalize(quest.name)];
						var completed = isCompleted(quest.name);
						var claimed = isClaimed(quest.name);
						if (!claimed) {
							if (first) {
								m += '<tr class=' + UID['row_headers'] + ' align=center>' + '	<td style="border-bottom: 1px solid; border-bottom: 1px solid;" width=100%>' + '		<A><div id=' + setUID(categoryId) + ' ref="' + i + '" >' + '		<table width=100%>' + '			<tr><td align=center width=100% style="border-right:none">' + translate(Seed.quests.category[i]) + '</td>' + '				<td align=right style="border-right:none"><div id=' + setUID(accordionId) + ' ref="' + i + '" style="font-size:16px"></div></td>' + '		</tr></table></div></A>' + '	</td>' + '</tr>' + '<tr valign=top>' + '	<td width=100%>' + '		<div id=' + setUID(questListId) + '>' + '			<table class=' + UID['row_style'] + '>';
								cl.push(UID[categoryId]);
								first = false;
							}
							var recommended = (quest.recommended && !completed) ? '<span class=' + UID['red'] + '>' + questname + '</span>' : questname;
							m += '<tr valign=top><td align=left width="160px" style="padding-bottom: 3px; border-bottom: 1px solid #898989;">' + recommended + '</td>' + '	<td align=left width="328px" style="padding-bottom: 3px; border-bottom: 1px solid #898989;">' + Translation.xml['quests'][_normalize(quest.name + '-objectives')] + '<br>' + '		<font color=' + TIMER_COLOR + '>' + getRewards(quest.reward) + '</font>';
							if (completed) {
								m += '<td align=center valign=middle width="50px" style="padding-bottom: 3px; border-bottom: 1px solid #898989;"><div id=' + setUID(questFbId) + '>' + '<input id=' + setUID(questId) + ' class="' + UID['btn_green'] + ' small" ref="' + i + '_' + j + '" style="width:auto !important;" type=submit value=" ' + translate('Claim') + ' " />' + '</div></td>' + '</tr>';
								ql.push(UID[questId]);
							} else m += '<td width="50px" style="padding-bottom: 3px; border-bottom: 1px solid #898989;"></td></tr>';
						}
					}
					if (!first) m += '</table></div></td></tr>';
				}
				m += '</table></div>';
				$(UID['tabInfo_Content']).innerHTML = m;
				for (var c = 0; c < cl.length; c++) {
					$(cl[c]).addEventListener('click', toggleHideShow, false);
					var categ = $(cl[c]).getAttribute('ref');
					var id = 'tabInfo_questList_' + categ;
					var acc_id = 'tabInfo_accordion_' + categ;
					var el = $(UID[id]);
					if (Data.options.collapsed.quests[categ]) {
						el.style.display = 'none';
						$(UID[acc_id]).innerHTML = '+&nbsp';
					} else {
						el.style.display = 'block';
						$(UID[acc_id]).innerHTML = '-&nbsp';
					}
				}

				for (var q = 0; q < ql.length; q++)
					$(ql[q]).addEventListener('click', claimRewards, false);

				function isClaimed(name) {
					var found = false;
					if (Seed.player.quests.claimed) {
						for (var x = 0; x < Seed.player.quests.claimed.length && !found; x++) {
							if (name == Seed.player.quests.claimed[x]) found = true;
						}
					}
					return found;
				}

				function isCompleted(name) {
					var found = false;
					if (Seed.player.quests.completed) {
						for (var x = 0; x < Seed.player.quests.completed.length && !found; x++) {
							if (name == Seed.player.quests.completed[x]) found = true;
						}
					}
					return found;
				}

				function getRewards(list) {
					var result = '';
					var tRes = [];
					for (var i in list) {
						if (list[i] > 0)
							tRes.push(numf(list[i], ' ') + ' ' + translate(i));
					}
					if (tRes.length > 0) result = tRes.join(', ');
					return result;
				}

				function toggleHideShow(event) {
					if (event.target.tagName == 'DIV')
						element = event.target;
					else {
						var parentElement = event.target.parentNode;
						while (parentElement.tagName != 'DIV') {
							parentElement = parentElement.parentNode;
						}
						element = parentElement;
					}
					var categ = element.getAttribute('ref');
					var id = 'tabInfo_questList_' + categ;
					var acc_id = 'tabInfo_accordion_' + categ;
					var el = $(UID[id]);
					if (el.style.display == 'none') {
						el.style.display = 'block';
						$(UID[acc_id]).innerHTML = '-&nbsp';
						Data.options.collapsed.quests[categ] = false;
					} else {
						el.style.display = 'none';
						$(UID[acc_id]).innerHTML = '+&nbsp';
						Data.options.collapsed.quests[categ] = true;
					}
				}

				function claimRewards(event) {
					var id = event.target.getAttribute('ref').split('_');
					var name = Seed.quests.list[Seed.quests.category[id[0]]][id[1]].name;
					event.target.disabled = true;
					Element.removeClassName(event.target, UID['btn_green']);
					Element.addClassName(event.target, UID['btn_disabled']);
					var FBid = 'tabInfo_QFb_' + event.target.getAttribute('ref');
					var FBel = $(UID[FBid]);
					new MyAjax.claimQuest(name, function(rslt) {
						if (rslt.ok) {
							actionLog('<B>' + translate('Quest') + ' ' + name + '</B> ' + translate('claimed') + ' ' + translate('Successfully'));
							FBel.innerHTML = '<font color=#898989>' + translate('Claimed') + '</font>';
						} else {
							actionLog(translate('Claiming quest') + ' ' + name + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
							FBel.innerHTML = '<font color=#AA0000><B>' + translate('Error') + '</b></font>';
						}
					});
				}

				function _normalize(str) {
					return str.toLowerCase().replace(/_/g, '-');
				}
			},

			tabInfoTroops: function() {
				var t = Tabs.Info;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInfoTroops']).className = 'selected';
				$(UID['tabInfoTroops']).style.zIndex = 1;
				t.lastSubTab = 'tabInfoTroops';
				t.contentType = 4;
				Data.options.info.current_tab = t.contentType;
				var m = '<div class=' + UID['title'] + '>' + translate('Troops') + ' ' + translate('Overview') + '</div>' + '<div class=' + UID['status_ticker'] + ' style="margin-bottom: 5px !important">' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabInfoTroopsMight') + '>' + translate('Might') + '</a></li>' + '	<li class="tab"><a id=' + setUID('tabInfoTroopsFood') + '>' + translate('Consumption') + '</a></li>' + '	<li class="tab"><a id=' + setUID('tabInfoTroopsStats') + '>' + translate('Statistics') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabInfoTroops_Content') + ' style="height:560px; ; max-height:560px; overflow-y:auto">';
				$(UID['tabInfo_Content']).innerHTML = m;
				$(UID['tabInfoTroopsMight']).addEventListener('click', t.tabInfoTroopsMight, false);
				$(UID['tabInfoTroopsFood']).addEventListener('click', t.tabInfoTroopsFood, false);
				$(UID['tabInfoTroopsStats']).addEventListener('click', t.tabInfoTroopsStats, false);
				switch (t.troopContentType || 0) {
					case 0:
						t.tabInfoTroopsMight();
						break;
					case 1:
						t.tabInfoTroopsFood();
						break;
					case 2:
						t.tabInfoTroopsStats();
						break;
				}
			},

			tabInfoTroopsMight: function() {
				var t = Tabs.Info;
				$(UID['tabInfoTroopsMight']).className = 'selected';
				$(UID['tabInfoTroopsMight']).style.zIndex = 1;
				$(UID['tabInfoTroopsFood']).className = '';
				$(UID['tabInfoTroopsFood']).style.zIndex = 0;
				$(UID['tabInfoTroopsStats']).className = '';
				$(UID['tabInfoTroopsStats']).style.zIndex = 0;
				t.troopContentType = 0;
				Data.options.info.troop_sub_tab = t.troopContentType;
				var city = Seed.cities[CAPITAL.id];
				var alliance_name = (Seed.player.alliance) ? Seed.player.alliance.name : '';
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:10px !important">' + '<div class=' + UID['subtitle'] + '><table class=' + UID['table'] + '>' + '<tr><td align=left width=35%>' + Seed.player.name + ' / ' + city.name + '</td>' + '<td align=center width=30%>' + city.x + ',' + city.y + '</td>' + '<td align=center width=200px><font color=yellow>' + alliance_name + '</font></td>' + '<td width=35% align=right><font color=yellow>' + numf(Seed.player.might) + '</font></td>' + '</tr></table></div>' + '<table class=' + UID['row_style'] + ' style="margin-top:3px" width=80%>' + '	<tr class=' + UID['row_headers'] + ' align=center>' + '		<td width=50%>' + translate('Troops') + '</td>' + '		<td width=20%>' + translate('Quantity') + '</td>' + '		<td width=10%>' + translate('Might') + '</td>' + '		<td width=20%>' + translate('Total') + '</td>' + '	</tr>';
				var total = 0;
				for (var i = 0; i < all_unit_types.length; i++) {
					var numTroops = getTroopNumbers(CAPITAL.id, all_unit_types[i]);
					var unit_might = Seed.stats.unit[all_unit_types[i]].power;
					var total_might = numTroops.total * unit_might;
					total += total_might;
					m += '	<tr valign=top>' + '		<td class=right>' + translate(all_unit_types[i]) + ' :</td>' + '		<td align=right>' + numf(numTroops.total, ' ') + '</td>' + '		<td align=right>' + numf(unit_might, ' ') + '</td>' + '		<td align=right>' + numf(total_might, ' ') + '</td>' + '	</tr>';
				}
				m += '	<tr><td colspan=4>&nbsp</td></tr>' + '	<tr><td>&nbsp</td><td colspan=3 align=center><hr></td></tr>' + '	<tr valign=top>' + '		<td class=right>' + translate('Troops') + ' :</td>' + '		<td align=right></td>' + '		<td align=right></td>' + '		<td align=right><b>' + numf(total, ' ') + '</b></td>' + '	</tr>' + '	<tr valign=top>' + '		<td class=right>' + translate('Building') + ' + ' + translate('Quests') + ' :</td>' + '		<td align=right></td>' + '		<td align=right></td>' + '		<td align=right><b>' + numf(Seed.player.might - total, ' ') + '</b></td>' + '	</tr>' + '	<tr><td>&nbsp</td><td colspan=3 align=center><hr></td></tr>' + '	<tr valign=top>' + '		<td class=right>' + translate('Total') + ' :</td>' + '		<td align=right></td>' + '		<td align=right></td>' + '		<td align=right><font color=red><b>' + numf(Seed.player.might) + '</b></font></td>' + '	</tr>' + '</table></div>';
				$(UID['tabInfoTroops_Content']).innerHTML = m;
			},

			tabInfoTroopsFood: function() {
				var t = Tabs.Info;
				$(UID['tabInfoTroopsMight']).className = '';
				$(UID['tabInfoTroopsMight']).style.zIndex = 0;
				$(UID['tabInfoTroopsFood']).className = 'selected';
				$(UID['tabInfoTroopsFood']).style.zIndex = 1;
				$(UID['tabInfoTroopsStats']).className = '';
				$(UID['tabInfoTroopsStats']).style.zIndex = 0;
				t.troopContentType = 1;
				Data.options.info.troop_sub_tab = t.troopContentType;
				var city = Seed.cities[CAPITAL.id];
				var alliance_name = (Seed.player.alliance) ? Seed.player.alliance.name : '';
				setUID('tabInfoTroopFood_Sel');
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:10px !important">' + '<div class=' + UID['subtitle'] + '><table class=' + UID['table'] + '>' + '<tr><td align=left width=35%>' + Seed.player.name + ' / ' + city.name + '</td>' + '<td align=center width=30%>' + city.x + ',' + city.y + '</td>' + '<td align=center width=200px><font color=yellow>' + alliance_name + '</font></td>' + '<td width=35% align=right><font color=yellow>' + numf(Seed.player.might) + '</font></td>' + '</tr></table></div>' + '<table><tr>' + '	<td><label>' + translate('Troops') + '</label></td>' + '	<td><input type=radio name=' + UID['tabInfoTroopFood_Sel'] + ' value="0" /></td><td align=left colspan=2><label>' + translate('Total') + '</label></td>' + '	<td width="20px"></td>' + '	<td><input type=radio name=' + UID['tabInfoTroopFood_Sel'] + ' value="1" /></td><td align=left width=15%><label>' + translate('In city') + '</label></td>' + '	</tr>' + '</table><br>' + '<table class=' + UID['row_style'] + ' style="margin-top:3px" width=80%>' + '	<tr class=' + UID['row_headers'] + ' align=center>' + '		<td width=50%>' + translate('Troops') + '</td>' + '		<td width=20%>' + translate('Quantity') + '</td>' + '		<td width=10%>' + translate('Upkeep') + '</td>' + '		<td width=20%>' + translate('Consumption') + '</td>' + '	</tr>';
				var total = 0;
				var total_incity = 0;
				for (var i = 0; i < all_unit_types.length; i++) {
					var numTroops = getTroopNumbers(CAPITAL.id, all_unit_types[i]);
					var unit_upkeep = Seed.stats.unit[all_unit_types[i]].upkeep.food;
					var total_upkeep = numTroops.total * unit_upkeep;
					var incity_upkeep = (numTroops.incity + numTroops.indefense) * unit_upkeep;
					total += total_upkeep;
					total_incity += incity_upkeep;
					m += '	<tr valign=top>' + '		<td class=right>' + translate(all_unit_types[i]) + ' :</td>' + '		<td align=right>' + numf((Data.options.info.consumption_sel == 1) ? (numTroops.incity + numTroops.indefense) : numTroops.total) + '</td>' + '		<td align=right>' + numf(unit_upkeep, ' ') + '</td>' + '		<td align=right>' + numf((Data.options.info.consumption_sel == 1) ? incity_upkeep : total_upkeep) + '</td>' + '	</tr>';
				}
				var unit_upkeep = Seed.greatDragons.GreatDragon[city.great_dragon.level].upkeep.food;
				m += '	<tr valign=top>' + '		<td class=right>' + translate('GreatDragon') + ' :</td>' + '		<td align=right></td>' + '		<td align=right>' + numf(unit_upkeep, ' ') + '</td>' + '		<td align=right>' + numf(unit_upkeep, ' ') + '</td>' + '	</tr>';
				total += unit_upkeep;
				total_incity += unit_upkeep;
				var figures = city.figures.resource_rates['food'];
				var rate = toNum(figures.rate);
				var production = figures.production + (figures.production * figures.multipliers.wilderness) + (figures.production * figures.multipliers.boosts) + (figures.production * figures.multipliers.research);
				var total_rate = production - total;
				m += '	<tr><td colspan=4>&nbsp</td></tr>' + '	<tr><td>&nbsp</td><td colspan=3 align=center><hr></td></tr>' + '	<tr valign=top>' + '		<td class=right>' + translate('Troops') + ' :</td>' + '		<td align=right></td>' + '		<td align=right></td>' + '		<td align=right><b>' + numf(-1 * ((Data.options.info.consumption_sel == 1) ? total_incity : total)) + '</b></td>' + '	</tr>' + '	<tr valign=top>' + '		<td class=right>' + translate('Production') + ' (' + translate('Per Hour') + ') :</td>' + '		<td align=right></td>' + '		<td align=right></td>' + '		<td align=right><b>' + numf(production) + '</b></td>' + '	</tr>' + '	<tr><td>&nbsp</td><td colspan=3 align=center><hr></td></tr>' + '	<tr valign=top>' + '		<td class=right>' + translate('Hourly rate') + ' :</td>' + '		<td align=right></td>' + '		<td align=right></td>' + '		<td align=right><font color=red><b>' + numf((Data.options.info.consumption_sel == 1) ? rate : total_rate) + '</b></font></td>' + '	</tr>' + '</table></div>';
				$(UID['tabInfoTroops_Content']).innerHTML = m;
				var r = document.getElementsByName(UID['tabInfoTroopFood_Sel']);
				for (i = 0; i < r.length; i++) {
					r[i].addEventListener('change', enableChanged, false);
					r[i].checked = (r[i].value == Data.options.info.consumption_sel);
				}

				function enableChanged(event) {
					var t = Tabs.Info;
					Data.options.info.consumption_sel = toNum(event.target.value);
					t.tabInfoTroopsFood();
				}
			},

			tabInfoTroopsStats: function() {
				var t = Tabs.Info;
				$(UID['tabInfoTroopsMight']).className = '';
				$(UID['tabInfoTroopsMight']).style.zIndex = 0;
				$(UID['tabInfoTroopsFood']).className = '';
				$(UID['tabInfoTroopsFood']).style.zIndex = 0;
				$(UID['tabInfoTroopsStats']).className = 'selected';
				$(UID['tabInfoTroopsStats']).style.zIndex = 1;
				t.troopContentType = 2;
				Data.options.info.troop_sub_tab = t.troopContentType;
				var city = Seed.cities[CAPITAL.id];
				var alliance_name = (Seed.player.alliance) ? Seed.player.alliance.name : '';
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:10px !important">' + '<div class=' + UID['subtitle'] + '><table class=' + UID['table'] + '>' + '<tr><td align=left width=35%>' + Seed.player.name + ' / ' + city.name + '</td>' + '<td align=center width=30%>' + city.x + ',' + city.y + '</td>' + '<td align=center width=200px><font color=yellow>' + alliance_name + '</font></td>' + '<td width=35% align=right><font color=yellow>' + numf(Seed.player.might) + '</font></td>' + '</tr></table></div>' + '<table class=' + UID['row_style'] + ' style="margin-top:3px; overflow:auto; white-space:nowrap" width=100%>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td valign=middle width=29%><b>' + translate('Troops') + '</b></td>' + '		<td valign=middle width=12%><b>' + translate('Melee') + '</b></td>' + '		<td valign=middle width=11%><b>' + translate('Defense') + '</b></td>' + '		<td valign=middle width=11%><b>' + translate('Speed') + '</b></td>' + '		<td valign=middle width=11%><b>' + translate('Range') + '</b></td>' + '		<td valign=middle width=12%><b>' + translate('Ranged') + '</b></td>' + '		<td valign=middle width=14%><b>' + translate('Life') + '</b></td>' + '	</tr>';
				var total = 0;
				for (var i = 0; i < all_unit_types.length; i++) {
					var stats = Seed.stats.unit[all_unit_types[i]];
					m += '	<tr valign=top>' + '		<td class=right>' + translate(all_unit_types[i]) + ' :</td>' + '		<td align=right>' + numf(stats.melee, ' ') + '</td>' + '		<td align=right>' + numf(stats.defense, ' ') + '</td>' + '		<td align=right>' + numf(stats.speed, ' ') + '</td>' + '		<td align=right>' + numf(stats.range, ' ') + '</td>' + '		<td align=right>' + numf(stats.ranged, ' ') + '</td>' + '		<td align=right>' + numf(stats.life, ' ') + '</td>' + '	</tr>';
				}
				for (var i = 0; i < all_dragon_list.length; i++) {
					var in_list = true;
					var nivDrg = 0;
					switch (all_dragon_list[i]) {
						case 'GreatDragon':
							var stats = Seed.greatDragons.GreatDragon[15];
							nivDrg = 15;
							break;
						case 'WaterDragon':
							var stats = Seed.greatDragons.WaterDragon[12];
							nivDrg = 12;
							break;
						case 'StoneDragon':
							var stats = Seed.greatDragons.StoneDragon[12];
							nivDrg = 12;
							break;
						case 'FireDragon':
							var stats = Seed.greatDragons.FireDragon[12];
							nivDrg = 12;
							break;
						case 'WindDragon':
							var stats = Seed.greatDragons.WindDragon[12];
							nivDrg = 12;
							break;
						case 'IceDragon':
							var stats = Seed.greatDragons.IceDragon[12];
							nivDrg = 12;
							break;
						case 'SwampDragon':
							var stats = Seed.greatDragons.SwampDragon[11];
							nivDrg = 11;
							break;
						case 'ForestDragon':
							var stats = Seed.greatDragons.ForestDragon[11];
							nivDrg = 11;
							break;
						case 'DesertDragon':
							var stats = Seed.greatDragons.DesertDragon[10];
							nivDrg = 10;
							break;
						case 'ChronoDragon':
							var stats = Seed.greatDragons.ChronoDragon[11];
							nivDrg = 11;
							break;
						case 'KaiserDragon':
							var stats = Seed.greatDragons.KaiserDragon[10];
							nivDrg = 10;
							break;
						case 'CaveDragon':
							var stats = Seed.greatDragons.CaveDragon[10];
							nivDrg = 10;
							break;
						case 'LunaDragon':
							var stats = Seed.greatDragons.LunaDragon[10];
							nivDrg = 10;
							break;
						case 'ColossusDragon':
							var stats = Seed.greatDragons.ColossusDragon[10];
							nivDrg = 10;
							break;
						case 'SpectralDragon':
							var stats = Seed.greatDragons.SpectralDragon[10];
							nivDrg = 10;
							break;
						default:
							in_list = false;
							break;
					}
					if (in_list) {
						m += '	<tr valign=top>' + '		<td class=right>' + translate(all_dragon_list[i]) + nivDrg + ' :</td>' + '		<td align=right>' + numf(stats.melee, ' ') + '</td>' + '		<td align=right>' + numf(stats.defense, ' ') + '</td>' + '		<td align=right>' + numf(stats.speed, ' ') + '</td>' + '		<td align=right>' + numf(stats.range, ' ') + '</td>' + '		<td align=right>' + numf(stats.ranged, ' ') + '</td>' + '		<td align=right>' + numf(stats.life, ' ') + '</td>' + '	</tr>';
					}
				}
				m += '</table></div>';
				$(UID['tabInfoTroops_Content']).innerHTML = m;
			},

			tabInfoHelp: function() {
				var t = Tabs.Info;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInfoHelp']).className = 'selected';
				$(UID['tabInfoHelp']).style.zIndex = 1;
				t.lastSubTab = 'tabInfoHelp';
				t.contentType = 3;
				Data.options.info.current_tab = t.contentType;
				var m = '<div id=' + setUID('tabInfo_Help') + '>' 
						+ '	<div class=' + UID['title'] + '>' + translate('About ' + scriptName) + '</div>' 
						+ '	<div class=' + UID['status_ticker'] + ' style="height:575px; max-height:575px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important">' 
						+ '		<table id=' + setUID('tabInfo_HelpTable') + ' class=' + UID['table_console'] + ' cellspacing=1 width=100%>' 
						+ '			<tr><td><br><div align=left style="color:#000000">'
                        + ' <b>User Id :</b> ' + C.attrs.userId + '<br>'
                        + ' <b>Dragon heart :</b> ' + C.attrs.dragonHeart + '<br>'
                        + ' <b>Session Id :</b> ' + C.attrs.sessionId + '<br>'
                        + ' <br>'
						+ '				<center><h2><B>VISIT US</B><h2></center><br>' 
						+ '				<b>On Facebook :</b>' 
						+ '				<br>- <a href="https://www.facebook.com/groups/DoAscripts/" target="_blank">DOA Scripts</a>'  
						+ '				<br><br><b>On the Web :</b>' 
						+ '				<br>- <a href="http://script.wygopro.com/" target="_blank">' + scriptName + '</a>' 
						+ '				<br><br><center><h2><B>DONATION</B><h2></center><br>' 
						+ '				If you want to donate for ' + scriptName + ', I accept Ruby gifts troops donations ;))<br>' 
						+ '				So for those who are interested in ruby gifting, I invite you to send me a message on userscripts.<br>' 
						+ '				Note that for those who have already me as friend or who are playing in the same alliance as me, you can already send me your gifts of rubis :p ...<br>' 
						+ '				For the others, if you want, I can join you on a realm of your choice and join your alliance, just the time for the gift... Or if you want you can use the paypal button :)<br>' 
						+ '				<br><B><I>Calcium </I></B><br><br><center>' 
						+ '				<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_blank"><input type="hidden" name="cmd" value="_s-xclick"><input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----MIIHLwYJKoZIhvcNAQcEoIIHIDCCBxwCAQExggEwMIIBLAIBADCBlDCBjjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQYXlQYWwgSW5jLjETMBEGA1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9hcGkxHDAaBgkqhkiG9w0BCQEWDXJlQHBheXBhbC5jb20CAQAwDQYJKoZIhvcNAQEBBQAEgYBxi3vq/OrDaQhy/GkIutJgubpRBKQttL8G9ZjXVR5/Tmxvw8YrInWQEKKtFiHzbXbTTdt2/7po8F0s/h+4Kex2zzbhcBd0sjrm2j+7jlWPzSLmCv0vlqsNrVA6yntCq5ioptq+0o/dbupO9GtQQG0e9F/i9xaVHD8uwNt8ZCxvjTELMAkGBSsOAwIaBQAwgawGCSqGSIb3DQEHATAUBggqhkiG9w0DBwQI/XO9a3nhNg6AgYge8Wy4ikZjbp/qVlPd3/z+HBcD011yS3mRkdU1WGAEMnltXiPrp+AQ0KKgxk0wFXM6BhXpTg1Cl85xqo/qrmtb+V9pzmRns+LZOlvFouXKLDU/5MMBCHvYXQlWVbsUX6V/mJS1ZTefZFZoLFdya7f0GEVdcSet36uVz6ukzKxAyN4eal+KLmrloIIDhzCCA4MwggLsoAMCAQICAQAwDQYJKoZIhvcNAQEFBQAwgY4xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLUGF5UGFsIEluYy4xEzARBgNVBAsUCmxpdmVfY2VydHMxETAPBgNVBAMUCGxpdmVfYXBpMRwwGgYJKoZIhvcNAQkBFg1yZUBwYXlwYWwuY29tMB4XDTA0MDIxMzEwMTMxNVoXDTM1MDIxMzEwMTMxNVowgY4xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLUGF5UGFsIEluYy4xEzARBgNVBAsUCmxpdmVfY2VydHMxETAPBgNVBAMUCGxpdmVfYXBpMRwwGgYJKoZIhvcNAQkBFg1yZUBwYXlwYWwuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDBR07d/ETMS1ycjtkpkvjXZe9k+6CieLuLsPumsJ7QC1odNz3sJiCbs2wC0nLE0uLGaEtXynIgRqIddYCHx88pb5HTXv4SZeuv0Rqq4+axW9PLAAATU8w04qqjaSXgbGLP3NmohqM6bV9kZZwZLR/klDaQGo1u9uDb9lr4Yn+rBQIDAQABo4HuMIHrMB0GA1UdDgQWBBSWn3y7xm8XvVk/UtcKG+wQ1mSUazCBuwYDVR0jBIGzMIGwgBSWn3y7xm8XvVk/UtcKG+wQ1mSUa6GBlKSBkTCBjjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQYXlQYWwgSW5jLjETMBEGA1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9hcGkxHDAaBgkqhkiG9w0BCQEWDXJlQHBheXBhbC5jb22CAQAwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUFAAOBgQCBXzpWmoBa5e9fo6ujionW1hUhPkOBakTr3YCDjbYfvJEiv/2P+IobhOGJr85+XHhN0v4gUkEDI8r2/rNk1m0GA8HKddvTjyGw/XqXa+LSTlDYkqI8OwR8GEYj4efEtcRpRYBxV8KxAW93YDWzFGvruKnnLbDAF6VR5w/cCMn5hzGCAZowggGWAgEBMIGUMIGOMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC1BheVBhbCBJbmMuMRMwEQYDVQQLFApsaXZlX2NlcnRzMREwDwYDVQQDFAhsaXZlX2FwaTEcMBoGCSqGSIb3DQEJARYNcmVAcGF5cGFsLmNvbQIBADAJBgUrDgMCGgUAoF0wGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTMwNjA0MDAyMjQ0WjAjBgkqhkiG9w0BCQQxFgQUdrLfgqWWSrzSjYP+1YebK/2a8bswDQYJKoZIhvcNAQEBBQAEgYB/MwEGTRoWyk9sugZOgo+04EUMleipDBHj+fAMyz8OtYqnaGHBrz1H91WWTMyzG/mqn25T47LWvUgqAiFgqlZXuJCBnEQRag3K5BzEDIf6ZL+BfQHoO8bKes17kXjbclBhy686s6lWtzCOWs1tIqhRVdIQxrgNmXtXJGHpjUSR1Q==-----END PKCS7-----"><input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!"><img alt="" border="0" src="https://www.paypalobjects.com/fr_FR/i/scr/pixel.gif" width="1" height="1"></form>' 
						+ '				</center></td></tr>' 
						+ '			<tr><td><br><br>' 
						+ '				<b>Ruby Gifting is now available! - Kabam\'s text :</b><br><br>' 
						+ '				You\’re now able to buy Rubies and gift them to your Dragons of Atlantis friends and Alliance members.' 
						+ '				Not only that, but doing so can get you, the charming benefactor, a Bonus Package!<br><br>' 
						+ '				<b>Here\’s how it works:</b><br>' 
						+ '				Click on the "Get More Rubies" button under your Rubies balance, then choose the "Gift" link.<br>' 
						+ '				From here, you\’ll be able to select the recipient from either a list of your Dragons of Atlantis ' 
						+ '				Alliance members or Facebook friends that play on any realm.<br><br>' 
						+ '				Then, complete your purchase as you would normally.<br><br>' 
						+ '				Once you have completed your purchase, you will receive the Bonus Package associated with the Ruby amount you selected, and the recipient will get the Rubies!<br><br>' 
						+ '				<br>'
						+ '				</div></td></tr></table></div></div>';
				$(UID['tabInfo_Content']).innerHTML = m;
			},

			tabInfoWilderness : function() {
				var t = Tabs.Info;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInfoWilderness']).className = 'selected';
				$(UID['tabInfoWilderness']).style.zIndex = 1;
				t.lastSubTab = 'tabInfoWilderness';
				t.contentType = 6;
				
				var m = 	'<div id=' + setUID('tabInfo_Wilderness') + '>' 
					+ '	<div class=' + UID['title'] + '>' + translate('Wildernesses') + '</div>' 
					+ '	<div class=' + UID['status_ticker'] + ' style="height:575px; max-height:575px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important">&nbsp;&nbsp;'
					+ translate('Wildernesses') + '&nbsp;&nbsp;' + dispWildsCount()
					+ '<table class=' + UID['row_style'] + ' width=75%>'
					+ '<tr class=' + UID['row_headers'] + ' align=center>'
					+ '<td>' + translate('Type') + '</td>' + '<td>' + translate('Level') + '</td>'  + '<td>' + translate('Coords') + '</td>' + '<td>' + translate('Action') + '</td>'
					+ '</tr>';
				var w = Player.getWildernesses();
				

				w.sort(function(a, b) {
					var typeA = a.type.toLowerCase(),
						typeB = b.type.toLowerCase();
					if (typeA < typeB) {
						return -1
					}
					if (typeA > typeB) {
						return 1
					}
					return 0;
				});
				
				var ws = [];
				for ( var i=0; i < w.length; i++ ) {
					m += '<tr><td>' + translate(w[i].type) + '</td><td>' + w[i].level + '</td><td>' + w[i].x + ' / ' + w[i].y + '</td>';
					//m += '<td><input id=' + setUID('tabInfoWilderness_' + i) + ' ref=' + w[i].x + '_' + w[i].y + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value=" ' + translate('X') +' "/></td>';
                    m += '<td> </td>';
                    m += '</tr>';
					// ws.push('tabInfoWilderness_' + i);
				}
				m += '</table></div>';
				$(UID['tabInfo_Content']).innerHTML = m;
				
				function abandonWilderness() {
					var ids = event.target.getAttribute('ref').split('_');
					var x = ids[0];
					var y = ids[1];
					var cityId = Seed.cities[CAPITAL.id].id;
					
					new MyAjax.abandonWilderness(cityId, x, y, mycb);
					
					function mycb(rslt) {
						setTimeout(Tabs.Info.show, 2000);
					}
				}
				
				function dispWildsCount() {
					var max = toNum(Seed.player.max_wildernesses);
					var cur = toNum(Seed.player.player_wildernesses.length);
					var m = (cur < max) ? '<span class=' + UID['bold_red'] + '>' + cur + '</span>' : cur;
					m += ' / ' + max;
					return m;
				}
			},
			
			tabInfoStats: function() {
				var t = Tabs.Info;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInfoStats']).className = 'selected';
				$(UID['tabInfoStats']).style.zIndex = 1;
				t.lastSubTab = 'tabInfoStats';
				t.contentType = 5;
				Data.options.info.current_tab = t.contentType;

				var m = '<div class=' + UID['title'] + '>' + translate('Attacks Stats') + '</div>' + '<div id=' + setUID('tabInfoStats_Statbox') + ' class=' + UID['status_ticker'] + '>' + '<div id=' + setUID('tabInfoStats_Status') + '></div>' + '<div id=' + setUID('tabInfoStats_Percent') + '></div>' + '<br/>' + '<center><input id=' + setUID('tabInfoStats_Clear') + ' type=button value="' + translate('Clear Stats') + '" /></center>' + '<br></div>';

				$(UID['tabInfo_Content']).innerHTML = m;
				$(UID['tabInfoStats_Clear']).addEventListener('click', function() {
					clearStats();
					showStats();
				}, false);
				showStats();

				function clearStats() {
					var t = Tabs.Info;
					var now = serverTime();
					Data.stats.total = {
						start_at: now,
						total_attacks: 0,
						loss: {},
						items: {},
						resources: {}
					};
					showStats();
				}

				function showStats() {
					var t = Tabs.Info;
					var div = $(UID['tabInfoStats_Status']);
					if (div == null) return;
					if (!Data.stats.total.start_at || Data.stats.total.start_at == undefined || Data.stats.total.start_at == 0) Data.stats.total.start_at = Data.stats.requests.start_at;
					var run_time = (serverTime() - Data.stats.total.start_at);
					var trueRunTime = (run_time > 0) ? (run_time / 3600) : 1;

					var m = '<table class=' + UID['table'] + '>' + '	<tr>' + '		<td class=right>' + translate('Start Date') + ': </td>' + '		<td colspan=>' + new Date(Data.stats.total.start_at * 1000).myString() + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Run Time') + ': </td>' + '		<td>' + timestr(run_time, true) + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Attacks') + ': </td>' + '		<td>' + Data.stats.total.total_attacks + '</td>' + '	<tr valign=top align=right>' + '		<td class=right>' + translate('Troops lost') + ': </td>';
					var first = true;
					for (var name in Data.stats.total.loss) {
						var perHour = Math.round(Data.stats.total.loss[name] / trueRunTime);
						if (first) first = false;
						else m += '	<tr align=right><td></td>';
						m += '		<td>' + translate(name) + ':</td>' + '		<td>' + numf(Data.stats.total.loss[name], ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
					}
					m += '</tr><tr valign=top align=right>' + '		<td class=right>' + translate('Resources') + ': </td>';
					var first = true;
					for (var name in Data.stats.total.resources) {
						var perHour = Math.round(Data.stats.total.resources[name] / trueRunTime);
						if (first) first = false;
						else m += '	<tr align=right><td></td>';
						m += '			<td>' + translate(name) + ':</td>' + '			<td>' + numf(Data.stats.total.resources[name], ' ') + '</td>' + '			<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '		</tr>';
					}
					m += '<tr valign=top align=right>' + '		<td class=right>' + translate('Items') + ': </td>';
					var items = [];
					for (var name in Data.stats.total.items)
						items.push({
							desc: translate(name),
							qty: Data.stats.total.items[name]
						});
					if (items.length > 0) {
						items.sort(function(a, b) {
							a = a.desc.toLowerCase();
							b = b.desc.toLowerCase();
							if (a > b) return 1;
							if (a < b) return -1;
							return 0;
						});
						for (var i = 0; i < items.length; i++) {
							var perHour = Math.round(items[i].qty / trueRunTime);
							if (i > 0) m += '<tr align=right><td></td>';
							m += '		<td>' + items[i].desc + ':</td>' + '		<td>' + numf(items[i].qty, ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
						}
					}
					m += '</table>';
					div.innerHTML = m;
				}
			},

			cityTitle: function(cityIdx, UID_button) {
				var t = Tabs.Info;
				var city = Seed.cities[cityIdx];
				var wallStatus = '';
				var alliance_name = (Seed.player.alliance) ? Seed.player.alliance.name : '';
				alliance_name = (city.type == 'Outpost') ? '' : alliance_name;
				if (cityIdx == CAPITAL.id)
					wallStatus = (Seed.cities[cityIdx].defended) ? '<font class=' + UID['defending'] + '>' + translate('Defend').toUpperCase() + '</font>' : '<font class=' + UID['hiding'] + '>' + translate('Hiding').toUpperCase() + '</font>';
				else
					wallStatus = ' &nbsp ';

				// Met le % de stockage de ressources de l'outpost
				if (city.type == 'Outpost' && cityIdx != SPECTRAL_OUTPOST.id && cityIdx != SKY_OUTPOST.id && cityIdx != CAVE_OUTPOST.id && cityIdx != LUNA_OUTPOST.id && cityIdx != COLOSSUS_OUTPOST.id) {
					var total_capacity = 0;
					var current_stock = 0;
					var buildList = Buildings.getList(cityIdx, 'Silo');
					for (var b = 0; b < buildList.length; b++) {
						total_capacity += Seed.stats.building[buildList[b].type].level[buildList[b].level].capacity;
					}
					for (var r in city.resources) {
						current_stock += city.resources[r];
					}
					var percent = toNum(current_stock / total_capacity * 100);
					if (percent < 75) var col = 'white';
					else if (percent < 90) var col = 'yellow';
					else var col = '#FF7F00';
					wallStatus = '<font color=' + col + '>' + translate('Silo') + ' ' + percent + ' %</font>';
				}

				return '<div class=' + UID['subtitle'] + '><table class=' + UID['table'] + '>' + '<tr><td align=left width=35%>' + ((city.type == 'Outpost') ? translate(city.name) : city.name) + '</td>' + '<td align=center width=30%>' + city.x + ',' + city.y + '</td>' + '<td align=center width=200px><font color=yellow>' + alliance_name + '</font></td>' + '<TD width=35% align=right>' + wallStatus + '</td>' + '</tr></table></div>';
			},

			refresh: function() {
				logit('fetchPlayer from Tab.Info refresh');
				var t = Tabs.Info;
				if (t.refreshPlayerBusy) return false;
				t.refreshPlayerBusy = true;
				refreshPlayerData(t.container, function() {
					logit(translate('Player data retrieved'));
					Tabs.Info.refreshPlayerBusy = false;
				});
				t.show();
			},

			highLightDiff: function() {
				for(var i = 0; i < Tabs.Info.diff.length ; i++) {
					Effect.Pulsate(UID['tabInfoInv_' + Tabs.Info.diff[i] + '_hl'], { pulses: 5, duration: 2.0 });
				}
				Tabs.Info.diff = [];
			}
		}
		/**
		 * ****************************** Info Tab
		 * **********************************
		 */


		/**
		 * ****************************** Alliance features Tab
		 * *********************
		 */
		Tabs.Alliance = {
			tabOrder: ALLIANCE_TAB_ORDER,
			tabLabel: 'Alliance',
			tabDisabled: !ALLIANCE_TAB_ENABLE,
			container: null,
			contentType: 0,
			/*
			 * 0 = member list, 1 = transport, 2 = reinforcement, 3 = Alliances
			 * top 100, 5 = Activity
			 */
			totalResources: 0,
			maxResources: 0,
			totalForces: 0,
			recallTimer: 0,
			lastSubTab: 'tabAllianceList',
			own: 0,
			my_role: 'none',
			autoTimer: null,
			marchTimer: null,
			autoErrors: 0,
			report_num: -1,
			last_report: null,
			checkAlliancesBusy: false,
			checkAlliancesError: false,

			init: function(div) {
				var t = Tabs.Alliance,
					m = '';

				t.own = Seed.player.alliance ? Seed.player.alliance.id : -1;
				t.my_role = Seed.player.alliance_membership ? Seed.player.alliance_membership.role : 'none';
				Data.setDefaultValues('alliance');
				if (t.new_id == 0) t.new_id = Seed.player.alliance.id;
				t.container = div;
				m = '<div class=' + UID['title'] + '>' + translate('Alliance features') + '</div>' + '<div id=' + setUID('tabAlliance_Status') + ' style="margin-bottom:5px !important">' + '	<table width=100%>' + '		<tr>' + '			<td align=center width=25%><input type=button value="' + translate('Refresh list') + '" id=' + setUID('tabAlliance_RefreshList') + ' /></td>' + '			<td align=center width=25%><input type=button value="' + translate('Message alliance') + '" id=' + setUID('tabAlliance_MsgAll') + ' /></td>' + '			<td align=center width=25%>' + ((t.my_role == 'vassal' || t.my_role == 'none') ? '&nbsp;' : '<input type=button value="' + translate('Refresh applicants') + '" id=' + setUID('tabAlliance_RefreshApplicants') + ' />') + '</td>' + '			<td align=center width=25%><input type=button value="' + translate('actions-resign').initCap() + '" id=' + setUID('tabAlliance_Regin') + ' /></td>' + '		</tr>' + '	</table>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabAllianceList') + '>' + translate('members') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabAllianceActivity') + '>' + translate('Activity') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabAllianceTrans') + '>' + translate('Transport') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabAllianceReinforcement') + '>' + translate('reinforcements') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabAllianceAuto') + '>L.I.T.</a></li>' + '	<li class=tab><a id=' + setUID('tabAlliances') + '>' + translate('Alliances') + ' Top 100</a></li>' + '</ul>' + '<div id=' + setUID('tabAlliance_Content') + ' style="padding-top:0px; height:655px; ; max-height:655px; overflow-y:auto"></div>';

				$(t.container).update(m);

				$(UID['tabAlliance_RefreshList']).observe('click', t.refreshList);
				$(UID['tabAllianceList']).observe('click', t.tabAllianceList);
				$(UID['tabAllianceActivity']).observe('click', t.tabAllianceActivity);
				$(UID['tabAllianceTrans']).observe('click', t.tabAllianceTrans);
				$(UID['tabAllianceReinforcement']).observe('click', t.tabAllianceReinforcement);
				$(UID['tabAllianceAuto']).observe('click', t.tabAllianceAuto);
				$(UID['tabAlliance_MsgAll']).observe('click', function() {
					dialogSendMsg(translate('Alliance'), (Seed.player.alliance.id || 0));
				});
				$(UID['tabAlliance_Regin']).observe('click', function() {
					t.onClickResign(function() {
						t.show()
					});
				});
				$(UID['tabAlliances']).observe('click', t.tabAlliances, false);
				if ($(UID['tabAlliance_RefreshApplicants']))
					$(UID['tabAlliance_RefreshApplicants']).observe('click', t.refreshApplicants);

				window.addEventListener('unload', t.onUnload, false);

				t.contentType = toNum(Data.options.alliance.current_tab);
				t.setEnable(false);
				t.show();
			},

			show: function() {
				var t = Tabs.Alliance;
				if (Seed.player.alliance && Seed.player.alliance.id > 0) {
					setButtonStyle($(UID['tabAlliance_RefreshList']), true);
					if ($(UID['tabAlliance_RefreshApplicants'])) setButtonStyle($(UID['tabAlliance_RefreshApplicants']), true);
					setButtonStyle($(UID['tabAlliance_MsgAll']), true);
					if (t.my_role == 'overlord')
						setButtonStyle($(UID['tabAlliance_Regin']), false, 'btn_off');
					else setButtonStyle($(UID['tabAlliance_Regin']), true, 'btn_off');
				} else {
					setButtonStyle($(UID['tabAlliance_RefreshList']), false);
					if ($(UID['tabAlliance_RefreshApplicants'])) setButtonStyle($(UID['tabAlliance_RefreshApplicants']), false);
					setButtonStyle($(UID['tabAlliance_MsgAll']), false);
					setButtonStyle($(UID['tabAlliance_Regin']), false, 'btn_off');
				}
				t.marchTick();
				if (!t.checkMembersBusy) {
					switch (toNum(t.contentType)) {
						case 0:
							t.tabAllianceList();
							break;
						case 1:
							t.tabAllianceTrans();
							break;
						case 2:
							t.tabAllianceReinforcement();
							break;
						case 3:
							t.tabAlliances();
							break;
						case 4:
							t.tabAllianceAuto();
							break;
						case 5:
							t.tabAllianceActivity();
							break;
					}
				} else setTimeout(t.show, 100);
			},
			onUnload: function() {
				var t = Tabs.Alliance;
				if (t.marchTimer) clearTimeout(t.marchTimer);
				logit('===============  Tabs.Alliance.onUnload');
				Data.options.alliance.current_tab = t.contentType;
			},
			hide: function() {},

			refreshList: function() {
				var t = Tabs.Alliance;
				if (t.checkMembersBusy) return false;
				t.checkMembersBusy = true;
				t.getAllianceMembers(function() {
					logit(translate('Alliance members list retrieved'));
					Tabs.Alliance.checkMembersBusy = false
					var now = serverTime();
					Data.options.alliance.last_update = new Date(now * 1000).myString();
					Tabs.Alliance.show();
				});
			},
			getAllianceMembers: function(notify) {
				var t = Tabs.Alliance;
				ret = [];
				if (Data.dynamic.players.memberships && Data.dynamic.players.memberships != undefined && Data.dynamic.players.memberships.length > 0) {
					for (var i = 0; i < Data.dynamic.players.memberships.length; i++) {
						if (Data.dynamic.players.memberships[i].role != 'applicant')
							ret.push({
								id: Data.dynamic.players.memberships[i].id,
								player: Data.dynamic.players.memberships[i].player,
								role: Data.dynamic.players.memberships[i].role,
								might: Data.dynamic.players.memberships[i].might,
								city: Data.dynamic.players.memberships[i].city,
								x: Data.dynamic.players.memberships[i].x,
								y: Data.dynamic.players.memberships[i].y,
								dragon: Data.dynamic.players.memberships[i].dragon,
								dist: Data.dynamic.players.memberships[i].dist,
								joined: Data.dynamic.players.memberships[i].joined
							});
					}
				}
				Data.dynamic.players.memberships_evolution = cloneProps(ret);
				Data.dynamic.players.memberships = {
					player: '',
					id: 0,
					role: '',
					might: 0,
					city: '',
					x: 0,
					y: 0,
					dragon: {},
					req_id: 0,
					dist: 0,
					joined: 0
				};
				var dial = new ModalDialog(t.container, 300, 165, '', false, null);
				dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
				dial.getContentDiv().innerHTML = translate('Search for alliance members');
				MemberShips.fetchMembership(Seed.player.alliance.id, callback, false);

				function callback(dat) {
					if (!dat.done) {
						if (dat.errmsg)
							dial.getContentDiv().innerHTML = dat.errmsg;
						else dial.getContentDiv().innerHTML = translate('Error while retrieving the list of members');
						dial.allowClose(true);
						if (notify) notify(false);
						return;
					} else {
						Data.dynamic.players.memberships = cloneProps(dat.member);
						verboseLog('*********  List retrieved ... Total members: ' + Data.dynamic.players.memberships.length);

						function charOrdA(a, b) {
							a = a.player.toLowerCase();
							b = b.player.toLowerCase();
							if (a > b) return 1;
							if (a < b) return -1;
							return 0;
						}
						Data.dynamic.players.memberships.sort(charOrdA);
						Data.options.alliance.sort_list = '2';
						setTimeout(function() {
							dial.destroy()
						}, 1000);
						if (notify) notify(true);
					}
				}
			},
			refreshApplicants: function() {
				var t = Tabs.Alliance;
				if (t.checkMembersBusy) return false;
				t.checkMembersBusy = true;
				t.getApplicants(function() {
					logit(translate('Alliance applicants list retrieved'));
					Tabs.Alliance.checkMembersBusy = false
					Tabs.Alliance.tabAllianceList();
				});
			},
			getApplicants: function(notify) {
				var t = Tabs.Alliance;
				Data.dynamic.players.applicants = {
					player: '',
					id: 0,
					role: '',
					might: 0,
					city: '',
					x: 0,
					y: 0,
					dragon: {},
					req_id: 0,
					dist: 0,
					joined: 0
				};
				var dial = new ModalDialog(t.container, 300, 165, '', false, null);
				dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
				dial.getContentDiv().innerHTML = translate('Search for alliance applicants');
				MemberShips.fetchApplicants(Seed.player.alliance.id, callback, false);

				function callback(dat) {
					if (!dat.done) {
						if (dat.errmsg)
							dial.getContentDiv().innerHTML = dat.errmsg;
						else dial.getContentDiv().innerHTML = translate('Error while retrieving the list of applicants');
						dial.allowClose(true);
						if (notify) notify(false);
						return;
					} else {
						Data.dynamic.players.applicants = cloneProps(dat.member);
						logit('*********  List retrieved ... Total applicants: ' + Data.dynamic.players.applicants.length);

						function charOrdA(a, b) {
							a = a.player.toLowerCase();
							b = b.player.toLowerCase();
							if (a > b) return 1;
							if (a < b) return -1;
							return 0;
						}
						Data.dynamic.players.applicants.sort(charOrdA);
						Data.options.alliance.sort_applicants = '2';
						setTimeout(function() {
							dial.destroy()
						}, 1000);
						if (notify) notify(true);
					}
				}
			},

			/** ALLIANCE MEMBERS LIST SUB-TAB ** */
			tabAllianceList: function() {
				var t = Tabs.Alliance;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAllianceList']).className = 'selected';
				$(UID['tabAllianceList']).style.zIndex = 1;
				t.lastSubTab = 'tabAllianceList';

				t.contentType = 0;

				if (is_null(Data.options.alliance.sort_list)) Data.options.alliance.sort_list = '0';
				if (!is_null(Data.options.alliance.last_update))
					kLastupdate = ' (' + Data.options.alliance.last_update + ')';
				else kLastupdate = '';

				var m = '<div id=' + setUID('tabAlliance_Results') + ' style="height:640px">' + '	<div class=' + UID['title'] + '>' + translate('Members list ') + kLastupdate + '</div>' + '	<div id=' + setUID('tabAlliance_ResultList') + ' class=' + UID['status_ticker'] + ' style="height:620px; max-height:620px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' + '	<div id=' + setUID('tabAlliance_RequestHeader') + ' class=' + UID['title'] + '>' + translate('Applicants') + '</div>' + '	<div id=' + setUID('tabAlliance_RequestList') + ' class=' + UID['status_ticker'] + ' style="display:none; height:100px; max-height:100px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabAlliance_Content']).innerHTML = m;
				if (t.my_role == 'vassal' || t.my_role == 'none' || Data.dynamic.players.applicants.length == 0) {
					$(UID['tabAlliance_ResultList']).style.height = "620px";
					$(UID['tabAlliance_RequestHeader']).style.display = "none";
					$(UID['tabAlliance_RequestList']).style.display = "none";
				} else {
					$(UID['tabAlliance_ResultList']).style.height = "490px";
					$(UID['tabAlliance_RequestHeader']).style.display = "block";
					$(UID['tabAlliance_RequestList']).style.display = "block";
				}

				var m = '<table class=' + UID['row_style'] + '>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td id=' + setUID('tabAlliance_tal_0') + ' width="40px"><A><span>' + translate('Dist') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_tal_1') + ' width="55px"><A><span>' + translate('Coords') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_tal_2') + ' width="150px" style="overflow-x:auto"><A><span>' + translate('Player name') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_tal_3') + ' width="65px" style="overflow-x:auto"><A><span>' + translate('Role') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_tal_4') + ' width="65px" align=right><A><span>' + translate('Might') + '</span></A></td>' + '		<td width="60px" align=right>' + translate('Evol') + '</td>' + '		<td id=' + setUID('tabAlliance_tal_5') + ' width="65px" align=right><A><span>' + translate('Joined') + '</span></A></td>' + '	</tr>';
				var ul = [],
					ur = [],
					UIDMsg = setUID('tabAlliance_SendMsg'),
					UIDRej = setUID('tabAlliance_reject');
				for (var i = 0; i < Data.dynamic.players.memberships.length; i++) {
					m += '<tr><td>' + Data.dynamic.players.memberships[i].dist + '</td>' + '	<td align=center>' + Data.dynamic.players.memberships[i].x + ',' + Data.dynamic.players.memberships[i].y + '</td>';
					var mightF = numf(Data.dynamic.players.memberships[i].might, ' ');
					var found = false;
					var evol = 'x';
					for (var old = 0; old < Data.dynamic.players.memberships_evolution.length && !found; old++) {
						if (Data.dynamic.players.memberships_evolution[old].id == Data.dynamic.players.memberships[i].id) {
							evol = Data.dynamic.players.memberships[i].might - Data.dynamic.players.memberships_evolution[old].might;
							if (evol < 0) evol = '<span class=' + UID['red'] + '>' + numf(evol, ' ') + '</span>';
							else if (evol > 0) evol = '<span class=' + UID['green'] + '>+' + numf(evol, ' ') + '</span>';
							else evol = numf(evol, ' ');
							found = true;
						}
					}
					if (Data.dynamic.players.memberships[i].role == 'vassal') var pRole = '';
					else var pRole = translate('role-' + Data.dynamic.players.memberships[i].role);
					var user_ids = Data.dynamic.players.memberships[i].id + '_' + Data.dynamic.players.memberships[i].player;
					m += '<td align=left>' + Data.dynamic.players.memberships[i].player + '</td>' + '	<td align=left>' + pRole + '</td>' + '	<td align=right>' + mightF + '</td>' + '	<td align=right>' + evol + '</td>' + '	<td align=right>' + new Date(Data.dynamic.players.memberships[i].joined).formatDate() + '</td>' + '	<td align=right>&nbsp;<input class=Xtrasmall id=' + UIDMsg + '_' + Data.dynamic.players.memberships[i].id + ' ref="' + user_ids + '" type=button  style="width:auto !important;" value="' + translate('Msg') + '" \></td>' + ((t.my_role == 'vassal' || t.my_role == 'none') ? '' : '<td align=right>&nbsp;<input class="Xtrasmall ' + UID['btn_red'] + '" id=' + UIDRej + '_' + i + ' ref="' + i + '_' + Data.dynamic.players.memberships[i].req_id + '" type=button  style="width:auto !important;" value=" X " \></td>') + '</tr>';
					ul.push(UIDMsg + '_' + Data.dynamic.players.memberships[i].id);
					if (t.my_role != 'vassal' && t.my_role != 'none') ur.push(UIDRej + '_' + i);
				}
				for (var old = 0; old < Data.dynamic.players.memberships_evolution.length; old++) {
					var found = false;
					for (var i = 0; i < Data.dynamic.players.memberships.length && !found; i++) {
						if (Data.dynamic.players.memberships_evolution[old].id == Data.dynamic.players.memberships[i].id)
							found = true;
					}
					if (!found && Data.dynamic.players.memberships_evolution[old].player) {
						m += '<tr><td><span class=' + UID['red'] + '>' + Data.dynamic.players.memberships_evolution[old].dist + '</span></td>' + '	<td align=center><span class=' + UID['red'] + '>' + Data.dynamic.players.memberships_evolution[old].x + ',' + Data.dynamic.players.memberships_evolution[old].y + '</span></td>';
						var mightF = numf(Data.dynamic.players.memberships_evolution[old].might, ' ');
						if (Data.dynamic.players.memberships_evolution[old].role == 'vassal') var pRole = '';
						else var pRole = translate('role-' + Data.dynamic.players.memberships_evolution[old].role);
						var user_ids = Data.dynamic.players.memberships_evolution[old].id + '_' + Data.dynamic.players.memberships_evolution[old].player;
						m += '<td align=left><span class=' + UID['red'] + '>' + Data.dynamic.players.memberships_evolution[old].player + '</span></td>' + '	<td align=left><span class=' + UID['red'] + '>' + pRole + '</span></td>' + '	<td align=right><span class=' + UID['red'] + '>' + mightF + '</span></td>' + '	<td align=right><span class=' + UID['red'] + '>-</span></td>' + '	<td align=right><span class=' + UID['red'] + '>' + new Date(Data.dynamic.players.memberships_evolution[old].joined).formatDate() + '</span></td>' + '	<td align=right><input class=small id=' + UIDMsg + '_' + Data.dynamic.players.memberships_evolution[old].id + ' ref="' + user_ids + '" type=button  style="width:auto !important;" value="' + translate('Msg') + '" \></td>' + '</tr>';
						ul.push(UIDMsg + '_' + Data.dynamic.players.memberships_evolution[old].id);
					}
				}
				$(UID['tabAlliance_ResultList']).innerHTML = m + '</table>';
				for (var h = 0; h < 6; h++)
					$(UID['tabAlliance_tal_' + h]).addEventListener('click', sortMembList, false);
				for (var u = 0; u < ul.length; u++)
					$(ul[u]).addEventListener('click', onClickMsg, false);
				for (var u = 0; u < ur.length; u++)
					$(ur[u]).addEventListener('click', onRejectMember, false);

				if (t.my_role != 'vassal' && t.my_role != 'none' || is_null(Data.dynamic.players.applicants) || Data.dynamic.players.applicants.length > 0) {
					var m = '<table class=' + UID['row_style'] + '>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td id=' + setUID('tabAlliance_taa_0') + ' width="40px"><A><span>' + translate('Dist') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_taa_1') + ' width="55px"><A><span>' + translate('Coords') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_taa_2') + ' width="150px" style="overflow-x:auto"><A><span>' + translate('Player name') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_taa_3') + ' width="65px" align=right><A><span>' + translate('Might') + '</span></A></td>' + '	</tr>';
					var ul = [],
						ua = [],
						ur = [],
						UIDMsg = setUID('tabAlliance_A_SendMsg'),
						UIDAcc = setUID('tabAlliance_A_accept'),
						UIDRej = setUID('tabAlliance_A_reject');
					for (var i = 0; i < Data.dynamic.players.applicants.length; i++) {
						m += '<tr><td>' + Data.dynamic.players.applicants[i].dist + '</td>' + '	<td align=center>' + Data.dynamic.players.applicants[i].x + ',' + Data.dynamic.players.applicants[i].y + '</td>';
						var mightF = numf(Data.dynamic.players.applicants[i].might, ' ');
						var user_ids = Data.dynamic.players.applicants[i].id + '_' + Data.dynamic.players.applicants[i].player;
						m += '<td align=left>' + Data.dynamic.players.applicants[i].player + '</td>' + '	<td align=right>' + mightF + '</td>' + '	<td align=right>&nbsp;<input class=Xtrasmall id=' + UIDMsg + '_' + Data.dynamic.players.applicants[i].id + ' ref="' + user_ids + '" type=button  style="width:auto !important;" value="' + translate('Msg') + '" \>&nbsp;</td>' + '	<td align=right>&nbsp;<input class="Xtrasmall ' + UID['btn_green'] + '" id=' + UIDAcc + '_' + i + ' ref="' + i + '_' + Data.dynamic.players.applicants[i].req_id + '" type=button  style="width:auto !important;" value="' + translate('Accept') + '" \>&nbsp;</td>' + '	<td align=right>&nbsp;<input class="Xtrasmall ' + UID['btn_red'] + '" id=' + UIDRej + '_' + i + ' ref="' + i + '_' + Data.dynamic.players.applicants[i].req_id + '" type=button  style="width:auto !important;" value="' + translate('Dismiss') + '" \>&nbsp;</td>' + '</tr>';
						ul.push(UIDMsg + '_' + Data.dynamic.players.applicants[i].id);
						ua.push(UIDAcc + '_' + i);
						ur.push(UIDRej + '_' + i);
					}
					$(UID['tabAlliance_RequestList']).innerHTML = m + '</table>';
					for (var h = 0; h < 4; h++)
						$(UID['tabAlliance_taa_' + h]).addEventListener('click', sortApplicantList, false);
					for (var u = 0; u < ul.length; u++) {
						$(ul[u]).addEventListener('click', onClickMsg, false);
						$(ua[u]).addEventListener('click', onAcceptApplicant, false);
						$(ur[u]).addEventListener('click', onRejectApplicant, false);
					}
				}

				function acceptReject(button, approved, accept, offset, id, notify) {
					var t = Tabs.Alliance;
					setButtonStyle(button, false, (accept ? 'btn_green' : 'btn_red'), 'btn_disabled');
					var dial = new ModalDialog(t.container, 300, 165, '', false, null);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = (accept ? translate('Accepting applicant') : (approved ? translate('Rejecting member') : translate('Rejecting applicant')));
					MyAjax.membership(Seed.player.alliance.id, id, (accept ? 'put' : 'delete'), callback, false);

					function callback(dat) {
						if (dat == null || !dat.ok) {
							if (dat.errmsg)
								dial.getContentDiv().innerHTML = dat.errmsg;
							else dial.getContentDiv().innerHTML = translate('Error while ' + (accept ? 'accepting' : 'rejecting') + ' the ' + (approved ? 'member' : 'applicant'));
							dial.allowClose(true);
							if (notify) notify(false);
							return;
						}
						if (approved)
							Data.dynamic.players.memberships.splice(offset, 1);
						else Data.dynamic.players.applicants.splice(offset, 1);
						setTimeout(function() {
							dial.destroy()
						}, 1000);
						if (notify) notify(true);
						return;
					}
				}

				function onAcceptApplicant(event) {
					var t = Tabs.Alliance,
						but = event.target;
					var id = but.getAttribute('ref').split('_');
					acceptReject(but, false, true, id[0], id[1], t.show);
				}

				function onRejectApplicant(event) {
					var t = Tabs.Alliance,
						but = event.target;
					var id = but.getAttribute('ref').split('_');
					acceptReject(but, false, false, id[0], id[1], t.show);
				}

				function onRejectMember(event) {

					dialogConfirm(translate('Do you want to reject this member') + ' ?',
						/* OK */

						function() {

							var t = Tabs.Alliance,
								but = event.target;
							var id = but.getAttribute('ref').split('_');
							acceptReject(but, true, false, id[0], id[1], t.show);

						},
						/* Cancel */

						function() {}, true
					);
				}

				function sortMembList(event) {
					var t = Tabs.Alliance;
					var arg = event.target.parentNode.parentNode.id;
					if (arg == UID['tabAlliance_tal_0']) {
						if (Data.options.alliance.sort_list == '0') {
							Data.dynamic.players.memberships.sort(function(a, b) {
								return b.dist - a.dist
							});
							Data.options.alliance.sort_list = '-0';
						} else {
							Data.dynamic.players.memberships.sort(function(a, b) {
								return a.dist - b.dist
							});
							Data.options.alliance.sort_list = '0';
						}
					} else if (arg == UID['tabAlliance_tal_1']) {
						if (Data.options.alliance.sort_list == '1') {
							Data.dynamic.players.memberships.sort(function(a, b) {
								return b.x - a.x
							});
							Data.options.alliance.sort_list = '-1';
						} else {
							Data.dynamic.players.memberships.sort(function(a, b) {
								return a.x - b.x
							});
							Data.options.alliance.sort_list = '1';
						}
					} else if (arg == UID['tabAlliance_tal_2']) {
						if (Data.options.alliance.sort_list == '2') {
							Data.dynamic.players.memberships.sort(function(a, b) {
								a = a.player.toLowerCase();
								b = b.player.toLowerCase();
								if (a > b) return -1;
								if (a < b) return 1;
								return 0;
							});
							Data.options.alliance.sort_list = '-2';
						} else {
							Data.dynamic.players.memberships.sort(function(a, b) {
								a = a.player.toLowerCase();
								b = b.player.toLowerCase();
								if (a > b) return 1;
								if (a < b) return -1;
								return 0;
							});
							Data.options.alliance.sort_list = '2';
						}
					} else if (arg == UID['tabAlliance_tal_3']) {
						if (Data.options.alliance.sort_list == '3') {
							Data.dynamic.players.memberships.sort(function(a, b) {
								a = a.role.toLowerCase();
								b = b.role.toLowerCase();
								if (a > b) return -1;
								if (a < b) return 1;
								return 0;
							});
							Data.options.alliance.sort_list = '-3';
						} else {
							Data.dynamic.players.memberships.sort(function(a, b) {
								a = a.role.toLowerCase();
								b = b.role.toLowerCase();
								if (a > b) return 1;
								if (a < b) return -1;
								return 0;
							});
							Data.options.alliance.sort_list = '3';
						}
					} else if (arg == UID['tabAlliance_tal_4']) {
						if (Data.options.alliance.sort_list == '4') {
							Data.dynamic.players.memberships.sort(function(a, b) {
								return b.might - a.might
							});
							Data.options.alliance.sort_list = '-4';
						} else {
							Data.dynamic.players.memberships.sort(function(a, b) {
								return a.might - b.might
							});
							Data.options.alliance.sort_list = '4';
						}
					} else if (arg == UID['tabAlliance_tal_5']) {
						if (Data.options.alliance.sort_list == '5') {
							Data.dynamic.players.memberships.sort(function(a, b) {
								return b.joined - a.joined
							});
							Data.options.alliance.sort_list = '-5';
						} else {
							Data.dynamic.players.memberships.sort(function(a, b) {
								return a.joined - b.joined
							});
							Data.options.alliance.sort_list = '5';
						}
					}
					t.tabAllianceList();
				}

				function sortApplicantList(event) {
					var t = Tabs.Alliance;
					var arg = event.target.parentNode.parentNode.id;
					if (arg == UID['tabAlliance_taa_0']) {
						if (Data.options.alliance.sort_applicants == '0') {
							Data.dynamic.players.applicants.sort(function(a, b) {
								return b.dist - a.dist
							});
							Data.options.alliance.sort_applicants = '-0';
						} else {
							Data.dynamic.players.applicants.sort(function(a, b) {
								return a.dist - b.dist
							});
							Data.options.alliance.sort_applicants = '0';
						}
					} else if (arg == UID['tabAlliance_taa_1']) {
						if (Data.options.alliance.sort_applicants == '1') {
							Data.dynamic.players.applicants.sort(function(a, b) {
								return b.x - a.x
							});
							Data.options.alliance.sort_applicants = '-1';
						} else {
							Data.dynamic.players.applicants.sort(function(a, b) {
								return a.x - b.x
							});
							Data.options.alliance.sort_applicants = '1';
						}
					} else if (arg == UID['tabAlliance_taa_2']) {
						if (Data.options.alliance.sort_applicants == '2') {
							Data.dynamic.players.applicants.sort(function(a, b) {
								a = a.player.toLowerCase();
								b = b.player.toLowerCase();
								if (a > b) return -1;
								if (a < b) return 1;
								return 0;
							});
							Data.options.alliance.sort_applicants = '-2';
						} else {
							Data.dynamic.players.applicants.sort(function(a, b) {
								a = a.player.toLowerCase();
								b = b.player.toLowerCase();
								if (a > b) return 1;
								if (a < b) return -1;
								return 0;
							});
							Data.options.alliance.sort_applicants = '2';
						}
					} else if (arg == UID['tabAlliance_taa_3']) {
						if (Data.options.alliance.sort_applicants == '3') {
							Data.dynamic.players.applicants.sort(function(a, b) {
								return b.might - a.might
							});
							Data.options.alliance.sort_applicants = '-3';
						} else {
							Data.dynamic.players.applicants.sort(function(a, b) {
								return a.might - b.might
							});
							Data.options.alliance.sort_applicants = '3';
						}
					}
					t.tabAllianceList();
				}
			},

			/** ALLIANCE TRANSPORT SUB-TAB ** */
			tabAllianceTrans: function() {
				var t = Tabs.Alliance;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAllianceTrans']).className = 'selected';
				$(UID['tabAllianceTrans']).style.zIndex = 1;
				t.lastSubTab = 'tabAllianceTrans';
				t.contentType = 1;

				var m = '<div id=' + setUID('tabAlliance_Results') + ' style="height:590px">' + '	<div class=' + UID['title'] + '>' + translate('Send resources') + '</div>' + '	<div id=' + setUID('tabAlliance_Status') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<table class=' + UID['table'] + ' width=100%>' + '		<tr class=' + UID['row_headers_left'] + ' align=left>' + '			<td align=left colspan=2>' + translate('Recipient') + ' : </td>' + '		</tr><tr>' + '			<td><div id=' + setUID('tabAlliance_TransPlayerList') + '></div></td>' + '			<td><div id=' + setUID('tabAlliance_TransTarget') + ' style="height: 17px; padding: 2px 0px;"></div></td>' + '		</tr>' + '	</table><br>' + '	<br>' + '	<table id=' + setUID('tabAlliance_TabYoyo') + ' class=' + UID['table'] + '>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=2>' + translate('Yoyo functionality') + ':&nbsp;</td>' + '		</tr>' + '		<tr align=left>' + '			<td>' + translate('Automatically recall transport 1 minute before delivery') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabAlliance_Yoyo') + ' type=checkbox ' + (Data.options.alliance.recall ? 'CHECKED' : '') + ' /></td>' + '		</tr>' + '	</table><br>' + '	<table id=' + setUID('tabAlliance_TTroops') + ' class=' + UID['table'] + '>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=4>' + translate('Troops for transport') + ':&nbsp;(' + translate('Max') + '. ' + translate('Troops') + ' ' + numf(toNum((getMusterPoint(CAPITAL.id)).max_troops), ' ') +')&nbsp;</td>' + '		</tr>' + '	</table><br>' + '	<table id=' + setUID('tabAlliance_Resources') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=5>' + translate('Resources to transport') + ':&nbsp;</td>' + '		</tr>';

				var UIDRes = setUID('tabAlliance_Res');
				var UIDMax = setUID('tabAlliance_Max');
				var UIDRem = setUID('tabAlliance_Rem');

				for (var p = 0; p < transportable_resource_types.length; p++) {
					var num = toNum(Data.options.alliance.data.resources[transportable_resource_types[p]]);
					var actualStock = Math.round(toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[p]]));
					var remaining = '( ' + numf(actualStock - num, ' ') + ' )';
					actualStock = numf(actualStock);
					desc = transportable_resource_types[p];
					if (transportable_resource_types[p] == 'blue_energy') desc = 'blueenergy250k';
					if(desc != 'lunar_energy' && desc != 'blueenergy250k') {
						m += '<tr><td class=right width=70px>' + translate(desc) + ' :</td>' + '	<td width=90px>' + '		<input type=text id=' + UIDRes + '_' + p + ' maxlength=10 style="width:70px" size=2 value="' + num + '"\></td>' + '	<td width=30px>' + '		<input class=small id=' + UIDMax + '_' + p + ' ref=' + p + ' type=button style="width:auto !important;" value=" Max " \></td>' + '	<td align=right width=90px>' + actualStock + '</td>' + '	<td align=right width=90px><span id=' + UIDRem + '_' + p + ' ref=' + i + '>' + remaining + '</span></td>' + '<td></td></tr>';
					}
				}
				m += '<tr><td align=right class=right>' + translate('Load capacity') + '&nbsp:</td>' + '		<td colspan=4 align=left><div id=' + setUID('tabAlliance_Total') + '></div></td>' + '	</tr>' + '</table><br>' + '<table class=' + UID['table'] + ' style="margin-top:3px" width=60%>' + '	<tr valign=top><td style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top align=center>' + '		<td width=25%><label><input id=' + setUID('tabAlliance_AdaptTrsp') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Adapt Transport') + '" /></label></td>' + '		<td width=25%><label><input id=' + setUID('tabAlliance_AdaptTSpeed') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Adapt Transp. by speed') + '" /></label></td>' + '	</tr><tr valign=top><td style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top align=center>' + '		<td width=25%><label><input id=' + setUID('tabAlliance_clearAll') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Clear all') + '" /></label></td>' + '		<td width=25%><label><input id=' + setUID('tabAlliance_Launch') + ' type=button value="' + translate('Send transport') + '" /></label></td>' + '	</tr>' + '</table>' + '<br></div>' + '<div id=' + setUID('tabAlliance_TFeedbackBox') + ' class=' + UID['status_ticker'] + ' style="margin-top:5px; margin-bottom:5px !important">' + '	<div id=' + setUID('tabAlliance_TReport') + ' style="margin-top:5px;height:165px; max-height:165px; width:540px; max-width:540px; overflow:auto;">' + '		<table id=' + setUID('tabAlliance_TMarches') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div>' + '</div></div>';
				$(UID['tabAlliance_Content']).innerHTML = m;

				$(UID['tabAlliance_Yoyo']).addEventListener('click', function(event) {
					Data.options.alliance.recall = event.target.checked
				}, false);
				$(UID['tabAlliance_clearAll']).addEventListener('click', onClickClearAll, false);
				$(UID['tabAlliance_AdaptTrsp']).addEventListener('click', function() {
					onClickAdaptTrsp(1)
				}, false);
				$(UID['tabAlliance_AdaptTSpeed']).addEventListener('click', function() {
					onClickAdaptTrsp(2)
				}, false);
				$(UID['tabAlliance_Launch']).addEventListener('click', sendTransp, false);
				troopTable($(UID['tabAlliance_TTroops']), 1, 'TR', eventTroopsTransport);
				for (i = 0; i < transportable_resource_types.length; i++) {
					if(transportable_resource_types[i] != 'lunar_energy' && transportable_resource_types[i] != 'blue_energy') {
						$(UIDRes + '_' + i).addEventListener('change', resourceChanged, false);
						butMax = $(UIDMax + '_' + i);
						butMax.addEventListener('click', setResourceMax, false);
						setButtonStyle(butMax, true, 'btn_green');
					}
				}
				t.getMemberList();
				t.displayTotal();
				clearTimeout(t.marchTimer);
				t.marchTick();

				function troopTable(tab, rownum, prefix, listener) {
					var t = Tabs.Alliance;
					var row = [];
					row.push(tab.insertRow(rownum));
					row.push(tab.insertRow(rownum + 1));
					row.push(tab.insertRow(rownum + 2));

					var val, c = 0;
					for (var i = 0; i < transport_unit_types.length; ++i) {
						row[0].insertCell(c).innerHTML = translate(transport_unit_types[i]);
						var inp = document.createElement('input');
						inp.type = 'text';
						inp.size = '2';
						inp.style.width = '65px';
						inp.title = translate(transport_unit_types[i]);
						inp.style.border = '1px solid grey';
						inp.maxlength = '6';
						if (prefix == 'TR') {
							if (Data.options.alliance.data.transports[Names.troops.byAbbr[transport_unit_types[i]][1]] == undefined)
								Data.options.alliance.data.transports[Names.troops.byAbbr[transport_unit_types[i]][1]] = 0;
							val = toNum(Data.options.alliance.data.transports[Names.troops.byAbbr[transport_unit_types[i]][1]]);
						}
						if (!val) val = 0;
						inp.value = val;
						inp.name = prefix + '_' + i;
						inp.id = prefix + '_' + i;
						inp.addEventListener('change', listener, false);
						row[1].insertCell(c).appendChild(inp);
						var trp_cell = row[2].insertCell(c);
						var stk = numf(toNum(Seed.cities[CAPITAL.id].units[Names.troops.byAbbr[transport_unit_types[i]][1]]), ' ');
						trp_cell.className = 'jewel';
						trp_cell.innerHTML = '(&nbsp;' + stk + '&nbsp;)';
						c = c + 1;
					}
					return tab;
				}

				function eventTroopsTransport(event) {
					var t = Tabs.Alliance;
					var args = event.target.name.split('_');
					var x = toNum(event.target.value);
					if (args[0] == 'TR') {
						var troopTotGiven = 0;
						var isGood=true;
						for (var i = 0; i < transport_unit_types.length; ++i) {
							var nbTemp = toNum($('TR_'+i).value);
							if (isNaN(x) || x < 0) {
								isGood=false;
								$('TR_'+i).style.backgroundColor = 'red';
							} else {
								troopTotGiven += nbTemp;
								$('TR_'+i).style.backgroundColor = '';
							}
						}
						
						if ( troopTotGiven > (getMusterPoint(CAPITAL.id)).max_troops) {
							for (var i = 0; i < transport_unit_types.length; ++i) {
								$('TR_'+i).style.backgroundColor = 'red';
							}
						} else {
							Data.options.alliance.data.transports[Names.troops.byAbbr[transport_unit_types[args[1]]][1]] = x;
							var tr = Data.options.alliance.data.transports;
							var tt = Names.troops.byAbbr[transport_unit_types[args[1]]][1];
							tr[tt] = event.target.value;
						}
					}
					t.playerCityDesc();
					t.displayTotal();
				}

				function onClickClearAll() {
					var t = Tabs.Alliance;
					for (var i = 0; i < transport_unit_types.length; i++)
						Data.options.alliance.data.transports[Names.troops.byAbbr[transport_unit_types[i]][1]] = 0;
					for (var r = 0; r < transportable_resource_types.length; r++) {
						Data.options.alliance.data.resources[transportable_resource_types[r]] = 0;
					}
					t.tabAllianceTrans();
				}

				function resourceChanged(event) {
					var args = event.target.id.split('_');
					var x = toNum(event.target.value);
					t.totalResources = 0;
					var actualStock = 0;
					for (var r = 0; r < transportable_resource_types.length; r++) {
						if(transportable_resource_types[r] != 'lunar_energy' && transportable_resource_types[r] != 'blue_energy') {
							if (r != args[1]) t.totalResources = toNum(t.totalResources) + toNum(Data.options.alliance.data.resources[transportable_resource_types[r]]);
							if (r == args[1]) actualStock = Math.round(toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[r]]));
								$(UID['tabAlliance_Res'] + '_' + r).style.backgroundColor = '';
						}
					}
					if (isNaN(x) || x < 0 || (x + toNum(t.totalResources)) > toNum(t.maxResources))
						event.target.style.backgroundColor = 'red';
					else event.target.style.backgroundColor = '';
					event.target.value = toNum(x);
					Data.options.alliance.data.resources[transportable_resource_types[args[1]]] = toNum(x);
					$(UID['tabAlliance_Rem'] + '_' + args[1]).innerHTML = '( ' + numf(actualStock - toNum(x), ' ') + ' )';
					t.displayTotal();
				}

				function setResourceMax(event) {
					var args = event.target.id.split('_');
					var max = 0;
					var cur = toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[args[1]]]);
					t.totalResources = 0;
					for (var r = 0; r < transportable_resource_types.length; r++)
						if (r != args[1]) t.totalResources = toNum(t.totalResources) + toNum(Data.options.alliance.data.resources[transportable_resource_types[r]]);
					max = toNum(t.maxResources) - toNum(t.totalResources);
					if (max > cur) max = cur;
					Data.options.alliance.data.resources[transportable_resource_types[args[1]]] = toNum(max);
					t.tabAllianceTrans();
				}

				function onClickAdaptTrsp(sort) {
					var t = Tabs.Alliance;
					var max_load = 0,
						total_load = 0,
						tabTrsp = [];
					/*
					 * get max load possible according to unit types and
					 * quantity
					 */
					for (var i = 0; i < transport_unit_types.length; i++) {
						if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'Porter') var load = 200;
						else if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'ArmoredTransport') var load = 5000;
						else if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'PackDragon') var load = 6000;
						else var load = 0;
						var qty = toNum(Seed.cities[CAPITAL.id].units[Names.troops.byAbbr[transport_unit_types[i]][1]]);
						try {
							var load = Seed.stats.unit[Names.troops.byAbbr[transport_unit_types[i]][1]].load;
							var speed = Seed.stats.unit[Names.troops.byAbbr[transport_unit_types[i]][1]].speed;
						} catch (e) {}
						tabTrsp.push({
							type: transport_unit_types[i],
							load: load,
							speed: speed,
							max_qty: qty,
							max_load: toNum(qty) * toNum(load)
						});
						max_load += (toNum(qty) * toNum(load));
					}
					/* get current total load defined to transport */
					for (var p = 0; p < transportable_resource_types.length; p++)
						total_load += toNum(Data.options.alliance.data.resources[transportable_resource_types[p]]);
					/*
					 * if maximum load possible is greater than the current
					 * total load, we adjust transport number to fit with load
					 * to transport
					 */
					if (sort == 1)
						tabTrsp.sort(function(a, b) {
							a = a.type.toLowerCase();
							b = b.type.toLowerCase();
							if (a > b) return 1;
							if (a < b) return -1;
							return 0;
						});
					else tabTrsp.sort(function(a, b) {
						return b.speed - a.speed
					});
					if (max_load >= 0 && max_load >= total_load) {
						for (var i = 0; i < tabTrsp.length; i++) {
							var new_qty = 0;
							if (total_load >= 0) {
								if (tabTrsp[i].max_load > total_load) {
									new_qty = Math.ceil(total_load / tabTrsp[i].load);
									total_load -= new_qty * tabTrsp[i].load;
								} else {
									new_qty = tabTrsp[i].max_qty;
									total_load -= tabTrsp[i].max_load;
								}
							}
							Data.options.alliance.data.transports[Names.troops.byAbbr[tabTrsp[i].type][1]] = new_qty;
						}
					}
					t.tabAllianceTrans();
				}

				function sendTransp() {
					var dial = new ModalDialog(t.container, 300, 150, '', false);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('Sending transport');
					checkTransport(notify);

					function notify(rslt) {
						if (rslt != 'OK') {
							dial.getContentDiv().innerHTML = '<B>' + rslt + '</b>';
							dial.allowClose(true);
						} else {
							dial.getContentDiv().innerHTML = '<B> OK </b>';
							setTimeout(function() {
								dial.destroy()
							}, 1000);
							t.show();
						}
					}
				}

				function checkTransport(notify) {
					var t = Tabs.Alliance;
					var cityId = Seed.cities[CAPITAL.id].id;
					var cityIdx = CAPITAL.id;
					var target = t.getTarget(Data.options.alliance.transport_id);
					if (is_null(target)) {
						notify(translate('No Recipient Defined'));
						return;
					}
					/* check resources */
					var ress = Data.options.alliance.data.resources;
					var totRess = 0;
					for (var p in ress)
						if (ress[p] > 0) totRess += ress[p];
					if (totRess <= 0) {
						notify(translate('No resources to transport defined'));
						return;
					}
					/* check troops */
					var units = Data.options.alliance.data.transports;
					var checkUnits = checkTroops(CAPITAL.id, units);
					if (checkUnits != null) {
						notify(getErrorText(checkUnits, 'fb'));
						return;
					}
					var targMsg = '<B>' + translate('Transport sent to') + '</B> : ' + target.msg;
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.TransportMarch(cityId, target.x, target.y, units, ress, 'transport', function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('Successfully'));
							actionLog(targMsg);
							if (Data.options.alliance.recall) {
								var m = {
									cityId: cityId,
									marchId: rslt.dat.result.job.march_id,
									run_at: rslt.dat.result.job.run_at
								};
								Data.dynamic.recall_marches.push(m);
							}
							if (notify) notify('OK');
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
							if (notify) notify(translate('Error') + ': ' + rslt.errmsg);
						}
						return;
					});
				}
			},

			/** ALLIANCE AUTO-BANK SUB-TAB ** */
			tabAllianceAuto: function() {
				var t = Tabs.Alliance;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAllianceAuto']).className = 'selected';
				$(UID['tabAllianceAuto']).style.zIndex = 1;
				t.lastSubTab = 'tabAllianceAuto';
				t.contentType = 4;

				var m = '<div id=' + setUID('tabAlliance_Results') + '>' + '	<div class=' + UID['title'] + '>"Lost In Translation" (Auto-Bank / Auto-Yoyo)</div>' + '	<div id=' + setUID('tabAlliance_Status') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<table class=' + UID['table'] + ' width=100%>' + '		<tr class=' + UID['row_headers_left'] + ' align=left>' + '			<td align=left colspan=2>' + translate('Recipient') + ' : </td>' + '		</tr><tr>' + '			<td><div id=' + setUID('tabAlliance_AutoPlayerList') + '></div></td>' + '			<td><div id=' + setUID('tabAlliance_AutoTarget') + ' style="height: 17px; padding: 2px 0px;"></div></td>' + '		</tr>' + '	</table><br>' + '	<table id=' + setUID('tabAlliance_TabAutoYoyo') + ' class=' + UID['table'] + '>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=2>' + translate('Yoyo functionality') + ':&nbsp;</td>' + '		</tr>' + '		<tr align=left>' + '			<td>' + translate('Automatically recall transport 1 minute before delivery') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabAlliance_AutoYoyo') + ' type=checkbox ' + (Data.options.alliance.auto.recall ? 'CHECKED' : '') + ' /></td>' + '		</tr>' + '	</table><br>' + '	<table id=' + setUID('tabAlliance_ATroops') + ' class=' + UID['table'] + '>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=4>' + translate('Troops for transport') + ':&nbsp;</td>' + '		</tr>' + '	</table><br>' + '	<table id=' + setUID('tabAlliance_AResources') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=3>' + translate('Resources to transport') + ':&nbsp;</td>' + '			<td>' + translate('Reserves') + '</td>' + '		</tr>';

				var UIDRes = setUID('tabAlliance_ARes');
				var UIDMax = setUID('tabAlliance_AMax');
				var UIDStk = setUID('tabAlliance_AStk');
				for (var p = 0; p < transportable_resource_types.length; p++) {
					var actualStock = numf(Math.round(toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[p]])));
					desc = transportable_resource_types[p];
					if (transportable_resource_types[p] == 'blue_energy') desc = 'blueenergy250k';
					m += '<tr><td class=right width=60px>' + translate(desc) + ' :</td>' + '	<td width=90px>' + '		<input type=text id=' + UIDRes + '_' + p + ' maxlength=10 style="width:70px" size=2 value="' + toNum(Data.options.alliance.auto.resources[transportable_resource_types[p]]) + '"\></td>' + '	<td width=30px>' + '		<input class=small id=' + UIDMax + '_' + p + ' ref=' + p + ' type=button style="width:auto !important;" value=" Max " \></td>' + '	<td align=right width=90px><div id=' + UIDStk + '_' + p + '>' + actualStock + '</div></td>' + '<td></td></tr>';
				}
				m += '<tr><td align=right class=right>' + translate('Load capacity') + '&nbsp:</td>' + '		<td colspan=4 align=left><div id=' + setUID('tabAlliance_ATotal') + '></div></td>' + '	</tr><tr>' + '		<td colspan=3 class=right>' + translate('Maximize resource to transport according to max load') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabAlliance_MaxLoad') + ' type=checkbox ' + (Data.options.alliance.auto.max_load ? 'CHECKED' : '') + ' /></td>' + '	</tr><tr>' + '		<td colspan=3 class=right>' + translate('Delay Between Transports') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabAlliance_AutoDelayMin') + ' type=text size=1 maxlength=4 value="' + Data.options.alliance.auto.delay_min + '" />' + '			 to <span id=' + setUID('tabAlliance_AutoDelayMax') + '>' + Data.options.alliance.auto.delay_max + '</span>&nbsp;' + translate('seconds') + '		</td>' + '	</tr><tr>' + '		<td colspan=3 class=right> ' + translate('Maximum simultaneous marches') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabAlliance_AutoMaxMarches') + ' type=text size=1 maxlength=2 value="' + Data.options.alliance.auto.max_marches + '" /></td>' + '	</tr>' + '</table><br><br>' + '<center><input id=' + setUID('tabAlliance_AOnOff') + ' type=button value="OnOff" /></center>' + '<br></div>' + '<div id=' + setUID('tabAlliance_FeedbackBox') + ' class=' + UID['status_ticker'] + ' style="margin-top:5px; margin-bottom:5px !important">' + '	<div id=' + setUID('tabAlliance_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '	<div id=' + setUID('tabAlliance_AReport') + ' style="margin-top:5px;height:105px; max-height:105px; width:540px; max-width:540px; overflow:auto;">' + '		<table id=' + setUID('tabAlliance_AMarches') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div>' + '</div></div>';
				$(UID['tabAlliance_Content']).innerHTML = m;

				$(UID['tabAlliance_AutoYoyo']).addEventListener('click', function(event) {
					Data.options.alliance.auto.recall = event.target.checked
				}, false);
				$(UID['tabAlliance_MaxLoad']).addEventListener('click', function(event) {
					Data.options.alliance.auto.max_load = event.target.checked
				}, false);
				$(UID['tabAlliance_AutoDelayMin']).addEventListener('change', delayChanged, false);
				$(UID['tabAlliance_AutoMaxMarches']).addEventListener('change', maxMarchesChanged, false);
				$(UID['tabAlliance_AOnOff']).addEventListener('click', function() {
					t.setEnable(!Data.options.alliance.auto.enabled);
				}, false);
				troopTable($(UID['tabAlliance_ATroops']), 1, 'TR', eventTroopsTransport);
				for (i = 0; i < transportable_resource_types.length; i++) {
					$(UIDRes + '_' + i).addEventListener('change', resourceChanged, false);
					butMax = $(UIDMax + '_' + i);
					butMax.addEventListener('click', setResourceMax, false);
					setButtonStyle(butMax, true, 'btn_green');
				}
				t.getMemberList();
				displayTotal();
				t.setEnable(Data.options.alliance.auto.enabled);

				function delayChanged(event) {
					var min = toNum(event.target.value);
					var max = toNum(min * 1.5);
					if (min < nvl(MIN_DELAY_BETWEEN_WAVE, 10) || min > 3600) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					$(UID['tabAlliance_AutoDelayMax']).innerHTML = max;
					event.target.style.backgroundColor = '';
					Data.options.alliance.auto.delay_min = min;
					Data.options.alliance.auto.delay_max = max;
				}

				function displayTotal() {
					var t = Tabs.Alliance;
					t.totalResources = 0;
					t.maxResources = 0;
					for (var r = 0; r < transportable_resource_types.length; r++)
						t.totalResources = toNum(t.totalResources) + toNum(Data.options.alliance.auto.resources[transportable_resource_types[r]]);
					for (var i = 0; i < transport_unit_types.length; i++) {
						if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'Porter')
							var load = 200;
						else if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'ArmoredTransport')
							var load = 5000;
						else if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'PackDragon')
							var load = 6000;
						else
							var load = 0;
						var qty = Data.options.alliance.auto.transports[Names.troops.byAbbr[transport_unit_types[i]][1]];
						try {
							var load = Seed.stats.unit[Names.troops.byAbbr[transport_unit_types[i]][1]].load;
						} catch (e) {
							actionLog('<B>' + translate('Troops load: ') + '</B>' + e.msg + ' ' + translate('Manifest not available, using defaults'));
						}
						t.maxResources = t.maxResources + (toNum(qty) * toNum(load));
					}
					var avail = numf(toNum(t.maxResources) - toNum(t.totalResources), ' ');
					$(UID['tabAlliance_ATotal']).innerHTML = '<B>' + numf(toNum(t.totalResources), ' ') + '</B> / <B>' +
						numf(toNum(t.maxResources), ' ') + '</B> (<B>' + avail + '</B> disponible)';
				}

				function eventTroopsTransport(event) {
					var t = Tabs.Alliance;
					var args = event.target.name.split('_');
					var x = toNum(event.target.value);
					if (args[0] == 'TR') {
						if (isNaN(x) || x < 0 || x > (getMusterPoint(CAPITAL.id)).max_troops) {
							event.target.style.backgroundColor = 'red';
						} else {
							Data.options.alliance.auto.transports[Names.troops.byAbbr[transport_unit_types[args[1]]][1]] = x;
							var tr = Data.options.alliance.auto.transports;
							var tt = Names.troops.byAbbr[transport_unit_types[args[1]]][1];
							tr[tt] = event.target.value;
							event.target.style.backgroundColor = '';
						}
					}
					displayTotal();
				}

				function maxMarchesChanged(event) {
					var val = toNum($(UID['tabAlliance_AutoMaxMarches']).value);
					if (val < 0 || val > Seed.cities[CAPITAL.id].figures.marches.maximum) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					event.target.style.backgroundColor = '';
					Data.options.alliance.auto.max_marches = val;
				}

				function resourceChanged(event) {
					var t = Tabs.Alliance;
					var args = event.target.id.split('_');
					var x = toNum(event.target.value);
					t.totalResources = 0;
					for (var r = 0; r < transportable_resource_types.length; r++)
						if (r != args[1])
							t.totalResources = toNum(t.totalResources) + toNum(Data.options.alliance.auto.resources[transportable_resource_types[r]]);
					for (i = 0; i < transportable_resource_types.length; i++)
						$(UID['tabAlliance_ARes'] + '_' + i).style.backgroundColor = '';
					if (isNaN(x) || x < 0 || (x + toNum(t.totalResources)) > toNum(t.maxResources))
						event.target.style.backgroundColor = 'red';
					else
						event.target.style.backgroundColor = '';
					event.target.value = toNum(x);
					Data.options.alliance.auto.resources[transportable_resource_types[args[1]]] = toNum(x);
					displayTotal();
				}

				function setResourceMax(event) {
					var args = event.target.id.split('_');
					var max = 0;
					var cur = toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[args[1]]]);
					t.totalResources = 0;
					for (var r = 0; r < transportable_resource_types.length; r++)
						if (r != args[1]) t.totalResources = toNum(t.totalResources) + toNum(Data.options.alliance.auto.resources[transportable_resource_types[r]]);
					max = toNum(t.maxResources) - toNum(t.totalResources);
					if (max > cur) max = cur;
					Data.options.alliance.auto.resources[transportable_resource_types[args[1]]] = toNum(max);
					t.tabAllianceAuto();
				}

				function troopTable(tab, rownum, prefix, listener) {
					var t = Tabs.Alliance;
					var row = [];
					row.push(tab.insertRow(rownum));
					row.push(tab.insertRow(rownum + 1));
					row.push(tab.insertRow(rownum + 2));

					var val, c = 0;
					var UIDTrpStk = setUID('tabAlliance_ATStk');
					for (var i = 0; i < transport_unit_types.length; ++i) {
						row[0].insertCell(c).innerHTML = translate(transport_unit_types[i]);
						var inp = document.createElement('input');
						inp.type = 'text';
						inp.size = '2';
						inp.style.width = '65px';
						inp.title = translate(transport_unit_types[i]);
						inp.style.border = '1px solid grey';
						inp.maxlength = '6';
						if (prefix == 'TR') {
							if (Data.options.alliance.auto.transports[Names.troops.byAbbr[transport_unit_types[i]][1]] == undefined)
								Data.options.alliance.auto.transports[Names.troops.byAbbr[transport_unit_types[i]][1]] = 0;
							val = toNum(Data.options.alliance.auto.transports[Names.troops.byAbbr[transport_unit_types[i]][1]]);
						}
						if (!val) val = 0;
						inp.value = val;
						inp.name = prefix + '_' + i;
						inp.addEventListener('change', listener, false);
						row[1].insertCell(c).appendChild(inp);
						var trp_cell = row[2].insertCell(c);
						var stk = numf(toNum(Seed.cities[CAPITAL.id].units[Names.troops.byAbbr[transport_unit_types[i]][1]]), ' ');
						trp_cell.className = 'jewel';
						trp_cell.innerHTML = '<div id=' + UIDTrpStk + '_' + i + '>(&nbsp;' + stk + '&nbsp;)</div>';
						c = c + 1;
					}
					return tab;
				}
			},

			/** ALLIANCE REINFORCEMENT SUB-TAB ** */
			tabAllianceReinforcement: function() {
				var t = Tabs.Alliance;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAllianceReinforcement']).className = 'selected';
				$(UID['tabAllianceReinforcement']).style.zIndex = 1;
				t.lastSubTab = 'tabAllianceReinforcement';
				t.contentType = 2;

				var m = '<div id=' + setUID('tabAlliance_Results') + ' style="height:590px">' + '	<div class=' + UID['title'] + '>' + translate('reinforcements') + '</div>' + '	<div id=' + setUID('tabAlliance_Status') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<table class=' + UID['table'] + ' width=100%>' + '		<tr class=' + UID['row_headers_left'] + ' align=left>' + '			<td align=left colspan=2>' + translate('Recipient') + ' : </td>' + '		</tr><tr>' + '			<td><div id=' + setUID('tabAlliance_ReinfPlayerList') + '></div></td>' + '			<td><div id=' + setUID('tabAlliance_ReinfTarget') + ' style="height: 17px; padding: 2px 0px;"></div></td>' + '		</tr>' + '	</table><br>' + '	<br>' + '	<table id=' + setUID('tabAlliance_RTroops') + ' class=' + UID['table'] + '>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=5>' + translate('Troops for reinforcement') + ':&nbsp;</td>' + '		</tr>';

				var UIDTrp = setUID('tabAlliance_Trp');
				var UIDMax = setUID('tabAlliance_MaxT');
				var UIDRem = setUID('tabAlliance_RemT');
				for (i = 0; i < all_unit_types.length; i++) {
					var num = toNum(Data.options.alliance.data.units[all_unit_types[i]]);
					var stk = toNum(Seed.cities[CAPITAL.id].units[all_unit_types[i]]);
					var remaining = '( ' + numf(stk - num, ' ') + ' )';
					stk = numf(stk, ' ');
					m += '<tr><td class=right width="100px">' + translate(Names.troops.byName[all_unit_types[i]][1]) + ':</td>' + '	<td width="75px">' + '		<input type=text id=' + UIDTrp + '_' + i + ' maxlength=6 style="width:55px" size=2 value="' + num + '"\></td>' + '	<td width="30px">' + '		<input class=small id=' + UIDMax + '_' + i + ' ref=' + i + ' type=button  style="width:auto !important;" value=" Max " \></td>' + '	<td align=right width="70px">' + stk + '</td>' + '	<td align=right width="80px"><span id=' + UIDRem + '_' + i + ' ref=' + i + '>' + remaining + '</span></td>' + '</tr>';
				}
				m += '</table><br><br>' + '<table class=' + UID['table'] + ' style="margin-top:3px" width=60%>' + '	<tr valign=top align=center>' + '		<td width=25%><label><input id=' + setUID('tabAlliance_clearAllR') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Clear all') + '" /></label></td>' + '		<td width=25%><label><input id=' + setUID('tabAlliance_LaunchR') + ' type=button value="' + translate('Send reinforcement') + '" /></label></td>' + '		<td width=25%><label><input id=' + setUID('tabAlliance_LaunchAllR') + ' type=button value="' + translate('Send Max in reinf') + '" /></label></td>' + '	</tr>' + '</table>' + '<br></div></div>';
				$(UID['tabAlliance_Content']).innerHTML = m;
				$(UID['tabAlliance_clearAllR']).addEventListener('click', onClickClearAll, false);
				$(UID['tabAlliance_LaunchR']).addEventListener('click', SendReinforcement, false);
				$(UID['tabAlliance_LaunchAllR']).addEventListener('click', sendMaxReinforcements, false);
				for (i = 0; i < all_unit_types.length; i++) {
					$(UIDTrp + '_' + i).addEventListener('change', eventTroopsReinforcemment, false);
					butMax = $(UIDMax + '_' + i);
					butMax.addEventListener('click', setTroupsMax, false);
					setButtonStyle(butMax, true, 'btn_green');
				}

				if (isUnderProtection()) {
					setButtonStyle($(UID['tabAlliance_LaunchR']), false);
					setButtonStyle($(UID['tabAlliance_LaunchAllR']), false);
				} else {
					setButtonStyle($(UID['tabAlliance_LaunchR']), true);
					setButtonStyle($(UID['tabAlliance_LaunchAllR']), true);
				}

				t.getMemberList();

				function eventTroopsReinforcemment(event) {
					var args = event.target.id.split('_');
					var x = toNum(event.target.value);
					t.totalForces = 0;
					var currentForces = 0;
					for (var r = 0; r < all_unit_types.length; r++) {
						if (r != args[1]) t.totalForces = toNum(t.totalForces) + toNum(Data.options.alliance.data.units[all_unit_types[r]]);
						if (r == args[1]) currentForces = toNum(Seed.cities[CAPITAL.id].units[all_unit_types[r]]);
						$(UID['tabAlliance_Trp'] + '_' + r).style.backgroundColor = '';
					}
					if (isNaN(x) || x < 0 || (x + toNum(t.totalForces)) > (getMusterPoint(CAPITAL.id)).max_troops)
						event.target.style.backgroundColor = 'red';
					else event.target.style.backgroundColor = '';
					event.target.value = x;
					Data.options.alliance.data.units[all_unit_types[args[1]]] = x;
					$(UID['tabAlliance_RemT'] + '_' + args[1]).innerHTML = '( ' + numf(currentForces - x, ' ') + ' )';
				}

				function onClickClearAll() {
					var t = Tabs.Alliance;
					for (var i = 0; i < all_unit_types.length; i++)
						Data.options.alliance.data.units[all_unit_types[i]] = 0;
					t.tabAllianceReinforcement();
				}

				function setTroupsMax(event) {
					var args = event.target.id.split('_');
					var max = 0;
					var cur = toNum(Seed.cities[CAPITAL.id].units[all_unit_types[args[1]]]);
					t.totalForces = 0;
					for (var r = 0; r < all_unit_types.length; r++)
						if (r != args[1]) t.totalForces = toNum(t.totalForces) + toNum(Data.options.alliance.data.units[all_unit_types[r]]);
					max = (getMusterPoint(CAPITAL.id)).max_troops - toNum(t.totalForces);
					if (max > cur) max = cur;
					Data.options.alliance.data.units[all_unit_types[args[1]]] = toNum(max);
					t.tabAllianceReinforcement();
				}

				function SendReinforcement() {
					var dial = new ModalDialog(t.container, 300, 150, '', false);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('Sending reinforcement');
					checkReinforcement(Data.options.alliance.data.units, notify);

					function notify(rslt) {
						if (rslt != 'OK') {
							try {
								dial.getContentDiv().innerHTML = '<B>' + rslt + '</b>';
								dial.allowClose(true);
							} catch (e) {}
						} else {
							try {
								dial.getContentDiv().innerHTML = '<B> OK </b>';
								setTimeout(function() {
									dial.destroy()
								}, 1000);
							} catch (e) {}
							t.show();
						}
					}
				}

				function checkReinforcement(units, notify) {
					var t = Tabs.Alliance;
					var cityId = Seed.cities[CAPITAL.id].id;
					var cityIdx = CAPITAL.id;
					var target = t.getTarget(Data.options.alliance.reinforce_id);
					if (is_null(target)) {
						notify(translate('No Recipient Defined'));
						return;
					}
					var availableGeneral = null;
					/* check troops */
					/* var units = Data.options.alliance.data.units; */
					var checkUnits = checkTroops(CAPITAL.id, units);
					if (checkUnits != null) {
						notify(getErrorText(checkUnits, 'fb'));
						return;
					}
					availableGeneral = getAvailableGeneral();
					if (availableGeneral == null) {
						notify(getErrorText(3, 'fb'));
						return;
					}
					var targMsg = '<B>' + translate('Reinforcement sent to') + '</B> : ' + target.msg;
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.marchSend(cityId, target.x, target.y, availableGeneral.id, units, 'attacks', function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('Successfully'));
							actionLog(targMsg);
							if (notify) notify('OK');
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
							if (notify) notify(translate('Error') + ': ' + rslt.errmsg);
						}
						return;
					});
				}

				function sendMaxReinforcements() {
					var t = Tabs.Alliance;
					if (t.checkReinfBusy) return false;
					t.checkReinfBusy = true;
					initReinforcements(function() {
						logit('****** Setting checkReinfBusy to FALSE');
						Tabs.Alliance.checkReinfBusy = false;
						Tabs.Alliance.show();
					});
				}

				function initReinforcements(notify) {
					var t = Tabs.Alliance;
					var sendable = [];
					var tot_qty = 0;
					for (i = 0; i < all_unit_types.length; i++) {
						var is_transport = false;
						for (var x = 0; x < transport_unit_types.length && !is_transport; x++)
							if (Names.troops.byAbbr[transport_unit_types[x]][1] == all_unit_types[i]) is_transport = true;
						if (!is_transport) {
							var num = toNum(Seed.cities[CAPITAL.id].units[all_unit_types[i]]);
							tot_qty += num;
							if (num > 0)
								sendable.push({
									type: all_unit_types[i],
									qty: num,
									upkeep: toNum(Seed.stats.unit[all_unit_types[i]].upkeep.food)
								});
						}
					}
					var muster_point = getMusterPoint(CAPITAL.id);
					var max_march = muster_point.slots;
					var max_per_march = muster_point.max_troops;
					if (max_march <= 0 || tot_qty == 0 || max_per_march <= 0) {
						notify(true);
						return;
					}
					logit('======> alliance tab initReinforcements');
					progressBar.init(800 + Math.randRange(1, 50), 100, 300, 150, translate('Message'), 200, true, t.container);
					progressBar.start({
						steps: 100,
						delay: 1,
						byCount: true,
						title: translate('Sending reinforcement') + '...',
						stepText: translate('Please wait...')
					});
					sendable.sort(function(a, b) {
						return b.upkeep - a.upkeep
					});
					t.to_send = sendable;
					t.step = 0;
					t.steps = (Math.ceil(tot_qty / max_per_march) <= max_march) ? Math.ceil(tot_qty / max_per_march) : max_march;
					startReinforcements(notify);

					function notify(rslt) {
						if (rslt != 'OK') {
							progressBarPop.getContentDiv().innerHTML = '<B>' + rslt + '</B>';
							progressBarPop.allowClose(true);
							if (notify) notify(false);
							return;
						} else {
							actionLog('<B>startReinforcements</B> : ' + translate('complete'));
							progressBarPop.destroy();
							if (notify) notify(true);
							return;
						}
					}
				}

				function startReinforcements(notify) {
					var t = Tabs.Alliance;
					t.is_sending = true;
					t.callback = notify;
					t.result = 'OK';
					processReinforcements();
					waitCompletion();
				}

				function waitCompletion() {
					var t = Tabs.Alliance;
					if (t.is_sending) {
						setTimeout(waitCompletion, 1000);
					} else {
						if (t.callback) {
							t.callback(t.result);
							return;
						}
					}
				}

				function processReinforcements() {
					var t = Tabs.Alliance,
						muster_point = getMusterPoint(CAPITAL.id);
					var max = muster_point.max_troops;
					var tot_qty = 0;
					var units = [];
					for (var i = 0; i < t.to_send.length && tot_qty < max; i++) {
						var unit = t.to_send[i];
						if (unit.qty > 0) {
							var qty = (unit.qty > max - tot_qty) ? max - tot_qty : unit.qty;
							tot_qty += qty;
							units[unit.type] = qty;
							unit.qty -= qty;
						}
					}
					if (muster_point.slots <= 0 || tot_qty == 0) {
						t.is_sending = false;
						return;
				}
					checkReinforcement(units, function(rslt) {
						if (rslt == 'OK') {
							t.percent = toNum(t.step * 100 / t.steps);
							progressBar.update({
								step: t.percent,
								stepText: translate('Please wait...') + '<br>' + translate('Step') + ' ' + (t.step + 1) + '/' + t.steps + ' : ' + getTroops(units, ' ')
							});
							t.step++;
							setTimeout(processReinforcements, Math.randRange(2000, 5000));
						} else {
							progressBar.update({
								stepText: rslt
							});
							t.result = rslt;
							t.is_sending = false;
						}
					});
				}
			},

			/** ALLIANCES TOP 100 SUB-TAB ** */
			tabAlliances: function() {
				var t = Tabs.Alliance;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAlliances']).className = 'selected';
				$(UID['tabAlliances']).style.zIndex = 1;
				t.lastSubTab = 'tabAlliances';

				t.contentType = 3;

				if (is_null(Data.options.alliance.sort_alliance))
					Data.options.alliance.sort_alliance = '0';
				if (!is_null(Data.options.alliance.alliance_update))
					kLastupdate = ' (' + Data.options.alliance.alliance_update + ')';
				else kLastupdate = '';

				var m = '<div id=' + setUID('tabAlliance_Results') + ' style="height:640px">' + '	<div class=' + UID['title'] + '>' + translate('Alliances') + 'Top 100 ' + kLastupdate + '</div>' + '	<div id=' + setUID('tabAlliance_ResultList') + ' class=' + UID['status_ticker'] + ' style="height:620px; max-height:620px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabAlliance_Content']).innerHTML = m;

				var m = '<table class=' + UID['row_style'] + '>' + '	<tr><td align=left colspan=4>' + '		<input type=button value="' + translate('Refresh list') + '" id=' + setUID('tabAlliance_RefreshAlliances') + ' />' + '	</td></tr>' + '	<tr valign=top><td style="font-size:2px">&nbsp</td>' + '	</tr>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td id=' + setUID('tabAlliance_taa_0') + ' width="40px" align=center><A><span>' + translate('Rank') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_taa_1') + ' width="150px" style="overflow-x:auto"><A><span>' + translate('Alliance') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_taa_2') + ' width="150px" style="overflow-x:auto"><A><span>' + translate('role-overlord') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_taa_3') + ' width="45px" align=center><A><span>' + translate('members') + '</span></A></td>' + '		<td id=' + setUID('tabAlliance_taa_4') + ' width="65px" align=right><A><span>' + translate('Might') + '</span></A></td>' + '		<td width="60px" align=right>' + translate('Evol') + '</td>' + '	</tr>';
				var am = [],
					ai = [],
					UIDMsg = setUID('tabAlliances_SendMsg'),
					UIDInv = setUID('tabAlliances_Invite');
				for (var i = 0; i < Data.dynamic.players.alliances.length; i++) {
					var mightF = numf(Data.dynamic.players.alliances[i].might, ' ');
					var found = false;
					var evol = 'x',
						diff = '';
					for (var old = 0; old < Data.dynamic.players.alliances_evolution.length && !found; old++) {
						if (Data.dynamic.players.alliances_evolution[old].id == Data.dynamic.players.alliances[i].id) {
							evol = Data.dynamic.players.alliances[i].might - Data.dynamic.players.alliances_evolution[old].might;
							diff = Data.dynamic.players.alliances[i].count - (Data.dynamic.players.alliances_evolution[old].count || Data.dynamic.players.alliances[i].count);
							if (evol < 0) evol = '<span class=' + UID['red'] + '>' + numf(evol, ' ') + '</span>';
							else if (evol > 0) evol = '<span class=' + UID['green'] + '>+' + numf(evol, ' ') + '</span>';
							else evol = numf(evol, ' ');
							if (diff < 0) diff = ' (<span class=' + UID['red'] + '>' + numf(diff, ' ') + '</span>)';
							else if (diff > 0) diff = ' (<span class=' + UID['green'] + '>+' + numf(diff, ' ') + '</span>)';
							else diff = '';
							found = true;
						}
					}
					var user_ids = Data.dynamic.players.alliances[i].id + '_' + Data.dynamic.players.alliances[i].lord_id;
					m += '<tr><td align=center>' + Data.dynamic.players.alliances[i].rank + '</td>' + '	<td align=left>' + getAllianceRelationship(Data.dynamic.players.alliances[i].id, Data.dynamic.players.alliances[i].name) + '</td>' + '	<td align=left>' + Data.dynamic.players.alliances[i].lord + '</td>' + '	<td align=center>' + Data.dynamic.players.alliances[i].count + diff + '</td>' + '	<td align=right>' + mightF + '</td>' + '	<td align=right>' + evol + '</td>' + '	<td align=right>&nbsp;<input class=Xtrasmall id=' + UIDMsg + '_' + Data.dynamic.players.alliances[i].id + ' ref="' + user_ids + '" type=button  style="width:auto !important;" value="' + translate('Msg') + '" \></td>' + ((Seed.player.alliance && Seed.player.alliance.id > 0) ? '' : '<td align=right>&nbsp;<input class=Xtrasmall id=' + UIDInv + '_' + i + ' ref="' + Data.dynamic.players.alliances[i].id + '" type=button  style="width:auto !important;" value="' + translate('Invite') + '" \></td>') + '</tr>';
					am.push(UIDMsg + '_' + Data.dynamic.players.alliances[i].id);
					if (!Seed.player.alliance || Seed.player.alliance.id == 0) ai.push(UIDInv + '_' + i);
				}
				$(UID['tabAlliance_ResultList']).innerHTML = m + '</table>';
				$(UID['tabAlliance_RefreshAlliances']).addEventListener('click', refreshAlllianceList, false);
				for (var h = 0; h < 5; h++)
					$(UID['tabAlliance_taa_' + h]).addEventListener('click', sortAllianceList, false);
				for (var x = 0; x < am.length; x++)
					$(am[x]).addEventListener('click', onClickMsg, false);
				for (var x = 0; x < ai.length; x++)
					$(ai[x]).addEventListener('click', onClickInvite, false);

				function sortAllianceList(event) {
					var t = Tabs.Alliance;
					var arg = event.target.parentNode.parentNode.id;
					if (arg == UID['tabAlliance_taa_0']) {
						if (Data.options.alliance.sort_alliance == '0') {
							Data.dynamic.players.alliances.sort(function(a, b) {
								return b.rank - a.rank
							});
							Data.options.alliance.sort_alliance = '-0';
						} else {
							Data.dynamic.players.alliances.sort(function(a, b) {
								return a.rank - b.rank
							});
							Data.options.alliance.sort_alliance = '0';
						}
					} else if (arg == UID['tabAlliance_taa_1']) {
						if (Data.options.alliance.sort_alliance == '1') {
							Data.dynamic.players.alliances.sort(function(a, b) {
								a = a.name.toLowerCase();
								b = b.name.toLowerCase();
								if (a > b) return -1;
								if (a < b) return 1;
								return 0;
							});
							Data.options.alliance.sort_alliance = '-1';
						} else {
							Data.dynamic.players.alliances.sort(function(a, b) {
								a = a.name.toLowerCase();
								b = b.name.toLowerCase();
								if (a > b) return 1;
								if (a < b) return -1;
								return 0;
							});
							Data.options.alliance.sort_alliance = '1';
						}
					} else if (arg == UID['tabAlliance_taa_2']) {
						if (Data.options.alliance.sort_alliance == '2') {
							Data.dynamic.players.alliances.sort(function(a, b) {
								a = a.lord.toLowerCase();
								b = b.lord.toLowerCase();
								if (a > b) return -1;
								if (a < b) return 1;
								return 0;
							});
							Data.options.alliance.sort_alliance = '-2';
						} else {
							Data.dynamic.players.alliances.sort(function(a, b) {
								a = a.lord.toLowerCase();
								b = b.lord.toLowerCase();
								if (a > b) return 1;
								if (a < b) return -1;
								return 0;
							});
							Data.options.alliance.sort_alliance = '2';
						}
					} else if (arg == UID['tabAlliance_taa_3']) {
						if (Data.options.alliance.sort_alliance == '3') {
							Data.dynamic.players.alliances.sort(function(a, b) {
								return b.count - a.count
							});
							Data.options.alliance.sort_alliance = '-3';
						} else {
							Data.dynamic.players.alliances.sort(function(a, b) {
								return a.count - b.count
							});
							Data.options.alliance.sort_alliance = '3';
						}
					} else if (arg == UID['tabAlliance_taa_4']) {
						if (Data.options.alliance.sort_alliance == '4') {
							Data.dynamic.players.alliances.sort(function(a, b) {
								return b.might - a.might
							});
							Data.options.alliance.sort_alliance = '-4';
						} else {
							Data.dynamic.players.alliances.sort(function(a, b) {
								return a.might - b.might
							});
							Data.options.alliance.sort_alliance = '4';
						}
					}
					t.tabAlliances();
				}

				function refreshAlllianceList() {
					var t = Tabs.Alliance;
					if (t.checkAlliancesBusy) return false;
					t.checkAlliancesBusy = true;
					getAlliances(function() {
						logit(translate('Alliances list retrieved'));
						Tabs.Alliance.checkAlliancesBusy = false;
						var now = serverTime();
						Data.options.alliance.alliance_update = new Date(now * 1000).myString();
						refreshDisplay();
					});
				}

				function refreshDisplay() {
					var t = Tabs.Alliance;
					if (t.checkAlliancesBusy) setTimeout(refreshDisplay, 1000);
					else t.tabAlliances();
				}

				function getAlliances(notify) {
					var t = Tabs.Alliance;
					ret = [];
					if (Data.dynamic.players.alliances && Data.dynamic.players.alliances != undefined && Data.dynamic.players.alliances.length > 0)
						for (var i = 0; i < Data.dynamic.players.alliances.length; i++)
							ret.push({
								id: Data.dynamic.players.alliances[i].id,
								might: Data.dynamic.players.alliances[i].might,
								count: Data.dynamic.players.alliances[i].count
							});
					Data.dynamic.players.alliances_evolution = cloneProps(ret);
					Data.dynamic.players.alliances = {
						name: '',
						id: 0,
						count: 0,
						rank: 0,
						might: 0,
						lord: '',
						lord_id: 0,
						desc: ''
					};
					progressBar.init(800 + Math.randRange(1, 50), 100, 300, 150, translate('Message'), 200, true, t.container);
					progressBar.start({
						steps: 100,
						delay: 1,
						byCount: true,
						title: translate('Search for alliance list') + '...',
						stepText: translate('Please wait...')
					});
					MemberShips.fetchAlliances(callback);

					function callback(dat) {
						if (!dat.done) {
							if (dat.errmsg)
								progressBarPop.getContentDiv().innerHTML = dat.errmsg;
							else progressBarPop.getContentDiv().innerHTML = translate('Error while retrieving the list of alliances');
							Tabs.Alliance.checkAlliancesError = true;
							progressBarPop.allowClose(true);
							if (notify) notify(false);
							return;
						} else {
							Data.dynamic.players.alliances = cloneProps(dat.alliance);
							Data.dynamic.players.friends = cloneProps(dat.friends);
							Data.dynamic.players.foes = cloneProps(dat.foes);
							actionLog(translate('Search for alliance list') + ' ' + translate('complete'));
							logit('*********  List retrieved ... Total members: ' + Data.dynamic.players.alliances.length);
							Data.dynamic.players.alliances.sort(function(a, b) {
								return a.rank - b.rank
							});
							Data.options.alliance.sort_alliance = '0';
							progressBarPop.destroy();
							if (notify) notify(true);
						}
					}
				}

				function onClickInvite(event) {
					var t = Tabs.Alliance,
						but = event.target;
					var id = but.getAttribute('ref');
					setButtonStyle(but, false);
					var dial = new ModalDialog(t.container, 300, 165, '', false, null);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('actions-ask-to-join');
					MyAjax.membership(id, Seed.player.id, 'invite', callback, false);

					function callback(dat) {
						if (dat == null || !dat.ok) {
							if (dat.errmsg)
								dial.getContentDiv().innerHTML = dat.errmsg;
							else dial.getContentDiv().innerHTML = translate('Error while sending the request');
							dial.allowClose(true);
							return;
						}
						setTimeout(function() {
							dial.destroy()
						}, 1000);
						return;
					}
				}
			},

			/** ALLIANCE ACTIVITY SUB-TAB ** */
			tabAllianceActivity: function() {
				var t = Tabs.Alliance;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAllianceActivity']).className = 'selected';
				$(UID['tabAllianceActivity']).style.zIndex = 1;
				t.lastSubTab = 'tabAllianceActivity';

				t.contentType = 5;

				if (is_null(Data.options.alliance.sort_activity))
					Data.options.alliance.sort_activity = '0';
				if (!is_null(Data.options.alliance.activity_update))
					kLastupdate = ' (' + Data.options.alliance.activity_update + ')';
				else kLastupdate = '';

				var m = '<div id=' + setUID('tabAlliance_Results') + ' style="height:640px">' + '	<div class=' + UID['title'] + '>' + translate('Activity') + ' ' + kLastupdate + '</div>' + '	<div id=' + setUID('tabAlliance_ResultList') + ' class=' + UID['status_ticker'] + ' style="height:620px; max-height:620px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' + '	<div id=' + setUID('tabAlliance_ReportDetail') + ' class=' + UID['status_ticker'] + ' style="height:555px; max-height:555px; overflow:auto; white-space:nowrap; display:none; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabAlliance_Content']).innerHTML = m;

				var m = '<table class=' + UID['row_style'] + '>' + '	<tr><td align=left colspan=6>' + '		<input type=button value="' + translate('Refresh') + '" id=' + setUID('tabAlliance_RefreshActivity') + ' />' + '	</td></tr>' + '	<tr valign=top><td style="font-size:2px">&nbsp</td>' + '	</tr>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td width="40px" align=center><A><span>' + translate('ago') + '</span></A></td>' + '		<td width="150px" style="overflow-x:auto"><A><span>' + translate('members') + '</span></A></td>' + '		<td width="20px" style="overflow-x:auto"><A><span>' + translate('Role') + '</span></A></td>' + '		<td width="150px" align=center><A><span>' + translate('Enemy') + '</span></A></td>' + '		<td width="60px" align=right><A><span>' + translate('status') + '</span></A></td>' + '		<td width="60px" align=right>' + translate('reports') + '</td>' + '	</tr>';
				if (t.report_num == -1) {
					$(UID['tabAlliance_ResultList']).style.height = "620px";
					$(UID['tabAlliance_ReportDetail']).style.display = "none";
					for (var i = 0; i < Data.dynamic.players.activity.length; i++) {
						var act = Data.dynamic.players.activity[i];
						var time = timestrShort(toNum(serverTime()) - toNum(act.time));
						var mate = '<span title="' + act.aname + ', ' + translate('might') + ' ' + numf(act.amight, ' ') + ' (' + act.ax + '/' + act.ay + ')"><b>' + act.aname + '</b></span>';
						var enemy_alli = '';
						if (!is_null(act.palli)) enemy_alli = ', ' + act.palli;
						var enemy = '<span title="' + act.pname + enemy_alli + ', ' + translate('might') + ' ' + numf(act.pmight, ' ') + ' (' + act.px + '/' + act.py + ')"><b>' + act.pname + '</b>' + enemy_alli + '</span>';
						m += '<tr><td align=center>' + time + '</td>' + '	<td align=left>' + mate + '</td>' + '	<td align=center><b>' + (act.def ? '&gt' : '<span class=' + UID['red'] + '>&lt</span>') + '</b></td>' + '	<td align=left>' + enemy + '</td>' + '	<td align=left>' + (act.won ? translate('won') : '<span class=' + UID['red'] + '>' + translate('lost') + '</span>') + '</td>' + '	<td><input id=' + setUID('tabAlliance_view_' + i) + ' ref=' + i + ' class=Xtrasmall style="width:auto !important;" type=submit value="' + translate('View') + '" /></td>' + '</tr>';
					}
				} else {
					$(UID['tabAlliance_ResultList']).style.height = "60px";
					$(UID['tabAlliance_ReportDetail']).style.display = "block";
					var act = Data.dynamic.players.activity[t.report_num];
					var time = timestrShort(toNum(serverTime()) - toNum(act.time));
					var mate = '<span title="' + act.aname + ', ' + translate('might') + ' ' + numf(act.amight, ' ') + ' (' + act.ax + '/' + act.ay + ')"><b>' + act.aname + '</b></span>';
					var enemy_alli = '';
					if (!is_null(act.palli)) enemy_alli = ', ' + act.palli;
					var enemy = '<span title="' + act.pname + enemy_alli + ', ' + translate('might') + ' ' + numf(act.pmight, ' ') + ' (' + act.px + '/' + act.py + ')"><b>' + act.pname + '</b>' + enemy_alli + '</span>';
					m += '<tr><td align=center>' + time + '</td>' + '	<td align=left>' + mate + '</td>' + '	<td align=center>' + (act.def ? '&gt' : '<span class=' + UID['red'] + '>&lt</span>') + '</td>' + '	<td align=left>' + enemy + '</td>' + '	<td align=left>' + (act.won ? translate('won') : '<span class=' + UID['red'] + '>' + translate('lost') + '</span>') + '</td>' + '	<td><input id=' + setUID('tabAlliance_Hide') + ' class=Xtrasmall style="width:auto !important;" type=submit value="' + translate('wall-orders-hide') + '" /></td>' + '</tr>';
				}
				$(UID['tabAlliance_ResultList']).innerHTML = m + '</table>';

				var refreshBut = $(UID['tabAlliance_RefreshActivity']);
				refreshBut.addEventListener('click', refreshActivityList, false);
				if (Seed.player.alliance && Seed.player.alliance.id > 0) setButtonStyle(refreshBut, true);
				else setButtonStyle(refreshBut, false);

				if (t.report_num == -1) {
					for (var i = 0; i < Data.dynamic.players.activity.length; i++) {
						var butView = $(UID['tabAlliance_view_' + i]);
						butView.addEventListener('click', onViewReport, false);
						Element.addClassName(butView, UID['btn_green']);
					}
				} else {
					var butHide = $(UID['tabAlliance_Hide']);
					butHide.addEventListener('click', onHideReport, false);
					Element.addClassName(butHide, UID['btn_green']);
					showReport();
				}

				function onHideReport(event) {
					t.report_num = -1;
					t.tabAllianceActivity();
				}

				function onViewReport(event) {
					var n = toNum(event.target.getAttribute('ref'));
					t.report_num = n;
					t.tabAllianceActivity();
				}

				function refreshActivityList() {
					var t = Tabs.Alliance;
					t.report_num = -1;
					if (t.checkAlliancesBusy) return false;
					t.checkAlliancesBusy = true;
					getActivities(function() {
						logit(translate('Alliance activity retrieved'));
						Tabs.Alliance.checkAlliancesBusy = false;
						var now = serverTime();
						Data.options.alliance.activity_update = new Date(now * 1000).myString();
						refreshDisplay();
					});
				}

				function refreshDisplay() {
					var t = Tabs.Alliance;
					if (t.checkAlliancesBusy) setTimeout(refreshDisplay, 1000);
					else t.tabAllianceActivity();
				}

				function getActivities(notify) {
					var t = Tabs.Alliance;
					Data.dynamic.players.activity = {
						won: false,
						id: 0,
						def: false,
						time: 0,
						aname: '',
						amight: 0,
						ax: 0,
						ay: 0,
						pname: '',
						pmight: 0,
						px: 0,
						py: 0,
						palli: ''
					};
					progressBar.init(800 + Math.randRange(1, 50), 100, 300, 150, translate('Message'), 200, true, t.container);
					progressBar.start({
						steps: 100,
						delay: 1,
						byCount: true,
						title: translate('Search for alliance activity') + '...',
						stepText: translate('Please wait...')
					});
					MemberShips.fetchActivity(Seed.player.alliance.id, callback);

					function callback(dat) {
						if (!dat.done) {
							if (dat.errmsg)
								progressBarPop.getContentDiv().innerHTML = dat.errmsg;
							else progressBarPop.getContentDiv().innerHTML = translate('Error while retrieving the alliance activity');
							Tabs.Alliance.checkAlliancesError = true;
							progressBarPop.allowClose(true);
							if (notify) notify(false);
							return;
						} else {
							Data.dynamic.players.activity = cloneProps(dat.battle);
							actionLog(translate('Search for alliance activity') + ' ' + translate('complete'));
							logit('*********  List retrieved ... Total battles: ' + Data.dynamic.players.activity.length);
							Data.dynamic.players.activity.sort(function(a, b) {
								return b.time - a.time
							});
							Data.options.alliance.sort_activity = '0';
							progressBarPop.destroy();
							if (notify) notify(true);
						}
					}
				}

				function showReportDelay() {
					var t = Tabs.Alliance;
					if (t.checkActivityBusy) setTimeout(showReportDelay, 1000);
					else displayReport();
				}

				function showReport() {
					var t = Tabs.Alliance;
					if ((is_null(Messages.activity) || is_null(Messages.activity[Data.dynamic.players.activity[t.report_num].id]) || is_null(Messages.activity[Data.dynamic.players.activity[t.report_num].id].report)) && !t.checkActivityBusy) {
						t.checkActivityBusy = true;
						MyAjax.battleReport(Data.dynamic.players.activity[t.report_num].id, Data.dynamic.players.activity[t.report_num].aid, function(rslt) {
							var t = Tabs.Alliance;
							t.checkActivityBusy = false;
							if (!rslt) return;
						});
					}
					showReportDelay();
				}

				function displayReport() {
					var t = Tabs.Alliance,
						m = '';
					m += '<center><div id=' + setUID('displayMsg_ReportContent') + ' style="height:555px; max-height:555px; width:98%; max-width:98%; overflow-y:auto;">' + Messages.displayBattleReport(Messages.activity[Data.dynamic.players.activity[t.report_num].id], Data.dynamic.players.activity[t.report_num].aname) + '</div></center>';
					$(UID['tabAlliance_ReportDetail']).innerHTML = m;
				}
			},

			displayTotal: function() {
				var t = Tabs.Alliance;
				t.totalResources = 0;
				t.maxResources = 0;
				for (var r = 0; r < transportable_resource_types.length; r++)
					t.totalResources = toNum(t.totalResources) + toNum(Data.options.alliance.data.resources[transportable_resource_types[r]]);
				for (var i = 0; i < transport_unit_types.length; i++) {
					if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'Porter') var load = 200;
					else if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'ArmoredTransport') var load = 5000;
					else if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'PackDragon') var load = 6000;
					else var load = 0;
					var qty = Data.options.alliance.data.transports[Names.troops.byAbbr[transport_unit_types[i]][1]];
					try {
						var load = Seed.stats.unit[Names.troops.byAbbr[transport_unit_types[i]][1]].load;
					} catch (e) {
						actionLog('<B>' + translate('Troops load: ') + '</B>' + e.msg + ' ' + translate('Manifest not available, using defaults'));
					}
					t.maxResources = t.maxResources + (toNum(qty) * toNum(load));
				}
				var avail = numf(toNum(t.maxResources) - toNum(t.totalResources), ' ');
				$(UID['tabAlliance_Total']).innerHTML = '<B>' + numf(toNum(t.totalResources), ' ') + '</B> / <B>' +
					numf(toNum(t.maxResources), ' ') + '</B> (<B>' + avail + '</B> disponible)';
			},
			autoTransportTick: function() {
				var t = Tabs.Alliance,
					targetMsg, retryDelay, transportUnits, resources, marchCount = 0;
				var cityId = Seed.cities[CAPITAL.id].id;
				var cityIdx = CAPITAL.id;
				clearTimeout(t.autoTimer);

				if (!Data.options.alliance.auto.enabled) return;
				var target = t.getTarget(Data.options.alliance.auto_id);
				if (is_null(target)) {
					dispFeedback(UID['tabAlliance_Feedback'], translate('No Recipient Defined'));
					t.setEnable(false);
					return;
				}

				var targetMsg = '<B>' + translate('Transport sent to') + '</B> : ' + target.msg;
				var feedback_element = UID['tabAlliance_Feedback'];

				var cur_march = getMinDelay();
				marchCount = cur_march.count;
				retryDelay = cur_march.delay;
				availableGeneral = getAvailableGeneral();
				var chk = checkMarch(targetMsg,
					feedback_element,
					marchCount,
					retryDelay,
					Marches.count.transport,
					Data.options.alliance.auto.max_marches,
					null, false);
				if (chk != 0) {
					t.autoTimer = setTimeout(t.autoTransportTick, retryDelay * 1000);
					return;
				}

				transportUnits = checkTroops(CAPITAL.id, Data.options.alliance.auto.transports);
				if (transportUnits !== null) {
					raiseMessage(targetMsg, feedback_element, transportUnits, true, retryDelay);
					t.autoTimer = setTimeout(t.autoTransportTick, retryDelay * 1000);
					return;
				}
				/* check resources */
				var resources = cloneProps(Data.options.alliance.auto.resources);
				var totalRess = 0;
				for (var p in resources) {
					var stock = Math.round(toNum(Seed.cities[CAPITAL.id].resources[p]));
					if (resources[p] > 0) {
						if (resources[p] > stock) resources[p] = stock;
						totalRess += resources[p];
					}
				}
				if (Data.options.alliance.auto.max_load) resources = maximizeDistribution(resources, Data.options.alliance.auto.transports);
				if (totalRess <= 0) {
					raiseMessage(targetMsg, feedback_element, 8, false, retryDelay);
					t.autoTimer = setTimeout(t.autoTransportTick, retryDelay * 1000);
					return;
				}

				verboseLog(targetMsg + ' ' + translate('attempted'));
				new MyAjax.TransportMarch(cityId, target.x, target.y, Data.options.alliance.auto.transports, resources, 'transport', function(rslt) {
					var t = Tabs.Alliance,
						transDelay, retryDelay;
					if (rslt.ok && rslt.dat.result.success) {
						t.autoErrors = 0;
						transDelay = Math.floor(Math.random() * (Data.options.alliance.auto.delay_max - Data.options.alliance.auto.delay_min + 1) + Data.options.alliance.auto.delay_min);
						verboseLog(targetMsg + ' ' + translate('Successfully'));
						actionLog(targetMsg);
						dispFeedback(UID['tabAlliance_Feedback'], targetMsg);
						t.autoTimer = setTimeout(t.autoTransportTick, transDelay * 1000);
						if (Data.options.alliance.auto.recall) {
							var m = {
								cityId: cityId,
								marchId: rslt.dat.result.job.march_id,
								run_at: rslt.dat.result.job.run_at
							};
							Data.dynamic.recall_marches.push(m);
						}
						for (var x = 0; x < transportable_resource_types.length; x++) {
							var actualStock = numf(Math.round(toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[x]])));
							var UIDStk = UID['tabAlliance_AStk'] + '_' + x;
							if ($(UIDStk)) $(UIDStk).innerHTML = actualStock;
						}
						for (var y = 0; y < transport_unit_types.length; ++y) {
							var trpStk = numf(toNum(Seed.cities[CAPITAL.id].units[Names.troops.byAbbr[transport_unit_types[y]][1]]), ' ');
							var UIDTrpStk = UID['tabAlliance_ATStk'] + '_' + y;
							if ($(UIDTrpStk)) $(UIDTrpStk).innerHTML = '(&nbsp;' + trpStk + '&nbsp;)';
						}
					} else {
						t.autoErrors++
						retryDelay = 30 * (t.autoErrors * t.autoErrors);
						verboseLog(targetMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg + ' - ' + translate('Retry in') + ' ' + retryDelay + ' ' + translate('seconds'));
						actionLog(targetMsg + ' ' + translate('failed'));
						if (rslt.status === 429) {
							retryDelay = E429_DELAY;
							raiseMessage(targetMsg + ' ' + translate('failed') + ' - <b>API</b> ', feedback_element, 6, false, retryDelay);
						} else if (rslt.status === 509) {
							retryDelay = 600;
							raiseMessage(targetMsg + ' ' + translate('failed') + ' - ', feedback_element, 6, false, retryDelay);
						} else
							dispFeedback(UID['tabAlliance_Feedback'], targetMsg + ' ' + translate('failed'));
						t.autoTimer = setTimeout(t.autoTransportTick, retryDelay * 1000);
					}
				});

				function maximizeDistribution(res, units) {
					var max_load = 0,
						current_load = 0,
						total_load = 0,
						new_stock = 0,
						avail_load = 0,
						stock_avail = 0;
					/*
					 * get max load possible according to unit types and
					 * quantity
					 */
					for (var i = 0; i < transport_unit_types.length; i++) {
						if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'Porter') var load = 200;
						else if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'ArmoredTransport') var load = 5000;
						else if (Names.troops.byAbbr[transport_unit_types[i]][1] == 'PackDragon') var load = 6000;
						else var load = 0;
						var qty = units[Names.troops.byAbbr[transport_unit_types[i]][1]];
						try {
							var load = Seed.stats.unit[Names.troops.byAbbr[transport_unit_types[i]][1]].load;
						} catch (e) {}
						max_load = max_load + (toNum(qty) * toNum(load));
					}
					/*
					 * get current load for each resource, total load, available
					 * load left, number of resources with stock
					 */
					var avail = numf(toNum(t.maxResources) - toNum(t.totalResources), ' ');
					for (var p = 0; p < transportable_resource_types.length; p++) {
						current_load = toNum(res[transportable_resource_types[p]]);
						total_load = toNum(total_load) + current_load;
						new_stock = Math.round(toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[p]])) - current_load;
						if (new_stock > 0) stock_avail++;
					}
					avail_load = toNum(max_load) - toNum(total_load);
					/*
					 * Return current resource distribution if no load available
					 * for selected transports or if all resource stocks are
					 * empty
					 */
					if (avail_load <= 0 || stock_avail == 0) return (res);

					/*
					 * Calculate new resource distribution if space left on
					 * transport and available stock
					 */
					var min_quantity = Math.round(avail_load / stock_avail); /*
																				 * get
																				 * theorical
																				 * minimum
																				 * quantity
																				 * to
																				 * allocate
																				 */
					while (avail_load > 0 && stock_avail > 0 && min_quantity > 0) {
						/*
						 * get the minimum quantity to allocate according to
						 * stock levels
						 */
						for (var r = 0; r < transportable_resource_types.length; r++) {
							current_load = toNum(res[transportable_resource_types[r]]);
							new_stock = Math.round(toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[r]])) - current_load;
							if (new_stock > 0 && new_stock < min_quantity) min_quantity = new_stock;
						}
						stock_avail = 0;
						/*
						 * Add minimum quantity to allocate to the resource to
						 * send if enough stock
						 */
						for (var r = 0; r < transportable_resource_types.length; r++) {
							current_load = toNum(res[transportable_resource_types[r]]);
							new_stock = Math.round(toNum(Seed.cities[CAPITAL.id].resources[transportable_resource_types[r]])) - current_load;
							if (new_stock > 0) {
								res[transportable_resource_types[r]] = current_load + min_quantity;
								avail_load = avail_load - min_quantity;
								new_stock = new_stock - min_quantity;
								if (new_stock > 0) stock_avail++;
							}
						}
						/* get new theorical minimum quantity to allocate */
						min_quantity = Math.round(avail_load / stock_avail); /*
																				 * get
																				 * theorical
																				 * minimum
																				 * quantity
																				 * to
																				 * allocate
																				 */
					}
					return (res);
				}
			},
			marchTick: function() {
				var t = Tabs.Alliance;
				var element_target;
				switch (t.contentType) {
					case 4:
						element_target = 'tabAlliance_AMarches';
						break;
					default:
						element_target = 'tabAlliance_TMarches';
						break;
				}
				clearTimeout(t.marchTimer);
				if ($(UID[element_target]))
					Marches.updateTable($(UID[element_target]), 'transport');
				t.marchTimer = setTimeout(t.marchTick, 1000);
			},
			getTarget: function(targetId) {
				var found = false,
					d = {};
				for (var cid = 1; cid < Seed.cities.length && !found; cid++) {
					if (Seed.cities[cid] && targetId == Seed.cities[cid].id) {
						found = true;
						var city = Seed.cities[cid];
						return ({
							x: city.x,
							y: city.y,
							msg: translate(city.name) + ' ' + translate('at') + ' ' + city.x + ',' + city.y
						});
					}
				}
				if (!found) {
					for (var i = 0; i < Data.dynamic.players.memberships.length && !found; i++) {
						if (Data.dynamic.players.memberships[i].id == targetId) {
							found = true;
							var member = Data.dynamic.players.memberships[i];
							return ({
								x: member.x,
								y: member.y,
								msg: member.player + ', ' + member.city + ' ' + translate('at') + ' ' + member.x + ',' + member.y
							});
						}
					}
				}
			},
			getMemberList: function() {
				var t = Tabs.Alliance;
				var element_target, element_select, uid_select, type_id;
				switch (t.contentType) {
					case 4:
						element_target = 'tabAlliance_AutoPlayerList';
						element_select = 'tabAlliance_AutoPlayer';
						type_id = Data.options.alliance.auto_id;
						break;
					case 2:
						element_target = 'tabAlliance_ReinfPlayerList';
						element_select = 'tabAlliance_ReinfPlayer';
						type_id = Data.options.alliance.reinforce_id;
						break;
					default:
						element_target = 'tabAlliance_TransPlayerList';
						element_select = 'tabAlliance_TransPlayer';
						type_id = Data.options.alliance.transport_id;
						break;
				}
				uid_select = setUID(element_select);
				var m = '<select id=' + uid_select + '>';
				var selected = '';
				for (var cityIdx = 1; cityIdx < Seed.cities.length; cityIdx++) {
					if (Seed.cities[cityIdx]) {
						selected = '';
						if (type_id == Seed.cities[cityIdx].id) selected = ' selected';
						m += '<option value="' + Seed.cities[cityIdx].id + '" ' + selected + '>' + translate(Seed.cities[cityIdx].name) + '</option>';
					}
				}
				if (Seed.cities.length < 2 && (!Data.dynamic.players.memberships || Data.dynamic.players.memberships.length == 0))
					m += '<option value="">' + translate('To be refreshed') + '</option>';
				else {
					for (var i = 0; i < Data.dynamic.players.memberships.length; i++) {
						selected = '';
						if (Data.dynamic.players.memberships[i].id == type_id) selected = ' selected';
						m += '<option value="' + Data.dynamic.players.memberships[i].id + '" ' + selected + '>' + Data.dynamic.players.memberships[i].player + '</option>';
					}
				}
				m += '</select>';
				$(UID[element_target]).innerHTML = m;
				$(UID[element_select]).addEventListener('change', t.playerSelChanged, false);
				t.playerCityDesc();
				t.playerSelChanged();
			},
			onClickResign: function(notify) {
				var t = Tabs.Alliance;
				setButtonStyle($(UID['tabAlliance_Regin']), false, 'btn_off', 'btn_disabled');
				dialogConfirm(translate('leave-current'),
					function() {
						try {
							var dial = new ModalDialog(Tabs.Alliance.container, 300, 165, '', false, null);
							dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
							dial.getContentDiv().innerHTML = translate('Leaving the alliance') + '...';
							MyAjax.membership(Seed.player.alliance.id, Seed.player.alliance_membership.id, 'delete', callback, false);

							function callback(dat) {
								if (dat == null || !dat.ok) {
									if (dat.errmsg)
										dial.getContentDiv().innerHTML = dat.errmsg;
									else dial.getContentDiv().innerHTML = translate('Error while leaving the alliance');
									dial.allowClose(true);
									if (notify) notify(false);
									return;
								} else {
									dial.getContentDiv().innerHTML = translate('Refreshing player and cities data');
									Seed.fetchPlayer(function(rslt) {
										if (rslt.ok) {
											verboseLog(translate('Player data was Successfully requested from the server'));
											try {
												setTimeout(function() {
													dial.destroy()
												}, 1000);
											} catch (e) {}
											if (notify) notify(true);
											return;
										} else {
											try {
												dial.getContentDiv().innerHTML = translate('Error while retrieving player data ' + rslt.errmsg);
												dial.allowClose(true);
											} catch (e) {}
											if (notify) notify(false);
											return;
										}
									}, {
										noCities: true
									});
								}
								if (notify) notify(true);
								return;
							}
						} catch (e) {}
					},
					function() {
						setButtonStyle($(UID['tabAlliance_Regin']), true, 'btn_off', 'btn_disabled');
					}, true
				);
			},
			playerSelChanged: function(event) {
				var t = Tabs.Alliance;
				var element_target;
				switch (t.contentType) {
					case 4:
						element_target = 'tabAlliance_AutoPlayer';
						break;
					case 2:
						element_target = 'tabAlliance_ReinfPlayer';
						break;
					default:
						element_target = 'tabAlliance_TransPlayer';
						break;
				}
				var id = $(UID[element_target]);
				var sel = nvl(id.value, 'none');
				id.value = sel;
				switch (t.contentType) {
					case 4:
						Data.options.alliance.auto_id = sel;
						break;
					case 2:
						Data.options.alliance.reinforce_id = sel;
						break;
					default:
						Data.options.alliance.transport_id = sel;
						break;
				}
				t.playerCityDesc();
			},
			playerCityDesc: function() {
				var t = Tabs.Alliance;
				var element_target, type_id;
				switch (t.contentType) {
					case 4:
						element_target = 'tabAlliance_AutoTarget';
						type_id = Data.options.alliance.auto_id;
						break;
					case 2:
						element_target = 'tabAlliance_ReinfTarget';
						type_id = Data.options.alliance.reinforce_id;
						break;
					default:
						element_target = 'tabAlliance_TransTarget';
						type_id = Data.options.alliance.transport_id;
						break;
				}
				var found = false;
				for (var cityIdx = 1; cityIdx < Seed.cities.length && !found; cityIdx++) {
					if (Seed.cities[cityIdx] && type_id == Seed.cities[cityIdx].id) {
						found = true;
						$(UID[element_target]).innerHTML = '<B>' + translate(Seed.cities[cityIdx].name) + '</b>' +
							' &nbsp; (' + Seed.cities[cityIdx].x + ', ' + Seed.cities[cityIdx].y +
							') &nbsp; <B>' + translate('Distance') + ': </b>' +
							getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Seed.cities[cityIdx].x, Seed.cities[cityIdx].y);
					}
				}
				if (!found) {
					for (var i = 0; i < Data.dynamic.players.memberships.length && !found; i++) {
						if (Data.dynamic.players.memberships[i].id == type_id) {
							found = true;
							$(UID[element_target]).innerHTML = translate('City') + ' &nbsp; <B>' + Data.dynamic.players.memberships[i].city + '</b>' +
								' &nbsp; (' + Data.dynamic.players.memberships[i].x + ', ' + Data.dynamic.players.memberships[i].y +
								') &nbsp; <B>' + translate('Distance') + ': </b>' + Data.dynamic.players.memberships[i].dist;
						}
					}
				}
			},
			setEnable: function(onOff) {
				var t = Tabs.Alliance;
				var but = $(UID['tabAlliance_AOnOff']);
				Data.options.alliance.auto.enabled = onOff;
				if (but) {
					if (onOff) {
						but.value = translate('Enabled').toUpperCase();
						but.className = UID['btn_on'];
						if (!t.autoTimer) t.autoTransportTick();
					} else {
						if (t.autoTimer) clearTimeout(t.autoTimer);
						but.value = translate('Disabled').toUpperCase();
						but.className = UID['btn_off'];
					}
				}
			},
		}
		/**
		 * ****************************** Alliance features Tab
		 * *********************
		 */


		/**
		 * ****************************** Attacks Tab
		 * *******************************
		 */
		Tabs.Attacks = {
			tabOrder: ATTACK_TAB_ORDER,
			tabLabel: 'Attacks',
			tabDisabled: !ATTACK_TAB_ENABLE,
			lastSubTab: 'tabAttackLevels',
			container: null,
			attackTimer: null,
			marchTimer: null,
			lastAttack: 0,
			attackErrors: 0,
			checkMapBusy: false,
			MAX_DISTANCE: 70,
			curRunStart: 0,
			contentType: 0,
			/*
			 * 0 = levels, 1 = config, 2 = targets, 3 = stats, 4 = mapTypes
			 * these should be enums but Javascript doesn't support that type
			 */
			selectedMapName: 'AnthropusCamp',
			targetTickTimer: 0,
			requestTimer: 0,

			init: function(div) {
				var t = Tabs.Attacks;
				t.container = div;

				Data.setDefaultValues('attacks');

				div.innerHTML = '' + '<div id=' + setUID('tabAttack_Title') + ' class=' + UID['title'] + '>' + translate('Attack') + ' ' + translate(Data.options.attacks.choice) + ' </div>' + '<div class=' + UID['status_ticker'] + ' id=' + setUID('tabAttack_Status') + ' style="margin-bottom:5px !important">' + '	<center><input type=button value="OnOff" id=' + setUID('tabAttack_OnOff') + ' /></center>' + '	<div id=' + setUID('tabAttack_Report') + ' style="margin-top:5px;height:140px; max-height:140px; width:540px; max-width:540px; overflow:auto;">' + '		<table id=' + setUID('tabAttack_Marches') + ' class=' + UID['table'] + '></table>' + '	</div>' + '	<div id=' + setUID('tabAttack_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabAttackLevels') + '>' + translate('Levels') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabAttackTarget') + '>' + translate('Targets') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabAttackStats') + '>' + translate('Statistics') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabAttackMaps') + '>' + translate('Map') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabAttackConfig') + '>' + translate('Config') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabAttack_Content') + ' style="padding-top:0px; height:440px; overflow:auto"></div>';

				$(UID['tabAttack_OnOff']).addEventListener('click', function() {
					t.setAttackEnable(!Data.options.attacks.enabled);
				}, false);
				$(UID['tabAttackLevels']).addEventListener('click', t.tabAttackLevels, false);
				$(UID['tabAttackConfig']).addEventListener('click', t.tabAttackConfig, false);
				$(UID['tabAttackTarget']).addEventListener('click', t.tabAttackTarget, false);
				$(UID['tabAttackStats']).addEventListener('click', t.tabAttackStats, false);
				$(UID['tabAttackMaps']).addEventListener('click', t.tabAttackMaps, false);
				if (Data.stats.attacks == null)
					t.clearStats();
				t.contentType = toNum(Data.options.attacks.current_tab);
				setTimeout(Marches.check, 60000);
				t.tabAttackLevels();
				window.addEventListener('unload', t.onUnload, false);
				t.setAttackEnable(Data.options.attacks.enabled);
			},

			firstShow: true,
			show: function() {
				var t = Tabs.Attacks;
				t.marchTick();
				Data.options.attacks.current_tab = (t.contentType || Data.options.attacks.current_tab);
				if (t.contentType == 2)
					$(UID['tabAttack_Content']).scrollTop = gAttScrollPos;
				switch (t.contentType) {
					case 0:
						t.tabAttackLevels();
						break;
					case 1:
						t.tabAttackConfig();
						break;
					case 2:
						t.tabAttackTarget();
						break;
					case 3:
						t.tabAttackStats();
						break;
					case 4:
						t.tabAttackMaps();
						break;
				}
			},
			hide: function() {
				var t = Tabs.Attacks;
				clearTimeout(t.marchTimer);
				clearTimeout(t.targetTickTimer);
			},
			onUnload: function() {
				logit('===============  Tabs.Attacks.onUnload');
				var t = Tabs.Attacks;
				if (Data.options.attacks.enabled)
					Data.stats.attacks.run_time += (serverTime() - t.curRunStart);
				Data.options.attacks.current_tab = t.contentType;
			},
			checkMapData: function() {
				var t = Tabs.Attacks;

				if (t.checkMapBusy) {
					return false;
				} else {
					var radius = Data.options.map.radius = 16;
					var terrains = Map.getTargets({
						radius: radius
					});
					if (terrains[Data.options.attacks.choice].length != 0 || Data.options.attacks.choice == 'Fog') return true;
				}
				return true;
			},

			gotBattleReport: function(rpt_a) {
				var t = Tabs.Attacks,
					has_loss = false;
				if (!rpt_a) return;
				var march_id = null;
				for (var id in Data.marches.attacks) {
					var march = Data.marches.attacks[id];
					if (march.general.id === rpt_a.report.attacker.general.id) {
						march_id = id;
						break;
					}
				}
				if (march_id && march_id != null) t.trackStats(march_id, rpt_a);
				var items = rpt_a.report.spoils.items;
				if (items.length !== 0) Seed.fetchPlayer({
					noCities: true
				});

				if (!Data.options.attacks.delete_reports && !Data.options.attacks.stop_on_loss) return;
				if (Data.options.attacks.stop_on_loss && rpt_a.report.attacker.name == Seed.player.name) {
					for (var p in rpt_a.report.attacker.units) {
						if (rpt_a.report.attacker.units[p][0] != rpt_a.report.attacker.units[p][1]) {
							has_loss = true;
							var ts = new Date(rpt_a.report_notification.created_at * 1000).myString();
							t.abort(translate('Troops lost') + '! (' + ts + ')');
							return;
						}
					}
				}
				if (Data.options.attacks.delete_reports && rpt_a.report.attacker.name == Seed.player.name && !has_loss)
					Messages.deleteMessage(rpt_a.report_notification.id);
			},

			setAttackEnable: function(onOff) {
				var t = Tabs.Attacks;
				clearTimeout(t.attackTimer);
				var but = $(UID['tabAttack_OnOff']);
				Data.options.attacks.enabled = onOff;
				if (onOff) {
					Messages.addBattleReportListener(t.gotBattleReport);
					but.value = translate('Attacking').toUpperCase();
					but.className = UID['btn_on'];
					t.curRunStart = serverTime();
					t.autoCheckTargets();
				} else {
					Messages.removeReportListener('attacks', t.gotBattleReport);
					if (t.curRunStart != 0)
						Data.stats.attacks.run_time += (serverTime() - t.curRunStart);
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
					dispFeedback(UID['tabAttack_Feedback'], '');
				}
			},

			abort: function(msg) {
				var t = Tabs.Attacks;
				t.setAttackEnable(false);
				dispFeedback(UID['tabAttack_Feedback'], msg);
				actionLog(msg);
				/*
				 * Recall all remaining marches of that type to avoid other
				 * troop loss
				 */
				for (var id in Data.marches.attacks) {
					if (Data.marches.attacks[id].status === 'marching')
						doRecallMarch(Data.marches.attacks[id].city_id, id);
				}

				function doRecallMarch(city_id, id) {
					var targMsg = 'Recall march ' + id;
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.marchRecall(city_id, id, function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('succeeded'));
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
				}
			},

			marchTick: function() {
				var t = Tabs.Attacks;
				clearTimeout(t.marchTimer);
				Marches.updateTable($(UID['tabAttack_Marches']), 'attacks');
				t.marchTimer = setTimeout(t.marchTick, 1000);
			},

			autoCheckTargets: function() {
				var t = Tabs.Attacks;
				var now = serverTime();
				var cityIdx = CAPITAL.id;
				var targetMsg, retryDelay, availableGeneral, attackUnits, marchCount = 0,
					p;

				clearTimeout(t.attackTimer);
				targetMsg = '';

				if (!Data.options.attacks.enabled) return;
				if (!t.checkMapData()) return;

				var actionMsg = translate('Attack to ') + targetMsg;
				var feedback_element = UID['tabAttack_Feedback'];

				var cur_march = getMinDelay();
				marchCount = cur_march.count;
				retryDelay = cur_march.delay;
				availableGeneral = getAvailableGeneral();
				var chk = checkMarch(actionMsg,
					feedback_element,
					marchCount,
					retryDelay,
					Marches.count.attacks,
					Data.options.attacks.max_marches,
					availableGeneral, true);
				if (chk != 0) {
					t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
					return;
				}
				/* Get the next target, make sure we have sufficient troops */
				var nextTarget = t.getNextAttackTarget();
				if (nextTarget) {
					var greatDrag = null;
					if (Data.options.attacks.include_great_dragon[nextTarget.l]) {
						if ((greatDrag = getAvailableDragon(false, Data.options.attacks.except_great_dragon[nextTarget.l])) == null) {
							if (!Data.options.attacks.send_without_dragon) {
								raiseMessage(actionMsg, feedback_element, 5, false, retryDelay);
								t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
								return;
							}
						}
					}
					attackUnits = checkTroops(CAPITAL.id, Data.options.attacks.units[nextTarget.l]);
					if (attackUnits == null) {
						t.sendAttack(CAPITAL.id, nextTarget, availableGeneral, greatDrag, function(rslt) {
							var t = Tabs.Attacks,
								attackDelay, retryDelay;
							if (rslt) {
								var delay_min = toNum(Data.options.attacks.delay_min, nvl(MIN_DELAY_BETWEEN_WAVE, 10));
								var delay_max = toNum(Data.options.attacks.delay_max, toNum(delay_min * 1.5));
								attackDelay = Math.floor(Math.random() * (delay_max - delay_min + 1) + delay_min);
								t.attackTimer = setTimeout(t.autoCheckTargets, attackDelay * 1000);
							} else {
								retryDelay = 30 * (t.attackErrors * t.attackErrors);
								if (rslt.status === 429) {
									retry_delay = E429_DELAY;
									raiseMessage(actionMsg + ' ' + translate('failed') + ' - <b>API</b> ', feedback_element, 6, false, retryDelay);
								} else if (rslt.status === 509) {
									retry_delay = 600;
									raiseMessage(actionMsg + ' ' + translate('failed') + ' - ', feedback_element, 6, false, retryDelay);
								}
								t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
							}
						});
						return;
					} else {
						raiseMessage(actionMsg, feedback_element, attackUnits, true, retryDelay);
						t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
					}
				} else {
					raiseMessage(actionMsg, feedback_element, 7, false, retryDelay);
					t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
				}
			},

			sendAttack: function(cityIdx, target, general, great_dragon, notify) {
				var t = Tabs.Attacks;
				var now = serverTime();
				if (t.attackBusy) {
					dispFeedback(UID['tabAttack_Feedback'], translate('Error') + ': ' + translate('sendAttack is busy, no response from server?'));
					if (!t.requestTimer) t.requestTimer = setTimeout(function() {
						Tabs.Attacks.attackBusy = false;
					}, 10000);
					if (notify) notify(false);
					return;
				} else if (t.requestTimer) clearTimeout(t.requestTimer);
				var units = cloneProps(Data.options.attacks.units[target.l]);
				if (!is_null(great_dragon)) units[great_dragon] = 1;

				var targMsg = translate('Attack sent to') + ': ' + translate(Data.options.attacks.choice) + ' ' + translate('Level') + ' ' + target.l + ' ' + translate('at') + ' ' + target.x + '/' + target.y;

				verboseLog(targMsg + ' ' + translate('attempted'));
				t.attackBusy = true;
				t.lastAttack = now;

				new MyAjax.marchSend(Seed.cities[cityIdx].id, target.x, target.y, general.id, units, 'attacks', function(rslt) {
					t.attackBusy = false;
					if (rslt.ok && rslt.dat.result.success) {
						t.attackErrors = 0;

						verboseLog(targMsg + ' ' + translate('Successfully'));
						if (Data.options.attacks.log_attacks) actionLog(targMsg);
						dispFeedback(UID['tabAttack_Feedback'], targMsg);

						var xy = target.x + ',' + target.y;
						if (!Data.map.coords[xy]) Data.map.coords[xy] = {};
						Data.map.coords[xy].la = now;
						target.la = now;
						if (notify) notify(true);
					} else {
						t.attackErrors++;
						verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						actionLog(targMsg + ' ' + translate('failed'));
						dispFeedback(UID['tabAttack_Feedback'], targMsg + ' ' + translate('failed'));
						if (notify) notify(false);
					}
				});
			},

			/*
			 * return the nextTarget that is next to be attacked, if we are at
			 * the last object in the last, return the first object
			 */
			getNextAttackTarget: function(map_type) {
				var t = Tabs.Attacks;
				var last_attack = 0;
				var next_target = null;
				var target = null;
				var attacks = Data.options.attacks;

				map_type = map_type || attacks.choice;

				var level_enable = cloneProps(attacks.level_enable);
				for (var i = 0; i < level_enable.length; i++) {
					if (level_enable[i] && checkTroops(CAPITAL.id, Data.options.attacks.units[i]) !== null)
						level_enable[i] = false;
				}
				/* Get the targets list fit within the config specifications */
				var targets_list = t.getActiveObjectList(map_type, level_enable);
				targets_list.sort(function(a, b) {
					return a.d - b.d;
				});

				/* Look through all the targets */
				for (var i = 0; i < targets_list.length; i++) {
					target = targets_list[i];
					var target_states = Data.map.coords[target.x + ',' + target.y];
					if (target_states && target_states.A) {
						/* Has the target never been attacked? */
						if (target_states.la === 0 || target_states.la === null) {
							next_target = target;
							break;
						} else if (last_attack === 0) {
							/* Yes, this target is next (so far) */
							last_attack = target_states.la;
							next_target = target;
						} else if (last_attack > target_states.la) { /*
																		 * Was
																		 * the
																		 * previous
																		 * target
																		 * attacked
																		 * before
																		 * this
																		 * target?
																		 */
							/* Yes, this target is next (so far) */
							last_attack = target_states.la;
							next_target = target;
							break;
						}
					}
				}
				/* No target reaches the specified requirements */
				if (next_target === null) return;
				/* Return the next target */
				return next_target;
			},

			/*
			 * return array of targets that satisfy config (max distance, level
			 * enables)
			 */
			getActiveObjectList: function(map_type, level_enable) {
				var t = Tabs.Attacks;
				level_enable = (level_enable !== undefined) ? level_enable : Data.options.attacks.level_enable;
				map_type = (map_type !== undefined ? map_type : Data.options.attacks.choice);

				var radius = 0;
				for (var i = 0; i < Data.options.attacks.level_distance.length; i++) {
					if (Data.options.attacks.level_distance[i] > radius)
						radius = Data.options.attacks.level_distance[i];
				}
				var terrains = Map.getTargets({
					radius: radius
				});
				var targets = [];
				if (terrains[map_type]) {
					for (var i = 0; i < terrains[map_type].length; i++) {
						var target = (terrains[map_type])[i];
						if (target && level_enable[target.l] && (
							Data.options.attacks.level_distance[target.l] === 0 || Data.options.attacks.level_distance[target.l] >= target.d)) {
							targets.push(target);
						}
					}
				}
				return targets;
			},

			checkAttack: function(target, notify) {
				var t = Tabs.Attacks;
				var cityId = Seed.cities[CAPITAL.id].id;
				var cityIdx = CAPITAL.id;
				var availableGeneral, attackUnits;

				/* check units */
				var units = cloneProps(Data.options.attacks.units[target.l]);
				attackUnits = checkTroops(CAPITAL.id, units);
				if (attackUnits != null) {
					notify(getErrorText(attackUnits, 'fb'));
					return;
				}
				if ((availableGeneral = getAvailableGeneral()) == null) {
					notify(getErrorText(3, 'fb'));
					return;
				}
				var greatDrag = null;
								
				if (Data.options.attacks.include_great_dragon[target.l]) {
					if ((greatDrag = getAvailableDragon(false, Data.options.attacks.except_great_dragon[target.l])) == null) {
						if (!Data.options.attacks.send_without_dragon) {
							notify(getErrorText(5, 'fb'));
							return;
						}
					}
					if (greatDrag && greatDrag != null) units[greatDrag] = 1;
				}
				var targMsg = translate('Manual attack sent to') + ': ' + translate(Data.options.attacks.choice) + ' ' + translate('Level') + ' ' + target.l + ' ' + translate('at') + ' ' + target.x + '/' + target.y;

				verboseLog(targMsg + ' ' + translate('attempted'));

                Messages.addBattleReportListener(t.gotBattleReport); /* Start battle listener is switch off */
				new MyAjax.marchSend(cityId, target.x, target.y, availableGeneral.id, units, 'attacks', function(rslt) {
					if (rslt.ok) {
						verboseLog(targMsg + ' ' + translate('Successfully'));
						if (Data.options.attacks.log_attacks) actionLog(targMsg);
						dispFeedback(UID['tabAttack_Feedback'], targMsg);
						var xy = target.x + ',' + target.y;
						if (!Data.map.coords[xy]) Data.map.coords[xy] = {};
						Data.map.coords[xy].la = serverTime();
						target.la = serverTime();
						notify('OK');
					} else {
						verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						dispFeedback(UID['tabAttack_Feedback'], translate('Error') + ': ' + rslt.errmsg);
						notify(translate('Error') + ': ' + rslt.errmsg);
					}
					if (!Data.options.attacks.enabled) Messages.removeReportListener('attacks', t.gotBattleReport); /* Ask to switch off battle listener */
				});
			},

			/** * Attacks Tab - Levels Sub-Tab ** */
			tabAttackLevels: function() {
				var t = Tabs.Attacks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAttackLevels']).className = 'selected';
				$(UID['tabAttackLevels']).style.zIndex = 1;
				t.lastSubTab = 'tabAttackLevels';

				t.contentType = 0;

				var city = Seed.cities[CAPITAL.id];
				var m = '<div class="' + UID['title'] + '">' + translate('Attacks') + '&nbsp;' + translate(Data.options.attacks.choice) + ' ( ' + translate('Max') + '. ' + translate('Troops') + ' ' + numf(toNum((getMusterPoint(CAPITAL.id)).max_troops), ' ') + ' )</div>' + '<div id=' + setUID('tabAAttackLevels_Statbox') + ' class=' + UID['status_ticker'] + ' style="height:410px; max-height:410px; overflow-y:auto; margin-top:1px !important">' + '	<table class=' + UID['compact_table'] + ' width=100%>' + '		<tr class=' + UID['row_top_headers'] + '>' + '			<td style="background:none !important;"></td>' + '			<td align=center colspan=11>&nbsp;' + translate('Levels') + '&nbsp;</td>' + '		</tr>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td width=12% style="background:none !important;"></td>' + '			<td width=8%>1</td>' + '			<td width=8%>2</td>' + '			<td width=8%>3</td>' + '			<td width=8%>4</td>' + '			<td width=8%>5</td>' + '			<td width=8%>6</td>' + '			<td width=8%>7</td>' + '			<td width=8%>8</td>' + '			<td width=8%>9</td>' + '			<td width=8%>10</td>' + '			<td width=8%>11</td>' + '		</tr>' + '		<tr align=center>' + '			<td class=right>' + translate('Enable') + ': </td>';

				for (var x = 1; x < 12; x++) {
					m += '		<td><label><input type=checkbox id=' + setUID('tabAttackLevels_LvlOnOff_' + x) + ' ref=' + x + ' ' + (Data.options.attacks.level_enable[x] ? ' checked' : '') + ' /></label></td>';
				}

				m += '		</tr><tr align=center>' + '			<td class=right>' + translate('Max') + ' ' + translate('Distance').truncate(4, '') + ': </td>';

				for (var x = 1; x < 12; x++) {
					m += '		<td><input type=text id=' + setUID('tabAttackLevels_LvlDist_' + x) + ' ref=' + x + ' maxlength=2 style="width:37px" value="' + Data.options.attacks.level_distance[x] + '" /></td>';
				}
				m += '		</tr><tr>' + '				<td><div class=short></div></td>' + '			</tr>';

				var currentTroops = [];
				for (var i = 0; i < attack_unit_types.length; i++) {
					var color = '#FFF';
					if (i < 5) color = '#DDD';
					else if (i < 8) color = '#BEB';
					else if (i < 10) color = '#EEB';
					else if (i < 12) color = '#BBE';
					else if (i < 16) color = '#EBB';
					else color = '#EBB';
					m += '<tr style="background-color:' + color + ';">' + '		<td class=right><span title="' + translate(attack_unit_types[i]) + '">' + translate(Names.getTroopAbbr(attack_unit_types[i])) + ':<span></td>';
					for (var x = 1; x < 12; x++) {
						var num = Data.options.attacks.units[x][attack_unit_types[i]];
						if (!num) num = 0;
						m += '<td><input type=text id=' + setUID('tabAttackLevels_LvlTroops_' + x + '_' + i) + ' ref=' + (x + '_' + i) + ' maxlength=6 size=2 style="width:38px;' + (num ? '' : 'color:#888;') + '" value="' + num + '" title="" /></td>';
					}
					m += '</tr>';
					currentTroops.push(i);
				}

				m += '<tr>' + '		<td><div class=short></div></td>' + '	</tr>' + '	<tr>' + '		<td style="background:none !important;"></td>' + '		<td align=center colspan=11 align=center>' + '			<table cellpadding=1 cellspacing=1 width=90%>' + '				<tr><td width=40%><hr></td><td>&nbsp &nbsp' + translate('Great dragons') + '&nbsp &nbsp</td><td width=40%><hr></td></tr>' + '			</table></td>' + '	</tr><tr align=center>' + '		<td class=right><span title="' + translate('Include Great Dragon') + '">' + translate('Dragons') + ':<span></td>';
				for (var x = 1; x < 12; x++) {
					m += '		<td><label><input type=checkbox id=' + setUID('tabAttackLevels_GreatDrag_' + x) + ' ref=' + x + ' ' + (Data.options.attacks.include_great_dragon[x] ? ' checked' : '') + ' /></label></td>';
				}
				m += '</tr><tr align=center>' + '		<td class=left><span title="' + translate('Check the following great dragons to exclude them from being sent') + '">' + translate('Except') + ':<span></td>'; + '	</tr>'
				var currentDragons = [];
				for (var j = 0; j < Seed.dragonList.length; j++) {
					var dragon = Seed.dragonList[j],
						color = '';
					if (j % 2 == 1) color = '#EBB';
					else color = '#ECB';
					m += '<tr style="background-color:' + color + ';">' + '		<td class=right><span title="' + translate(dragon.type) + '">' + translate(Names.getTroopAbbr(dragon.type)) + ':<span></td>';
					for (var x = 1; x < 12; x++) {
						m += '<td align=center><input type=checkbox id=' + setUID('tabAttackLevels_LvlDragons_' + x + '_' + j) + ' ref="' + (x + '_' + j) + '" ' + (Data.options.attacks.except_great_dragon[x][dragon.type] ? ' checked' : '') + ' /></td>';
					}
					m += '</tr>';
					currentDragons.push(j);
				}

				m += '</table><div class=short></div></div>';
				$(UID['tabAttack_Content']).innerHTML = m;
				for (var x = 1; x < 12; x++) {
					$(UID['tabAttackLevels_LvlOnOff_' + x]).addEventListener('change', enableChanged, false);
					$(UID['tabAttackLevels_LvlDist_' + x]).addEventListener('change', distChanged, false);
					$(UID['tabAttackLevels_GreatDrag_' + x]).addEventListener('change', dragChanged, false);
				}
				for (var i = 0; i < currentTroops.length; ++i) {
					for (var x = 1; x < 12; x++) {
						$(UID['tabAttackLevels_LvlTroops_' + x + '_' + currentTroops[i]]).addEventListener('change', troopsChanged, false);
					}
				}
				for (var j = 0; j < currentDragons.length; ++j) {
					for (var x = 1; x < 12; x++) {
						$(UID['tabAttackLevels_LvlDragons_' + x + '_' + currentDragons[j]]).addEventListener('change', exceptDragonsChanged, false);
					}
				}

				function enableChanged(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.attacks.level_enable[n] = event.target.checked;
				}

				function distChanged(event) {
					var n = toNum(event.target.getAttribute('ref'));
					var x = toNum(event.target.value);
					if (isNaN(x) || x < 0 || x > t.MAX_DISTANCE) {
						event.target.style.backgroundColor = 'red';
						dispError(translate('Distance must be between') + ' 0 ' + translate('and') + ' ' + t.MAX_DISTANCE, t.container);
					} else {
						event.target.value = x;
						event.target.style.backgroundColor = '';
						Data.options.attacks.level_distance[n] = x;
					}
				}

				function dragChanged(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.attacks.include_great_dragon[n] = event.target.checked;
				}

				function exceptDragonsChanged(event) {
					var args = event.target.getAttribute('ref').split('_');
					Data.options.attacks.except_great_dragon[args[0]][Seed.dragonList[args[1]].type] = event.target.checked;
				}

				function troopsChanged(event) {
					var args = event.target.getAttribute('ref').split('_');
					var x = toNum(event.target.value);
					if (isNaN(x) || x < 0 || x > 200000) {
						event.target.style.backgroundColor = 'red';
						dispError(translate('Invalid number of troops', t.container));
					} else {
						event.target.value = x;
						Data.options.attacks.units[args[0]][attack_unit_types[args[1]]] = x;
						event.target.style.backgroundColor = '';
						if (toNum(event.target.value) > 0) event.target.style.color = '#000';
					}
				}
			},

			/** * Attacks Tab - Config Sub-Tab ** */
			tabAttackConfig: function() {
				var t = Tabs.Attacks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAttackConfig']).className = 'selected';
				$(UID['tabAttackConfig']).style.zIndex = 1;
				t.lastSubTab = 'tabAttackConfig';

				t.contentType = 1;

				var m = '<div class=' + UID['title'] + '>' + translate('Attacks Configuration') + '</div>' 
					  + '<div id=' + setUID('tabAttackConfig_Status') + ' class=' + UID['status_ticker'] + ' style="overflow:auto">' 
					  + '	<table class=' + UID['table'] + ' width=100%>' + '	<tr>' + '		<td width=50% class=right>' + translate('Delay Between Attacks') + ':&nbsp;</td>' + '		<td width=50%>' + '		<input class=short id=' + setUID('tabAttackConfig_DelayMin') + ' maxlength=4 type=text value="' + Data.options.attacks.delay_min + '" />&nbsp;' + translate('to') + '		<input class=short id=' + setUID('tabAttackConfig_DelayMax') + ' maxlength=4 type=text value="' + Data.options.attacks.delay_max + '" />&nbsp;' + translate('seconds') + '		</td>' 
					  + '	</tr><tr>' + '		<td class=right>' + translate('Delete Battle Reports') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabAttackConfig_DelAttacks') + ' ' + (Data.options.attacks.delete_reports ? 'CHECKED ' : '') + ' type=checkbox /></td>' 
					  + '	</tr><tr>' + '		<td class=right>' + translate('Stop if any troops lost') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabAttackConfig_StopOnLoss') + ' ' + (Data.options.attacks.stop_on_loss ? 'CHECKED ' : '') + ' type=checkbox /></td>' 
					  + '	</tr><tr>' + '		<td class=right>' + translate('Maximum simultaneous marches') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabAttackConfig_MaxMarches') + ' class=short maxlength=2 type=text value="' + Data.options.attacks.max_marches + '" /></td>' 
					  + '	</tr><tr>' + '		<td class=right>' + translate('Activate Attacks Logs') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabAttackConfig_LogAttack') + ' ' + (Data.options.attacks.log_attacks ? 'CHECKED ' : '') + ' type=checkbox /></td>' 
					  + '	</tr><tr>' + '		<td class=right>' + translate('Clear last attack on current map') + '&nbsp;</td>' + '		<td><input id=' + setUID('tabAttackConfig_ClearLast') + '  type=button value="' + translate('Delete') + '" /></td>' 
					  + '	</tr><tr>' + '		<td class=right>' + translate('Clear last attack on all maps') + '&nbsp;</td>' + '		<td><input id=' + setUID('tabAttackConfig_ClearAll') + ' ' + (Data.options.attacks.clear_all_targets ? 'CHECKED ' : '') + ' type=checkbox /></td>' 
					  + '	</tr><tr>' + '		<td class=right>' + translate('Send even without Dragon') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabAttackConfig_SendWithoutDragon') + ' type=checkbox ' + (Data.options.attacks.send_without_dragon ? 'CHECKED' : '') + ' /></td>' + '		</tr>'
					  + '	</tr></table>';

				$(UID['tabAttack_Content']).innerHTML = m;
				$(UID['tabAttackConfig_DelAttacks']).addEventListener('change', function(event) {
					Data.options.attacks.delete_reports = event.target.checked;
				}, false);
				$(UID['tabAttackConfig_StopOnLoss']).addEventListener('change', function(event) {
					Data.options.attacks.stop_on_loss = event.target.checked;
				}, false);
				$(UID['tabAttackConfig_LogAttack']).addEventListener('change', function(event) {
					Data.options.attacks.log_attacks = event.target.checked;
				}, false);
				$(UID['tabAttackConfig_ClearAll']).addEventListener('change', function(event) {
					Data.options.attacks.clear_all_targets = event.target.checked;
				}, false);
				$(UID['tabAttackConfig_SendWithoutDragon']).addEventListener('click', function(event) {
					Data.options.attacks.send_without_dragon = event.target.checked;
				}, false);
				$(UID['tabAttackConfig_DelayMin']).addEventListener('change', delayChanged, false);
				$(UID['tabAttackConfig_DelayMax']).addEventListener('change', delayChanged, false);
				$(UID['tabAttackConfig_MaxMarches']).addEventListener('change', maxMarchesChanged, false);
				$(UID['tabAttackConfig_ClearLast']).addEventListener('click', clearLast, false);

				function delayChanged(event) {
					var min = toNum($(UID['tabAttackConfig_DelayMin']).value);
					var max = toNum($(UID['tabAttackConfig_DelayMax']).value);
					if (min < nvl(MIN_DELAY, 10) || min > 3600 || (max - min) < 5) {
						var dial = new ModalDialog(t.container, 300, 150, '', true);
						dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Error') + '</b></center></div>';
						dial.getContentDiv().innerHTML = '<b>' + translate('Invalid delays') + '</b><br><br>' + translate('First value must be between') + ' ' + MIN_DELAY + ' ' + translate('and') + ' 3600. ' + translate('Second value must be at least') + ' 5 ' + translate('above the first value');
						return;
					}
					Data.options.attacks.delay_min = min;
					Data.options.attacks.delay_max = max;
				}

				function maxMarchesChanged(event) {
					var val = toNum($(UID['tabAttackConfig_MaxMarches']).value);
					if (val < 0 || val > Seed.cities[CAPITAL.id].figures.marches.maximum) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					event.target.style.backgroundColor = '';
					Data.options.attacks.max_marches = val;
				}

				/*
				 * Clear the information about when the target was last attacked
				 * This is useful because attacks always start with the oldest
				 * target or, if no target has been attacked (last == 0), the
				 * first target in the list
				 */

				function clearLast() {
					if (Data.options.attacks.clear_all_targets) {
						/* Make sure the user has scanned the map */
						for (var type in Map.targets) {
							var cur_targets = Map.targets[type];
							for (var i = 0; i < cur_targets.length; i++) {
								cur_targets[i].la = 0;
								Data.map.coords[cur_targets[i].x + ',' + cur_targets[i].y].la = 0;
							}
						}
					} else {
						/*
						 * Clear the last attacked field of the currently
						 * selected target
						 */
						var cur_targets = Map.targets[Data.options.attacks.choice];
						for (var i = 0; i < cur_targets.length; i++) {
							cur_targets[i].la = 0;
							Data.map.coords[cur_targets[i].x + ',' + cur_targets[i].y].la = 0;
						}
					}
				}
			},

			/** * Attacks Tab - Targets Sub-Tab ** */
			tabAttackTarget: function() {
				var t = Tabs.Attacks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAttackTarget']).className = 'selected';
				$(UID['tabAttackTarget']).style.zIndex = 1;
				t.lastSubTab = 'tabAttackTarget';

				t.contentType = 2;
				clearTimeout(t.targetTickTimer);

				t.checkMapData();
				var targets = t.getActiveObjectList();
				if (targets.length == 0) dispFeedback(UID['tabAttack_Feedback'], translate('Use the Levels Tab to select attack areas'));
				targets.sort(function(a, b) {
					return a.d - b.d;
				});

				$(UID['tabAttack_Title']).innerHTML = translate('Attack') + ' ' + translate(Data.options.attacks.choice);
				var m = '<div class=' + UID['title'] + '>' + translate('Attacks') + '&nbsp;' + translate(Data.options.attacks.choice) + '</div>';

				setUID('tabAttackTarget_MapChoice');
				m += '<div id=' + setUID('tabAAttackTarget_Statbox') + ' class=' + UID['status_ticker'] + ' style="height:390px; max-height:390px">'
				m += '<table><tr>' + '<td align=right>' + '&nbsp;<b>' + translate('Select') + ' ' + translate('Targets') + '</b>' + '</td>' + '<td>' + ':&nbsp;<select id=' + UID['tabAttackTarget_MapChoice'] + '>';

				for (var type in Map.targets) {
					switch (type) {
						case 'City':
						case 'Outpost':
						case 'AnthropusCamp':
							m += '<option value="' + type + '" ' + (type == Data.options.attacks.choice ? 'selected' : '') + '>' + translate(type) + '</option>';
							break;
						default:
							break;
					}
				}
				m += '</select>&nbsp;' + '</td>' + '<td>' + '<span class=jewel>' + targets.length + ' ' + translate('of') + ' ' + Map.targets[Data.options.attacks.choice].length + '</span>' + '</td>' + '</tr></table><br>';

				m += '<div class="' + UID['scrollable'] + '" style="height:350px; width:530px; max-width:530px; overflow:auto; white-space:nowrap;">' + '<table id=' + setUID('tabAttackTarget_Tab') + ' class=' + UID['row_style'] + '>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td valign=middle width="20px"><b>' + translate('Distance').substring(0, 4) + '</b></td>' + '		<td valign=middle width="20px"><b>' + translate('Time') + '</b></td>' + '		<td valign=middle width="30px"><b>' + translate('Coords') + '</b></td>' + '		<td valign=middle width="15px"><b>' + translate('Level') + ' </b></td>' + '		<td valign=middle width="80px"><b>' + translate('Last attack') + '</b></td>' + '		<td colspan=3 style="background:none"></td>' + '</tr>';

				/* Hilite owned wildernesses */
				var ownedWilderness = Seed.player.player_wildernesses,
					bFound = false,
					ul = [];
				for (var i = 0; i < targets.length; i++) {
					m += '<tr id=' + setUID('tabAttackTarget_TabRow_' + i);
					if (Data.options.attacks.choice == 'City' ||
						Data.options.attacks.choice == 'Outpost' ||
						Data.options.attacks.choice == 'Wildernesses'
					) {
						m += '  title="' + targets[i].cn + '  (' + translate(Map.names.type[targets[i].t]) + ') \n' + (targets[i].n || '????') + ' (lvl ' + targets[i].pl + ') - Pwr: ' + targets[i].m + ' \n' + translate('Alliance') + ': ' + (targets[i].a || '---') + '"'
					}
					var target_time = getMarchTime(targets[i].x, targets[i].y, Data.options.attacks.units[targets[i].l]);

					m += '>' + '<td>' + targets[i].d + '</td>' + '<td>' + timestrShort(target_time) + '</td>' + '<td align=center>' + targets[i].x + '/' + targets[i].y + '</td>' + '<td align=center>' + targets[i].l + '</td>' + '<td><span id=' + setUID('tabAttackTarget_List_' + i) + '> --- </span></td>' + '<td>';
					/* if (targets[i].A) */
					m += '<input id=' + setUID('tabAttackTarget_AttackNow_' + i) + ' ref=' + i + ' class="' + UID['btn_red'] + '" style="width:auto !important;" type=button value="  ' + translate('Attack') + ' !  "/>' + '&nbsp;&nbsp;<input id=' + setUID('tabAttackTarget_SpyNow_' + i) + ' ref=' + i + ' class="' + UID['btn_red'] + '" style="width:auto !important;" type=button value="  ' + translate('Spy') + ' !  " />' + '&nbsp;&nbsp;<input id=' + setUID('tabAttackTarget_Bookmark_' + i) + ' ref=' + i + ' class="' + UID['btn_blue'] + '" style="width:auto !important;" type=button value=" ' + translate('Bookmark') + ' " />';

					if (targets[i].id && targets[i].id != '' && targets[i].n && targets[i].n != '') {
						var user_ids = targets[i].id + '_' + targets[i].n;
						var UIDMsg = setUID('tabAttackTarget_Msg_' + i);
						m += '	&nbsp;<input id=' + UIDMsg + ' ref=' + user_ids + ' class="' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" />';
						ul.push(UIDMsg);
					}

					/* Add the skip attack button for cities and outposts */
					if (Data.options.attacks.choice == 'City' ||
						Data.options.attacks.choice == 'Outpost' ||
						Data.options.attacks.choice == 'Wildernesses'
					) {
						if (!targets[i].F || targets[i].F == 0) {
							m += '&nbsp;&nbsp;</td><td><input id=' + setUID('tabAttackTarget_SkipAttack_' + i) + ' ref=' + i + ' type=checkbox ' + (targets[i].A ? 'CHECKED' : '') + ' /></td>' + '<td><b>' + (targets[i].n || '????').truncate(13).replace('...', '<span class=jewel>...</span>') + '</b></td>' + '<td>' + (targets[i].a || '---').truncate(16).replace('...', '<span class=jewel>...</span>');
						}
					}
					m += '</td></tr>';
				}
				m += '</table></div>';

				$(UID['tabAttack_Content']).innerHTML = m;
				$(UID['tabAttack_Content']).scrollTop = gAttScrollPos;

				/* Hilight owned resources and don't attack them */
				for (var i = 0; i < targets.length; i++) {
					for (var j = 0; j < ownedWilderness.length; j++) {
						if (ownedWilderness[j].x == targets[i].x && ownedWilderness[j].y == targets[i].y) {
							$(UID['tabAttackTarget_TabRow_' + i]).className = UID['row_owned'];
							targets[i].A = false;
							break;
						}
					}
				}

				$(UID['tabAttack_Content']).addEventListener('scroll', onScroll, false);
				$(UID['tabAttackTarget_MapChoice']).addEventListener('change', onMapChoice, false);

				for (var i = 0; i < targets.length; i++) {
					var butAttack = $(UID['tabAttackTarget_AttackNow_' + i]);
					butAttack.addEventListener('click', butAttackNow, false);
					var butSpy = $(UID['tabAttackTarget_SpyNow_' + i]);
					butSpy.addEventListener('click', butSpyNow, false);
					var butBookmark = $(UID['tabAttackTarget_Bookmark_' + i]);
					butBookmark.addEventListener('click', addBookmark, false);
					if (t.selectedMapName == 'City' || t.selectedMapName == 'Outpost' || t.selectedMapName == 'Wildernesses') {
						if (!targets[i].F || targets[i].F == 0)
							$(UID['tabAttackTarget_SkipAttack_' + i]).addEventListener('click', toggleAttackable, false);
					}
					setButtonStyle(butAttack, targets[i].A, 'btn_green', 'btn_red');
					setButtonStyle(butSpy, targets[i].A, 'btn_green', 'btn_red');
					setButtonStyle(butBookmark, targets[i].A);
				}
				for (var u = 0; u < ul.length; u++)
					$(ul[u]).addEventListener('click', onClickMsg, false);

				tick();

				function onScroll(event) {
					if (t.contentType == 2) gAttScrollPos = $(UID['tabAttack_Content']).scrollTop;
				}

				function onMapChoice(event) {
					var t = Tabs.Attacks;
					if (Data.options.attacks.enabled) {
						/*
						 * It would be very bad to leave attack on when
						 * switching targets. Imagine sending the troops for a
						 * wilderness to a city or an ant camp...
						 */
						clearTimeout(t.targetTickTimer);
						t.setAttackEnable(false);
						dispFeedback(UID['tabAttack_Feedback'], translate('Safe Mode') + ': ' + translate('Attacks') + ' ' + translate('Turned Off'));
					}
					var el = event.target;
					Data.options.attacks.choice = Tabs.Attacks.selectedMapName = el.options[el.selectedIndex].value;
					t.tabAttackTarget();
				}

				function butAttackNow(event) {
					var n = toNum(event.target.getAttribute('ref'));
					var dial = new ModalDialog(t.container, 300, 150, '', false);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('Attacking');
					t.checkAttack(targets[n], notify);

					function notify(rslt) {
						if (rslt != 'OK') {
							dial.getContentDiv().innerHTML = '<b>' + rslt + '</b>';
							dial.allowClose(true);
						} else {
							dial.getContentDiv().innerHTML = '<b>' + translate('OK') + '</b>';
							setTimeout(function() {
								dial.destroy()
							}, 1000);
						}
					}
				}

				function butSpyNow(event) {
					var n = toNum(event.target.getAttribute('ref'));
					buttonSpyNow(t.container, targets[n]);
				}

				function toggleAttackable(event) {
					var n = toNum(event.target.getAttribute('ref'));
					targets[n].A = (!targets[n].A);
					setButtonStyle($(UID['tabAttackTarget_AttackNow_' + n]), targets[n].A, 'btn_green', 'btn_red');
					setButtonStyle($(UID['tabAttackTarget_SpyNow_' + n]), targets[n].A, 'btn_green', 'btn_red');
				}

				function addBookmark(event) {
					var n = toNum(event.target.getAttribute('ref'));
					var desc = '';
					if (Data.options.attacks.choice == 'City' ||
						Data.options.attacks.choice == 'Outpost' ||
						Data.options.attacks.choice == 'Wildernesses') {
						desc = translate(Map.names.type[targets[n].t]) + ' ' + targets[n].n + '  (' + numf(targets[n].m) + ')' + (targets[n].a != undefined ? ' / ' + targets[n].a : '');
					} else {
						desc = translate(Data.options.attacks.choice) + ' ' + translate('Level') + ' ' + targets[n].l;
					}
					saveBookmark(t.container, targets[n].x, targets[n].y, desc, targets[n].l,
						targets[n].id, targets[n].n,
						Data.options.attacks.units[targets[n].l], targets[n].ai,
						Data.options.attacks.include_great_dragon[targets[n].l], false,
						Data.options.attacks.except_great_dragon[targets[n].l]);
				}

				function tick() {
					var now = serverTime();
					var ts;
					clearTimeout(t.targetTickTimer);
					if (!$(UID['tabAttackTarget_Tab'])) return;
					for (var i = 0; i < targets.length; i++) {
						var list = $(UID['tabAttackTarget_List_' + i]);
						if (list == undefined) continue;

						if (is_null(targets[i].la)) ts = '---';
						else {
							var time = now - targets[i].la;
							if (time > 3600) ts = '<font color=#550000><b>' + timestr(time, false) + '</b></font>';
							else ts = timestr(time, false);
						}
						list.innerHTML = ts;
					}
					t.targetTickTimer = setTimeout(tick, 5000);
				}
			},

			/** * Attacks Tab - Stats Sub-tab ** */
			tabAttackStats: function() {
				var t = Tabs.Attacks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAttackStats']).className = 'selected';
				$(UID['tabAttackStats']).style.zIndex = 1;
				t.lastSubTab = 'tabAttackStats';

				t.contentType = 3;

				var m = '<div class=' + UID['title'] + '>' + translate('Attacks Stats') + '</div>' + '<div id=' + setUID('tabAttackStats_Statbox') + ' class=' + UID['status_ticker'] + '>' + '<div id=' + setUID('tabAttackStats_Status') + '></div>' + '<div id=' + setUID('tabAttackStats_Percent') + '></div>' + '<br/>' + '<center><input id=' + setUID('tabAttackStats_Clear') + ' type=button value="' + translate('Clear Stats') + '" /></center>' + '<br></div>';

				$(UID['tabAttack_Content']).innerHTML = m;
				$(UID['tabAttackStats_Clear']).addEventListener('click', function() {
					t.clearStats();
					t.showStats();
				}, false);
				t.showStats();
			},

			clearStats: function() {
				var t = Tabs.Attacks;
				var now = serverTime();
				Data.stats.attacks = {
					start_at: now,
					run_time: 0,
					total_attacks: 0,
					loss: {},
					items: {},
					resources: {},
					by_level: []
				};
				t.curRunStart = now;
				for (var i = 0; i < 12; i++) {
					Data.stats.attacks.by_level[i] = {
						total_attacks: 0,
						items: {},
						resources: {}
					};
				}
				t.showStats();
			},

			trackStats: function(marchId, rpt_st) {
				var t = Tabs.Attacks;
				if (DEBUG_MARCHES) debugLog('Tabs.Attacks.trackStats: ' + marchId);
				var objLevel = rpt_st.report.location.level;

				if (objLevel < 1 || objLevel > 12) objLevel = 0;

				if (is_null(Data.stats.total.total_attacks)) Data.stats.total.total_attacks = 0;
				++Data.stats.attacks.total_attacks;
				++Data.stats.attacks.by_level[objLevel].total_attacks;
				++Data.stats.total.total_attacks;
				var res = rpt_st.report.spoils.resources;
				for (var p in res) {
					objAddTo(Data.stats.attacks.resources, p, toNum(res[p]), false);
					objAddTo(Data.stats.attacks.by_level[objLevel].resources, p, toNum(res[p]), false);
					objAddTo(Data.stats.total.resources, p, toNum(res[p]), false);
				}
				var killRes = rpt_st.report.spoils.kill_items;
				for (var p in killRes) {
					objAddTo(Data.stats.attacks.resources, p, toNum(killRes[p]), false);
					objAddTo(Data.stats.attacks.by_level[objLevel].resources, p, toNum(killRes[p]), false);
					objAddTo(Data.stats.total.resources, p, toNum(killRes[p]), false);
				}
				var items = rpt_st.report.spoils.items;
				for (var i = 0; i < items.length; i++) {
					objAddTo(Data.stats.attacks.items, items[i], 1, false);
					objAddTo(Data.stats.attacks.by_level[objLevel].items, items[i], 1, false);
					objAddTo(Data.stats.total.items, items[i], 1, true);
				}
				for (var p in rpt_st.report.attacker.units) {
					if (rpt_st.report.attacker.units[p][0] != rpt_st.report.attacker.units[p][1]) {
						var nb = toNum(rpt_st.report.attacker.units[p][0]) - toNum(rpt_st.report.attacker.units[p][1]);
						objAddTo(Data.stats.attacks.loss, p, nb, true);
						objAddTo(Data.stats.total.loss, p, nb, true);
					}
				}
				Data.marches.attacks[marchId].has_report = true;
				t.showStats();
			},

			showStats: function() {
				var div = $(UID['tabAttackStats_Status']);
				var t = Tabs.Attacks;

				if (div == null) return;
				var run_time = Data.stats.attacks.run_time;
				if (Data.options.attacks.enabled) run_time += (serverTime() - t.curRunStart);
				var trueRunTime = (run_time > 0) ? (run_time / 3600) : 1;

				var m = '<table class=' + UID['table'] + '>' + '	<tr>' + '		<td class=right>' + translate('Start Date') + ': </td>' + '		<td>' + new Date(Data.stats.attacks.start_at * 1000).myString() + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Run Time') + ': </td>' + '		<td>' + timestr(run_time, true) + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Attacks') + ': </td>' + '		<td>' + Data.stats.attacks.total_attacks + '</td>' + '	<tr valign=top align=right>' + '		<td class=right>' + translate('Troops lost') + ': </td>';
				var first = true;
				for (var name in Data.stats.attacks.loss) {
					var perHour = Math.round(Data.stats.attacks.loss[name] / trueRunTime);
					if (first) first = false;
					else m += '	<tr align=right><td></td>';
					m += '		<td>' + translate(name) + ':</td>' + '		<td>' + numf(Data.stats.attacks.loss[name], ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
				}
				m += '	</tr><tr valign=top>' + '		<td class=right>' + translate('Resources') + ': </td>' + '		<td>' + '			<table class=' + UID['table'] + '>';

				for (var name in Data.stats.attacks.resources) {
					var perHour = Math.round(Data.stats.attacks.resources[name] / trueRunTime);
					m += '	<tr align=right>' + '			<td>' + translate(name) + ':</td>' + '			<td>' + numf(Data.stats.attacks.resources[name], ' ') + '</td>' + '			<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '		</tr>';
				}
				m += '		</table>' + '		</td>' + '</tr></table>' + '<br><div class=' + UID['subtitle'] + '>' + translate('Statistics') + '&nbsp;' + translate('of') + '&nbsp;' + translate('Attack') + ' ' + translate('and') + ' ' + translate('Items') + '</div>' + '<div style="overflow:auto">' + '	<table class=' + UID['table'] + ' width=100%>' + '		<tr class=' + UID['row_top_headers'] + ' align=center>' + '			<td style="background:none !important;"></td>' + '			<td align=right colspan=11 width="440px">' + translate('Levels') + '</td>' + '		</tr><tr align=right class=' + UID['row_headers'] + '>' + '			<td style="background:none !important;"></td>';

				for (i = 1; i < 12; i++) {
					m += '	<td width="40px">' + i + '</td>';
				}
				m += '	</tr><tr>' + '			<td colspan=12><HR class=thin></td>' + '		</tr><tr align=right>' + '			<td class=right># ' + translate('Attacks') + ':</td>';

				for (i = 1; i < 12; i++) {
					m += '	<td>' + Data.stats.attacks.by_level[i].total_attacks + '</td>';
				}
				m += '	</tr><tr>' + '			<td colspan=12><HR class=thin></td>' + '		</tr>';

				var items = flipStats('items');
				for (var p in items) {
					m += '<tr align=right>' + '		<td class=right style="white-space:normal">' + translate(p) + ':</td>'; /* Names.getItemAbbr(p)) */
					for (i = 1; i < 12; i++) {
						m += '<td>' + items[p][i] + '<br>' + ((Data.stats.attacks.by_level[i].total_attacks == 0 || items[p][i] == 0) ? '' : '(' + Math.round((items[p][i] / Data.stats.attacks.by_level[i].total_attacks) * 100) + '%)') + '</td>';
					}
					m += '</tr><tr>' + '		<td colspan=12><HR class=thin></td>' + '	</tr>';
				}
				m += '</table></div>';
				div.innerHTML = m;

				function flipStats(name) {
					var o = {};
					for (var i = 1; i < 12; i++) {
						for (var p in Data.stats.attacks.by_level[i][name]) {
							if (!o[p]) {
								o[p] = [];
								for (var x = 1; x < 12; x++) {
									o[p][x] = 0;
								}
							}
							o[p][i] += Data.stats.attacks.by_level[i][name][p];
						}
					}
					return o;
				}
			},

			/** * Attacks Tab - Maps Sub-tab ** */
			tabAttackMaps: function() {
				var t = Tabs.Attacks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAttackMaps']).className = 'selected';
				$(UID['tabAttackMaps']).style.zIndex = 1;
				t.lastSubTab = 'tabAttackMaps';

				t.contentType = 4;

				var m = '<div class=' + UID['subtitle'] + '>' + translate('Search') + ' ' + translate('Location') + '</div>' + '<div id=' + setUID('tabAttackMaps_Statbox') + ' class=' + UID['status_ticker'] + ' style="overflow:auto; margin-top:1px !important">' + '<b>' + translate('Search Radius') + ':</b> ' + '	<select id=' + setUID('tabAttackMaps_Radius') + '>';

				for (var i = 8; i <= 40; i += 8) {
					m += '		<option value="' + i + '" ' + (Data.options.map.radius == i ? 'selected' : '') + '>' + i + '</option>';
				}
				m += '	<select> ' + translate('miles') + '.&nbsp;&nbsp;' + '<input id=' + setUID('tabAttackMaps_Search') + ' type=button value="' + translate('Detailed search') + '" />' + '<br><b>' + translate('Search Radius') + ':</b> ' + '	<select id=' + setUID('tabAttackMaps_RadiusFast') + '>';

				for (var i = 8; i <= 72; i += 8) {
					m += '		<option value="' + i + '" ' + (Data.options.map.radius_fast == i ? 'selected' : '') + '>' + i + '</option>';
				}
				m += '	<select> ' + translate('miles') + '.&nbsp;&nbsp;' + '<input id=' + setUID('tabAttackMaps_FastSearch') + ' type=button value="' + translate('Fast search') + '" />' + '<br><br><br>' + '	<table class=' + UID['table'] + '>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td>' + translate('type') + '</td>' + '			<td>' + translate('total') + '</td>' + '		</tr>';

				for (var map_type in Map.targets) {
					m += '<tr>' + '	<td>' + translate(map_type) + '</td>' + '	<td align=right><span class=jewel>' + Map.targets[map_type].length + '</span></td>' + '</tr>'
				}
				m += '</table></div>';

				$(UID['tabAttack_Content']).innerHTML = m;
				$(UID['tabAttackMaps_Search']).addEventListener('click', function() {
					butSearchNow(true);
				}, false);
				$(UID['tabAttackMaps_FastSearch']).addEventListener('click', function() {
					butSearchNow(false);
				}, false);
				$(UID['tabAttackMaps_Radius']).addEventListener('change', function(ev) {
					var el = ev.target;
					Data.options.map.radius = toNum(el.options[el.selectedIndex].value);
				}, false);
				$(UID['tabAttackMaps_RadiusFast']).addEventListener('change', function(ev) {
					var el = ev.target;
					Data.options.map.radius_fast = toNum(el.options[el.selectedIndex].value);
				}, false);

				/* search the map for the selected type */

				function butSearchNow(get_detail) {
					actionLog('<B>scanMap</B>: begin');
					var t = Tabs.Attacks;

					for (var pid in Data.map.players) {
						if (Data.map.players[pid] && Data.map.players[pid][2]) {
							if (!Data.map.evolution[pid]) Data.map.evolution[pid] = {};
							Data.map.evolution[pid].m = Data.map.players[pid][2];
						}
					}

					var ix = 0;
					iy = 0;
					var x = Data.options.map.x;
					var y = Data.options.map.y;
					var radius = Data.options.map.radius;
					if (!get_detail) radius = Data.options.map.radius_fast;

					progressBar.init(800 + Math.randRange(1, 50), 100, 300, 150, translate('Message'), 200, true, t.container);
					progressBar.start({
						steps: 100,
						delay: 1,
						byCount: true,
						title: translate('Scanning map') + '...',
						stepText: translate('Please wait...')
					});

					Map.scanMap({
						x: x,
						y: y,
						radius: radius,
						city_detail: get_detail,
						force_request: get_detail
					}, function(res) {
						if (res == null) {
							progressBarPop.getContentDiv().innerHTML = '<B>' + translate('Bummer, there was an error while scanning the map') + '.</B>';
							progressBarPop.allowClose(true);
							Tabs.Attacks.checkMapBusy = false;
							return;
						}
						if (res.done) {
							actionLog('<B>scanMap</B>: ' + translate('complete'));
							Tabs.Attacks.checkMapBusy = false;
							progressBarPop.destroy();
						}
					});
				}
			}
		};
		/**
		 * ****************************** Attacks Tab
		 * *******************************
		 */


		/**
		 * ****************************** Bookmarks Tab
		 * *****************************
		 */
		Tabs.Bookmarks = {
			tabOrder: BOOKMARK_TAB_ORDER,
			tabLabel: 'Bookmarks',
			tabDisabled: !BOOKMARK_TAB_ENABLE,
			container: null,
			enabled: false,
			attackTimer: null,
			marchTimer: null,
			lastAttack: 0,
			attackErrors: 0,
			contentType: 0,
			/* 0 = edit, 1 = targets list, 2 = stats, 3 = config */
			lastSubTab: 'tabBookmarksTargets',
			running: {
				start_at: 0
			},
			last_target_idx: -1,
			current_target_idx: -1,
			requestTimer: 0,

			init: function(div) {
				var t = Tabs.Bookmarks;
				Data.setDefaultValues('bookmark');

				t.container = div;
				var m = '' + '<div class=' + UID['title'] + '>' + translate('Bookmarks') + '</div>' + '<div id=' + setUID('tabBookmarks_Status') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<center><input id=' + setUID('tabBookmarks_OnOff') + ' type=button value="OnOff" /></center>' + '	<div id=' + setUID('tabBookmarks_Report') + ' style="margin-top:5px;height:140px; max-height:140px; width:540px; max-width:540px; overflow:auto;">' + '		<table id=' + setUID('tabBookmarks_Marches') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div>' + '	<div id=' + setUID('tabBookmarks_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabBookmarksEdit') + '>' + translate('Edit') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabBookmarksTargets') + '>' + translate('Targets') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabBookmarksStats') + '>' + translate('Stats') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabBookmarksConfig') + '>' + translate('Config') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabBookmarks_Content') + ' style="padding-top:0px; height:430px; overflow-y:auto"></div>';
				t.container.innerHTML = m;

				$(UID['tabBookmarksEdit']).addEventListener('click', t.tabBookmarksEdit, false);
				$(UID['tabBookmarksTargets']).addEventListener('click', t.tabBookmarksTargets, false);
				$(UID['tabBookmarksStats']).addEventListener('click', t.tabBookmarksStats, false);
				$(UID['tabBookmarksConfig']).addEventListener('click', t.tabBookmarksConfig, false);
				$(UID['tabBookmarks_OnOff']).addEventListener('click', function() {
					t.setBookmarksEnable(!Data.options.bookmarks.enabled);
				}, false);
				window.addEventListener('unload', t.onUnload, false);
				if (Data.stats.bookmarks == null) t.clearStats();
				t.setBookmarksEnable(false);
				t.contentType = toNum(Data.options.bookmarks.current_tab);
				t.show();
			},

			tabBookmarksEdit: function() {
				var t = Tabs.Bookmarks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabBookmarksEdit']).className = 'selected';
				$(UID['tabBookmarksEdit']).style.zIndex = 1;
				t.lastSubTab = 'tabBookmarksEdit';

				t.contentType = 0;

				var m = '<div class="' + UID['title'] + '">' + translate('Edit bookmark') + '</div>' + '<div class=' + UID['content'] + '>' + '	<div>' + '		<b>' + translate('Coords') + ':&nbsp;</b>&nbsp;' + '		X: <input id=' + setUID('tabBookmarks_CoordsX') + ' size=1 maxlength=3 type=text value="' + Data.options.bookmarks.new_bookmark.x + '" /> ' + '		Y: <input id=' + setUID('tabBookmarks_CoordsY') + ' size=2 maxlength=3 type=text value="' + Data.options.bookmarks.new_bookmark.y + '" /> ' + '		&nbsp <b>' + translate('Distance') + ':</b> <span id=' + setUID('tabBookmarks_Distance') + '></span>' + '		&nbsp <input id=' + setUID('tabBookmarks_Spy') + ' class="' + UID['btn_green'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Spy') + ' " />' + '		&nbsp <input id=' + setUID('tabBookmarks_Save') + ' class="' + UID['btn_green'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Save') + ' " />';
				if (Data.options.bookmarks.new_bookmark.id && Data.options.bookmarks.new_bookmark.id != '' && Data.options.bookmarks.new_bookmark.n && Data.options.bookmarks.new_bookmark.n != '') {
					var user_ids = Data.options.bookmarks.new_bookmark.id + '_' + Data.options.bookmarks.new_bookmark.n;
					m += '	&nbsp <input id=' + setUID('tabBookmarks_Msg') + ' ref=' + user_ids + ' class="' + UID['btn_blue'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Msg') + ' " />';
				}
				m += '	<br><br><label>' + translate('description') + ' :</label>&nbsp' + '		<textarea id=' + setUID('tabBookmarks_Comment') + ' cols="80" rows="2" wrap="PHYSICAL">' + Data.options.bookmarks.new_bookmark.comment + '</textarea><br>' + '		<div class=' + UID['status_ticker'] + ' style="height:auto !important;margin:5px 10px !important;">' + '			<center><span id=' + setUID('tabBookmarks_Tile') + '></span></center>' + '		</div>' + '	</div>' + '  <div>' + '	<table id=' + setUID('tabBookmarks_Troops') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=10>' + translate('Troops for Bookmarks Attack') + ':&nbsp;</td>' + '		</tr>' + '	</table>' + '	</div><br>' + '  <div>' + '	<table id=' + setUID('tabBookmarks_Dragons') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=10>' + translate('Include Great Dragon') + ':&nbsp;</td>';
				var currentDragons = [];
				for (var j = 0; j < Seed.dragonList.length; j++) {
					var dragon = Seed.dragonList[j];
					if (j % 5 === 0)
						m += '</tr><tr>';
					m += '	<td class=right><span title="' + translate(dragon.type) + '">' + translate(Names.getTroopAbbr(dragon.type)) + ':<span></td>' + '	<td align=center><input type=checkbox id=' + setUID('tabBookmarks_Dragons_' + j) + ' ref=' + j + ' ' + (Data.options.bookmarks.new_bookmark.dragons[dragon.type] ? ' checked' : '') + ' /></td>';
					currentDragons.push(j);
				}
				m += '</tr>' + '	</table>' + '	</div>' + '</div>'
				$(UID['tabBookmarks_Content']).innerHTML = m;
				$(UID['tabBookmarks_CoordsX']).addEventListener('change', eventCoords, false);
				$(UID['tabBookmarks_CoordsY']).addEventListener('change', eventCoords, false);
				$(UID['tabBookmarks_Comment']).addEventListener('change', function() {
					Data.options.bookmarks.new_bookmark.comment = $(UID['tabBookmarks_Comment']).value
				}, false);
				$(UID['tabBookmarks_Save']).addEventListener('click', saveCoords, false);
				if (Data.options.bookmarks.new_bookmark.id && Data.options.bookmarks.new_bookmark.id != '' && Data.options.bookmarks.new_bookmark.n && Data.options.bookmarks.new_bookmark.n != '')
					$(UID['tabBookmarks_Msg']).addEventListener('click', onClickMsg, false);
				setTroopTable($(UID['tabBookmarks_Troops']), 1, 'BW', wave_unit_types,
					Data.options.bookmarks.new_bookmark.units, undefined, eventTroops, true);
				for (var j = 0; j < currentDragons.length; ++j) {
					$(UID['tabBookmarks_Dragons_' + currentDragons[j]]).addEventListener('change', function(event) {
						var args = event.target.getAttribute('ref');
						Data.options.bookmarks.new_bookmark.dragons[Seed.dragonList[args[0]].type] = event.target.checked;
						var include_great_dragon = false;
						for (var x = 0; x < Seed.dragonList.length && !include_great_dragon; x++) {
							var dragon = Seed.dragonList[x];
							if (Data.options.bookmarks.new_bookmark.dragons[dragon.type]) include_great_dragon = true;
						}
						if (include_great_dragon) Data.options.bookmarks.new_bookmark.include_great_dragon = true;
						else Data.options.bookmarks.new_bookmark.include_great_dragon = false;
					}, false);
				}
				eventCoords();
				var butSpy = $(UID['tabBookmarks_Spy']);
				butSpy.addEventListener('click', butSpyNow, false);
				var tile = Data.options.bookmarks.new_bookmark;
				if (!tile.ai || tile.ai == 0 || tile.ai == null || tile.ai != (Seed.player.alliance ? Seed.player.alliance.id : -1))
					setButtonStyle(butSpy, true, 'btn_green', 'btn_disabled');
				else
					setButtonStyle(butSpy, false, 'btn_green', 'btn_disabled');

				function butSpyNow(event) {
					buttonSpyNow(t.container, Data.options.bookmarks.new_bookmark);
				}

				function eventCoords(event) {
					checkCoords('tabBookmarks', Data.options.bookmarks.new_bookmark.units, Data.options.bookmarks.new_bookmark);
				}

				function eventTroops(event) {
					var t = Tabs.Bookmarks;
					var args = event.target.name.split('_');
					if (args[0] == 'BW') {
						var tt = wave_unit_types[args[1]];
						var tr = Data.options.bookmarks.new_bookmark.units;
						tr[tt] = event.target.value;
		}
				}

				function saveCoords() {
					var t = Tabs.Bookmarks;
					saveBookmark(t.container, Data.options.bookmarks.new_bookmark.x,
						Data.options.bookmarks.new_bookmark.y,
						Data.options.bookmarks.new_bookmark.type,
						Data.options.bookmarks.new_bookmark.level,
						Data.options.bookmarks.new_bookmark.id,
						Data.options.bookmarks.new_bookmark.n,
						Data.options.bookmarks.new_bookmark.units,
						Data.options.bookmarks.new_bookmark.ai,
						Data.options.bookmarks.new_bookmark.include_great_dragon, true,
						Data.options.bookmarks.new_bookmark.dragons,
						Data.options.bookmarks.new_bookmark.comment);
					t.tabBookmarksTargets();
				}
			},

			tabBookmarksTargets: function() {
				var t = Tabs.Bookmarks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabBookmarksTargets']).className = 'selected';
				$(UID['tabBookmarksTargets']).style.zIndex = 1;
				t.lastSubTab = 'tabBookmarksTargets';

				t.contentType = 1;
				var timer = null;

				var m = '<div class="' + UID['title'] + '">' + translate('Targets') + '</div>' + '	<div id=' + setUID('tabBookmarksTargets_TargetsList') + ' class=' + UID['status_ticker'] + ' style="height:380px; max-height:380px; width:540px; max-width:540px; overflow:auto ; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabBookmarks_Content']).innerHTML = m;

				setUID('tabBookmarks_TypeChoice');
				setUID('tabBookmarks_SortChoice');
				var m = '<table><tr>' + '<td align=right>&nbsp;<b>' + translate('Select') + ' ' + translate('Targets') + '</b></td>' + '<td>:&nbsp;<select id=' + UID['tabBookmarks_TypeChoice'] + '>' + '	<option value="3" ' + (Data.options.bookmarks.choice == 3 ? 'selected' : '') + '>' + translate('All') + '</option>' + '	<option value="1" ' + (Data.options.bookmarks.choice == 1 ? 'selected' : '') + '>' + translate('AnthropusCamp') + '</option>' + '	<option value="0" ' + (Data.options.bookmarks.choice == 0 ? 'selected' : '') + '>' + translate('City') + ' / ' + translate('Outpost') + '</option>' + '	<option value="2" ' + (Data.options.bookmarks.choice == 2 ? 'selected' : '') + '>' + translate('Wildernesses') + '</option>' + '</select>&nbsp;' + '</td>' + '<td align=right>&nbsp;<b>' + translate('Attack') + '</b></td>' + '<td>:&nbsp;<select id=' + UID['tabBookmarks_SortChoice'] + '>' + '	<option value="0" ' + (Data.options.bookmarks.sort == 0 ? 'selected' : '') + '>' + translate('By distance ascending') + '</option>' + '	<option value="1" ' + (Data.options.bookmarks.sort == 1 ? 'selected' : '') + '>' + translate('By distance descending') + '</option>' + '	<option value="2" ' + (Data.options.bookmarks.sort == 2 ? 'selected' : '') + '>' + translate('Back at the same time') + '</option>' + '</select>&nbsp;' + '</td>' + '</tr></table><br>';

				var el = [],
					si = [],
					ul = [],
					ligne = 0;
				m += '<table id=' + setUID('tabBookmarksTargets_Tab') + ' class=' + UID['row_style'] + ' width=100% style="white-space:nowrap">' + '	<tr class=' + UID['row_headers'] + '>' + '		<td width=9%>' + translate('Enable') + '</td>' + '		<td width=7%>' + translate('Dist') + '</td>' + '		<td width=7%>' + translate('Coords') + '</td>' + '		<td width=25% style="white-space:wrap">' + translate('Target') + '</td>' + '		<td width=25% style="white-space:wrap">' + translate('Troops') + '</td>' + '		<td width=7%>' + translate('GD') + '</td>' + '		<td width=20%>' + translate('Last attack') + '</td>' + '	</tr>';
				for (var i = 0; i < Data.options.bookmarks.targets.length; i++) {
					if (Data.options.bookmarks.choice == 3 || Data.options.bookmarks.choice == Data.options.bookmarks.targets[i].t) {
						var include_great_dragon = false;
						for (var j = 0; j < Seed.dragonList.length && !include_great_dragon; j++) {
							var dragon = Seed.dragonList[j];
							if (Data.options.bookmarks.targets[i].dragons[dragon.type]) include_great_dragon = true;
						}
						ligne++;
						var row_style = '';
						if (ligne % 2 == 1) row_style = 'style="background-color:White';
						else row_style = 'style="background-color:rgb(239,239,224)';
						if (!Data.options.bookmarks.targets[i].comment || Data.options.bookmarks.targets[i].comment == null || Data.options.bookmarks.targets[i].comment == '')
							row_style = row_style + '; border-bottom: 1px solid #898989;';
						m += '<tr valign=top ' + row_style + '">' + '	<td><input type=checkbox id=' + setUID('tabBookmarksTargets_CB_' + i) + ' ref=' + i + ' ' + (Data.options.bookmarks.targets[i].enabled ? 'checked' : '') + ' /></td>' + '	<td>' + Data.options.bookmarks.targets[i].d + '</td>' + '	<td align=center>' + Data.options.bookmarks.targets[i].x + ',' + Data.options.bookmarks.targets[i].y + '<br>(' + timestrShort(Data.options.bookmarks.targets[i].ti) + ')</td>' + '	<td align=left>' + Data.options.bookmarks.targets[i].type + '</td>' + '	<td align=left>' + getTroops(Data.options.bookmarks.targets[i].units, '<br>') + '</td>' + '	<td align=center>' + ((include_great_dragon) ? 'Y' : '') + '</td>' + '	<td align=left><span id=' + setUID('tabBookmarksTargets_Last_' + i) + '> --- </span><br>' + '	<input id=' + setUID('tabBookmarksTargets_Edit_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Edit') + '" />&nbsp &nbsp' + '	<input id=' + setUID('tabBookmarksTargets_Spy_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Spy') + '" />&nbsp &nbsp';
						if (Data.options.bookmarks.targets[i].id && Data.options.bookmarks.targets[i].id != '' && Data.options.bookmarks.targets[i].n && Data.options.bookmarks.targets[i].n != '') {
							var user_ids = Data.options.bookmarks.targets[i].id + '_' + Data.options.bookmarks.targets[i].n;
							var UIDMsg = setUID('tabBookmarksTargets_Msg_' + i);
							m += '	<input id=' + UIDMsg + ' ref=' + user_ids + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" />&nbsp &nbsp';
							ul.push(UIDMsg);
						}
						m += '	<input id=' + setUID('tabBookmarksTargets_Delete_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_red'] + '" style="width:auto !important;" type=submit value=" X " /></td>' + '</tr>';
						if (Data.options.bookmarks.targets[i].comment && Data.options.bookmarks.targets[i].comment != null && Data.options.bookmarks.targets[i].comment != '') {
							m += '<tr valign=top ' + row_style + '; border-bottom: 1px solid #898989;">' + '	<td>&nbsp</td><td colspan=5>' + Data.options.bookmarks.targets[i].comment + '</td><td>&nbsp</td></tr>';
						}
						el.push(UID['tabBookmarksTargets_CB_' + i]);
						si.push(i);
					}
				}
				$(UID['tabBookmarksTargets_TargetsList']).innerHTML = m + '</table>';
				$(UID['tabBookmarks_TypeChoice']).addEventListener('change', onTypeChoice, false);
				$(UID['tabBookmarks_SortChoice']).addEventListener('change', onSortChoice, false);
				for (var i = 0; i < el.length; i++) {
					$(el[i]).addEventListener('click', onCheckEnabled, false);
					var butRecall = $(UID['tabBookmarksTargets_Edit_' + i]);
					var butDelete = $(UID['tabBookmarksTargets_Delete_' + i]);
					var butSpy = $(UID['tabBookmarksTargets_Spy_' + i]);
					butRecall.addEventListener('click', editTarget, false);
					butDelete.addEventListener('click', deleteTarget, false);
					butSpy.addEventListener('click', butSpyNow, false);
					var tile = Data.options.bookmarks.targets[si[i]];
					if (!tile.ai || tile.ai == 0 || tile.ai == null || tile.ai != (Seed.player.alliance ? Seed.player.alliance.id : -1))
						setButtonStyle(butSpy, true, 'btn_green', 'btn_disabled');
					else
						setButtonStyle(butSpy, false, 'btn_green', 'btn_disabled');
				}
				for (var u = 0; u < ul.length; u++)
					$(ul[u]).addEventListener('click', onClickMsg, false);
				tick();

				function butSpyNow(event) {
					var n = toNum(event.target.getAttribute('ref'));
					buttonSpyNow(t.container, Data.options.bookmarks.targets[n]);
				}

				function editTarget(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.bookmarks.new_bookmark.x = Data.options.bookmarks.targets[n].x;
					Data.options.bookmarks.new_bookmark.y = Data.options.bookmarks.targets[n].y;
					Data.options.bookmarks.new_bookmark.type = Data.options.bookmarks.targets[n].type;
					Data.options.bookmarks.new_bookmark.level = Data.options.bookmarks.targets[n].level;
					Data.options.bookmarks.new_bookmark.id = Data.options.bookmarks.targets[n].id;
					Data.options.bookmarks.new_bookmark.n = Data.options.bookmarks.targets[n].n;
					Data.options.bookmarks.new_bookmark.ai = Data.options.bookmarks.targets[n].ai;
					Data.options.bookmarks.new_bookmark.units = cloneProps(Data.options.bookmarks.targets[n].units);
					Data.options.bookmarks.new_bookmark.dragons = cloneProps(Data.options.bookmarks.targets[n].dragons);
					Data.options.bookmarks.new_bookmark.include_great_dragon = Data.options.bookmarks.targets[n].inc;
					Data.options.bookmarks.new_bookmark.comment = Data.options.bookmarks.targets[n].comment;
					t.tabBookmarksEdit();
				}

				function deleteTarget(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.bookmarks.targets.splice(n, 1);
					t.tabBookmarksTargets();
				}

				function onCheckEnabled(event) {
					var ref = event.target.getAttribute('ref');
					Data.options.bookmarks.targets[ref].enabled = event.target.checked;
				}

				function onSortChoice(event) {
					var t = Tabs.Bookmarks;
					t.last_target_idx = -1;
					if (Data.options.bookmarks.enabled) {
						/*
						 * It would be very bad to leave attack on when
						 * switching targets. Imagine sending the troops for a
						 * wilderness to a city or an ant camp...
						 */
						clearTimeout(t.attackTimer);
						t.setBookmarksEnable(false);
						dispFeedback(UID['tabBookmarks_Feedback'], translate('Safe Mode') + ': ' + translate('Attacks') + ' ' + translate('Turned Off'));
					}
					/*
					 * Update distance and march duration for all saved
					 * bookmarks (case when own city has moved)
					 */
					for (var i = 0; i < Data.options.bookmarks.targets.length; i++) {
						Data.options.bookmarks.targets[i].d = getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Data.options.bookmarks.targets[i].x, Data.options.bookmarks.targets[i].y);
						Data.options.bookmarks.targets[i].ti = getMarchTime(Data.options.bookmarks.targets[i].x, Data.options.bookmarks.targets[i].y, Data.options.bookmarks.targets[i].units);
					}
					var el = event.target;
					Data.options.bookmarks.sort = toNum(el.options[el.selectedIndex].value);
					switch (Data.options.bookmarks.sort) {
						case 1:
							Data.options.bookmarks.targets.sort(function(a, b) {
								return b.d - a.d
							});
							break;
						case 2:
							Data.options.bookmarks.targets.sort(function(a, b) {
								return b.ti - a.ti
							});
							break;
						default:
							Data.options.bookmarks.targets.sort(function(a, b) {
								return a.d - b.d
							});
							break;
					}
					t.tabBookmarksTargets();
				}

				function onTypeChoice(event) {
					var t = Tabs.Bookmarks;
					t.last_target_idx = -1;
					if (Data.options.bookmarks.enabled) {
						/*
						 * It would be very bad to leave attack on when
						 * switching targets. Imagine sending the troops for a
						 * wilderness to a city or an ant camp...
						 */
						clearTimeout(t.attackTimer);
						t.setBookmarksEnable(false);
						dispFeedback(UID['tabBookmarks_Feedback'], translate('Safe Mode') + ': ' + translate('Attacks') + ' ' + translate('Turned Off'));
					}
					var el = event.target;
					Data.options.bookmarks.choice = toNum(el.options[el.selectedIndex].value);
					t.tabBookmarksTargets();
				}

				function tick() {
					var now = serverTime();
					var ts;
					clearTimeout(timer);
					if (!$(UID['tabBookmarksTargets_Tab']))
						return;
					for (var i = 0; i < Data.options.bookmarks.targets.length; i++) {
						var last = $(UID['tabBookmarksTargets_Last_' + i]);
						if (last == undefined) continue;
						if (is_null(Data.options.bookmarks.targets[i].last_attack)) ts = '---';
						else {
							var time = now - Data.options.bookmarks.targets[i].last_attack;
							if (time > 3600) ts = '<font color=#550000><b>' + timestr(time, false) + '</b></font>';
							else ts = timestr(time, false);
						}
						last.innerHTML = ts;
					}
					timer = setTimeout(tick, 5000);
				}
			},

			tabBookmarksStats: function() {
				var t = Tabs.Bookmarks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabBookmarksStats']).className = 'selected';
				$(UID['tabBookmarksStats']).style.zIndex = 1;
				t.lastSubTab = 'tabBookmarksStats';

				t.contentType = 2;

				var m = '<div class=' + UID['title'] + '>' + translate('Attacks Stats') + '</div>' + '<div id=' + setUID('tabBookmarksStats_Statbox') + ' class=' + UID['status_ticker'] + '>' + '<div id=' + setUID('tabBookmarksStats_Status') + '></div>' + '<div id=' + setUID('tabBookmarksStats_Percent') + '></div>' + '<br/>' + '<center><input id=' + setUID('tabBookmarksStats_Clear') + ' type=button value="' + translate('Clear Stats') + '" /></center>' + '<br></div>';

				$(UID['tabBookmarks_Content']).innerHTML = m;
				$(UID['tabBookmarksStats_Clear']).addEventListener('click', function() {
					t.clearStats();
					t.showStats();
				}, false);
				t.showStats();
			},

			tabBookmarksConfig: function() {
				var t = Tabs.Bookmarks;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabBookmarksConfig']).className = 'selected';
				$(UID['tabBookmarksConfig']).style.zIndex = 1;
				t.lastSubTab = 'tabBookmarksConfig';

				t.contentType = 3;

				var m = '<div class=' + UID['title'] + '>' + translate('Bookmarks Configuration') + '</div>' + '<div id=' + setUID('tabBookmarksConfig_Status') + ' class=' + UID['status_ticker'] + ' style="overflow:auto">' + '	<table class=' + UID['table'] + ' width=100%>' + '	<tr>' + '		<td width=50% class=right>' + translate('Delay Between Attacks') + ':&nbsp;</td>' + '		<td width=50%>' + '		<input class=short id=' + setUID('tabBookmarksConfig_DelayMin') + ' maxlength=4 type=text value="' + Data.options.bookmarks.delay_min + '" />&nbsp;' + translate('to') + '		<input class=short id=' + setUID('tabBookmarksConfig_DelayMax') + ' maxlength=4 type=text value="' + Data.options.bookmarks.delay_max + '" />&nbsp;' + translate('seconds') + '		</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Delete Battle Reports') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabBookmarksConfig_DelAttacks') + ' ' + (Data.options.bookmarks.delete_reports ? 'CHECKED ' : '') + ' type=checkbox /></td>' + '	</tr><tr>' + '		<td class=right>' + translate('Stop if any troops lost') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabBookmarksConfig_StopOnLoss') + ' ' + (Data.options.bookmarks.stop_on_loss ? 'CHECKED ' : '') + ' type=checkbox /></td>' + '	</tr><tr>' + '		<td class=right>' + translate('Maximum simultaneous marches') + ':&nbsp;</td>' + '		<td><input id=' + setUID('tabBookmarksConfig_MaxMarches') + ' class=short maxlength=2 type=text value="' + Data.options.bookmarks.max_marches + '" /></td>' + '	</tr></table>';
				$(UID['tabBookmarks_Content']).innerHTML = m;
				$(UID['tabBookmarksConfig_DelAttacks']).addEventListener('change', function(event) {
					Data.options.bookmarks.delete_reports = event.target.checked;
				}, false);
				$(UID['tabBookmarksConfig_StopOnLoss']).addEventListener('change', function(event) {
					Data.options.bookmarks.stop_on_loss = event.target.checked;
				}, false);
				$(UID['tabBookmarksConfig_DelayMin']).addEventListener('change', delayChanged, false);
				$(UID['tabBookmarksConfig_DelayMax']).addEventListener('change', delayChanged, false);
				$(UID['tabBookmarksConfig_MaxMarches']).addEventListener('change', maxMarchesChanged, false);

				function delayChanged(event) {
					var min = toNum($(UID['tabBookmarksConfig_DelayMin']).value);
					var max = toNum($(UID['tabBookmarksConfig_DelayMax']).value);
					if (min < MIN_DELAY || min > 3600 || (max - min) < 5) {
						var dial = new ModalDialog(t.container, 300, 150, '', true);
						dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Error') + '</b></center></div>';
						dial.getContentDiv().innerHTML = '<b>' + translate('Invalid delays') + '</b><br><br>' + translate('First value must be between') + ' ' + MIN_DELAY + ' ' + translate('and') + ' 3600. ' + translate('Second value must be at least') + ' 5 ' + translate('above the first value');
						return;
					}
					Data.options.bookmarks.delay_min = min;
					Data.options.bookmarks.delay_max = max;
				}

				function maxMarchesChanged(event) {
					var val = toNum($(UID['tabBookmarksConfig_MaxMarches']).value);
					if (val < 0 || val > Seed.cities[CAPITAL.id].figures.marches.maximum) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					event.target.style.backgroundColor = '';
					Data.options.bookmarks.max_marches = val;
				}
			},

			autoCheckTargets: function() {
				var t = Tabs.Bookmarks;
				var now = serverTime();
				var cityIdx = CAPITAL.id;
				var targetMsg, retryDelay, availableGeneral, attackUnits, marchCount = 0,
					p;
				clearTimeout(t.attackTimer);

				if (!Data.options.bookmarks.enabled) return;
				var cur_march = getMinDelay();
				marchCount = cur_march.count;
				retryDelay = cur_march.delay;

				var nextTarget = t.getNextTarget();
				if (nextTarget) {
					var targetMsg = nextTarget.type + ' ' + translate('at') + ' ' + nextTarget.x + '/' + nextTarget.y;
					var actionMsg = translate('Attack to ') + targetMsg;
					var feedback_element = UID['tabBookmarks_Feedback'];

					availableGeneral = getAvailableGeneral();
					var chk = checkMarch(actionMsg,
						feedback_element,
						marchCount,
						retryDelay,
						Marches.count.bookmark,
						Data.options.bookmarks.max_marches,
						availableGeneral, true);
					if (chk != 0) {
						t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
						return;
					}
					var greatDrag = null;
					if (nextTarget.inc) {
						if ((greatDrag = getAvailableDragon(true, nextTarget.dragons)) == null) {
							raiseMessage(actionMsg, feedback_element, 5, false, retryDelay);
							t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
							return;
						}
					}
					attackUnits = checkTroops(CAPITAL.id, nextTarget.units);
					if (attackUnits == null) {
						t.sendAttack(CAPITAL.id, nextTarget, availableGeneral, greatDrag, function(rslt) {
							var t = Tabs.Bookmarks,
								attackDelay, retryDelay;
							if (rslt) {
								t.last_target_idx = t.current_target_idx;
								if (Data.options.bookmarks.sort == 2) {
									var futureTarget = t.getNextTarget();
									if (futureTarget) {
										attackDelay = futureTarget.st;
										if (attackDelay < 5) attackDelay = 5;
									} else {
										attackDelay = Math.floor(Math.random() * (Data.options.bookmarks.delay_max - Data.options.bookmarks.delay_min + 1) + Data.options.bookmarks.delay_min);
									}
								} else {
									attackDelay = Math.floor(Math.random() * (Data.options.bookmarks.delay_max - Data.options.bookmarks.delay_min + 1) + Data.options.bookmarks.delay_min);
								}
								t.attackTimer = setTimeout(t.autoCheckTargets, attackDelay * 1000);
							} else {
								retryDelay = 30 * (t.attackErrors * t.attackErrors);
								if (rslt.status === 429) {
									retry_delay = E429_DELAY;
									raiseMessage(actionMsg + ' ' + translate('failed') + ' - <b>API</b> ', feedback_element, 6, false, retryDelay);
								} else if (rslt.status === 509) {
									retry_delay = 600;
									raiseMessage(actionMsg + ' ' + translate('failed') + ' - ', feedback_element, 6, false, retryDelay);
								}
								t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
							}
						});
						return;
					} else {
						raiseMessage(actionMsg, feedback_element, attackUnits, true, retryDelay);
						t.attackTimer = setTimeout(t.autoCheckTargets, retryDelay * 1000);
					}
				} else {
					t.last_target_idx = -1;
					clearTimeout(t.attackTimer);
					t.setBookmarksEnable(false);
					dispFeedback(feedback_element, translate('Requirements Unmet') + ': ' + translate('Attacks') + ' ' + translate('Turned Off'));
				}
			},
			clearStats: function() {
				var t = Tabs.Bookmarks;
				var now = serverTime();
				Data.stats.bookmarks = {
					start_at: now,
					run_time: 0,
					total_attacks: 0,
					loss: {},
					items: {},
					resources: {}
				};
				t.showStats();
			},
			getNextTarget: function() {
				var t = Tabs.Bookmarks;
				var attacks = Data.options.bookmarks.targets;
				if (attacks.length == 0) return;
				var target_idx = toNum(t.last_target_idx) + 1;
				if (target_idx > attacks.length) target_idx = 0;
				var found = false;
				var next_target = null;
				for (var i = target_idx; i < attacks.length && !found; i++) {
					if (attacks[i].enabled && (Data.options.bookmarks.choice == 3 || Data.options.bookmarks.choice == attacks[i].t)) {
						next_target = attacks[i];
						t.current_target_idx = i;
						found = true;
					}
				}
				if (next_target === null) return;
				return next_target;
			},
			gotBattleReport: function(rpt_b) {
				var t = Tabs.Bookmarks,
					has_loss = false;
				if (!rpt_b) return;
				var march_id = null;
				for (var id in Data.marches.bookmark) {
					var march = Data.marches.bookmark[id];
					if (march.general.id === rpt_b.report.attacker.general.id) {
						march_id = id;
						break;
					}
				}
				if (march_id && march_id != null) t.trackStats(march_id, rpt_b);

				var items = rpt_b.report.spoils.items;
				if (items.length !== 0) Seed.fetchPlayer({
					noCities: true
				});
				if (!Data.options.bookmarks.delete_reports && !Data.options.bookmarks.stop_on_loss) return;
				if (Data.options.bookmarks.stop_on_loss && rpt_b.report.attacker.name == Seed.player.name) {
					for (var p in rpt_b.report.attacker.units) {
						if (rpt_b.report.attacker.units[p][0] != rpt_b.report.attacker.units[p][1]) {
							has_loss = true;
							var ts = new Date(rpt_b.report_notification.created_at * 1000).myString();
							t.setBookmarksEnable(false);
							dispFeedback(UID['tabBookmarks_Feedback'], translate('Troops lost') + '! (' + ts + ')');
							actionLog(translate('Troops lost') + '! (' + ts + ')');
							return;
						}
					}
				}
				if (Data.options.bookmarks.delete_reports && rpt_b.report.attacker.name == Seed.player.name && !has_loss)
					Messages.deleteMessage(rpt_b.report_notification.id);
			},
			initializeTargets: function() {
				var t = Tabs.Bookmarks;
				var last_time = -1;
				for (var i = 0; i < Data.options.bookmarks.targets.length; i++) {
					if (Data.options.bookmarks.sort == 2 && Data.options.bookmarks.targets[i].enabled &&
						(Data.options.bookmarks.choice == 3 || Data.options.bookmarks.choice == Data.options.bookmarks.targets[i].t)) {
						if (last_time == -1) { /* first entry */
							Data.options.bookmarks.targets[i].st = 0;
						} else {
							var start_time = toNum((last_time * 2) - (Data.options.bookmarks.targets[i].ti * 2));
							Data.options.bookmarks.targets[i].st = start_time;
						}
						last_time = Data.options.bookmarks.targets[i].ti;
					} else {
						Data.options.bookmarks.targets[i].st = 0;
					}
				}
			},
			marchTick: function() {
				var t = Tabs.Bookmarks;
				clearTimeout(t.marchTimer);
				Marches.updateTable($(UID['tabBookmarks_Marches']), 'bookmark');
				t.marchTimer = setTimeout(t.marchTick, 1000);
			},
			sendAttack: function(cityIdx, target, general, great_dragon, notify) {
				var t = Tabs.Bookmarks;
				var now = serverTime();
				if (t.attackBusy) {
					dispFeedback(UID['tabBookmarks_Feedback'], translate('Error') + ': ' + translate('sendAttack is busy, no response from server?'));
					if (!t.requestTimer) t.requestTimer = setTimeout(function() {
						Tabs.Bookmarks.attackBusy = false;
					}, 10000);
					if (notify) notify(false);
					return;
				} else if (t.requestTimer) clearTimeout(t.requestTimer);
				var units = cloneProps(target.units);
				if (!is_null(great_dragon)) units[great_dragon] = 1;

				var targMsg = translate('Attack sent to') + ': ' + target.type + ' ' + translate('at') + ' ' + target.x + '/' + target.y;

				verboseLog(targMsg + ' ' + translate('attempted'));
				t.attackBusy = true;
				t.lastAttack = now;

				new MyAjax.marchSend(Seed.cities[cityIdx].id, target.x, target.y, general.id, units, 'bookmark', function(rslt) {
					t.attackBusy = false;
					if (rslt.ok && rslt.dat.result.success) {
						t.attackErrors = 0;
						verboseLog(targMsg + ' ' + translate('Successfully'));
						actionLog(targMsg);
						dispFeedback(UID['tabBookmarks_Feedback'], targMsg);
						target.last_attack = now;
						if (notify) notify(true);
					} else {
						t.attackErrors++;
						verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						actionLog(targMsg + ' ' + translate('failed'));
						dispFeedback(UID['tabBookmarks_Feedback'], targMsg + ' ' + translate('failed'));
						if (notify) notify(false);
					}
				});
			},
			setBookmarksEnable: function(onOff) {
				var t = Tabs.Bookmarks;
				var but = $(UID['tabBookmarks_OnOff']);
				clearTimeout(t.attackTimer);
				Data.options.bookmarks.enabled = onOff;
				if (onOff) {
					Messages.addBattleReportListener(t.gotBattleReport);
					but.value = translate('Attacking').toUpperCase();
					but.className = UID['btn_on'];
					t.initializeTargets();
					t.autoCheckTargets();
					t.running.start_at = serverTime();
					Data.stats.bookmarks.start_at = serverTime();
				} else {
					Messages.removeReportListener('bookmark', t.gotBattleReport);
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
					if (t.running.start_at !== 0)
						Data.stats.bookmarks.run_time += (serverTime() - t.running.start_at);
					dispFeedback(UID['tabBookmarks_Feedback'], '');
				}
			},
			showStats: function() {
				var div = $(UID['tabBookmarksStats_Status']);
				var t = Tabs.Bookmarks;

				if (div == null) return;
				var run_time = Data.stats.bookmarks.run_time;
				if (Data.options.bookmarks.enabled) run_time += (serverTime() - t.curRunStart);
				var trueRunTime = (run_time > 0) ? (run_time / 3600) : 1;

				var m = '<table class=' + UID['table'] + '>' + '	<tr>' + '		<td class=right>' + translate('Start Date') + ': </td>' + '		<td colspan=>' + new Date(Data.stats.bookmarks.start_at * 1000).myString() + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Run Time') + ': </td>' + '		<td>' + timestr(run_time, true) + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Attacks') + ': </td>' + '		<td>' + Data.stats.bookmarks.total_attacks + '</td>' + '	<tr valign=top align=right>' + '		<td class=right>' + translate('Troops lost') + ': </td>';
				var first = true;
				for (var name in Data.stats.bookmarks.loss) {
					var perHour = Math.round(Data.stats.bookmarks.loss[name] / trueRunTime);
					if (first) first = false;
					else m += '	<tr align=right><td></td>';
					m += '		<td>' + translate(name) + ':</td>' + '		<td>' + numf(Data.stats.bookmarks.loss[name], ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
				}
				m += '</tr><tr valign=top align=right>' + '		<td class=right>' + translate('Resources') + ': </td>';
				var first = true;
				for (var name in Data.stats.bookmarks.resources) {
					var perHour = Math.round(Data.stats.bookmarks.resources[name] / trueRunTime);
					if (first) first = false;
					else m += '	<tr align=right><td></td>';
					m += '			<td>' + translate(name) + ':</td>' + '			<td>' + numf(Data.stats.bookmarks.resources[name], ' ') + '</td>' + '			<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '		</tr>';
				}
				m += '<tr valign=top align=right>' + '		<td class=right>' + translate('Items') + ': </td>';
				var items = [];
				for (var name in Data.stats.bookmarks.items)
					items.push({
						desc: translate(name),
						qty: Data.stats.bookmarks.items[name]
					});
				if (items.length > 0) {
					items.sort(function(a, b) {
						a = a.desc.toLowerCase();
						b = b.desc.toLowerCase();
						if (a > b) return 1;
						if (a < b) return -1;
						return 0;
					});
					for (var i = 0; i < items.length; i++) {
						var perHour = Math.round(items[i].qty / trueRunTime);
						if (i > 0) m += '<tr align=right><td></td>';
						m += '		<td>' + items[i].desc + ':</td>' + '		<td>' + numf(items[i].qty, ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
					}
				}
				m += '</table>';
				div.innerHTML = m;
			},
			trackStats: function(marchId, rpt_st) {
				var t = Tabs.Bookmarks;
				if (DEBUG_MARCHES) debugLog('Tabs.Bookmarks.trackStats: ' + marchId);

				if (is_null(Data.stats.total.total_attacks)) Data.stats.total.total_attacks = 0;
				++Data.stats.bookmarks.total_attacks;
				++Data.stats.total.total_attacks;
				var res = rpt_st.report.spoils.resources;
				for (var p in res) {
					objAddTo(Data.stats.bookmarks.resources, p, toNum(res[p]), false);
					objAddTo(Data.stats.total.resources, p, toNum(res[p]), false);
				}
				var killRes = rpt_st.report.spoils.kill_items;
				for (var p in killRes) {
					objAddTo(Data.stats.bookmarks.resources, p, toNum(killRes[p]), false);
					objAddTo(Data.stats.total.resources, p, toNum(killRes[p]), false);
				}
				var items = rpt_st.report.spoils.items;
				for (var i = 0; i < items.length; i++) {
					objAddTo(Data.stats.bookmarks.items, items[i], 1, true);
					objAddTo(Data.stats.total.items, items[i], 1, true);
				}
				for (var p in rpt_st.report.attacker.units) {
					if (rpt_st.report.attacker.units[p][0] != rpt_st.report.attacker.units[p][1]) {
						var nb = toNum(rpt_st.report.attacker.units[p][0]) - toNum(rpt_st.report.attacker.units[p][1]);
						objAddTo(Data.stats.bookmarks.loss, p, nb, true);
						objAddTo(Data.stats.total.loss, p, nb, true);
					}
				}
				Data.marches.bookmark[marchId].has_report = true;
				t.showStats();
			},

			onUnload: function() {
				var t = Tabs.Bookmarks;
				if (Data.options.bookmarks.enabled && t.running.start_at != 0)
					Data.stats.bookmarks.run_time += (serverTime() - t.running.start_at);
				Data.options.bookmarks.current_tab = t.contentType;
			},
			show: function() {
				var t = Tabs.Bookmarks;
				t.marchTick();
				switch (t.contentType) {
					case 0:
						t.tabBookmarksEdit();
						break;
					case 1:
						t.tabBookmarksTargets();
						break;
					case 2:
						t.tabBookmarksStats();
						break;
					case 3:
						t.tabBookmarksConfig();
						break;
				}
			},
			hide: function() {
				var t = Tabs.Bookmarks;
				clearTimeout(t.marchTimer);
				Data.options.bookmarks.current_tab = t.contentType;
			}
		};
		/**
		 * ****************************** Bookmarks Tab
		 * *****************************
		 */


		/**
		 * ****************************** Inbox Tab
		 * *********************************
		 */
		Tabs.Inbox = {
			tabOrder: INBOX_TAB_ORDER,
			tabLabel: 'Inbox',
			tabDisabled: !INBOX_TAB_ENABLE,
			container: null,
			contentType: MESSAGES_ALL,
			lastSubTab: 'tabInboxAll',
			report_num: -1,
			current_message: null,
			first_get: true,
			checkMessagesBusy: false,
			checkMessagesError: false,
			message_list: [],
			/* Message deletion */
			year: [],
			month: [],
			day: [],
			msDate: [],
			tabTchatAllianceActive: false,
			tabTchatRealmActive: false,

			init: function(div) {
				var t = Tabs.Inbox;
				t.container = div;
				var m = '<div class=' + UID['title'] + '>' + translate('Messages') + '</div>' + '<div id=' + setUID('tabInbox_Status') + ' style="margin-bottom:5px !important">' + '	<table width=100%>' + '		<tr>' + '			<td align=center width=25%><input type=button value="' + translate('Retrieve all') + '" id=' + setUID('tabInbox_Refresh') + ' /></td>' + '			<td align=center width=25%><input type=button value="' + translate('Select all') + '" id=' + setUID('tabInbox_SelectAll') + ' /></td>' + '			<td align=center width=25%><input type=button value="' + translate('Unselect all') + '" id=' + setUID('tabInbox_UnselectAll') + ' /></td>' + '			<td align=center width=25%><input type=button value="' + translate('Delete') + '" id=' + setUID('tabInbox_Delete') + ' /></td>' + '		</tr>' + '	</table>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabInboxAll') + '>' + translate('All') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabInboxMessages') + '>' + translate('Messages') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabInboxReports') + '>' + translate('Reports') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabInboxDeletion') + '>' + translate('Mass deletion') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabInboxTchatRealm') + '>' + translate('Tchat') + ' ' + translate('world') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabInboxTchatAlliance') + '>' + translate('Tchat') + ' ' + translate('alliance') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabInbox_Content') + ' style="padding-top:0px; height:655px; ; max-height:655px; overflow-y:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabInbox_Refresh']).addEventListener('click', t.getAllPages, false);
				$(UID['tabInbox_SelectAll']).addEventListener('click', function() {
					t.onSelectAll(true);
				}, false);
				$(UID['tabInbox_UnselectAll']).addEventListener('click', function() {
					t.onSelectAll(false);
				}, false);
				$(UID['tabInbox_Delete']).addEventListener('click', t.deleteSelection, false);
				$(UID['tabInboxAll']).addEventListener('click', function() {
					t.tabInboxList(toNum(MESSAGES_ALL));
				}, false);
				$(UID['tabInboxMessages']).addEventListener('click', function() {
					t.tabInboxList(toNum(MESSAGES_ONLY));
				}, false);
				$(UID['tabInboxReports']).addEventListener('click', function() {
					t.tabInboxList(toNum(REPORTS_ONLY));
				}, false);
				$(UID['tabInboxDeletion']).addEventListener('click', t.tabInboxDeletion, false);
				$(UID['tabInboxTchatRealm']).addEventListener('click', t.tabInboxTchatRealm, false);
				$(UID['tabInboxTchatAlliance']).addEventListener('click', t.tabInboxTchatAlliance, false);
				setButtonStyle($(UID['tabInbox_SelectAll']), true, 'btn_green');
				setButtonStyle($(UID['tabInbox_UnselectAll']), true, 'btn_green');
				setButtonStyle($(UID['tabInbox_Delete']), true, 'btn_off');
				window.addEventListener('unload', t.onUnload, false);
				t.contentType = toNum(Data.options.inbox.current_tab, 0);
				t.show();
			},

			show: function() {
				var t = Tabs.Inbox;
				t.tabTchatRealmActive = false;
				t.tabTchatAllianceActive = false;
				if ($(UID['tabInbox_Refresh'])) {
					if (toNum(Messages.total_count) > toNum(Messages.known_count))
						setButtonStyle($(UID['tabInbox_Refresh']), true);
					else setButtonStyle($(UID['tabInbox_Refresh']), false);
				}
				if (!t.checkMessagesBusy) {
					switch (toNum(t.contentType, 0)) {
						case 3:
							t.tabInboxDeletion();
							break;
						default:
							t.tabInboxList(toNum(t.contentType, 0));
							break;
					}
				} else setTimeout(t.show, 100);
			},
			onUnload: function() {
				var t = Tabs.Inbox;
				logit('===============  Tabs.Inbox.onUnload');
				Data.options.inbox.current_tab = t.contentType;
			},
			hide: function() {
				var t = Tabs.Inbox;
				t.tabTchatRealmActive = false;
				t.tabTchatAllianceActive = false;
			},

			tabInboxList: function(type) {
				var t = Tabs.Inbox;
				t.contentType = type;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInboxTchatAlliance']).className = '';
				$(UID['tabInboxTchatAlliance']).style.zIndex = 0;
				$(UID['tabInboxTchatRealm']).className = '';
				$(UID['tabInboxTchatRealm']).style.zIndex = 0;
				switch (type) {
					case MESSAGES_ONLY:
						$(UID['tabInboxMessages']).className = 'selected';
						$(UID['tabInboxMessages']).style.zIndex = 1;
						t.lastSubTab = 'tabInboxMessages';
						var head_text = translate('Messages');
						t.message_list = t.getMessages('messages');
						break;
					case REPORTS_ONLY:
						$(UID['tabInboxReports']).className = 'selected';
						$(UID['tabInboxReports']).style.zIndex = 1;
						t.lastSubTab = 'tabInboxReports';
						var head_text = translate('Reports');
						t.message_list = t.getMessages('reports');
						break;
					default:
						$(UID['tabInboxAll']).className = 'selected';
						$(UID['tabInboxAll']).style.zIndex = 1;
						t.lastSubTab = 'tabInboxAll';
						var head_text = translate('All');
						t.message_list = t.getMessages('all');
						break;
				}
				if (t.first_get && !Data.options.disable_inbox) {
					t.first_get = false;
					t.refreshFirstPage();
				}
				var m = '<div id=' + setUID('tabInbox_ListContent') + ' style="height:640px">' + '	<div class=' + UID['title'] + '>' + head_text + '</div>' + '	<div id=' + setUID('tabInbox_List') + ' class=' + UID['status_ticker'] + ' style="height:620px; max-height:620px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabInbox_Content']).innerHTML = m;

				var m = '<table class=' + UID['row_style'] + ' width=100%>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td width=2%>&nbsp</td>' + '		<td width=98%><table width=100%><tr>' + '			<td width=30%>' + translate('Date') + '</td>' + '			<td width=26%>' + translate('From') + '</td>' + '			<td width=44%>' + translate('Subject') + '</td>' + '		</tr></table></td>' + '	</tr>';
				var sel = [],
					vw1 = [];
				for (var i = 0; i < t.message_list.length; i++) {
					var style = '',
						bckgrd = '';
					if (t.message_list[i].unread) var style = 'font-weight:bold;';
					if (t.message_list[i].checked) var bckgrd = 'background-color:grey;';
					m += '<tr style="border-bottom: 1px solid #898989; ' + style + bckgrd + '">' + '	<td>&nbsp;<input type=checkbox id=' + setUID('tabInbox_SelectMsg_' + i) + ' ref="' + t.message_list[i].id + '_' + i + '" ' + (Messages.details[t.message_list[i].id].checked ? 'checked' : '') + ' />&nbsp;</td>' + '	<td><a><div id=' + setUID('tabInbox_ViewMsg_' + i) + ' ref="' + t.message_list[i].id + '" style="white-space:pre-wrap;"><table width=100%><tr>' + '		<td width=30%>' + new Date(t.message_list[i].created_at * 1000).toLocaleString() + '</td>' + '		<td width=26%>' + (t.message_list[i].from == null ? 'Dragons of Atlantis' : t.message_list[i].from.name) + '</td>' + '		<td width=44%>' + t.message_list[i].summary + '</td>' + '	</tr></table></div></a></td>' + '</tr>';
					sel.push(UID['tabInbox_SelectMsg_' + i]);
					vw1.push(UID['tabInbox_ViewMsg_' + i]);
				}
				$(UID['tabInbox_List']).innerHTML = m + '</table>';
				for (var i = 0; i < sel.length; i++)
					$(sel[i]).addEventListener('click', function(event) {
						var ids = event.target.getAttribute('ref').split('_');
						Messages.details[ids[0]].checked = event.target.checked;
						var parentElement = event.target.parentNode;
						while (parentElement.tagName != 'TR')
							parentElement = parentElement.parentNode;
						if (ids[1] % 2 == 1)
							bckgrd = 'rgba(255, 255, 255, 0.0)';
						else bckgrd = 'rgba(255, 255, 255, 1.0)';
						parentElement.style.backgroundColor = (event.target.checked ? 'grey' : bckgrd);
					}, false);
				for (var i = 0; i < vw1.length; i++) {
					$(vw1[i]).addEventListener('click', showMessage, false);
				}

				function showMessageDelay() {
					var t = Tabs.Inbox;
					if (t.checkMessagesBusy) setTimeout(showMessageDelay, 1000);
					else displayMessage();
				}

				function showMessage(event) {
					var t = Tabs.Inbox,
						element;
					if (event.target.tagName == 'DIV')
						element = event.target;
					else {
						var parentElement = event.target.parentNode;
						while (parentElement.tagName != 'DIV')
							parentElement = parentElement.parentNode;
						element = parentElement;
					}
					var id = element.getAttribute('ref');
					t.current_message = id;
					if (is_null(Messages.details[id].report) && !t.checkMessagesBusy) {
						t.checkMessagesBusy = true;
						MyAjax.messageDetail(id, function(rslt) {
							var t = Tabs.Inbox;
							t.checkMessagesBusy = false;
							if (!rslt) return;
						});
					}
					showMessageDelay();
				}

				function displayMessage() {
					var t = Tabs.Inbox,
						m = '',
						rpt = '';
					/*
					 * logit('last report =
					 * '+inspectObj(Messages.details[t.current_message],8,1));
					 */
					var report = Messages.details[t.current_message];
					var msg_type = report.type;
					switch (msg_type) {
						case 'BattleReport':
							rpt = Messages.displayBattleReport(report);
							break;
						case 'CurseReport':
							rpt = Messages.displayCurseReport(report);
							break;
						case 'Leaderboard::TournamentAwardMessage':
							rpt = Messages.displayTournamentAwardMessage(report);
							break;
						case 'Messages::Breeding':
							rpt = Messages.displayBreedingReport(report);
							break;
						case 'Messages::Hatching':
							rpt = Messages.displayHatchingReport(report);
							break;
						case 'SentinelWarning':
							rpt = Messages.displaySentinelReport(report);
							break;
						case 'SpyReport':
							rpt = Messages.displaySpyReport(report);
							break;
						case 'ReinforcementsReport':
							rpt = Messages.displayReinforcement(report);
							break;
						case 'TradingReport':
							rpt = Messages.displayTradingReport(report);
							break;
						case 'TransportMarchReport':
							rpt = Messages.displayTransportReport(report);
							break;
						case 'ChallengePrizeReport':
							;
						case 'ContestPrizeReport':
							rpt = Messages.displayContestPrizeReport(report);
							break;
						case 'PlayerMessage':
						case 'AllianceMessage':
						case 'SystemMessage':
						case 'TargetedMessage':
							rpt = Messages.displayMessage(report);
							break;
						default:
							alert('Unknown message type ' + msg_type + ' (message id = ' + t.current_message + ')');
					}
					var button2 = '';
					if (report.from)
						button2 = '<input type=button value="' + translate('Reply') + '" id=' + setUID('MsgDisp_Answer') + ' />';
					else
						button2 = '&nbsp;';
					m += '<center><div id=' + setUID('displayMsg_ReportContent') + ' style="height:565px; max-height:565px; width:100%; max-width:100%; overflow-y:auto;">' + rpt + '</div>' + '<br><table width=90%><tr>' + '	<td align=center width=33%><input type=button value="' + translate('Close') + '" id=' + setUID('MsgDisp_Close') + ' /></td>' + '	<td align=center width=33%>' + button2 + '</td>' + '	<td align=center width=33%><input type=button value="' + translate('Delete') + '" id=' + setUID('MsgDisp_Delete') + ' /></td>' + '</tr></table></center>';
					$(UID['tabInbox_List']).innerHTML = m;
					setButtonStyle($(UID['MsgDisp_Delete']), true, 'btn_off');
					$(UID['MsgDisp_Close']).addEventListener('click', function() {
						t.current_message = null;
						t.show();
					}, false);

					if ($(UID['MsgDisp_Answer']))
						$(UID['MsgDisp_Answer']).addEventListener('click', function() {
							dialogSendMsg(report.from.name, report.from.id, true);
						}, false);
					$(UID['MsgDisp_Delete']).addEventListener('click', function() {
						Messages.deleteSingleMsg(report.id, function() {
							t.current_message = null;
							t.show();
						})
					}, false);
				}
			},
			tabInboxDeletion: function() {
				var t = Tabs.Inbox;
				t.contentType = 3;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInboxTchatAlliance']).className = '';
				$(UID['tabInboxTchatAlliance']).style.zIndex = 0;
				$(UID['tabInboxTchatRealm']).className = '';
				$(UID['tabInboxTchatRealm']).style.zIndex = 0;
				$(UID['tabInboxDeletion']).className = 'selected';
				$(UID['tabInboxDeletion']).style.zIndex = 1;
				t.lastSubTab = 'tabInboxDeletion';

				var now = new Date();
				t.year[0] = 2010;
				t.month[0] = 10;
				t.day[0] = 1;
				t.year[1] = now.getFullYear();
				t.month[1] = now.getMonth() + 1;
				t.day[1] = now.getDate();
				t.msDate[0] = 0;
				t.msDate[1] = 0;

				var m = '<div id=' + setUID('tabInbox_DelContent') + ' style="height:640px">' + '<div class=' + UID['title'] + ' style="margin-bottom:10px">' + translate('Mass deletion of messages') + '</div>' + '<table class=' + UID['table'] + '>' + '	<tr valign=top>' + '		<td><b>' + translate('Delete messages of this type') + ': </b></td>' + '		<td>' + '		<select id=' + setUID('tabOptions_msgType') + ' size=1>' + '			<option value=0 ' + (Data.options.messages_delete.type == MESSAGES_ALL ? 'selected' : '') + '>' + translate('All types') + '</option>' + '			<option value=1 ' + (Data.options.messages_delete.type == MESSAGES_ONLY ? 'selected' : '') + '>' + translate('Messages') + '</option>' + '			<option value=2 ' + (Data.options.messages_delete.type == REPORTS_ONLY ? 'selected' : '') + '>' + translate('Reports') + '</option>' + '		</select>' + '		</td>' + '	</tr><tr valign=top>' + '		<td  style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top>' + '		<td><b><i>' + translate('Messages') + ': </i></b></td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabOptions_MsgG') + ' type=checkbox ' + (Data.options.messages_delete.msgGame ? ' CHECKED ' : '') + ' /> ' + translate('Game messages') + '</label></td>' + '		<td><label><input id=' + setUID('tabOptions_MsgP') + ' type=checkbox ' + (Data.options.messages_delete.msgPlayer ? ' CHECKED ' : '') + ' /> ' + translate('Player messages') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabOptions_MsgS') + ' type=checkbox ' + (Data.options.messages_delete.msgSentinel ? ' CHECKED ' : '') + ' /> ' + translate('Sentinel messages') + '</label></td>' + '		<td><label><input id=' + setUID('tabOptions_MsgA') + ' type=checkbox ' + (Data.options.messages_delete.msgAlliance ? ' CHECKED ' : '') + ' /> ' + translate('Alliance messages') + '</label></td>' + '	</tr><tr valign=top>' + '		<td  style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top>' + '		<td><b><i>' + translate('Reports') + ': </i></b></td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabOptions_RepA') + ' type=checkbox ' + (Data.options.messages_delete.rptAnthropus ? ' CHECKED ' : '') + ' /> ' + translate('Camps/wilds attack reports') + '</label></td>' + '		<td><label><input id=' + setUID('tabOptions_RepT') + ' type=checkbox ' + (Data.options.messages_delete.rtpTransport ? ' CHECKED ' : '') + ' /> ' + translate('Transport reports') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabOptions_RepS') + ' type=checkbox ' + (Data.options.messages_delete.rptSpy ? ' CHECKED ' : '') + ' /> ' + translate('Spy reports') + '</label></td>' + '		<td><label><input id=' + setUID('tabOptions_RepF') + ' type=checkbox ' + (Data.options.messages_delete.rptReinforcement ? ' CHECKED ' : '') + ' /> ' + translate('Reinforcement reports') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabOptions_RepB') + ' type=checkbox ' + (Data.options.messages_delete.rptBattle ? ' CHECKED ' : '') + ' /> ' + translate('Battle notes') + '</label></td>' + '		<td><label><input id=' + setUID('tabOptions_RepC') + ' type=checkbox ' + (Data.options.messages_delete.rptCurse ? ' CHECKED ' : '') + ' /> ' + translate('Curse reports') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabOptions_RepTr') + ' type=checkbox ' + (Data.options.messages_delete.rptTrading ? ' CHECKED ' : '') + ' /> ' + translate('trading-report') + '</label></td>' + '		<td><label><input id=' + setUID('tabOptions_RepDr') + ' type=checkbox ' + (Data.options.messages_delete.rptBreeding ? ' CHECKED ' : '') + ' /> ' + translate('Sanctuary reports') + '</label></td>' + '	</tr><tr valign=top>' + '		<td  style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top>' + '		<td><b><i>' + translate('Exception') + ': </i></b></td>' + '	</tr><tr valign=top>' + '		<td colspan=2><label><input id=' + setUID('tabOptions_ExcM') + ' type=checkbox ' + (Data.options.messages_delete.rptExceptMyAttacks ? ' CHECKED ' : '') + ' /> ' + translate('Keep battle reports of my attacks on other players') + '</label></td>' + '	</tr><tr valign=top>' + '		<td colspan=2><label><input id=' + setUID('tabOptions_ExcY') + ' type=checkbox ' + (Data.options.messages_delete.rptExceptYourAttacks ? ' CHECKED ' : '') + ' /> ' + translate('Keep battle reports of attacks from other players') + '</label></td>' + '	</tr><tr valign=top>' + '		<td  style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top>' + '		<td colspan=2><b><i>' + translate('Date range') + ': </i></b>&nbsp &nbsp<input id=' + setUID('tabOptions_ChkD') + ' type=checkbox ' + (Data.options.messages_delete.dateAll ? ' CHECKED ' : '') + ' /> ' + translate('All') + '</label></td>' + '	</tr><tr valign=top>';
				for (var type = 0; type < 2; type++) {
					m += '<td>' + (type == 0 ? translate('From') : translate('To')) + ' : ';
					m += '<select id=' + setUID('tabOptions_DD' + type) + ' size=1>';
					for (var i = 1; i < 32; i++)
						m += '<option value=' + i + (i == t.day[type] ? ' selected' : '') + '>' + (i < 10 ? '0' : '') + i + '</option>';
					m += '</select>';
					m += '<select id=' + setUID('tabOptions_DM' + type) + ' size=1>';
					for (var i = 1; i < 13; i++)
						m += '<option value=' + i + (i == t.month[type] ? ' selected' : '') + '>' + (i < 10 ? '0' : '') + i + '</option>';
					m += '</select>';
					m += '<select id=' + setUID('tabOptions_DY' + type) + ' size=1>';
					for (var i = 2010; i < t.year[1] + 1; i++)
						m += '<option value=' + i + (i == t.year[type] ? ' selected' : '') + '>' + i + '</option>';
					m += '</select></td>';
				}
				m += '</tr><tr valign=top>' + '		<td  style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top>' + '		<td colspan=2 align=center><br>' + '		<label><input id=' + setUID('tabOptions_ButDel') + ' type=button value="' + translate('Delete now') + '" /></label>' + '		</td>' + '	</tr>' + '</table>' + '</div>';
				$(UID['tabInbox_Content']).innerHTML = m;
				$(UID['tabOptions_msgType']).addEventListener('change', ctlChanged, false);
				$(UID['tabOptions_MsgG']).addEventListener('click', function(event) {
					Data.options.messages_delete.msgGame = event.target.checked
				}, false);
				$(UID['tabOptions_MsgP']).addEventListener('click', function(event) {
					Data.options.messages_delete.msgPlayer = event.target.checked
				}, false);
				$(UID['tabOptions_MsgS']).addEventListener('click', function(event) {
					Data.options.messages_delete.msgSentinel = event.target.checked
				}, false);
				$(UID['tabOptions_MsgA']).addEventListener('click', function(event) {
					Data.options.messages_delete.msgAlliance = event.target.checked
				}, false);
				$(UID['tabOptions_RepA']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptAnthropus = event.target.checked
				}, false);
				$(UID['tabOptions_RepT']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptTransport = event.target.checked
				}, false);
				$(UID['tabOptions_RepS']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptSpy = event.target.checked
				}, false);
				$(UID['tabOptions_RepB']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptBattle = event.target.checked
				}, false);
				$(UID['tabOptions_RepF']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptReinforcement = event.target.checked
				}, false);
				$(UID['tabOptions_RepC']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptCurse = event.target.checked
				}, false);
				$(UID['tabOptions_RepTr']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptTrading = event.target.checked
				}, false);
				$(UID['tabOptions_RepDr']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptBreeding = event.target.checked
				}, false);
				$(UID['tabOptions_ExcM']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptExceptMyAttacks = event.target.checked
				}, false);
				$(UID['tabOptions_ExcY']).addEventListener('click', function(event) {
					Data.options.messages_delete.rptExceptYourAttacks = event.target.checked
				}, false);
				$(UID['tabOptions_ChkD']).addEventListener('click', function(event) {
					Data.options.messages_delete.dateAll = event.target.checked;
					disableDates();
				}, false);
				$(UID['tabOptions_MsgG']).addEventListener('change', function(event) {
					Data.options.messages_delete.msgGame = event.target.checked
				}, false);
				$(UID['tabOptions_MsgP']).addEventListener('change', function(event) {
					Data.options.messages_delete.msgPlayer = event.target.checked
				}, false);
				$(UID['tabOptions_MsgS']).addEventListener('change', function(event) {
					Data.options.messages_delete.msgSentinel = event.target.checked
				}, false);
				$(UID['tabOptions_MsgA']).addEventListener('change', function(event) {
					Data.options.messages_delete.msgAlliance = event.target.checked
				}, false);
				$(UID['tabOptions_RepA']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptAnthropus = event.target.checked
				}, false);
				$(UID['tabOptions_RepT']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptTransport = event.target.checked
				}, false);
				$(UID['tabOptions_RepS']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptSpy = event.target.checked
				}, false);
				$(UID['tabOptions_RepB']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptBattle = event.target.checked
				}, false);
				$(UID['tabOptions_RepF']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptReinforcement = event.target.checked
				}, false);
				$(UID['tabOptions_RepC']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptCurse = event.target.checked
				}, false);
				$(UID['tabOptions_RepTr']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptTrading = event.target.checked
				}, false);
				$(UID['tabOptions_RepDr']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptBreeding = event.target.checked
				}, false);
				$(UID['tabOptions_ExcM']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptExceptMyAttacks = event.target.checked
				}, false);
				$(UID['tabOptions_ExcY']).addEventListener('change', function(event) {
					Data.options.messages_delete.rptExceptYourAttacks = event.target.checked
				}, false);
				$(UID['tabOptions_ChkD']).addEventListener('change', function(event) {
					Data.options.messages_delete.dateAll = event.target.checked;
					disableDates();
				}, false);
				for (var type = 0; type < 2; type++) {
					$(UID['tabOptions_DD' + type]).addEventListener('change', ctlChanged, false);
					$(UID['tabOptions_DM' + type]).addEventListener('change', ctlChanged, false);
					$(UID['tabOptions_DY' + type]).addEventListener('change', ctlChanged, false);
					disableCheckMsgsRpts(false);
					disableDates();
				}
				$(UID['tabOptions_ButDel']).addEventListener('click', beforeDeleteReport, false);

				function ctlChanged(event) {
					var t = Tabs.Inbox;
					var elem = $(event.target.id);
					var value = toNum(elem.value);
					elem.value = value;
					if (event.target.id == UID['tabOptions_msgType']) {
						Data.options.messages_delete.type = value;
						disableCheckMsgsRpts(true);
					} else {
						for (var type = 0; type < 2; type++) {
							if (event.target.id == UID['tabOptions_DD' + type]) t.day[type] = value;
							else if (event.target.id == UID['tabOptions_DM' + type]) t.month[type] = value;
							else if (event.target.id == UID['tabOptions_DY' + type]) t.year[type] = value;
						}
					}
				}

				function disableDates() {
					for (var type = 0; type < 2; type++) {
						$(UID['tabOptions_DD' + type]).disabled = Data.options.messages_delete.dateAll;
						$(UID['tabOptions_DM' + type]).disabled = Data.options.messages_delete.dateAll;
						$(UID['tabOptions_DY' + type]).disabled = Data.options.messages_delete.dateAll;
					}
				}

				function disableCheckMsgsRpts(byCtl) {
					disableCheckMessages(false);
					disableCheckReports(false);
					setCheckMessages((Data.options.messages_delete.type != REPORTS_ONLY), byCtl);
					setCheckReports((Data.options.messages_delete.type != MESSAGES_ONLY), byCtl);
					if (Data.options.messages_delete.type != MESSAGES_ALL) {
						disableCheckMessages((Data.options.messages_delete.type == REPORTS_ONLY));
						disableCheckReports((Data.options.messages_delete.type == MESSAGES_ONLY));
					}
				}

				function disableCheckMessages(OnOff) {
					$(UID['tabOptions_MsgG']).disabled = OnOff;
					$(UID['tabOptions_MsgP']).disabled = OnOff;
					$(UID['tabOptions_MsgS']).disabled = OnOff;
					$(UID['tabOptions_MsgA']).disabled = OnOff;
				}

				function setCheckMessages(OnOff, byCtl) {
					$(UID['tabOptions_MsgG']).checked = OnOff;
					$(UID['tabOptions_MsgP']).checked = OnOff;
					$(UID['tabOptions_MsgS']).checked = OnOff;
					$(UID['tabOptions_MsgA']).checked = OnOff;
					if (byCtl) {
						Data.options.messages_delete.msgGame = OnOff;
						Data.options.messages_delete.msgPlayer = OnOff;
						Data.options.messages_delete.msgSentinel = OnOff;
						Data.options.messages_delete.msgAlliance = OnOff;
					}
				}

				function disableCheckReports(OnOff) {
					$(UID['tabOptions_RepA']).disabled = OnOff;
					$(UID['tabOptions_RepT']).disabled = OnOff;
					$(UID['tabOptions_RepS']).disabled = OnOff;
					$(UID['tabOptions_RepB']).disabled = OnOff;
					$(UID['tabOptions_RepF']).disabled = OnOff;
					$(UID['tabOptions_RepC']).disabled = OnOff;
					$(UID['tabOptions_RepTr']).disabled = OnOff;
					$(UID['tabOptions_RepDr']).disabled = OnOff;
					$(UID['tabOptions_ExcM']).disabled = OnOff;
					$(UID['tabOptions_ExcY']).disabled = OnOff;
				}

				function setCheckReports(OnOff, byCtl) {
					$(UID['tabOptions_RepA']).checked = OnOff;
					$(UID['tabOptions_RepT']).checked = OnOff;
					$(UID['tabOptions_RepS']).checked = OnOff;
					$(UID['tabOptions_RepB']).checked = OnOff;
					$(UID['tabOptions_RepF']).checked = OnOff;
					$(UID['tabOptions_RepC']).checked = OnOff;
					$(UID['tabOptions_RepTr']).checked = OnOff;
					$(UID['tabOptions_RepDr']).checked = OnOff;
					$(UID['tabOptions_ExcM']).checked = OnOff;
					$(UID['tabOptions_ExcY']).checked = OnOff;
					if (byCtl) {
						Data.options.messages_delete.rptAnthropus = OnOff;
						Data.options.messages_delete.rptTransport = OnOff;
						Data.options.messages_delete.rptSpy = OnOff;
						Data.options.messages_delete.rptBattle = OnOff;
						Data.options.messages_delete.rptReinforcement = OnOff;
						Data.options.messages_delete.rptCurse = OnOff;
						Data.options.messages_delete.rptTrading = OnOff;
						Data.options.messages_delete.rptBreeding = OnOff;
						Data.options.messages_delete.rptExceptMyAttacks = OnOff;
						Data.options.messages_delete.rptExceptYourAttacks = OnOff;
					}
				}

				function beforeDeleteReport() {
					var t = Tabs.Inbox,
						opts = Data.options.messages_delete;
					if (t.checkMessagesBusy) return false;
					var leastOneCheck = false;
					if (opts.type != REPORTS_ONLY && (opts.msgGame || opts.msgPlayer || opts.msgSentinel || opts.msgAlliance))
						leastOneCheck = true;
					if ((!leastOneCheck && opts.type != MESSAGES_ONLY) &&
						(opts.rptAnthropus || opts.rptTransport || opts.rptSpy || opts.rptBattle ||
							opts.rptReinforcement || opts.rptCurse || opts.rptTrading || opts.rptBreeding))
						leastOneCheck = true;
					if (!leastOneCheck) {
						var dial = new ModalDialog(t.container, 300, 150, '', true);
						dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Error') + '</b></center></div>';
						dial.getContentDiv().innerHTML = '<B>' + translate('Select at least one type of message or report to delete') + ' !</b>';
						return;
					}
					if (!opts.dateAll) {
						for (type = 0; type < 2; type++) {
							if (!isValidDate(t.day[type], t.month[type], t.year[type])) {
								var dial = new ModalDialog(t.container, 300, 150, '', true);
								dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Error') + '</b></center></div>';
								dial.getContentDiv().innerHTML = '<B>' + (type == 0 ? translate('Invalid date From') : translate('Invalid date To')) + '" !</b>';
								return;
							}
							t.msDate[type] = Date.parse(new Date(Date.UTC(t.year[type], t.month[type] - 1, t.day[type], 0, 0, 0))) / 1000;
						}
						if (t.msDate[1] < t.msDate[0]) {
							var dial = new ModalDialog(t.container, 300, 150, '', true);
							dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Error') + '</b></center></div>';
							dial.getContentDiv().innerHTML = '<B>' + translate('Invalid date range') + ' !</b>';
							return;
						}
						t.msDate[1] += 86400;
					}
					Messages.messageDeletion = true;
					t.checkMessagesBusy = true;
					deleteMessages(function() {
						logit(translate('Messages deleted'));
						Tabs.Inbox.checkMessagesBusy = false;
						Messages.messageDeletion = false;
						Tabs.Inbox.show();
					});

					function isValidDate(day, month, year) {
						var result = false;
						var daysMonth;
						if ((month < 8 && month % 2 == 1) || (month > 7 && month % 2 == 0)) daysMonth = 31;
						else if (month != 2) daysMonth = 30;
						else if (isLeapYear(year)) daysMonth = 29;
						else daysMonth = 28;
						if (day > 0 && day < daysMonth && month > 0 && month < 13) result = true;
						return result;
					}

					function isLeapYear(year) {
						var result = false;
						if (year % 4 == 0) {
							result = true;
							if (year % 100 == 0 && year % 400 != 0) result = false;
						}
						return result;
					}
				}

				function deleteMessages(notify) {
					var t = Tabs.Inbox;
					progressBar.init(800 + Math.randRange(1, 50), 100, 300, 150, translate('Message'), 200, true, t.container);
					progressBar.start({
						steps: 100,
						delay: 1,
						byCount: true,
						title: translate('Message(s) deletion in progress') + '...',
						stepText: translate('Please wait...')
					});
					Messages.dealMessages('del', t.msDate, callback);

					function callback(dat) {
						if (dat == null) {
							Tabs.Inbox.checkMessagesError = true;
							progressBarPop.getContentDiv().innerHTML = '<B>' + translate('Error while deleting messages') + '</B>';
							progressBarPop.allowClose(true);
							if (notify) notify(false);
							return;
						}
						if (dat.done) {
							actionLog(translate('Deletion of messages') + ' ' + translate('complete') + '. ' + dat.count + ' ' + translate('messages deleted'));
							progressBarPop.getContentDiv().innerHTML = '<B>' + dat.count + ' ' + translate('messages deleted') + '</B>';
							progressBarPop.allowClose(true);
							if (notify) notify(true);
						}
					}
				}
			},
			tabInboxTchatAlliance: function() {
				var t=Tabs.Inbox;
				t.tabTchatRealmActive = false;
				t.tabTchatAllianceActive = true;
				var bckgrd;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInboxTchatRealm']).className = '';
				$(UID['tabInboxTchatRealm']).style.zIndex = 0;
				$(UID['tabInboxTchatAlliance']).className = 'selected';
				$(UID['tabInboxTchatAlliance']).style.zIndex = 1;
				var m = '<div style="height:640px">' 
				      + '	<div class=' + UID['title'] + '>' + translate('Tchat') + ' ' + Seed.player.alliance.name + '</div>' 
					  + '	<div id=' + setUID('tabInbox_TchatAlliance') + ' class=' + UID['status_ticker'] + ' style="height:620px; max-height:620px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' 
					  + '</div>';
				$(UID['tabInbox_Content']).innerHTML = m;
				
				var m = '<table class=' + UID['row_style'] + ' width=100%>' 
					  + '	<tr class=' + UID['row_headers'] + '>' 
					  + '			<td width=15%>' + translate('Date') + '</td>' 
					  + '			<td width=20%>' + translate('From') + '</td>' 
					  + '			<td width=55%>' + translate('Subject') + '</td>' 
					  + '			<td width=10%>' + translate('Action') + '</td>' 
					  + '	</tr>';

				var bm = [];
				for (var i = Data.options.tchat.tAlliance.length-1; i >=0 ; i--) {
					var UIDMsg = setUID('tabInboxTchatAlliance_BtnMsg'+i);
					if (i % 2 == 1) {
						bckgrd = 'rgba(255, 255, 255, 0.0)';
					} else {
						bckgrd = 'rgba(255, 255, 255, 1.0)';
					}
				
					m += '<tr style="border-bottom: 1px solid #898989; background-color:' + bckgrd + ';">' 
					  + '		<td style="white-space:nowrap">' + new Date(Data.options.tchat.tAlliance[i].time).toLocaleString() + '</td>' 
					  + '		<td style="white-space:nowrap" title="' + translate('Alliance') + ' : ' + Data.options.tchat.tAlliance[i].alliance + '\n ' + translate('Might') + ':' + numf(Data.options.tchat.tAlliance[i].power) + '" >' + Data.options.tchat.tAlliance[i].name + '</td>' 
					  + '		<td>' + wordwrap(Data.options.tchat.tAlliance[i].text, 45, '<br />',true) + '</td>' 
					  + '		<td><input id=' + UIDMsg + ' ref="' + Data.options.tchat.tAlliance[i].id + '_' + Data.options.tchat.tAlliance[i].name +'" class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" /></td>'
					  + '</tr>';
					bm.push(UIDMsg);
				}
				$(UID['tabInbox_TchatAlliance']).innerHTML = m + '</table>';
				
				for (var b = 0; b < bm.length; b++) {
					$(bm[b]).addEventListener('click', function(event) {
						var ids = event.target.getAttribute('ref').split('_');
						dialogSendMsg(ids[1], ids[0], true);
					});
				}

				function wordwrap( str, width, brk, cut ) {
					brk = brk || '\n';
					width = width || 75;
					cut = cut || false;
					if (!str) { return str; }
					var regex = '.{1,' +width+ '}(\\s|$)' + (cut ? '|.{' +width+ '}|.+$' : '|\\S+?(\\s|$)');
					return str.match( RegExp(regex, 'g') ).join( brk );				 
				}

			},
			tabInboxTchatRealm: function() {
				var t=Tabs.Inbox;
				var bckgrd;
				t.tabTchatRealmActive = true;
				t.tabTchatAllianceActive = false;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabInboxTchatAlliance']).className = '';
				$(UID['tabInboxTchatAlliance']).style.zIndex = 0;
				$(UID['tabInboxTchatRealm']).className = 'selected';
				$(UID['tabInboxTchatRealm']).style.zIndex = 1;
				var m = '<div style="height:640px">' 
				      + '	<div class=' + UID['title'] + '>' + translate('Tchat') + ' ' + REALM_NAME + '</div>' 
					  // + ' <div class=' + UID['status_ticker'] + '><input
						// type=textbox id=' +
						// setUID('tabInboxTchatAlliance_sendTB') + ' /> </div>'
					  + '	<div id=' + setUID('tabInbox_TchatRealm') + ' class=' + UID['status_ticker'] + ' style="height:620px; max-height:620px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' 
					  + '</div>';
				$(UID['tabInbox_Content']).innerHTML = m;
				
				m = '<table class=' + UID['row_style'] + ' width=100%>' 
					  + '	<tr class=' + UID['row_headers'] + '>' 
					  + '			<td width=15%>' + translate('Date') + '</td>' 
					  + '			<td width=20%>' + translate('From') + '</td>' 
					  + '			<td width=55%>' + translate('Subject') + '</td>' 
					  + '			<td width=10%>' + translate('Action') + '</td>' 
					  + '	</tr>';
				
				var bm = [];	  
				for (var i = Data.options.tchat.tRealm.length-1; i >=0 ; i--) {
					var UIDMsg = setUID('tabInboxTchatAlliance_BtnMsg'+i);
					if (i % 2 == 1) {
						bckgrd = 'rgba(255, 255, 255, 0.0)';
					} else {
						bckgrd = 'rgba(255, 255, 255, 1.0)';
					}
					m += '<tr style="border-bottom: 1px solid #898989; background-color:' + bckgrd + ';">' 
					  + '		<td style="white-space:nowrap">' + new Date(Data.options.tchat.tRealm[i].time).toLocaleString() + '</td>' 
					  + '		<td style="white-space:nowrap" title="' + translate('Alliance') + ' : ' + Data.options.tchat.tRealm[i].alliance + '\n ' + translate('Might') + ':' + numf(Data.options.tchat.tRealm[i].power) + '" >' + Data.options.tchat.tRealm[i].name + '</td>' 
					  + '		<td>' + wordwrap(Data.options.tchat.tRealm[i].text, 45, '<br />', true) + '</td>' 
					  + '		<td><input id=' + UIDMsg + ' ref="' + Data.options.tchat.tRealm[i].id + '_' + Data.options.tchat.tRealm[i].name +'" class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" /></td>'
					  + '	</tr>';
					bm.push(UIDMsg);
				}
				$(UID['tabInbox_TchatRealm']).innerHTML = m + '</table>';
				// $(UID['tabInboxTchatAlliance_sendTB']).addEventListener("keypress",
				// function(event) {
				// if(event.keyCode == 13) {
				// alert('entrée');
				// var msg = event.target.value;
				// Messages.sendTchatMessage(msg, 0);
				// }
				// });
				for (var b = 0; b < bm.length; b++) {
					$(bm[b]).addEventListener('click', function(event) {
						var ids = event.target.getAttribute('ref').split('_');
						dialogSendMsg(ids[1], ids[0], true);
					});
				}
				
				function wordwrap( str, width, brk, cut ) {
					brk = brk || '\n';
					width = width || 75;
					cut = cut || false;
					if (!str) { return str; }
					var regex = '.{1,' +width+ '}(\\s|$)' + (cut ? '|.{' +width+ '}|.+$' : '|\\S+?(\\s|$)');
					return str.match( RegExp(regex, 'g') ).join( brk );
				}
			},

			deleteSelection: function() {
				var t = Tabs.Inbox;
				if (t.checkMessagesBusy || t.checkMessagesError) return false;
				Messages.messageDeletion = true;
				t.checkMessagesBusy = true;
				t.deleteMessages(function() {
					logit(translate('Messages selection deleted'));
					Tabs.Inbox.checkMessagesBusy = false;
					Messages.messageDeletion = false;
					Tabs.Inbox.show();
				});
			},
			deleteMessages: function(notify) {
				var t = Tabs.Inbox;
				progressBar.init(800 + Math.randRange(1, 50), 100, 300, 150, translate('Message'), 200, true, t.container);
				progressBar.start({
					steps: 100,
					delay: 1,
					byCount: true,
					title: translate('Deleting selected messages in progress') + '...',
					stepText: translate('Please wait...')
				});
				Messages.deleteMessages(callback);

				function callback(dat) {
					if (dat == null) {
						Tabs.Inbox.checkMessagesError = true;
						progressBarPop.getContentDiv().innerHTML = '<B>' + translate('Error while deleting selected messages') + '</B>';
						progressBarPop.allowClose(true);
						if (notify) notify(false);
						return;
					}
					if (dat.done) {
						actionLog(translate('Deleting selected messages') + ' ' + translate('complete') + '. ' + dat.count + ' ' + translate('messages deleted'));
						progressBarPop.getContentDiv().innerHTML = '<B>' + dat.count + ' ' + translate('Messages deleted').toLowerCase() + '</B>';
						progressBarPop.allowClose(true);
						if (notify) notify(true);
					}
				}
			},
			getAllPages: function() {
				var t = Tabs.Inbox;
				if (t.checkMessagesBusy || t.checkMessagesError) return false;
				Messages.messageDeletion = true;
				t.checkMessagesBusy = true;
				t.getAllMessages(function() {
					logit(translate('All messages retrieved'));
					Tabs.Inbox.checkMessagesBusy = false;
					Messages.messageDeletion = false;
					Tabs.Inbox.show();
				});
			},
			getAllMessages: function(notify) {
				var t = Tabs.Inbox;
				progressBar.init(800 + Math.randRange(1, 50), 100, 300, 150, translate('Message'), 200, true, t.container);
				progressBar.start({
					steps: 100,
					delay: 1,
					byCount: true,
					title: translate('Retrieving all messages in progress') + '...',
					stepText: translate('Please wait...')
				});
				Messages.dealMessages('get', undefined, callback);

				function callback(dat) {
					if (dat == null) {
						Tabs.Inbox.checkMessagesError = true;
						progressBarPop.getContentDiv().innerHTML = '<B>' + translate('Error while retrieving all messages') + '</B>';
						progressBarPop.allowClose(true);
						if (notify) notify(false);
						return;
					}
					if (dat.done) {
						actionLog(translate('Retrieving all messages') + ' ' + translate('complete'));
						progressBarPop.destroy();
						if (notify) notify(true);
					}
				}
			},
			getFirstPage: function(notify) {
				var t = Tabs.Inbox;
				Messages.getFirstPage(Data.options.inbox.current_tab, callback);

				function callback(dat) {
					if (dat == null || dat.error) {
						Tabs.Inbox.checkMessagesError = true;
						if (notify) notify(false);
						return;
					}
					verboseLog(translate('Retrieving messages') + ' ' + translate('complete'));
					debugLog(translate('Retrieving messages') + ' ' + translate('complete'));
					if (notify) notify(true);
				}
			},
			getMessages: function(type) {
				var t = Tabs.Inbox,
					ret = [];
				for (var i in Messages.details) {
					msg = Messages.details[i];
					if (!is_null(msg)) {
						switch (type) {
							case 'messages':
								if ((/(PlayerMessage|AllianceMessage|TargetedMessage)/.test(msg.type))) ret.push(msg);
								break;
							case 'reports':
								if (!(/(PlayerMessage|AllianceMessage|TargetedMessage)/.test(msg.type))) ret.push(msg);
								break;
							default:
								ret.push(msg);
								break;
						}
					}
				}
				ret.sort(function(a, b) {
					return b.created_at - a.created_at;
				});
				return ret;
			},
			onSelectAll: function(selected) {
				var t = Tabs.Inbox,
					sel = [];
				for (var i in Messages.details) {
					msg = Messages.details[i];
					if (!is_null(msg)) {
						switch (t.contentType) {
							case MESSAGES_ONLY:
								if ((/(PlayerMessage|AllianceMessage|TargetedMessage)/.test(msg.type))) sel.push(msg.id);
								break;
							case REPORTS_ONLY:
								if (!(/(PlayerMessage|AllianceMessage|TargetedMessage)/.test(msg.type))) sel.push(msg.id);
								break;
							default:
								sel.push(msg.id);
								break;
						}
					}
				}
				for (var i = 0; i < sel.length; i++)
					Messages.details[sel[i]].checked = selected;
				t.show();
			},
			refreshFirstPage: function() {
				var t = Tabs.Inbox;
				if (t.checkMessagesBusy || t.checkMessagesError) return false;
				t.checkMessagesBusy = true;
				t.getFirstPage(function() {
					Tabs.Inbox.checkMessagesBusy = false;
				});
				t.show();
			}
		}
		/********************************* Inbox Tab ***********************************/


		/********************************* Jobs Tab ************************************/
		Tabs.Jobs = {
			tabOrder: JOBS_TAB_ORDER,
			tabLabel: 'Tasks',
			tabDisabled: !JOBS_TAB_ENABLE,
			lastSubTab: 'tabJobInfo',
			container: null,
			timer: null,
			contentType: 0,
			/*
			 * 0 = info, 1 = train, 2 = build, 3 = research, 4 = resurrect, 5 = sanctuary, 6 = Dragon, 7 = Trade - these should be enums but Javascript
			 * doesn't support that type
			 */
			trainContentType: 0,
			/* 0 = train, 1 = config */
			sanctContentType: 0,
			/* 0 = dragons overview, 1 = breeding */
			tradeContentType: 0,
			/* 0 = buy, 1 = sell */
			buildScrollPos: 0,
			selectedQ: 'min_resource',
			refreshPlayerBusy: false,

			trainTimer: null,
			trainErrorCount: 0,
			trainRetryTime: 20000,

			buildTimer: null,
			buildErrorCount: 0,
			buildRetryTime: 20000,
			buildRefreshTab: false,
			buildRefreshLvl: false,
			last_built: {},

			researchTimer: null,
			resErrorCount: 0,
			resRetryTime: 20000,

			resurrectTimer: null,
			revErrorCount: 0,
			revRetryTime: 20000,

			sanctuaryTimer: null,
			feedErrorCount: 0,
			feedRetryTime: 20000,

			init: function(div) {
				var t = Tabs.Jobs;
				var canResurrect = ((Seed.cities[CAPITAL.id].souls && Seed.cities[SPECTRAL_OUTPOST.id]) ? true : false );

				Data.setDefaultValues('jobs');
				t.container = div;
				var m = '<ul class="tabs" style="border-bottom:none; padding-bottom:0;height:23px">' +
					'<li class="tab first line1"><a id=' + setUID('tabJobInfo') + '>' + translate('Summary') + '</a></li>' +
					'<li class="tab line1"><a id=' + setUID('tabJobTrain') + '>' + translate('Train') + '</a></li>' +
					'<li class="tab line1"><a id=' + setUID('tabJobBuild') + '>' + translate('Build') + '</a></li>' +
					'<li class="tab line1"><a id=' + setUID('tabJobResearch') + '>' + translate('Research') + '</a></li>';
			
				if (canResurrect) {
					m += '<li class="tab line1"><a id=' + setUID('tabJobResurrect') + '>' + translate('Resurrect') + '</a></li>';
				}
				m += '<li class="tab line1"><a id=' + setUID('tabJobSanctuary') + '>' + translate('dragon-sanctuary') + '</a></li>' +
					'</ul><ul class="tabs first line2">' + 
					'<li class="tab line2"><a id=' + setUID('tabJobDragon') + '>' + translate('dragon') + '</a></li>' +
					'<li class="tab line2"><a id=' + setUID('tabJobTrade') + '>' + translate('trade') + '</a></li>' +					
					'</ul>' +
					'<div id=' + setUID('tabJob_Header') + ' style="height:225px; max-height:225px; margin-bottom:5px;"></div>' +
					'<div id=' + setUID('tabJob_Content') + ' class="' + UID['scrollable'] + '" style="padding-top:5px; height:435px; max-height:700px;"></div>';

				div.innerHTML = m;
				
				$(UID['tabJobInfo']).observe('click', t.tabJobInfo);
				$(UID['tabJobTrain']).observe('click', t.tabJobTrain);
				$(UID['tabJobBuild']).observe('click', t.tabJobBuild);
				$(UID['tabJobResearch']).observe('click', t.tabJobResearch);
				$(UID['tabJobSanctuary']).observe('click', t.tabJobSanctuary);
				if (canResurrect) {
					$(UID['tabJobResurrect']).observe('click', t.tabJobResurrect);
				}
				$(UID['tabJobDragon']).observe('click', t.tabJobDragon);
				$(UID['tabJobTrade']).observe('click', t.tabJobTrade);
				
				/* Restore the views */
				t.contentType = Data.options.jobs.current_tab;
				t.trainContentType = Data.options.training.current_tab;
				t.sanctContentType = Data.options.sanctuary.current_tab;

				/* Enable the jobs */
				t.setTrainEnable(Data.options.training.enabled);
				t.selectedQ = Data.options.training.mode;
				t.setBuildEnable(Data.options.building.enabled);
				t.setResearchEnable(Data.options.research.enabled);
				if (canResurrect) {
					t.setResurrectEnable(Data.options.resurrect.enabled);
				}
				
				window.addEventListener('unload', t.onUnload, false);
			},

			show: function() {
				var t = Tabs.Jobs;
				switch (t.contentType) {
					case 0:
						t.tabJobInfo();
						break;
					case 1:
						t.tabJobTrain();
						break;
					case 2:
						t.tabJobBuild();
						break;
					case 3:
						t.tabJobResearch();
						break;
					case 4:
						if (Seed.cities[SPECTRAL_OUTPOST.id]) t.tabJobResurrect();
						else t.tabJobInfo();
						break;
					case 5:
						t.tabJobSanctuary();
						break;
					case 6:
						t.tabJobDragon();
						break;
					case 7:
						t.tabJobTrade();
						break;
				}
			},
			hide: function() {
				var t = Tabs.Jobs;
			},
			onUnload: function() {
				var t = Tabs.Jobs;
				Data.options.jobs.current_tab = t.contentType;
				Data.options.training.current_tab = t.trainContentType;
				Data.options.sanctuary.current_tab = t.sanctContentType;
				Data.options.training.mode = t.selectedQ;
				logit('===============  Tabs.Jobs.onUnload:' + Data.options.jobs.current_tab);
			},
			clearTimers: function() {
				var t = Tabs.Jobs;
				clearInterval(t.jobsStatTimer);
			},


			/** Tab: Jobs - SubTab: Info * */
			tabJobInfo: function() {
				var t = Tabs.Jobs;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabJobInfo']).className = 'selected';
				$(UID['tabJobInfo']).style.zIndex = 1;
				t.lastSubTab = 'tabJobInfo';

				t.contentType = 0;
				var city = Seed.cities[CAPITAL.id];

				var n = '<div class=' + UID['title'] + '>' + translate('information') + '</div>' + '	<table width=100%><tr><td><input id=' + setUID('tabJobInfo_Refresh') + ' type=button value=' + translate('Refresh') + '></input></td></tr></table>';

				$(UID['tabJob_Header']).style.height = "45px";
				$(UID['tabJob_Header']).innerHTML = n;
				$(UID['tabJobInfo_Refresh']).addEventListener('click', refresh, false);
				$(UID['tabJob_Content']).style.height = "593px";
				$(UID['tabJob_Content']).innerHTML = '<div id="' + setUID('tabJob_Container') + '"></div>';
				var container = $(UID['tabJob_Container']);

				function jobsStatTick() {
					/* Main City */
					var m = '<div class=' + UID['status_ticker'] + '>' + cityTitle(CAPITAL.id) + '<table class=' + UID['table'] + ' width=100%>' + dispCurrRessources(CAPITAL.id) + dispOutpostJob('dragon', CAPITAL.id) + dispOutpostJob('outpost', CAPITAL.id) + dispBuildingJob(CAPITAL.id) + dispDefenseTowerJob(CAPITAL.id) + dispResearchJob(CAPITAL.id) + dispTrainingJobs(CAPITAL.id) + '	</table>' + '</div>';

					/* Outposts ... */
					for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
						if (cityIdx != CAPITAL.id && Seed.cities[cityIdx]) {
							m += '<div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' + cityTitle(cityIdx) + '<table class=' + UID['table'] + ' width=100%>' + ((cityIdx == SPECTRAL_OUTPOST.id) ? dispSoulCapacity() : '') + dispOutpostJob('dragon', cityIdx) + dispOutpostJob('outpost', cityIdx) + dispBuildingJob(cityIdx) + dispResearchJob(cityIdx) + dispTrainingJobs(cityIdx) + dispResurrectionJobs(cityIdx) + '	</table>' + '</div>';
						}
					}
					m += '<br><div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' + '<div class=' + UID['subtitle'] + '><table class=' + UID['table'] + '>' + '<tr><td align=left width=35%>' + translate('dragon-sanctuary') + '</td>' + '<td align=right width=65%>&nbsp;</td>' + '</tr></table></div>' + '<table class=' + UID['table'] + ' width=100%>' + dispBreedingJob() + dispFeedHatchJob('hatching', CAPITAL.id) + dispFeedHatchJob('feeding', CAPITAL.id) + '</table>' + '</div>';
					container.innerHTML = m;
					container.style.height = container.offsetHeight + 'px';
				}

				function dispCurrRessources(cityIdx) {
					var m = '<tr><td class=right width=20%>' + translate('Resources') + '</td>';
					var newline = '';
					for (var p = 0; p < all_resource_types.length; p++) {
						var lock_food = false;
						var production = Seed.cities[cityIdx].figures.resource_rates[all_resource_types[p]];
						var actualStock = numf(toNum(Seed.cities[cityIdx].resources[all_resource_types[p]]));
						if (all_resource_types[p] == 'food' && Seed.player.boosts && Seed.player.boosts.collect_resources && toNum(Seed.cities[cityIdx].resources[all_resource_types[p]]) > production.capacity) lock_food = true;
						desc = all_resource_types[p];
						if (all_resource_types[p] == 'blue_energy') desc = 'blueenergy250k';
						m += newline + '<td width =15%>' + translate(desc) + '</td><td width=1%>:</td><td align=right width=14%>' + actualStock + '</td><td width=5%> &nbsp </td>' + '<td width=10% align=right>(' + (lock_food ? '<font color=blue><b>0</b></font>' : numf(production.rate)) + ' /' + translate('h') + ')</td><td width=30%> &nbsp </td></tr>';
						newline = '<tr><td> &nbsp </td>'
					}
					var popCur = toNum(Seed.cities[cityIdx].figures.population['current']);
					var popLab = toNum(Seed.cities[cityIdx].figures.population['laborers']);
					var popFor = toNum(Seed.cities[cityIdx].figures.population['armed_forces']);
					var num = popCur - popLab - popFor;
					num = (num < 0) ? 0 : num;
					m += '<tr><td> &nbsp </td><td width =15%>' + translate('idlepopulation') + '</td><td width=1%>:</td><td align=right width=14%>' + numf(num, ' ') + '</td><td width=50% colspan=3> &nbsp </td></tr>';
					m += '</table><br><table class=' + UID['table'] + ' width=100%>';
					return m;
				}

				function dispBreedingJob() {
					var m = '';
					var jobs = Jobs.getJobs('breeding', false, -1);
					for (var i = 0; i < jobs.length; i++) {
						var left = '',
							timeRemaining = 0,
							male = '',
							female = '';
						if (i == 0) {
							left = translate('breeding-dragon') + ':';
							timeRemaining = (jobs[i].run_at - serverTime() > 0) ? jobs[i].run_at - serverTime() : 0;
						} else {
							timeRemaining = jobs[i].duration;
						}
						if (!Seed.sanctuary_dragons[jobs[i].male_id]) {
							verboseLog('Error: Inexisting dragon ' + jobs[i].male_id);
							male = jobs[i].male_id;
						} else {
							male = translateByKey(Seed.sanctuary_dragons[jobs[i].male_id].subtype, 'rank-' + Seed.sanctuary_dragons[jobs[i].male_id].type, 'dragons');
						}
						if (!Seed.sanctuary_dragons[jobs[i].female_id]) {
							verboseLog('Error: Inexisting dragon ' + jobs[i].female_id);
							female = jobs[i].female_id;
						} else {
							female = translateByKey(Seed.sanctuary_dragons[jobs[i].female_id].subtype, 'rank-' + Seed.sanctuary_dragons[jobs[i].female_id].type, 'dragons');
						}
						m += '<tr>' + '		<td class=right width=20%>' + left + '</td>' + '		<td align=left width=50% colspan=2>' + male + ' + ' + female + '</td>' + '     <td width=30%><font color=' + TIMER_COLOR + '>' + timestr(timeRemaining, true) + '</font></td></tr>';
					}
					return m;
				}

				function dispBuildingJob(cityIdx) {
					var m = '<tr><td width=20% class=right>' + translate('Building') + ': </td>';
					var job = Jobs.getBuildingJob(cityIdx);
					if (job && job.job.run_at > serverTime()) {
						m += '<td width=50% align=left>' + translate(job.building.type) + ' (' + job.job.level + ') &nbsp;</td>' + '<td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.job.run_at - serverTime(), true) + '</font></td>' + '</tr>';
					} else {
						m += '<td align=left width=80% colspan=2><span class=' + UID['bold_red'] + '>' + translate('None').toUpperCase() + '</span></td></tr>';
					}
					return m;
				}
				
				function dispDefenseTowerJob(cityIdx) {
					var m = '<tr><td width=20% class=right>' + translate('Building') + ': </td>',
						job = Jobs.getDefenseTowerJob(cityIdx);

					if (job && job.job.run_at > serverTime()) {

						m += '<td width=50% align=left colspan=2>' + translate(job.building.type) + ' (' + job.job.level + ') &nbsp;</td>' + '<td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.job.run_at - serverTime(), true) + '</font></td>' + '</tr>';
					} else {
						m += '<td align=left width=80% colspan=3><span class=' + UID['bold_red'] + '>' + translate('DefensiveTower') + ' ' + translate('None').toUpperCase() + '</span></td></tr>';
					}

					return m;
				}

				function dispFeedHatchJob(type, cityIdx) {
					var m = '';
					var jobs = Jobs.getJobs(type, false, cityIdx);
					for (var i = 0; i < jobs.length; i++) {
						var left = '',
							timeRemaining = 0,
							dragon = '';
						if (i == 0) {
							left = translate(((type == 'feeding') ? 'upgrading-dragon' : 'hatching-egg')) + ':';
							timeRemaining = (jobs[i].run_at - serverTime() > 0) ? jobs[i].run_at - serverTime() : 0;
						} else {
							timeRemaining = jobs[i].duration;
						}
						var dragon_id = (type == 'feeding') ? jobs[i].dragon_id : jobs[i].egg_id;
						if (!Seed.sanctuary_dragons[dragon_id]) {
							verboseLog('Error: Inexisting dragon ' + dragon_id);
							dragon = dragon_id;
						} else {
							dragon = translateByKey(Seed.sanctuary_dragons[dragon_id].subtype, 'rank-' + Seed.sanctuary_dragons[dragon_id].type, 'dragons');
						}
						m += '<tr>' + '		<td class=right width=20%>' + left + '</td>' + '		<td align=left width=50% colspan=2>' + dragon + '</td>' + '     <td width=30%><font color=' + TIMER_COLOR + '>' + timestr(timeRemaining, true) + '</font></td></tr>';
					}
					return m;
				}

				function dispOutpostJob(type, cityIdx) {
					var m = '';
					var job = Jobs.getJobs(type, true, cityIdx)[0];
					if (job && job.run_at > serverTime()) {
						m += '<tr><td class=right width=20%>' + translate(((type == 'outpost') ? 'Repairing' : 'Healing')) + ':</td>' + '<td width=50%><SPAN class=' + UID['bold_red'] + '>' + translate(((type == 'outpost') ? 'outpost-progress' : 'Dragon healing')) + '</span></td><td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.run_at - serverTime(), true) + '</font></td></tr>';
					}
					return m;
				}

				function dispResearchJob(cityIdx) {
					var m = '<tr><td class=right width=20%>' + translate('Researching') + ': </td>';
					var job = Jobs.getJobs('research', true, cityIdx)[0];
					if (job && job.run_at > serverTime()) {
						m += '<td width=50% align=left>' + translate(job.research_type) + ' (' + job.level + ') &nbsp;</td>' + '<td width=30%><font color=' + TIMER_COLOR + '>' + timestr(job.run_at - serverTime(), true) + '</font></td>' + '</tr>';
					} else if (cityIdx == CAPITAL.id) {
						m += '<td align=left width=80% colspan=2><span class=' + UID['bold_red'] + '>' + translate('None').toUpperCase() + '</span></td></tr>';
					} else return '';
					return m;
				}

				function dispSoulCapacity() {
					var m = '',
						cap = getSoulCapacity(),
						percentage = '';
					if (cap && cap.max > 0) {
						var pct = cap.min / cap.max * 10000;
						if (pct > 9000)
							percentage = '<span class=' + UID['bold_red'] + '>' + numf(Math.round(pct / 100), ' ') + '%</span>';
						else percentage = '<font color=' + TIMER_COLOR + '>' + numf(Math.round(pct / 100), ' ') + '%</font>';
						m += '<tr><td class=right width=20%>' + translate('Capacity') + ':</td>' + '	<td width=50% colspan=2><font color=' + TIMER_COLOR + '><b>' + numf(cap.min, ' ') + ' / ' + numf(cap.max, ' ') + '</b></span></td>' + '	<td width=30%>' + percentage + '</td>' + '</tr>';
					}
					return m;
				}

				function dispTrainingJobs(cityIdx) {
					var m = '',
						trains = [];
					for (var i = 0; i < Seed.cities[cityIdx].jobs.length; i++) {
						if (Seed.cities[cityIdx].jobs[i].queue == 'units' &&
							Seed.cities[cityIdx].jobs[i].unit_type &&
							Seed.cities[cityIdx].jobs[i].run_at > serverTime()
						) {
							trains.push(Seed.cities[cityIdx].jobs[i]);
						}
					}
					trains.sort(function(a, b) {
						return a.run_at - b.run_at
					});
					for (var i = 0; i < trains.length; i++) {
						var left = '',
							tot = '',
							timeRemaining = 0;
						if (i == 0) {
							timeRemaining = (trains[i].run_at - serverTime() > 0) ? trains[i].run_at - serverTime() : 0;
							left = translate('Training') + ':';
						} else if (i == trains.length - 1) {
							timeRemaining = (trains[i].run_at - serverTime() > 0) ? trains[i].run_at - serverTime() : 0;
							tot = '&nbsp;<b>(' + timestrShort(timeRemaining) + ')</b>';
							timeRemaining = trains[i].duration;
						} else {
							timeRemaining = trains[i].duration;
						}
						m += '<tr>' + '		<td class=right width=20%>' + left + '</td>' + '		<td align=left width=50%>' + numf(trains[i].quantity, ' ') + '&nbsp;&nbsp;' + translate(trains[i].unit_type) + '&nbsp;</td>' + '     <td width=30%><font color=' + TIMER_COLOR + '>' + timestr(timeRemaining, true) + '</font>&nbsp' + tot + '</td>' + '</tr>';
					}
					return m;
				}

				function dispResurrectionJobs(cityIdx) {
					var m = '',
						trains = [];
					for (var i = 0; i < Seed.cities[cityIdx].jobs.length; i++) {
						if (Seed.cities[cityIdx].jobs[i].queue == 'resurrection' &&
							Seed.cities[cityIdx].jobs[i].unit_type &&
							Seed.cities[cityIdx].jobs[i].run_at > serverTime()
						) {
							trains.push(Seed.cities[cityIdx].jobs[i]);
						}
					}
					trains.sort(function(a, b) {
						return a.run_at - b.run_at
					});
					for (var i = 0; i < trains.length; i++) {
						var left = '',
							tot = '',
							timeRemaining = 0;
						if (i == 0) {
							timeRemaining = (trains[i].run_at - serverTime() > 0) ? trains[i].run_at - serverTime() : 0;
							left = translate('Resurrection') + ':';
						} else if (i == trains.length - 1) {
							timeRemaining = (trains[i].run_at - serverTime() > 0) ? trains[i].run_at - serverTime() : 0;
							tot = '&nbsp;<b>(' + timestrShort(timeRemaining) + ')</b>';
							timeRemaining = trains[i].duration;
						} else {
							timeRemaining = trains[i].duration;
						}
						m += '<tr>' + '		<td class=right width=20%>' + left + '</td>' + '		<td align=left width=50% colspan=2>' + numf(trains[i].quantity, ' ') + '&nbsp;&nbsp;' + translate(trains[i].unit_type) + '&nbsp;</td>' + '     <td width=30%><font color=' + TIMER_COLOR + '>' + timestr(timeRemaining, true) + '</font>&nbsp' + tot + '</td>' + '</tr>';
					}
					return m;
				}

				function cityTitle(cityIdx) {
					var city = Seed.cities[cityIdx];
					var divClass = getDivClass(cityIdx);
					var wallStatus = '';
					var alliance_name = (Seed.player.alliance) ? Seed.player.alliance.name : '';
					alliance_name = (city.type == 'Outpost') ? '' : alliance_name;
					if (cityIdx == CAPITAL.id)
						wallStatus = (Seed.cities[cityIdx].defended != undefined && Seed.cities[cityIdx].defended) ? '<font class=' + UID['defending'] + '>' + translate('Defend').toUpperCase() + '</font>' : '<font class=' + UID['hiding'] + '>' + translate('Hiding').toUpperCase() + '</font>';
					else wallStatus = ' &nbsp ';
					var title = '' + '<div class=' + UID[divClass] + '>' + '	<table class=' + UID['table'] + '>' + '	<tr>' + '		<td align=left width=35%>' + ((city.type == 'Outpost') ? translate(city.name) : city.name) + '</td>' + '		<td align=center width=30%>' + city.x + ',' + city.y + '</td>' + '		<td align=center width=200px>' + '			<font color=yellow>' + alliance_name + '</font>' + '		</td>' + '		<td width=35% align=right>' + wallStatus + '</td>' + '	</tr>' + '</table></div>';
					return title;
				}
				
				function getDivClass(cityIdx) {
					var divClass = 'subtitle';
					switch (cityIdx) {
						case CAPITAL.id:
							break;
						case SPECTRAL_OUTPOST.id:
							divClass = 'subtitle_sr';
							break;
						/*case SKY_OUTPOST.id:
							break;
						case CAVE_OUTPOST.id:
							break;
						case LUNA_OUTPOST.id:
							break;
						case COLOSSUS_OUTPOST.id:
							break;*/
						default:
							break;
					}
					return divClass;
				}

				function refresh() {
					logit('fetchPlayer from Tab.Jobs refresh');
					var t = Tabs.Jobs;
					if (t.refreshPlayerBusy) return false;
					t.refreshPlayerBusy = true;
					refreshPlayerData(t.container, function() {
						logit(translate('Player data retrieved'));
						Tabs.Jobs.refreshPlayerBusy = false
					});
					t.tabJobInfo();
				}

				jobsStatTick();
				t.clearTimers();
				t.jobsStatTimer = setInterval(jobsStatTick, 1000);
			},

			/** * Jobs Tab - Train Sub-tab ** */
			tabJobTrain: function() {
				var t = Tabs.Jobs;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabJobTrain']).className = 'selected';
				$(UID['tabJobTrain']).style.zIndex = 1;
				t.lastSubTab = 'tabJobTrain';

				t.contentType = 1;

				var n = '<div class=' + UID['title'] + '>' + translate('Train') + ' ' + translate('Automatically') + '</div>' + '<div class=' + UID['status_ticker'] + ' style="margin-bottom: 5px !important">' + '	<center><input id=' + setUID('tabJobTrain_OnOff') + ' type=button /></center>' + '	<div id=' + setUID('tabJobTrain_Report') + ' class=' + UID['status_report'] + '>' + '		<table id=' + setUID('tabJobTrain_Table') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div>' + '	<br>' + '	<div id=' + setUID('tabJobTrain_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabJobTrain_tabTrain') + '>' + translate('Train') + '</a></li>' + '	<li class="tab"><a id=' + setUID('tabJobTrain_tabConfig') + '>' + translate('Config') + '</a></li>' + '</ul>';
				$(UID['tabJob_Header']).style.height = "225px";
				$(UID['tabJob_Header']).innerHTML = n;

				var m = '<div id=' + setUID('tabJobTrain_Content') + ' style="height:430px; ; max-height:430px; overflow-y:auto">';
				$(UID['tabJob_Content']).style.height = "430px";
				$(UID['tabJob_Content']).innerHTML = m;

				$(UID['tabJobTrain_OnOff']).addEventListener('click', function() {
					var t = Tabs.Jobs;
					t.setTrainEnable(!Data.options.training.enabled);
				}, false);
				$(UID['tabJobTrain_tabTrain']).addEventListener('click', t.tabJobTrainSets, false);
				$(UID['tabJobTrain_tabConfig']).addEventListener('click', t.tabJobTrainConfig, false);
				t.refreshTrainButton(Data.options.training.enabled);

				switch (t.trainContentType) {
					case 0:
						t.tabJobTrainSets();
						break;
					case 1:
						t.tabJobTrainConfig();
						break;
				}
				t.trainStatTick();
				t.clearTimers();
				t.jobsStatTimer = setInterval(t.trainStatTick, 1000);
			},

			/** * Jobs Tab - Train Sub-tab - Train Sub-Sub-tab ** */
			tabJobTrainSets: function() {
				var t = Tabs.Jobs;

				$(UID['tabJobTrain_tabConfig']).className = '';
				$(UID['tabJobTrain_tabConfig']).style.zIndex = 0;
				$(UID['tabJobTrain_tabTrain']).className = 'selected';
				$(UID['tabJobTrain_tabTrain']).style.zIndex = 1;

				/* Create troop table for each city */
				var el = [],
					m = '',
					cl = [],
					cj = [],
					tn = [],
					en = [],
					bc = [],
					max = [],
					clearOne = [],
					troopTypes = all_unit_types;
				for (var cityIdx = 0; cityIdx < Seed.cities.length; cityIdx++) {
					if (Data.options.collapsed.train[cityIdx] == undefined)
						Data.options.collapsed.train[cityIdx] = false;
				}

				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx] && cityIdx != SPECTRAL_OUTPOST.id && cityIdx != SKY_OUTPOST.id && cityIdx != LUNA_OUTPOST.id) {
						var city = Seed.cities[cityIdx];
						var cityJobsId = 'tabJobTrain_cityId_' + cityIdx;
						var cityJobsListId = 'tabJobTrain_cityList_' + cityIdx;
						var cityJobsEnabled = 'tabJobTrain_Enabled_' + cityIdx;
						var accordionId = 'tabJobTrain_accordion_' + cityIdx;
						var current_total_time = 0;
						var now = serverTime();
						if (city.jobs) {
							var jobs = city.jobs;
							var trains = [];
							for (var j = 0; j < jobs.length; j++)
								if (jobs[j].queue == 'units' && jobs[j].unit_type && jobs[j].run_at > now) trains.push(jobs[j]);
							if (trains.length > 0) {
								trains.sort(function(a, b) {
									return a.run_at - b.run_at;
								});
								var current_total_time = trains[trains.length - 1].run_at - now;
							}
						}
						m += '<div class=' + UID['status_ticker'] + ' style="margin-top:10px !important">' + '<A><div id=' + setUID(cityJobsId) + ' class=' + UID['subtitle'] + ' ref=' + cityIdx + '>' + '	<table class=' + UID['table'] + ' width=100%>' + '	<tr>' + '		<td align=left width=1%><label><input type=checkbox id=' + setUID(cityJobsEnabled) + ' ref="Enable_' + cityIdx + '" ' + (Data.options.training.city[cityIdx].enabled ? 'checked' : '') + ' /></label></td>' + '		<td align=left width=29%>&nbsp;</td>' + '		<td align=center width=40%>' + ((city.type == 'Outpost') ? translate(city.name) : city.name) + '</td>' + '		<td align=right width=30%><font color=yellow>' + timestrShort(current_total_time) + '</font></td>' + '		<td align=right><div id=' + setUID(accordionId) + ' ref="' + cityIdx + '"></div></td>' + '	</tr>' + '</table></div></A>' + '<div id=' + setUID(cityJobsListId) + '>' + '<table class=' + UID['table'] + ' width=100%>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td></td><td>' + translate('Quantity') + '</td><td>' + translate('Action') + '</td><td>' + translate('Total') + '</td></tr>';

						cl.push(UID[cityJobsId]);
						en.push(UID[cityJobsEnabled]);

						for (var i = 0; i < troopTypes.length; i++) {
							var trainable = isTrainable(cityIdx, troopTypes[i]);
							if (trainable) {
								var num = Data.options.training.city[cityIdx].units[i];
								if (!num || isNaN(num)) num = 0;
								m += '<tr>' + '		<td class=right width=25%>' + translate(troopTypes[i]) + ':</td>' + '		<td align=middle width=10%><input type=text id=' + setUID('tabTrain_Troop_' + cityIdx + '_' + i) + ' ref=' + cityIdx + '_' + i + ' maxlength=7 size=2 value="' + num + '" style="width:45px;text-align:right;" /></td>' + '      <td align=middle width=15%>' + '          <input id=' + setUID('tabJobTrain_Max_' + cityIdx + '_' + i) + ' ref=' + cityIdx + '_' + i + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=button value=' + translate('Max') + ' />' + '			<input class=small id=' + setUID('tabTrain_Now_' + cityIdx + '_' + i) + ' ref=' + cityIdx + '_' + i + ' type=button  style="width:auto !important;" value="' + translate('Train') + '" \>' + '          <input id=' + setUID('tabJobTrain_Clear_' + cityIdx + '_' + i) + ' ref=' + cityIdx + '_' + i + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=button value=X />' + '     </td>' + '		<td align=right width=15%>&nbsp;<span class=jewel>(' + numf(getTroopNumbers(Seed.cities[CAPITAL.id], troopTypes[i]).total, ' ') + ')</span></td>' + '		<td align=left width=35% id=' + setUID('tabJobTrain_FB_' + cityIdx + '_' + troopTypes[i]) + ' class=jewel valign=top style="white-space:normal;"></td>' + '	</tr>';
								el.push(UID['tabTrain_Troop_' + cityIdx + '_' + i]);
								tn.push(UID['tabTrain_Now_' + cityIdx + '_' + i]);
								max.push(UID['tabJobTrain_Max_' + cityIdx + '_' + i]);
								clearOne.push(UID['tabJobTrain_Clear_' + cityIdx + '_' + i]);
							}
						}
						m += '<tr>' + ' <td></td>' + ' <td><input id=' + setUID('tabTrain_Clear_All_' + cityIdx) + ' type="button"  style="width:auto !important;" value="' + translate('Clear all') + '" ref="' + cityIdx + '" \></td>' + ' <td colspan=3></td>' + '</tr>' + '</table></div></div>';

						bc.push(UID['tabTrain_Clear_All_' + cityIdx]);
					}
				}

				m += '</div>';

				$(UID['tabJobTrain_Content']).innerHTML = m;

				t.trainContentType = 0;

				for (var c = 0; c < cl.length; c++) {
					var cityIdx = $(cl[c]).getAttribute('ref');
					var div_id = 'tabJobTrain_cityList_' + cityIdx;
					var acc_id = 'tabJobTrain_accordion_' + cityIdx;
					var div_el = $(UID[div_id]);

					$(cl[c]).observe('click', toggleHideShow);

					if (Data.options.collapsed.train[cityIdx]) {
						div_el.style.display = 'none';
						$(UID[acc_id]).innerHTML = '+&nbsp';
					} else {
						div_el.style.display = 'block';
						$(UID[acc_id]).innerHTML = '-&nbsp';
					}
				}
				for (var i = 0; i < el.length; i++) {
					$(el[i]).addEventListener('change', troopsChanged, false);
					$(el[i]).addEventListener('click', troopsChanged, false);
				}
				for (var i = 0; i < tn.length; i++) {
					$(tn[i]).addEventListener('click', onTrainNow, false);
				}
				for (var i = 0; i < en.length; i++) {
					$(en[i]).addEventListener('change', onEnableCityNow, false);
					$(en[i]).addEventListener('click', onEnableCityNow, false);
				}
				for (var i = 0; i < bc.length; i++) {
					$(bc[i]).observe('click', clearAll);
				}
				for (var i = 0; i < max.length; i++) {
					$(max[i]).observe('click', setMaxTroop);
				}
				for (var i = 0; i < clearOne.length; i++) {
					$(clearOne[i]).observe('click', clearOneInput);
				}

				function clearAll(event) {

					for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {

						if (cityIdx == toNum(event.target.getAttribute('ref')) &&
							Seed.cities[cityIdx] &&
							cityIdx != SPECTRAL_OUTPOST.id &&
							cityIdx != SKY_OUTPOST.id) {

							for (i = 0; i < troopTypes.length; i++) {
								var trainable = isTrainable(cityIdx, troopTypes[i]);
								if (trainable) {
									$(UID['tabTrain_Troop_' + cityIdx + '_' + i]).value = 0;
									$(UID['tabTrain_Troop_' + cityIdx + '_' + i]).click();
								}
							}
						}
					}

				}

				function setMaxTroop(event) {
					var args = event.target.getAttribute('ref').split('_');
					var unitType = all_unit_types[args[1]];

					var reqs = t.checkRequirements({
						reqs_type: 'unit',
						city_idx: toNum(args[0]),
						unit_type: all_unit_types[args[1]],
						unit_quantity: 1
					});

					$(UID['tabTrain_Troop_' + args[0] + '_' + args[1]]).value = reqs.max_units;
					$(UID['tabTrain_Troop_' + args[0] + '_' + args[1]]).click();
				}

				function clearOneInput(event) {
					var args = event.target.getAttribute('ref').split('_');
					$(UID['tabTrain_Troop_' + args[0] + '_' + args[1]]).value = 0;
					$(UID['tabTrain_Troop_' + args[0] + '_' + args[1]]).click();
				}

				function troopsChanged(event) {
					var args = event.target.getAttribute('ref').split('_');
					var unitQty = toNum(event.target.value);
					var cityIdx = toNum(args[0]);
					var unitType = all_unit_types[args[1]];
					var reqs = t.checkTrainReqs(unitType, unitQty, cityIdx);
					if (isNaN(unitQty) || unitQty < 0) {
						event.target.style.backgroundColor = 'red';
						dispError(translate('Invalid number of troops', t.container));
					} else {
						event.target.value = unitQty;
						Data.options.training.city[args[0]].units[args[1]] = unitQty;
						event.target.style.backgroundColor = '';
					}
				}

				function onEnableCityNow(event) {
					var cityIdx = event.target.getAttribute('ref').split('_');
					Data.options.training.city[cityIdx[1]].enabled = event.target.checked;
				}

				function onTrainNow(event) {
					var args = event.target.getAttribute('ref').split('_');
					var cityIdx = toNum(args[0]);
					var unitType = all_unit_types[args[1]];
					var unitQty = Data.options.training.city[cityIdx].units[args[1]];
					if (unitQty > 0) {
						cap = t.getTroopCap(unitType, unitQty);
						try {
							if (cap) {
								unitQty = 0;
								if (t.contentType == 1) t.jobFeedback(translate('Troops Capped'));
								$(UID['tabTrain_Troop_' + cityIdx + '_' + j]).style.backgroundColor = "red";
							} else if (t.contentType == 1) {
								if ($(UID['tabTrain_Troop_' + cityIdx + '_' + j]).style.backgroundColor == "red")
									$(UID['tabTrain_Troop_' + cityIdx + '_' + j]).style.backgroundColor = "white";
							}
						} catch (e) {}
					}
					if (unitQty > 0) {
						var reqs = t.checkTrainReqs(unitType, unitQty, cityIdx);
						if (!reqs.msg) t.doTrain(unitType, unitQty, cityIdx);
					}
				}

				function toggleHideShow(event) {
					if (event.target.getAttribute('ref')) {
						var target_ref = event.target.getAttribute('ref').split('_');
						if (target_ref[0] == 'Enable') return;
					}
					if (event.target.tagName == 'DIV')
						element = event.target;
					else {
						var parentElement = event.target.parentNode;
						while (parentElement.tagName != 'DIV') {
							parentElement = parentElement.parentNode;
						}
						element = parentElement;
					}
					var cityIdx = element.getAttribute('ref');
					var div_id = 'tabJobTrain_cityList_' + cityIdx;
					var acc_id = 'tabJobTrain_accordion_' + cityIdx;
					var div_el = $(UID[div_id]);
					if (div_el.style.display == 'none') {
						div_el.style.display = 'block';
						$(UID[acc_id]).innerHTML = '-&nbsp';
						Data.options.collapsed.train[cityIdx] = false;
					} else {
						div_el.style.display = 'none';
						$(UID[acc_id]).innerHTML = '+&nbsp';
						Data.options.collapsed.train[cityIdx] = true;
					}
				}
			},

			/** * config sub tab */
			tabJobTrainConfig: function() {
				var t = Tabs.Jobs;

				$(UID['tabJobTrain_tabTrain']).className = '';
				$(UID['tabJobTrain_tabTrain']).style.zIndex = 0;
				$(UID['tabJobTrain_tabConfig']).className = 'selected';
				$(UID['tabJobTrain_tabConfig']).style.zIndex = 1;

				t.trainContentType = 1;

				setUID('tabTrainConfig_QRadio');
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' + '<div class=' + UID['subtitle'] + '>' + translate('Training Configuration') + '</div>' + '	<div class="' + UID['scrollable'] + '">' + '		<table class=' + UID['table'] + '>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td style="background:none !important;" colspan=2></td>' + '		</tr>' + '	<tr>' + '		<td><label><input type=radio name=' + UID['tabTrainConfig_QRadio'] + ' value="min_housing" />' + translate('Only one training queue per city') + '</label></td>' + '	</tr>' + '	<tr>' + '		<td><label><input type=radio name=' + UID['tabTrainConfig_QRadio'] + ' value="min_resource" />' + translate('Maximum training queues possible per city, according to available resources') + '</label></td>' + '	</tr>' + '  <tr>' + '		<td>' + translate('Tax Rate') + ' : <input disabled type=text id=' + setUID('TabJobTrainTaxRate') + ' maxlength=2 style="width:70px" size=3 value="' + Seed.cities[CAPITAL.id].figures.tax_rate + '"\>' + '% ' + ' <input disabled class=small id=' + setUID('TabJobTrainChangeTaxRate') + ' type=button style="width:auto !important;" value="' + translate('Change') + '" \>' + ' 		</td>' + '	</tr>' + '	</table>' + '</div>' + '<br>';

				var el = [];
				var troopTypes = all_unit_types;
				m += '<div class=' + UID['subtitle'] + ' style="background-color:#0044a0;">' + translate('Maximum Troops') + ' (0 = ' + translate('no max') + ')</div>' + '	<table class=' + UID['table'] + ' width=100%>' + '		<tr valign=top>' + '			<td width=33%>' + '			<table class=' + UID['table'] + ' width=100%>';

				var i;
				var nbre1 = Math.ceil(troopTypes.length / 2);
				for (i = 0; i < nbre1; i++) {
					m += '<tr>' + '	<td class=right width=70%>' + translate(troopTypes[i]) + ':</td>';
					var num = Data.options.training.city[0].cap[i];
					if (!num || isNaN(num)) num = 0;
					m += '<td width=30%><input type=text id=' + setUID('tabTrainConfig_Cap_' + 0 + '_' + i) + ' ref=' + (0 + '_' + i) + ' maxlength=8 size=2 value="' + num + '" style="width:60px;text-align:right;" /></td>' + '</tr>';
					el.push(UID['tabTrainConfig_Cap_' + 0 + '_' + i]);
				}
				m += '</table></td>' + '	<td width=33%>' + '	<table class=' + UID['table'] + ' width=100%>';
				for (i = nbre1; i < troopTypes.length; i++) {
					m += '<tr>' + '	<td class=right width=70%>' + translate(troopTypes[i]) + ':</td>';
					var num = Data.options.training.city[0].cap[i];
					if (!num || isNaN(num)) num = 0;
					m += '<td width=30%>' + '<input type=text id=' + setUID('tabTrainConfig_Cap_' + 0 + '_' + i) + ' ref=' + (0 + '_' + i) + ' maxlength=8 size=2 value="' + num + '" style="width:60px;text-align:right;" /></td>' + '</tr>';
					el.push(UID['tabTrainConfig_Cap_' + 0 + '_' + i]);
				}
				m += '			</table>' + '			</td>' + '		</tr>' + '	</table>' + '</div>' + '</div>';

				$(UID['tabJobTrain_Content']).innerHTML = m;
				$(UID['TabJobTrainChangeTaxRate']).observe('click', changeTaxRate);
				$(UID['TabJobTrainTaxRate']).observe('change', onChangeTaxRate);

				var r = document.getElementsByName(UID['tabTrainConfig_QRadio']);
				for (var i = 0; i < r.length; i++) {
					r[i].addEventListener('change', enableChanged, false);
					r[i].checked = (r[i].value == Data.options.training.mode);
				}
				for (var i = 0; i < el.length; i++) {
					$(el[i]).addEventListener('change', troopsChanged, false);
				}

				function onChangeTaxRate(event) {
					var newRate = event.target.value;
					if (isNaN(newRate) || newRate < 0 || newRate > 100) {
						event.target.style.backgroundColor = 'red';
						event.target.value = Seed.cities[CAPITAL.id].figures.tax_rate;
					} else {
						event.target.style.backgroundColor = 'white';
					}
				}

				function changeTaxRate(event) {
					var newRate = $(UID['TabJobTrainTaxRate']).value;
					var dial = new ModalDialog($(UID['tabJobTrain_Content']), 300, 165, '', false, null);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('Refreshing Tax Rate');

					if (isNaN(newRate) || newRate < 0 || newRate > 100) {
						$(UID['TabJobTrainTaxRate']).style.backgroundColor = 'red';
						$(UID['TabJobTrainTaxRate']).value = Seed.cities[CAPITAL.id].figures.tax_rate;
					} else {
						new MyAjax.switchTaxRate(Seed.cities[CAPITAL.id].id, newRate, function(rslt) {
							if (rslt.ok) {
								actionLog('<B> ' + translate('Successfully'));
							} else {
								actionLog(translate('Refreshing Tax Rate') + ' : ' + rslt.ok +'. '+ translate('failed and returned error') +': '+ rslt.errmsg);
							}
							try {
								dial.destroy();
							} catch (e) {}
						});
					}
				}

				function enableChanged(event) {
					var t = Tabs.Jobs;
					if (Data.options.training.enabled) {
						t.setTrainEnable(false); /*
													 * It would be very bad to
													 * leave training on when
													 * switching queue types.
													 */
						if (t.contentType == 1)
							t.jobFeedback(translate('Safe Mode') + ' ' + translate('Training') + ' ' + translate('Turned Off'));
					}
					t.selectedQ = event.target.value;
					Data.options.training.mode = event.target.value;
				}

				function troopsChanged(event) {
					var args = event.target.getAttribute('ref').split('_');
					var x = toNum(event.target.value);
					if (isNaN(x) || x < 0) {
						event.target.style.backgroundColor = 'red';
						dispError(translate('Invalid number of troops', t.container));
					} else {
						event.target.value = x;
						Data.options.training.city[args[0]].cap[args[1]] = x;
						event.target.style.backgroundColor = '';
					}
				}
			},

			/** * Jobs Tab - Build Sub-tab ** */
			tabJobBuild: function() {
				var t = Tabs.Jobs;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabJobBuild']).className = 'selected';
				$(UID['tabJobBuild']).style.zIndex = 1;
				var divClass = 'subtitle';
				
				t.lastSubTab = 'tabJobBuild';
				t.contentType = 2;

				var n = '<div class=' + UID['title'] + '>' + translate('Build') + ' ' + translate('Automatically') + '</div>' + '<div class=' + UID['status_ticker'] + '>' + '	<center><input id=' + setUID('tabJobBuild_OnOff') + ' type=button /></center>' + '	<div id=' + setUID('tabJobBuild_Report') + ' class=' + UID['status_report'] + '>' + '		<table id=' + setUID('tabJobBuild_Table') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div><br>' + '	<div id=' + setUID('tabJobBuild_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>';
				$(UID['tabJob_Header']).style.height = "205px";
				$(UID['tabJob_Header']).innerHTML = n;
				$(UID['tabJob_Content']).innerHTML = '<div id=' + setUID('tabJobBuild_Content') + '>';
				$(UID['tabJob_Content']).style.height = "455px";

				m = '<div style="margin-bottom:5px;">' + '	<table class=' + UID['table'] + ' width=100%>' + '		<tr valign=top>' + '			<td width=5% align=center><input id=' + setUID('tabJobBuild_HideFields') + ' ' + (Data.options.building.hide_fields ? 'CHECKED ' : '') + ' type=checkbox /></td>' + '			<td align=left>' + translate('Hide resource fields') + '</td>' + '		</tr>' + '	</table>' + '</div>';
				var el = [],
					listC = [],
					listF = [],
					cl = [];
				for (var cityIdx = 0; cityIdx < Seed.cities.length; cityIdx++) {
					if (Data.options.collapsed.build[cityIdx] == undefined)
						Data.options.collapsed.build[cityIdx] = false;
				}
				verboseLog('' + inspectObj(Seed.cities, 8, 1));
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					divClass = 'subtitle';
					switch (cityIdx) {
						case CAPITAL.id:
							listC = capital_buildings;
							listF = field_buildings;
							verboseLog('cityIdx : ' + cityIdx + ', CAPITAL.id : ' + CAPITAL.id);
							break;
						case SPECTRAL_OUTPOST.id:
							listC = spectral_buildings;
							listF = spectral_fields;
							divClass = 'subtitle_sr';
							verboseLog('cityIdx : ' + cityIdx + ', SPECTRAL_OUTPOST.id : ' + SPECTRAL_OUTPOST.id);
							break;
						case SKY_OUTPOST.id:
							listC = skythrone_buildings;
							listF = false;
							verboseLog('cityIdx : ' + cityIdx + ', SKY_OUTPOST.id : ' + SKY_OUTPOST.id);
							break;
						case CAVE_OUTPOST.id:
							listC = cave_buildings;
							listF = false;
							verboseLog('cityIdx : ' + cityIdx + ', CAVE_OUTPOST.id : ' + CAVE_OUTPOST.id);
							break;
						case LUNA_OUTPOST.id:
							listC = luna_buildings;
							listF = false;
							verboseLog('cityIdx : ' + cityIdx + ', LUNA_OUTPOST.id : ' + LUNA_OUTPOST.id);
							break;
						case COLOSSUS_OUTPOST.id:
							listC = colossus_buildings;
							listF = false;
							verboseLog('cityIdx : ' + cityIdx + ', COLOSSUS_OUTPOST.id : ' + COLOSSUS_OUTPOST.id);
							break;
						default:
							listC = outpost_buildings;
							listF = field_buildings;
							verboseLog('cityIdx : ' + cityIdx + ', default ');
							break;
					}

					if (Seed.cities[cityIdx]) {
						var city = Seed.cities[cityIdx];
						var cityBuildId = 'tabJobBuild_cityId_' + cityIdx;
						var accordionId = 'tabJobBuild_accordion_' + cityIdx;
						var cityBuildListId = 'tabJobBuild_cityList_' + cityIdx;
						m += '<div class=' + UID['content'] + ' style="margin-bottom:5px;">' + '<A><div id=' + setUID(cityBuildId) + ' class=' + UID[divClass] + ' ref="' + cityIdx + '">' + '<table width=100%>' + '	<tr><td align=center width=100% style="border-right:none">' + ((city.type == 'Outpost') ? translate(city.name) : city.name) + '</td>' + '		<td align=right style="border-right:none"><div id=' + setUID(accordionId) + ' ref="' + cityIdx + '"></div></td>' + '</tr></table></div></A>' + '<div id=' + setUID(cityBuildListId) + '>' + '<table class=' + UID['table'] + '>';
						cl.push(UID[cityBuildId]);
						if (!Data.options.building.hide_fields && listF) {
							for (var i = 0; i < listF.length; ++i) {
								var max_level = Seed.stats.building[listF[i]].level.length - 1;
								var min_level = (Buildings.getLevel(cityIdx, listF[i])).min;
								if (min_level < max_level) {
									m += '	<tr>' + '			<td>' + '			<label><input type=checkbox id=' + setUID('tabJobBuild_CB_' + (cityIdx + '_' + listF[i])) + ' ref=' + (cityIdx + '_' + listF[i]) + ' ' + (Data.options.building.level_enable[cityIdx][listF[i]] ? 'checked' : '') + ' /> ' + translate(listF[i]) + '</label>' + '			</td>' + '			<td>' + '			&nbsp;<span class=jewel>' + min_level + '</span>' + '			</td>' + '			<td>' + buildDisplayCap(cityIdx, (listC.length + i), listF[i]) + '</td>' + '		</tr>';
									el.push(UID['tabJobBuild_CB_' + (cityIdx + '_' + listF[i])]);
								} else {
									Data.options.building.level_enable[cityIdx][listF[i]] = false;
								}
							}
							m += '<tr><td colspan=5><hr></td></tr>';
						}
						for (var i = 0; i < listC.length; ++i) {
							var max_level = Seed.stats.building[listC[i]].level.length - 1;
							var min_level = (Buildings.getLevel(cityIdx, listC[i])).min;
							if (min_level < max_level) {
								m += '	<tr>' + '			<td>' + '			<label><input type=checkbox id=' + setUID('tabJobBuild_CB_' + (cityIdx + '_' + listC[i])) + ' ref=' + (cityIdx + '_' + listC[i]) + ' ' + (Data.options.building.level_enable[cityIdx][listC[i]] ? 'checked' : '') + ' /> ' + translate(listC[i]) + '</label>' + '			</td>' + '			<td>' + '			&nbsp;<span class=jewel>' + min_level + '</span>' + '			</td>' + '			<td>' + buildDisplayCap(cityIdx, i, listC[i]) + '</td>' + '		</tr>';
								el.push(UID['tabJobBuild_CB_' + (cityIdx + '_' + listC[i])]);
							} else {
								Data.options.building.level_enable[cityIdx][listC[i]] = false;
							}
						}
						m += '</table></div></div>';
					}
				}
				m += '</div>';
				var container = $(UID['tabJobBuild_Content']);
				container.style.height = container.offsetHeight + 'px';
				container.innerHTML = m;

				for (var c = 0; c < cl.length; c++) {
					$(cl[c]).addEventListener('click', toggleHideShow, false);
					var cityIdx = $(cl[c]).getAttribute('ref');
					var div_id = 'tabJobBuild_cityList_' + cityIdx;
					var acc_id = 'tabJobBuild_accordion_' + cityIdx;
					var div_el = $(UID[div_id]);
					if (Data.options.collapsed.build[cityIdx]) {
						div_el.style.display = 'none';
						$(UID[acc_id]).innerHTML = '+&nbsp';
					} else {
						div_el.style.display = 'block';
						$(UID[acc_id]).innerHTML = '-&nbsp';
					}
				}
				for (var i = 0; i < el.length; i++) {
					$(el[i]).addEventListener('click', checkedBuild, false);
				}
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx]) {
						var buildList;
						if (!Data.options.building.hide_fields) {
							switch (cityIdx) {
								case CAPITAL.id:
									buildList = capital_buildings.concat(field_buildings);
									break;
								case SPECTRAL_OUTPOST.id:
									buildList = spectral_buildings.concat(spectral_fields);
									break;
								case SKY_OUTPOST.id:
									buildList = skythrone_buildings;
									break;
								case CAVE_OUTPOST.id:
									buildList = cave_buildings;
									break;
								case LUNA_OUTPOST.id:
									buildList = luna_buildings;
									break;
								case COLOSSUS_OUTPOST.id:
									buildList = colossus_buildings;
									break;
								default:
									buildList = outpost_buildings.concat(field_buildings);
									break;
							}
						} else {
							switch (cityIdx) {
								case CAPITAL.id:
									buildList = capital_buildings;
									break;
								case SPECTRAL_OUTPOST.id:
									buildList = spectral_buildings;
									break;
								case SKY_OUTPOST.id:
									buildList = skythrone_buildings;
									break;
								case CAVE_OUTPOST.id:
									buildList = cave_buildings;
									break;
								case LUNA_OUTPOST.id:
									buildList = luna_buildings;
									break;
								case COLOSSUS_OUTPOST.id:
									buildList = colossus_buildings;
									break;
								default:
									buildList = outpost_buildings;
									break;
							}
						}
						for (var i = 0; i < buildList.length; ++i) {
							var max_level = Seed.stats.building[buildList[i]].level.length - 1;
							var min_level = (Buildings.getLevel(cityIdx, buildList[i])).min;
							if (min_level >= max_level) continue;
							var selectMenu = $(UID['tabJobBuild_Cap_' + cityIdx + '_' + buildList[i]]);
							try {
								if (!Data.options.building.level_cap[cityIdx][i]) {
									var min_lev = (Buildings.getLevel(cityIdx, buildList[i])).min;
									var lowestBuildingLevel = (min_lev < 9 ? 9 : min_lev);
									selectMenu.selectedIndex = lowestBuildingLevel;
									Data.options.building.level_cap[cityIdx][i] = lowestBuildingLevel;
								} else {
									selectMenu.selectedIndex = Data.options.building.level_cap[cityIdx][i];
									selectMenu.options[Data.options.building.level_cap[cityIdx][i]].selected = true;
									if (Data.options.building.level_enable[cityIdx][buildList[i]])
										t.checkBuildReqs(cityIdx, buildList[i]);
								}
							} catch (e) {}
							selectMenu.addEventListener('change', changeBuildCap, false);
						}
					}
				}
				$(UID['tabJobBuild_HideFields']).addEventListener('click', onCheckHide, false);
				$(UID['tabJobBuild_OnOff']).addEventListener('click', function() {
					var t = Tabs.Jobs;
					t.setBuildEnable(!Data.options.building.enabled);
				}, false);
				t.refreshBuildButton(Data.options.building.enabled);

				function onCheckHide(event) {
					Data.options.building.hide_fields = event.target.checked;
					if (Data.options.building.hide_fields) {
						for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
							var list = [];
							switch (cityIdx) {
								case CAPITAL.id:
									list = field_buildings;
									break;
								case SPECTRAL_OUTPOST.id:
									list = spectral_fields;
									break;
								case SKY_OUTPOST.id:
									list = false;
									break;
								case CAVE_OUTPOST.id:
									list = false;
									break;
								case LUNA_OUTPOST.id:
									list = false;
									break;
								case COLOSSUS_OUTPOST.id:
									list = false;
									break;
								default:
									list = field_buildings;
									break;
							}
							if (list)
								for (var i = 0; i < list.length; ++i)
									Data.options.building.level_enable[cityIdx][list[i]] = false;
						}
					}
					setTimeout(t.tabJobBuild, 1000);
				}

				function checkedBuild(event) {
					var ref = event.target.getAttribute('ref');
					var idx = ref.split('_');
					var cityId = Seed.cities[idx[0]].id;
					Data.options.building.level_enable[idx[0]][idx[1]] = event.target.checked;
					if (Data.options.building.level_enable[idx[0]][idx[1]]) t.checkBuildReqs(idx[0], idx[1]);
					if (Data.options.building.enabled && event.target.checked) t.buildTick();
				}

				function buildDisplayCap(cityIdx, listIdx, type) {
					var maxLvl = Seed.stats.building[type].level.length - 1;
					var minLvl = (Buildings.getLevel(cityIdx, type)).min;
					var m = '<td>' + '	<select id=' + setUID('tabJobBuild_Cap_' + cityIdx + '_' + type) + ' ref=' + (cityIdx + '_' + listIdx) + '>' + '		<option value=0' + (minLvl > 0 ? ' style="display:none;"' : '') + '>0</option>' + '		<option value=1' + (minLvl > 1 ? ' style="display:none;"' : '') + '>1</option>' + '		<option value=2' + (minLvl > 2 ? ' style="display:none;"' : '') + '>2</option>' + '		<option value=3' + (minLvl > 3 ? ' style="display:none;"' : '') + '>3</option>' + '		<option value=4' + (minLvl > 4 ? ' style="display:none;"' : '') + '>4</option>' + '		<option value=5' + (minLvl > 5 ? ' style="display:none;"' : '') + '>5</option>' + '		<option value=6' + (minLvl > 6 ? ' style="display:none;"' : '') + '>6</option>' + '		<option value=7' + (minLvl > 7 ? ' style="display:none;"' : '') + '>7</option>' + '		<option value=8' + (minLvl > 8 ? ' style="display:none;"' : '') + '>8</option>' + '		<option value=9' + (minLvl > 9 ? ' style="display:none;"' : '') + '>9</option>' + '		<option value=10' + ((minLvl > 10 || maxLvl < 10) ? ' style="display:none;"' : '') + '>10</option>' + '		<option value=11' + ((minLvl > 11 || maxLvl < 11) ? ' style="display:none;"' : '') + '>11</option>' + '		<option value=12' + ((minLvl > 12 || maxLvl < 12) ? ' style="display:none;"' : '') + '>12</option>' + '		<option value=13' + ((minLvl > 13 || maxLvl < 13) ? ' style="display:none;"' : '') + '>13</option>' + '		<option value=14' + ((minLvl > 14 || maxLvl < 14) ? ' style="display:none;"' : '') + '>14</option>' + '		<option value=15' + ((minLvl > 15 || maxLvl < 15) ? ' style="display:none;"' : '') + '>15</option>' + '		<option value=16' + ((minLvl > 16 || maxLvl < 16) ? ' style="display:none;"' : '') + '>16</option>' + '		<option value=17' + ((minLvl > 17 || maxLvl < 17) ? ' style="display:none;"' : '') + '>17</option>' + '		<option value=18' + ((minLvl > 18 || maxLvl < 18) ? ' style="display:none;"' : '') + '>18</option>' + '		<option value=19' + ((minLvl > 19 || maxLvl < 19) ? ' style="display:none;"' : '') + '>19</option>' + '		<option value=20' + ((minLvl > 20 || maxLvl < 20) ? ' style="display:none;"' : '') + '>20</option>' + '	</select></td>' + '		<td id=' + setUID('tabJobBuild_FB_' + cityIdx + '_' + type) + ' class=jewel valign=top style="width:250px;white-space:normal;"></td>';
					return m;
				}

				function changeBuildCap(event) {
					var ref = event.target.getAttribute('ref');
					var idx = ref.split('_');
					Data.options.building.level_cap[idx[0]][idx[1]] = event.target[event.target.selectedIndex].value;
					event.target.style.backgroundColor = '';
					if (Data.options.building.level_enable[idx[0]][idx[1]]) t.checkBuildReqs(idx[0], idx[1]);
					if (Data.options.building.enabled) t.buildTick();
				}

				function onScroll(event) {
					if (t.contentType == 2) t.buildScrollPos = $(UID['tabJob_Content']).scrollTop;
				}

				function toggleHideShow(event) {
					if (event.target.tagName == 'DIV')
						element = event.target;
					else {
						var parentElement = event.target.parentNode;
						while (parentElement.tagName != 'DIV') {
							parentElement = parentElement.parentNode;
						}
						element = parentElement;
					}
					var cityIdx = element.getAttribute('ref');
					var div_id = 'tabJobBuild_cityList_' + cityIdx
					var acc_id = 'tabJobBuild_accordion_' + cityIdx;
					var div_el = $(UID[div_id]);
					if (div_el.style.display == 'none') {
						div_el.style.display = 'block';
						$(UID[acc_id]).innerHTML = '-&nbsp';
						Data.options.collapsed.build[cityIdx] = false;
					} else {
						div_el.style.display = 'none';
						$(UID[acc_id]).innerHTML = '+&nbsp';
						Data.options.collapsed.build[cityIdx] = true;
					}
				}
				t.buildStatTick();
				t.clearTimers();
				t.jobsStatTimer = setInterval(t.buildStatTick, 1000);
			},

			/** * Jobs Tab - Dragon Sub-tab ** */
			tabJobDragon: function() {
				var t = Tabs.Jobs;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabJobDragon']).className = 'selected';
				$(UID['tabJobDragon']).style.zIndex = 1;
				
				t.lastSubTab = 'tabJobDragon';
				t.contentType = 6;
				
				var n = '<div class=' + UID['title'] + '>' + translate('Dragon') + ' ' + translate('Healing') + '</div>' + '<div class=' + UID['status_ticker'] + '>' 
						+ '	<div id=' + setUID('tabJobDragon_Report') + ' class=' + UID['status_report'] + '>' 
						+ '		<table id=' + setUID('tabJobDragon_Table') + ' class=' + UID['table'] + '>' 
						+ '		</table>' 
						+ '	</div><br>' 
						+ '	<div id=' + setUID('tabJobDragon_Feedback') + ' class=' + UID['status_feedback'] + '></div>' 
						+ '</div>';

				$(UID['tabJob_Header']).style.height = "205px";
				$(UID['tabJob_Header']).innerHTML = n;
				$(UID['tabJob_Content']).innerHTML = '<div id=' + setUID('tabJobDragon_Content') + '>';
				$(UID['tabJob_Content']).style.height = "455px";

				var m = '';
				var el = [],
					listC = [],
					listF = [],
					cl = [];
				for (var cityIdx = 0; cityIdx < Seed.cities.length; cityIdx++) {
					if (Data.options.collapsed.dragon[cityIdx] == undefined)
						Data.options.collapsed.dragon[cityIdx] = false;
				}
				verboseLog('' + inspectObj(Seed.cities, 8, 1));
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					var dragon = {};
					var stat = {};
					var typeAb = '';
					divClass = 'subtitle';
					switch (cityIdx) {
						case CAPITAL.id:
							dragon = Seed.dragons['GreatDragon'];
							stat = Seed.greatDragons.GreatDragon[dragon.level];
							break;
						case WATER_OUTPOST.id:
							dragon = Seed.dragons['WaterDragon'];
							stat = Seed.greatDragons.WaterDragon[dragon.level];
							typeAb = WATER_OUTPOST.type;
							break;
						case STONE_OUTPOST.id:
							dragon = Seed.dragons['StoneDragon'];
							stat = Seed.greatDragons.StoneDragon[dragon.level];
							typeAb = STONE_OUTPOST.type;
							break;
						case FIRE_OUTPOST.id:
							dragon = Seed.dragons['FireDragon'];
							stat = Seed.greatDragons.FireDragon[dragon.level];
							typeAb = FIRE_OUTPOST.type;
							break;
						case WIND_OUTPOST.id:
							dragon = Seed.dragons['WindDragon'];
							stat = Seed.greatDragons.WindDragon[dragon.level];
							typeAb = WIND_OUTPOST.type;
							break;
						case SPECTRAL_OUTPOST.id:
							dragon = Seed.dragons['SpectralDragon'];
							break;
						case ICE_OUTPOST.id:
							dragon = Seed.dragons['IceDragon'];
							stat = Seed.greatDragons.IceDragon[dragon.level];
							typeAb = ICE_OUTPOST.type;
							break;
						case SWAMP_OUTPOST.id:
							dragon = Seed.dragons['SwampDragon'];
							stat = Seed.greatDragons.SwampDragon[dragon.level];
							typeAb = SWAMP_OUTPOST.type;
							break;
						case FOREST_OUTPOST.id:
							dragon = Seed.dragons['ForestDragon'];
							stat = Seed.greatDragons.ForestDragon[dragon.level];
							typeAb = FOREST_OUTPOST.type;
							break;
						case DESERT_OUTPOST.id:
							dragon = Seed.dragons['DesertDragon'];
							stat = Seed.greatDragons.DesertDragon[dragon.level];
							typeAb = DESERT_OUTPOST.type;
							break;
						case CHRONO_OUTPOST.id:
							dragon = Seed.dragons['ChronoDragon'];
							stat = Seed.greatDragons.ChronoDragon[dragon.level];
							typeAb = CHRONO_OUTPOST.type;
							break;
						case SKY_OUTPOST.id:
							dragon = Seed.dragons['KaiserDragon'];
							stat = Seed.greatDragons.KaiserDragon[dragon.level];
							typeAb = SKY_OUTPOST.type;
							break;
						case CAVE_OUTPOST.id:
							dragon = Seed.dragons['CaveDragon'];
							stat = Seed.greatDragons.CaveDragon[dragon.level];
							typeAb = CAVE_OUTPOST.type;
							break;
						case LUNA_OUTPOST.id:
							dragon = Seed.dragons['LunaDragon'];
							stat = Seed.greatDragons.LunaDragon[dragon.level];
							typeAb = LUNA_OUTPOST.type;
							break;
						case COLOSSUS_OUTPOST.id:
							dragon = Seed.dragons['ColossusDragon'];
							stat = Seed.greatDragons.ColossusDragon[dragon.level];
							typeAb = COLOSSUS_OUTPOST.type;
							break;
					}

					if (Seed.cities[cityIdx] && cityIdx != SPECTRAL_OUTPOST.id) {
						var city = Seed.cities[cityIdx];
						var cityDragonId = 'tabJobDragon_cityId_' + cityIdx;
						var accordionId = 'tabJobDragon_accordion_' + cityIdx;
						var cityDragonListId = 'tabJobDragon_cityList_' + cityIdx;
						m += '<div class=' + UID['content'] + ' style="margin-bottom:5px;">' 
							+ '<A><div id=' + setUID(cityDragonId) + ' class=' + UID[divClass] + ' ref="' + cityIdx + '">' 
							+ '<table width=100%>' 
							+ '	<tr><td align=center width=100% style="border-right:none">' + ((city.type == 'Outpost') ? translate(city.name) : city.name) + '</td>' 
							+ '		<td align=right style="border-right:none"><div id=' + setUID(accordionId) + ' ref="' + cityIdx + '"></div></td>' 
							+ '</tr></table></div></A>' 
							+ '<div id=' + setUID(cityDragonListId) + '>';
						cl.push(UID[cityDragonId]);
						if(dragon.type) {
							var dragonType = dragon.type.substring(dragon.type.indexOf('::') + 2);
							dragonType = (dragonType == 'CityGreatDragon') ? 'GreatDragon' : dragonType;
							
							m += '<div class=' + UID['subtitle_light'] + '>' + translate(dragonType) + '</div>';
							m += '<table class=' + UID['table'] + '>';
							m += '<tr><td class=right>' + translate('level') + ' : </td><td align=right>' + dragon.level + '</td></tr>';
							m += '<tr><td class=right>' + translate('Melee') + ' : </td><td align=right>' + numf(stat.melee, ' ') + '</td></tr>';
							m += '<tr><td class=right>' + translate('Defense') + ' : </td><td align=right>' + numf(stat.defense, ' ') + '</td></tr>';
							m += '<tr><td class=right>' + translate('Speed') + ' : </td><td align=right>' + numf(stat.speed, ' ') + '</td></tr>';
							m += '<tr><td class=right>' + translate('Range') + ' : </td><td align=right>' + numf(stat.range, ' ') + '</td></tr>';
							m += '<tr><td class=right>' + translate('Ranged') + ' : </td><td align=right>' + numf(stat.ranged, ' ') + '</td></tr>';
							m += '<tr><td class=right>' + translate('Life') + ' : </td><td align=right>' + numf(stat.life, ' ') + '</td></tr>';
							m += '</table>';
							
							m += '<div class=' + UID['subtitle_light'] + '>' + translate('Armor') + '&nbsp;&amp;&nbsp;' + translate('Scales') + '</div>';
							m += '<table class=' + UID['table'] + '>';
							var mArmor = translate('Not ready') + countArmorDragon(dragonType);
							if (dragon.customizations && dragon.customizations.armor && dragon.slots && dragon.slots.armor) {
								mArmor = dragon.slots.armor;
							}
							m += '<tr><td class=right>' + translate('Armor') + ' : </td><td>' + translate(mArmor) + '</td>';
							m +='<td>';
							for(var b in Seed.armorScale) {
								if(Seed.armorScale[b].name == mArmor) {
									for(var s in Seed.armorScale[b].stats){
										if(Seed.armorScale[b].stats[s] != 0) {
											m += translate(s) + ' + ' + numf(Seed.armorScale[b].stats[s], ' ') + ', ';
										}
									}
								}
							}
							m +='</td>';
							var mScale = 'n/a';
							if (dragon.customizations && dragon.customizations.scales && dragon.slots && dragon.slots.scales) {
								mScale = dragon.slots.scales;
							}
							m += '<tr><td class=right>' + translate('Scales') + ' : </td><td>' + translate(mScale) + '</td>';
							m +='<td>';
							for(var b in Seed.armorScale) {
								if(Seed.armorScale[b].name == mScale) {
									for(var s in Seed.armorScale[b].stats){
										if(Seed.armorScale[b].stats[s] != 0) {
											m += translate(s) + ' + ' + numf(Seed.armorScale[b].stats[s], ' ') + ', ';
										}
									}
								}
							}
							m +='</td>';
							m += '</table>';
							
							if(dragon.battle_arts.length > 0) {
								m += '<div class=' + UID['subtitle_light'] + '>' + translate('battle-arts') + '</div>';
								m += '<table class=' + UID['table'] + '>';
								for (var ba=0 ; ba < dragon.battle_arts.length ; ba++) {
									var battleArt = {};
									var battleArtAmount = 0;
									for(var dba=0 ; dba < Manifest.data.dragon_battle_arts.length ; dba++) {
										if(dragon.battle_arts[ba].name == Manifest.data.dragon_battle_arts[dba].name) {
											battleArt = Manifest.data.dragon_battle_arts[dba];
											break;
										}
									}
									for(dba=0 ; dba < battleArt.bonus.length ; dba++) {
										if(battleArt.bonus[dba].level == dragon.battle_arts[ba].level) {
											battleArtAmount = battleArt.bonus[dba].amount;
											break;
										}
									}
									m += '<tr><td class=right>' + translate('dragonpower-' + dragon.battle_arts[ba].name.replace(/_/g, '')) + ' : </td><td align=right>' + dragon.battle_arts[ba].level + '</td>';
									m += '<td><span class="' + UID['information'] + '" style="width:auto !important;" title="' + (translate(typeAb+'dragonpower-'+battleArt.slot+'-detail')).replace('%num', numf(battleArtAmount, ' ')).replace(/"/g, '\"') + '">&nbsp;&nbsp;&nbsp;</span></td></tr>';
								}
							}
							m += '</table></div></div>';
						}
					}
				}
				m += '</div>';
				var container = $(UID['tabJobDragon_Content']);
				container.style.height = container.offsetHeight + 'px';
				container.innerHTML = m;

				for (var c = 0; c < cl.length; c++) {
					$(cl[c]).addEventListener('click', toggleHideShow, false);
					var cityIdx = $(cl[c]).getAttribute('ref');
					var div_id = 'tabJobDragon_cityList_' + cityIdx;
					var acc_id = 'tabJobDragon_accordion_' + cityIdx;
					var div_el = $(UID[div_id]);
					if (Data.options.collapsed.dragon[cityIdx]) {
						div_el.style.display = 'none';
						$(UID[acc_id]).innerHTML = '+&nbsp';
					} else {
						div_el.style.display = 'block';
						$(UID[acc_id]).innerHTML = '-&nbsp';
					}
				}
				
				t.dragonStatTick();
				t.clearTimers();
				t.jobsStatTimer = setInterval(t.dragonStatTick, 1000);
				
				function toggleHideShow(event) {
					if (event.target.tagName == 'DIV')
						element = event.target;
					else {
						var parentElement = event.target.parentNode;
						while (parentElement.tagName != 'DIV') {
							parentElement = parentElement.parentNode;
						}
						element = parentElement;
					}
					var cityIdx = element.getAttribute('ref');
					var div_id = 'tabJobDragon_cityList_' + cityIdx
					var acc_id = 'tabJobDragon_accordion_' + cityIdx;
					var div_el = $(UID[div_id]);
					if (div_el.style.display == 'none') {
						div_el.style.display = 'block';
						$(UID[acc_id]).innerHTML = '-&nbsp';
						Data.options.collapsed.dragon[cityIdx] = false;
					} else {
						div_el.style.display = 'none';
						$(UID[acc_id]).innerHTML = '+&nbsp';
						Data.options.collapsed.dragon[cityIdx] = true;
					}
				}
				
				function countArmorDragon(dragon_type) {
					var armors = ['BodyArmor', 'ClawGuards', 'TailGuard', 'Helmet'];
					var ret = 0;
					for (var i = 0; i < armors.length; i++) {
						if (toNum(Seed.player.items[dragon_type + armors[i]]) !== 0) {
							ret++;
						}
					}
					if (ret == 4) return '';
					else return ' (' + translate('Got') + ' <font color=red>' + ret + '</font>/4)';
				}
			},
			
			/** * Jobs Tab - Trade Sub-tab ** */
			tabJobTrade: function() {
				var t = Tabs.Jobs;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabJobTrade']).className = 'selected';
				$(UID['tabJobTrade']).style.zIndex = 1;
				
				t.lastSubTab = 'tabJobTrade';
				t.contentType = 7;
				
				var n = '<div class=' + UID['title'] + '>' + translate('trade') + '</div>' + '<div class=' + UID['status_ticker'] + '>' 
						+ '	<div id=' + setUID('tabJobTrade_Report') + ' class=' + UID['status_report'] + '>' 
						+ '		<table id=' + setUID('tabJobTrade_Table') + ' class=' + UID['table'] + '>' 
						+ '		</table>' 
						+ '	</div><br>' 
						+ '	<div id=' + setUID('tabJobTrade_Feedback') + ' class=' + UID['status_feedback'] + '></div>' 
						+ '</div>'
						+ '<ul class=tabs>' 
						+ '	<li class="tab first"><a id=' + setUID('tabJobTrade_tabBuy') + '>' + translate('buy') + '</a></li>' 
						+ '	<li class="tab"><a id=' + setUID('tabJobTrade_tabSell') + '>' + translate('sell') + '</a></li>' 
						+ '</ul>';

				$(UID['tabJob_Header']).style.height = "205px";
				$(UID['tabJob_Header']).innerHTML = n;
				$(UID['tabJob_Content']).innerHTML = '<div id=' + setUID('tabJobTrade_Content') + '></div>';
				$(UID['tabJob_Content']).style.height = "455px";
				$(UID['tabJobTrade_tabBuy']).addEventListener('click', t.tabJobTradeBuy, false);
				$(UID['tabJobTrade_tabSell']).addEventListener('click', t.tabJobTradeSell, false);
				
				switch (t.tradeContentType) {
					case 0:
						t.tabJobTradeBuy();
						break;
					case 1:
						t.tabJobTradeSell();
						break;
				}
				
				t.tradeStatTick();
				t.clearTimers();
				t.jobsStatTimer = setInterval(t.tradeStatTick, 1000);
			},
			
			/** * buy sub tab */
			tabJobTradeBuy: function() {
				var t = Tabs.Jobs;

				$(UID['tabJobTrade_tabSell']).className = '';
				$(UID['tabJobTrade_tabSell']).style.zIndex = 0;
				$(UID['tabJobTrade_tabBuy']).className = 'selected';
				$(UID['tabJobTrade_tabBuy']).style.zIndex = 1;

				t.tradeContentType = 0;
				
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' 
					+ '		<div class=' + UID['subtitle'] + '>' + translate('trade') + ' - <b>' + translate('buy') + '</b></div>'
					+ '		<table><tr><td align=right>'
					+ translate('resource') + ' : </td><td> <select id='+setUID('tabTrade_BuyResource')+' >';
				
				for (var p = 0; p < trade_resource_types.length; p++) {
					m += '<option value="' + trade_resource_types[p] + '" '+ (Data.options.trade.buy.resource == trade_resource_types[p] ? 'selected' : '') +' >' + translate(trade_resource_types[p]) + '</option>';
				}
				
				m += '		</select></td></tr>' 
					+ '		<tr><td align=right>' + translate('price') + ' ' + translate('max') + ' : </td><td> <input type=text id='+setUID('tabTrade_PriceMax')+' style="width:70px" value="' + Data.options.trade.buy.price + '" /></td></tr>'
					+ '		<tr><td align=right>' + translate('min-quantity') + ' : </td><td> <input type=text id='+setUID('tabTrade_QtyMin')+' style="width:70px" value="' + Data.options.trade.buy.qty + '" /></td></tr></table>'
					+ '		<center><input value="' + translate('search') + '" id=' + setUID('tabTrade_RefresTableBuy') + ' type=button /></center>'
					+ '		<br /><div class="' + UID['scrollable'] + '" id='+setUID('tabTrade_BuyTable')+'>'
					+ '		</div>'
					+ '</div>';
					
				$(UID['tabJobTrade_Content']).innerHTML = m;
				$(UID['tabTrade_RefresTableBuy']).observe('click', searchForBuy);
				
				$(UID['tabTrade_BuyResource']).observe('change', changeResource);
				$(UID['tabTrade_QtyMin']).observe('keyup', changeQty);
				$(UID['tabTrade_PriceMax']).observe('keyup', changePrice);
				
				function changeQty(event) {
					var x = toNum(event.target.value);
					event.target.value = x;
					Data.options.trade.buy.qty = x;
				}
				
				function changePrice(event) {
					var x = toNum(event.target.value);
					event.target.value = x;
					Data.options.trade.buy.price = x;
				}
				
				function changeResource() {
					Data.options.trade.buy.resource = $(UID['tabTrade_BuyResource']).value;
				}
				
				function searchForBuy() {
					var product = $(UID['tabTrade_BuyResource']).value;
					var nbProduct = $(UID['tabTrade_QtyMin']).value;
					var upperPrice = $(UID['tabTrade_PriceMax']).value;
					new MyAjax.tradeSearch(product, nbProduct, upperPrice, updateTableBuy);
				}
				
				function buyResource(event) {
					var idTrade = event.target.getAttribute('ref');
					new MyAjax.tradeBuy(idTrade, function(result) {
						if (!result.ok) {
							$(UID['tabJobTrade_Feedback']).update(result.errmsg);
						}
						else {
							searchForBuy()
						}
					});
				}
				
				function updateTableBuy(result) {
					var m = '<table class=' + UID['row_style'] + ' width=100%>' 
					+ '<tr class=' + UID['row_headers'] + '>' 
					+ '<td>' + translate('resource') + '</td>' 
					+ '<td>' + translate('price') + '</td>' 
					+ '<td>' + translate('quantity') + '</td>'
					+ '<td>' + translate('seller') + '</td>'
					+ '<td>' + translate('buy') + '</td>'					
					+ '</tr>';
					
					var bT = [];
					
					for(var offer=0; offer < result.offers.length; offer++) {
						setUID('tradeOffer_'+result.offers[offer].id);
						bT.push(UID['tradeOffer_'+result.offers[offer].id]);
						m += '<tr>' 
							+ '<td>' + translate(result.offers[offer].product) + '</td>' 
							+ '<td align=right>' + numf(result.offers[offer].price) + '</td>' 
							+ '<td align=right>' + numf(result.offers[offer].units) + '</td>'
							+ '<td align=center>' + result.offers[offer].seller.name + '( ' + numf(result.offers[offer].seller.might) + ' )' + '</td>'
							+ '<td>' + '<input class=Xtrasmall id="' + UID['tradeOffer_'+result.offers[offer].id] + '" ref="' + result.offers[offer].id + '" type=button  style="width:auto !important;" value="' + translate('buy') + '" \>' + '</td>'					
							+ '</tr>';
					}
					m += '</table>';
					
					$(UID['tabTrade_BuyTable']).innerHTML = m;
					
					for(var i=0; i<bT.length ; i++) {
						$(bT[i]).observe('click', buyResource);
					}
				}
				
			},

			/** * sell sub tab */
			tabJobTradeSell: function() {
				var t = Tabs.Jobs;

				$(UID['tabJobTrade_tabBuy']).className = '';
				$(UID['tabJobTrade_tabBuy']).style.zIndex = 0;
				$(UID['tabJobTrade_tabSell']).className = 'selected';
				$(UID['tabJobTrade_tabSell']).style.zIndex = 1;

				t.tradeContentType = 1;
				
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' 
					+ '		<div class=' + UID['subtitle'] + '>' + translate('trade') + ' - <b>' + translate('sell') + '</b></div>'
					+ '		<table><tr><td align=right>'
					+ translate('resource') + ' : </td><td> <select id='+setUID('tabTrade_SellResource')+' >';
				
				for (var p = 0; p < trade_resource_types.length; p++) {
					m += '<option value="' + trade_resource_types[p] + '" '+ (Data.options.trade.sell.resource == trade_resource_types[p] ? 'selected' : '') +' >' + translate(trade_resource_types[p]) + '</option>';
				}
				
				m += '		</select></td></tr>' 
					+ '		<tr><td align=right>' + translate('price') + ' : </td><td> <input type=text id='+setUID('tabTrade_Price')+' style="width:70px" value="' + Data.options.trade.sell.price + '" /> <span id="'+setUID('tabTrade_SellPriceForSell')+'">' + translate('sellers-fee') + ' : ' + numf(Math.round(toNum(Data.options.trade.sell.price)*5/1000)) + '</span></td></tr>'
					+ '		<tr><td align=right>' + translate('quantity') + ' : </td><td> <input type=text id='+setUID('tabTrade_Quantity')+' style="width:70px" value="' + Data.options.trade.sell.qty + '" /></td></tr></table>'
					+ '		<center><input value="' + translate('sell') + '" id=' + setUID('tabTrade_SellInTrade') + ' type=button /></center><br/>'
					+ '		<div class=' + UID['subtitle'] + '>' + translate('currently-selling') + '(' + translate('expires-in-one-week') + ')</div><br/>'
					+ '		<center><input value="' + translate('Refresh') + '" id=' + setUID('tabTrade_RefreshSellInTrade') + ' type=button /></center><br/>'
					+ '		<div class="' + UID['scrollable'] + '" id='+setUID('tabTrade_SellTable')+'>'
					+ '		</div>'
					+ '</div>';

				$(UID['tabJobTrade_Content']).update(m);
				$(UID['tabTrade_SellInTrade']).observe('click', sellInTrade);
				
				$(UID['tabTrade_SellResource']).observe('change', changeResource);
				$(UID['tabTrade_Quantity']).observe('change', changeQty);
				$(UID['tabTrade_Price']).observe('change', changePrice);
				$(UID['tabTrade_RefreshSellInTrade']).observe('click', getSellInTrade);
				
				function changeQty(event) {
					var x = toNum(event.target.value);
					event.target.value = x;
					Data.options.trade.sell.qty = x;
				}
				
				function changePrice(event) {
					var x = toNum(event.target.value);
					event.target.value = x;
					Data.options.trade.sell.price = x;
					$(UID['tabTrade_SellPriceForSell']).update(translate('sellers-fee') + ' : ' + numf(Math.round(x*5/1000)));
				}
				
				function changeResource() {
					Data.options.trade.sell.resource = $(UID['tabTrade_SellResource']).value;
				}
				
				function getSellInTrade() {
					new MyAjax.tradeSearchSell(updateTableSell);
				}
				
				function sellInTrade() {
					var product = $(UID['tabTrade_SellResource']).value;
					var nbProduct = $(UID['tabTrade_Quantity']).value;
					var price = $(UID['tabTrade_Price']).value;
					new MyAjax.tradeSell(product, nbProduct, price, function(result) {
						if(result.success) {
							$(UID['tabJobTrade_Feedback']).update(translate('OK'));
							getSellInTrade();
						}
						else 
							$(UID['tabJobTrade_Feedback']).update(result.reason);
					});
				}
				
				function updateTableSell(result) {
					
					var m = '<table class=' + UID['row_style'] + ' width=100%>' 
					+ '<tr class=' + UID['row_headers'] + '>' 
					+ '<td>' + translate('resource') + '</td>' 
					+ '<td>' + translate('price') + '</td>' 
					+ '<td>' + translate('quantity') + '</td>'
                    + '<td>' + translate('cancel') + '</td>'
					+ '</tr>';
					var bct = [];
					for(var offer=0; offer < result.player_sells.length; offer++) {
						m += '<tr>' 
							+ '<td>' + translate(result.player_sells[offer].product) + '</td>' 
							+ '<td align=right>' + numf(result.player_sells[offer].price) + '</td>' 
							+ '<td align=right>' + numf(result.player_sells[offer].units) + '</td>'
                            + '<td align=center><input class="Xtrasmall '+UID['btn_red']+'" id="'+setUID(result.player_sells[offer].id)+'" ref="'+result.player_sells[offer].id+'" type="button" style="width:auto !important;" value=" X "></td>' 
							+ '</tr>';
                        bct.push(result.player_sells[offer].id);
					}
					m += '</table>';
					$(UID['tabTrade_SellTable']).update(m);
                    for(var i=0; i<bct.length; i++) {
                        $(UID[bct[i]]).observe('click', function(event) {
                            var idTrade = event.target.getAttribute('ref');
                            MyAjax.tradeCancel(idTrade, getSellInTrade)
                        });
                    }
				}
				
			},
			
			/** * Jobs Tab - Research Sub-tab ** */
			tabJobResearch: function() {
				var t = Tabs.Jobs;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabJobResearch']).className = 'selected';
				$(UID['tabJobResearch']).style.zIndex = 1;
				t.lastSubTab = 'tabJobResearch';

				t.contentType = 3;

				var n = '<div class=' + UID['title'] + '>' + translate('Research') + ' ' + translate('Automatically') + '</div>' + '<div class=' + UID['status_ticker'] + '>' + '	<center><input id=' + setUID('tabJobResearch_OnOff') + ' type=button /></center>' + '	<div id=' + setUID('tabJobResearch_Report') + ' class=' + UID['status_report'] + '>' + '		<table id=' + setUID('tabJobResearch_Table') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div><br>' + '	<div id=' + setUID('tabJobResearch_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>';
				$(UID['tabJob_Header']).style.height = "205px";
				$(UID['tabJob_Header']).innerHTML = n;

				var m = '<div id=' + setUID('tabJobResearch_Config') + ' class=' + UID['content'] + '>';
				var checkBoxs = [];
				var city = Seed.cities[CAPITAL.id];
				m += '<div class=' + UID['subtitle'] + '>' + city.name + '</div>' + '<table class=' + UID['table'] + '>';

				var i = 0;
				for (var id = 0; id < Seed.research.length ; id++) {
					var resName = Seed.research[id];
					var curLvl = Seed.player.research[resName] || 0;
					m += '	<tr>' + '			<td>' + '			<label>' + '			<input type=checkbox id=' + setUID('tabJobResearch_CB_' + resName) + ' ' + (Data.options.research.res_enable[0][resName] ? 'checked' : '') + ' ref=' + i + ' /> ' + translate(resName) + '			</label>' + '			</td>' + '			<td>' + '				<span class=jewel><b>' + curLvl + '</b></span>' + '			</td>' + '			<td>';

					var max_level = (Seed.stats.research[resName].level.length || 12) - 1;
					if (curLvl != max_level) {
						m += '	<td>' + '		<select id=' + setUID('tabJobResearch_Sel_' + resName) + ' ref=' + i + '>';
						for (var lvl = 0; lvl <= max_level; lvl++)
							m += '<option value=' + lvl + (curLvl > lvl ? ' style="display:none;"' : '') + '>' + lvl + '</option>';
						m += '	</select>' + '		</td>';
						checkBoxs.push(UID['tabJobResearch_CB_' + resName]);
					} else {
						m += '	<td>Max</td>';
					}
					m += '<td id=' + setUID('tabJobResearch_FB_' + resName) + ' class=jewel valign=top style="width:250px;white-space:normal;"></td></tr>';
					++i;
				}
				m += '</table></div>';
				$(UID['tabJob_Content']).style.height = "480px";
				$(UID['tabJob_Content']).innerHTML = m;
				for (var i = 0; i < checkBoxs.length; ++i) {
					$(checkBoxs[i]).addEventListener('click', checkedResearch, false);
				}
				for (var id = 0; id < Seed.research.length ; id++) {
					var resName = Seed.research[id];
					var selectMenu = $(UID['tabJobResearch_Sel_' + resName]);
					if (selectMenu) {
						try {
							if (!Data.options.research.res_cap[0][resName]) {
								var currentResearchLevel = t.getCurrentResearchLevel(resName);
								selectMenu.selectedIndex = currentResearchLevel;
								Data.options.research.res_cap[0][resName] = currentResearchLevel;
							} else {
								selectMenu.selectedIndex = Data.options.research.res_cap[0][resName];
								selectMenu.options[Data.options.research.res_cap[0][resName]].selected = true;
								if (Data.options.research.res_enable[0][resName]) {
									t.checkResearchReqs(resName);
								}
							}
						} catch (e) {}
						selectMenu.addEventListener('change', changeResearchCap, false);
					}
				}
				$(UID['tabJobResearch_OnOff']).addEventListener('click', function() {
					var t = Tabs.Jobs;
					t.setResearchEnable(!Data.options.research.enabled);
				}, false);
				t.refreshResearchButton(Data.options.research.enabled);

				function checkedResearch(event) {
					var t = Tabs.Jobs;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.research.res_enable[0][Seed.research[n]] = event.target.checked;
					if (Data.options.research.res_enable[0][Seed.research[n]])
						t.checkResearchReqs(Seed.research[n]);
					if (Data.options.research.enabled) t.researchTick();
				}

				function changeResearchCap(event) {
					var t = Tabs.Jobs;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.research.res_cap[0][Seed.research[n]] = event.target[event.target.selectedIndex].value;
					event.target.style.backgroundColor = '';
					if (Data.options.research.res_enable[0][Seed.research[n]])
						t.checkResearchReqs(Seed.research[n]);
					if (Data.options.research.enabled) t.researchTick();
				}
				t.researchStatTick();
				t.clearTimers();
				t.jobsStatTimer = setInterval(t.researchStatTick, 1000);
			},

			/** * Jobs Tab - Resurrect Sub-tab ** */
			tabJobResurrect: function() {
				var t = Tabs.Jobs;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabJobResurrect']).className = 'selected';
				$(UID['tabJobResurrect']).style.zIndex = 1;
				t.lastSubTab = 'tabJobResurrect';

				t.contentType = 4;

				var n = '<div class=' + UID['title_sr'] + '>' + translate('revive-troops') + '</div>' + '<div class=' + UID['status_ticker'] + '>' + '	<center><input id=' + setUID('tabJobResurrect_OnOff') + ' type=button /></center>' + '	<div id=' + setUID('tabJobResurrect_Report') + ' class=' + UID['status_report'] + '>' + '		<table id=' + setUID('tabJobResurrect_Table') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div>' + '	<br>' + '	<div id=' + setUID('tabJobResurrect_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>';
				$(UID['tabJob_Header']).style.height = "205px";
				$(UID['tabJob_Header']).innerHTML = n;

				var m = '<div id=' + setUID('tabJobResurrect_Config') + ' class=' + UID['content'] + '>';
				var sl = [],
					bm = [],
					cm = [];
				var city = Seed.cities[CAPITAL.id];

				var cap = getSoulCapacity(),
					capacity = '';
				if (cap && cap.max > 0) {
					var pct = cap.min / cap.max * 10000;
					var capacity = numf(cap.min, ' ') + ' / ' + numf(cap.max, ' ') + ' (' + numf(Math.round(pct / 100), ' ') + '%)';
				} else capacity = '';
				m += '<div class=' + UID['subtitle'] + '>' + '	<table class=' + UID['table'] + ' width=100%>' + '	<tr>' + '		<td align=left width=25%>&nbsp;</td>' + '		<td align=center width=40%>' + translate(Seed.cities[SPECTRAL_OUTPOST.id].name) + '</td>' + '		<td align=right width=25%><font color=yellow>' + capacity + '</font></td>' + '	</tr>' + '</table></div>' + '<table class=' + UID['table'] + '>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td></td><td>' + translate('Quantity') + '</td><td>' + translate('revive-troops-total-souls') + '</td><td>' + translate('Action') + '</td><td>' + translate('Total') + '</td></tr>';
				for (var i = 0; i < all_unit_types.length; i++) {
					var num = Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[i]];
					if (!num || isNaN(num)) num = 0;
					var souls = city.souls[all_unit_types[i]];
					if (!souls || isNaN(souls)) souls = 0;
					if ((/(DarkSlayer|Harrier|ShadowStalker|WarScarab|VoltRanger|DragonRider)/.test(all_unit_types[i]))) {
						m += '<tr>' + '		<td width=1% align=left>&nbsp</td>' + '		<td width=25%>' + '			<label>' + translate(all_unit_types[i]) + '</label>' + '		</td>' + '		<td align=right width=10%><div id=' + setUID('tabJobResurrect_Troop_' + i) + ' ref=' + i + '>N/A</div></td>' + '      <td></td>' + '		<td align=right width=10%>&nbsp;' + numf(souls, ' ') + '</td>' + '		<td align=right width=10%>&nbsp;<span class=jewel>(' + numf(getTroopNumbers(Seed.cities[CAPITAL.id], all_unit_types[i]).total, ' ') + ')</span></td>' + '		<td id=' + setUID('tabJobResurrect_FB_' + i) + ' class=jewel valign=top style="width:250px;white-space:normal;"></td>' + '		</tr>';
					} else {
						m += '<tr>' + '		<td width=1% align=left><label>' + '			<input type=checkbox id=' + setUID('tabJobResurrect_CB_' + i) + ' ' + (Data.options.resurrect.res_enable[SPECTRAL_OUTPOST.id][all_unit_types[i]] ? 'checked' : '') + ' ref=' + i + ' /> ' + '		</label></td>' + '		<td width=25%>' + '			<label>' + translate(all_unit_types[i]) + '</label>' + '		</td>' + '		<td align=middle width=10%><input type=text id=' + setUID('tabJobResurrect_Troop_' + i) + ' ref=' + i + ' maxlength=8 size=3 value="' + num + '" style="width:60px; text-align:right;" /></td>' + '      <td align=middle width=10%>' + '          <input id=' + setUID('tabJobResurrect_MaxTroop_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=button value=' + translate('Max') + ' />' + '          <input id=' + setUID('tabJobResurrect_ClearTroop_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=button value=X />' + '      </td>' + '		<td align=right width=10%>&nbsp;' + numf(souls, ' ') + '</td>' + '		<td align=right width=10%>&nbsp;<span class=jewel>(' + numf(getTroopNumbers(Seed.cities[CAPITAL.id], all_unit_types[i]).total, ' ') + ')</span></td>' + '		<td id=' + setUID('tabJobResurrect_FB_' + i) + ' class=jewel valign=top style="width:250px;white-space:normal;"></td>' + '		</tr>';
						sl.push(UID['tabJobResurrect_CB_' + i]);
						bm.push(UID['tabJobResurrect_MaxTroop_' + i]);
						cm.push(UID['tabJobResurrect_ClearTroop_' + i]);
					}
				}
				m += '</table></div>';
				$(UID['tabJob_Content']).style.height = "450px";
				$(UID['tabJob_Content']).innerHTML = m;

				for (var i = 0; i < sl.length; ++i) {
					$(sl[i]).addEventListener('click', checkedResurrect, false);
				}
				for (var i = 0; i < bm.length; ++i) {
					$(bm[i]).addEventListener('click', setMaxSoul, false);
				}
				for (var i = 0; i < cm.length; ++i) {
					$(cm[i]).addEventListener('click', clearTroop, false);
				}
				for (var id = 0; id < all_unit_types.length; id++) {
					var maxSouls = $(UID['tabJobResurrect_Troop_' + id]);
					try {
						var currentSouls = city.souls[all_unit_types[id]];
						if (!currentSouls || isNaN(currentSouls)) currentSouls = 0;
						if (!Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[id]]) {
							maxSouls.value = currentSouls;
							Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[id]] = currentSouls;
						} else {
							maxSouls.value = resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[id]];
							if (Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[id]]) {
								var currentMax = Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[id]];
								var checkQty = (currentSouls > currentMax) ? currentMax : currentSouls;
								t.checkResurrectReqs(all_unit_types[id], checkQty);
							}
						}
					} catch (e) {}
					maxSouls.addEventListener('change', changeResurrectMax, false);
				}
				$(UID['tabJobResurrect_OnOff']).addEventListener('click', function() {
					var t = Tabs.Jobs;
					t.setResurrectEnable(!Data.options.resurrect.enabled);
				}, false);
				t.refreshResurrectButton(Data.options.resurrect.enabled);

				function setMaxSoul(event) {
					var n = toNum(event.target.getAttribute('ref'));
					$(UID['tabJobResurrect_Troop_' + n]).value = Seed.cities[CAPITAL.id].souls[all_unit_types[n]];
				}

				function clearTroop(event) {
					var n = toNum(event.target.getAttribute('ref'));
					$(UID['tabJobResurrect_Troop_' + n]).value = 0;
				}

				function checkedResurrect(event) {
					var t = Tabs.Jobs;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.resurrect.res_enable[SPECTRAL_OUTPOST.id][all_unit_types[n]] = event.target.checked;

					if (Data.options.resurrect.res_enable[SPECTRAL_OUTPOST.id][all_unit_types[n]]) {
						var currentSouls = Seed.cities[CAPITAL.id].souls[all_unit_types[n]];
						if (!currentSouls || isNaN(currentSouls)) currentSouls = 0;
						var currentMax = Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[n]];
						var checkQty = (currentSouls > currentMax) ? currentMax : currentSouls;
						t.checkResurrectReqs(all_unit_types[n], checkQty);
					} else {
						try {
							$(UID['tabJobResurrect_FB_' + n]).innerHTML = '';
							$(UID['tabJobResurrect_Troop_' + n]).style.backgroundColor = "none";
						} catch (e) {}
					}
					if (Data.options.resurrect.enabled) t.resurrectTick();
				}

				function changeResurrectMax(event) {
					var t = Tabs.Jobs;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[n]] = event.target.value;
					event.target.style.backgroundColor = '';

					if (Data.options.resurrect.res_enable[SPECTRAL_OUTPOST.id][all_unit_types[n]]) {
						var currentSouls = Seed.cities[CAPITAL.id].souls[all_unit_types[n]];
						if (!currentSouls || isNaN(currentSouls)) currentSouls = 0;
						var currentMax = Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[n]];
						var checkQty = (currentSouls > currentMax) ? currentMax : currentSouls;
						t.checkResurrectReqs(all_unit_types[n], checkQty);
					}
					if (Data.options.resurrect.enabled) t.resurrectTick();
				}
				t.resurrectStatTick();
				t.clearTimers();
				t.jobsStatTimer = setInterval(t.resurrectStatTick, 1000);
			},

			/** * Jobs Tab - Train Sub-tab ** */
			tabJobSanctuary: function() {
				var t = Tabs.Jobs;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabJobSanctuary']).className = 'selected';
				$(UID['tabJobSanctuary']).style.zIndex = 1;
				t.lastSubTab = 'tabJobSanctuary';

				t.contentType = 5;

				var n = '<div class=' + UID['title'] + '>' + translate('dragon-sanctuary') + '</div>' + '<div class=' + UID['status_ticker'] + ' style="margin-bottom: 5px !important">' + '	<center><input id=' + setUID('tabJobSanctFeeding_OnOff') + ' type=button /></center>' + '	<div id=' + setUID('tabJobSanct_Report') + ' class=' + UID['status_report'] + '>' + '		<table id=' + setUID('tabJobSanct_TableJobs') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div>' + '	<br>' + '	<div id=' + setUID('tabJobSanct_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabJobSanct_tabDragons') + '>' + translate('Dragons') + '</a></li>' + '	<li class="tab"><a id=' + setUID('tabJobSanct_tabBreeding') + '>' + translate('breeding-dragon') + '</a></li>' + '	<li class="tab"><a id=' + setUID('tabJobSanct_tabFeeding') + '>' + translate('upgrading-dragon') + '</a></li>' + '</ul>';
				$(UID['tabJob_Header']).style.height = "225px";
				$(UID['tabJob_Header']).innerHTML = n;

				var m = '<div id=' + setUID('tabJobSanct_Content') + ' style="height:430px; ; max-height:430px; overflow-y:auto">';
				$(UID['tabJob_Content']).style.height = "430px";
				$(UID['tabJob_Content']).innerHTML = m;
				$(UID['tabJobSanct_tabDragons']).addEventListener('click', t.tabJobSanctDragons, false);
				$(UID['tabJobSanct_tabBreeding']).addEventListener('click', t.tabJobSanctBreeding, false);
				$(UID['tabJobSanct_tabFeeding']).addEventListener('click', t.tabJobSanctFeeding, false);
				$(UID['tabJobSanctFeeding_OnOff']).addEventListener('click', function() {
					var t = Tabs.Jobs;
					t.setFeedingEnable(!Data.options.sanctuary.enabled);
				}, false);
				t.refreshFeedingButton(Data.options.sanctuary.enabled);
				switch (t.sanctContentType) {
					case 0:
						t.tabJobSanctDragons();
						break;
					case 1:
						t.tabJobSanctBreeding();
						break;
					case 2:
						t.tabJobSanctFeeding();
						break;
				}
				t.sanctStatTick();
				t.clearTimers();
				t.jobsStatTimer = setInterval(t.sanctStatTick, 1000);
			},

			/** * Jobs Tab - Sanctuary Sub-tab - Dragons overview Sub-Sub-tab ** */
			tabJobSanctDragons: function() {
				var t = Tabs.Jobs;
				$(UID['tabJobSanct_tabBreeding']).className = '';
				$(UID['tabJobSanct_tabBreeding']).style.zIndex = 0;
				$(UID['tabJobSanct_tabFeeding']).className = '';
				$(UID['tabJobSanct_tabFeeding']).style.zIndex = 0;
				$(UID['tabJobSanct_tabDragons']).className = 'selected';
				$(UID['tabJobSanct_tabDragons']).style.zIndex = 1;

				t.sanctContentType = 0;
				var dragons = new Array(),
					roosts = new Array(),
					nests = new Array(),
					rookery = new Array(),
					used_roost = 0,
					avail_roost = Buildings.getCount(CAPITAL.id, 'Roost');
				for (var i in Seed.sanctuary_dragons) {
					var dragon = Seed.sanctuary_dragons[i];
					if (dragon.gender == null || !dragon.gender) dragon.gender = '';
					if ((!dragon.building_id || dragon.building_id == null) && dragon.gender != '' && is_null(dragon.abilities)) dragons.push(dragon);
					if ((!dragon.building_id || dragon.building_id == null) && dragon.gender != '' && !is_null(dragon.abilities)) rookery.push(dragon);
					else if (getBuildingById(CAPITAL.id, dragon.building_id).toLowerCase() == 'roost') {
						roosts.push(dragon);
						used_roost++;
					} else if (getBuildingById(CAPITAL.id, dragon.building_id).toLowerCase() == 'nest') nests.push(dragon);
				}
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' + '<div class=' + UID['subtitle'] + '>' + translate('dragons') + '</div>' + '	<table class=' + UID['row_style'] + ' width=100%>';
				for (var d = 0; d < dragons.length; d++) {
					if (dragons[d].level !== undefined)
						m += '	<tr valign=top>' + '			<td class=left width=40%>' + translateByKey(dragons[d].subtype, 'rank-' + dragons[d].type, 'dragons') + '</td>' + '			<td width=10%><label>' + translate(dragons[d].gender) + '</label></td>' + '			<td width=5%><label>' + dragons[d].level + '</label></td>' + '			<td width=45%>' + dispAbility(dragons[d].abilities) + '</td>' + '	</tr>';
				}
				m += '</table>' + '<br><div class=' + UID['subtitle'] + '>' + translate('dragonroost') + '</div>' + '	<table class=' + UID['row_style'] + ' width=100%>';
				for (var d = 0; d < roosts.length; d++) {
					m += '	<tr valign=top>' + '			<td class=left width=40%><b>' + translate('Type') + '</b>:' + translateByKey(roosts[d].subtype, 'rank-' + roosts[d].type, 'dragons') + '<br /><b>'+translate('name')+'</b> : ' + roosts[d].name + '<br>' + '			<input id=' + setUID('tabJobSanct_Remove_' + roosts[d].id) + ' ref=' + roosts[d].id + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('unequip').initCap() + '" />&nbsp;&nbsp;' + '			<input id=' + setUID('tabJobSanct_Delete_' + roosts[d].id) + ' ref=' + roosts[d].id + ' class="Xtrasmall ' + UID['btn_red'] + '" style="width:auto !important;" type=submit value="' + translate('dismiss') + '" /></td>' + '			<td width=10%><label>' + translate(roosts[d].gender) + '</label></td>' + '			<td width=5%><label>' + roosts[d].level + '</label></td>' + '			<td width=45%>' + dispAbility(roosts[d].abilities) + '</td>' + '	</tr>';
				}
				m += '</table>' + '<br><div class=' + UID['subtitle'] + '>' + translateByKey('masterrookery', undefined, 'dialogs') + ' - ' + Seed.sanctuary_dragons.player_slots + '</div>' + '	<table class=' + UID['row_style'] + ' width=100%>';
				for (var d = 0; d < rookery.length; d++) {
					m += '	<tr valign=top>' + '			<td class=left width=40%><b>' + translate('Type') + '</b>:' + translateByKey(rookery[d].subtype, 'rank-' + rookery[d].type, 'dragons') + '<br /><b>'+translate('name')+'</b> : ' + rookery[d].name + '<br>' + '			<input id=' + setUID('tabJobSanct_Equip_' + rookery[d].id) + ' ref=' + rookery[d].id + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Equip').initCap() + '" />&nbsp;&nbsp;' + '			<input id=' + setUID('tabJobSanct_Delete_' + rookery[d].id) + ' ref=' + rookery[d].id + ' class="Xtrasmall ' + UID['btn_red'] + '" style="width:auto !important;" type=submit value="' + translate('dismiss') + '" /></td>' + '			<td width=10%><label>' + translate(rookery[d].gender) + '</label></td>' + '			<td width=5%><label>' + rookery[d].level + '</label></td>' + '			<td width=45%>' + dispAbility(rookery[d].abilities) + '</td>' + '	</tr>';
				}
				m += '</table>' + '<br><div class=' + UID['subtitle'] + '>' + translate('dragonnest') + '</div>' + '	<table class=' + UID['row_style'] + ' width=100%>';
				for (var d = 0; d < nests.length; d++) {
					m += '	<tr valign=top>' + '			<td class=left width=40%>' + translateByKey(nests[d].subtype, 'rank-' + nests[d].type, 'dragons') + '</td>' + '			<td width=10%><label>' + translate(nests[d].gender) + '</label></td>' + '			<td width=5%><label>' + nests[d].level + '</label></td>' + '			<td width=45%>' + dispAbility(nests[d].abilities) + '</td>' + '	</tr>';
				}
				m += '</table>' + '</div>';
				$(UID['tabJobSanct_Content']).innerHTML = m;
				for (var d = 0; d < roosts.length; d++) {
					$(UID['tabJobSanct_Remove_' + roosts[d].id]).addEventListener('click', removeDragon, false);
					$(UID['tabJobSanct_Delete_' + roosts[d].id]).addEventListener('click', dismissDragon, false);
				}
				for (var d = 0; d < rookery.length; d++) {
					$(UID['tabJobSanct_Delete_' + rookery[d].id]).addEventListener('click', dismissDragon, false);
					$(UID['tabJobSanct_Equip_' + rookery[d].id]).addEventListener('click', equipDragon, false);
					if (avail_roost <= used_roost) setButtonStyle($(UID['tabJobSanct_Equip_' + rookery[d].id]), false);
					else setButtonStyle($(UID['tabJobSanct_Equip_' + rookery[d].id]), true);
				}

				function dismissDragon(event) {
					var n = toNum(event.target.getAttribute('ref'));
					var dragon = translateByKey(Seed.sanctuary_dragons[n].subtype, 'rank-' + Seed.sanctuary_dragons[n].type, 'dragons');
					var msg = translate('dismiss') + ' ' + dragon;
					if (t.contentType == 5) t.jobFeedback(msg);
					var options = {
						dragon_id: n,
						method: 'delete'
					}; /* , building_id */
					MyAjax.dragonHandle(options, function(rslt) {
						if (rslt.ok) {
							actionLog(msg);
						} else {
							verboseLog(translate('Error') + ' ' + msg + ': ' + rslt.errmsg);
							actionLog('<B>' + translate('Error') + ' ' + msg + '</B>: ' + rslt.errmsg);
							if (t.contentType == 5) t.jobFeedback(translate('Error') + ' ' + msg + ': ' + rslt.errmsg);
						}
						t.tabJobSanctDragons();
					});
				}

				function dispAbility(obj) {
					if (!obj || obj.length == 0) return '&nbsp;';
					var m = '<table width=100%>';
					for (var a = 0; a < obj.length; a++) {
						var name = translateByKey('name', obj[a].name.replace(/ |_/g, '-'), 'boosts') + ' ' + obj[a].level;
						var desc = translateByKey('description', obj[a].name.replace(/ |_/g, '-'), 'boosts');
						var rate = ((obj[a].rate < 1) ? numf(obj[a].rate * 100) + '%' : numf(obj[a].rate));
						if (desc.indexOf('n%') > 0)
							desc = desc.substring(0, desc.indexOf('n%')) + rate + desc.substring(desc.indexOf('n%') + 2);
						if (desc.indexOf('%boost%') > 0)
							desc = desc.substring(0, desc.indexOf('%boost%')) + rate + desc.substring(desc.indexOf('%boost%') + 7);
						m += '<tr title="' + desc + '"><td><span class=jewel>' + name + '</span></td></tr>';
					}
					m += '</table>';
					return m;
				}

				function removeDragon(event) {
					var n = toNum(event.target.getAttribute('ref'));
					var dragon = translateByKey(Seed.sanctuary_dragons[n].subtype, 'rank-' + Seed.sanctuary_dragons[n].type, 'dragons');
					var msg = translate('Remove dragon from roost') + ' ' + dragon;
					if (t.contentType == 5) t.jobFeedback(msg);
					var options = {
						dragon_id: n,
						method: 'put'
					}; /* , building_id */
					MyAjax.dragonHandle(options, function(rslt) {
						if (rslt.ok) {
							actionLog(msg);
						} else {
							verboseLog(translate('Error') + ' ' + msg + ': ' + rslt.errmsg);
							actionLog('<B>' + translate('Error') + ' ' + msg + '</B>: ' + rslt.errmsg);
							if (t.contentType == 5) t.jobFeedback(translate('Error') + ' ' + msg + ': ' + rslt.errmsg);
						}
						t.tabJobSanctDragons();
					});
				}

				function equipDragon(event) {
					var roostList = Buildings.getList(CAPITAL.id, 'Roost'),
						found = false,
						roost_id = 0;
					for (var i = 0; i < roostList.length && !found; i++) {
						var is_in_list = false;
						for (var d in Seed.sanctuary_dragons) {
							var dragon = Seed.sanctuary_dragons[d];
							if (getBuildingById(CAPITAL.id, dragon.building_id).toLowerCase() == 'roost' && dragon.building_id == roostList[i].id) is_in_list = true;
						}
						if (!is_in_list) {
							found = true;
							roost_id = roostList[i].id;
						}
					}
					if (!found || roost_id == 0 || !roost_id) return;
					var n = toNum(event.target.getAttribute('ref'));
					var dragon = translateByKey(Seed.sanctuary_dragons[n].subtype, 'rank-' + Seed.sanctuary_dragons[n].type, 'dragons');
					var msg = translate('select-dragon') + ' ' + dragon;
					if (t.contentType == 5) t.jobFeedback(msg);
					var options = {
						dragon_id: n,
						method: 'put',
						building_id: roost_id
					};
					MyAjax.dragonHandle(options, function(rslt) {
						if (rslt.ok) {
							actionLog(msg);
						} else {
							verboseLog(translate('Error') + ' ' + msg + ': ' + rslt.errmsg);
							actionLog('<B>' + translate('Error') + ' ' + msg + '</B>: ' + rslt.errmsg);
							if (t.contentType == 5) t.jobFeedback(translate('Error') + ' ' + msg + ': ' + rslt.errmsg);
						}
						t.tabJobSanctDragons();
					});
				}
			},

			/** * Jobs Tab - Sanctuary Sub-tab - Dragons breeding Sub-Sub-tab ** */
			tabJobSanctBreeding: function() {
				var t = Tabs.Jobs;
				$(UID['tabJobSanct_tabDragons']).className = '';
				$(UID['tabJobSanct_tabDragons']).style.zIndex = 0;
				$(UID['tabJobSanct_tabBreeding']).className = 'selected';
				$(UID['tabJobSanct_tabBreeding']).style.zIndex = 1;
				$(UID['tabJobSanct_tabFeeding']).className = '';
				$(UID['tabJobSanct_tabFeeding']).style.zIndex = 0;

				t.sanctContentType = 1;
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' + '<div class=' + UID['subtitle'] + '>' + translate('breeding-dragon') + '</div>' + '	<table class=' + UID['table'] + ' width=100%>' + '		<tr class=' + UID['row_headers'] + '>' + '			<td valign=middle width=50%><b>' + translate('Male') + '</b></td>' + '			<td valign=middle width=50%><b>' + translate('Female') + '</b></td>' + '		</tr>' + '		<tr>' + '			<td align=center>' + dragonSelect(Data.options.sanctuary.male_id, 'M') + '</td>' + '			<td align=center>' + dragonSelect(Data.options.sanctuary.female_id, 'F') + '</td>' + '		</tr>' + '		<tr valign=top>' + '			<td align=center><div id=' + setUID('tabJobSanct_maleInfos') + '></div></td>' + '			<td align=center><div id=' + setUID('tabJobSanct_femaleInfos') + '></div></td>' + '		</tr>' + '	</table>' + '	<br><center><input type=button value="' + translate('dragonden-breed-dragon') + '" id=' + setUID('tabJobSanct_breed') + ' /></center><br>' + '</div>';
				$(UID['tabJobSanct_Content']).innerHTML = m;
				$(UID['tabJobSanct_dragonid_M']).addEventListener('change', dragonChanged, false);
				$(UID['tabJobSanct_dragonid_F']).addEventListener('change', dragonChanged, false);
				$(UID['tabJobSanct_breed']).addEventListener('click', onClickBreed, false);
				if (Data.options.sanctuary.male_id && Data.options.sanctuary.male_id != '0')
					$(UID['tabJobSanct_maleInfos']).innerHTML = dispStats(Seed.sanctuary_dragons[Data.options.sanctuary.male_id]);
				else $(UID['tabJobSanct_maleInfos']).innerHTML = '&nbsp;';
				if (Data.options.sanctuary.female_id && Data.options.sanctuary.female_id != '0')
					$(UID['tabJobSanct_femaleInfos']).innerHTML = dispStats(Seed.sanctuary_dragons[Data.options.sanctuary.female_id]);
				else $(UID['tabJobSanct_femaleInfos']).innerHTML = '&nbsp;';
				setBreedButton();

				function checkBreedPossible() {
					/* if already breeding, can't breed again */
					var is_breeding = false,
						can_breed = false,
						count = 0;
					var jobs = Jobs.getJobs('breeding', true, -1);
					if (jobs && jobs.length > 0) is_breeding = true;
					/* if no available nest, breeding button is disabled */
					var avail_nests = Buildings.getCount(CAPITAL.id, 'Nest'),
						used_nests = 0;
					for (var i in Seed.sanctuary_dragons) {
						var dragon = Seed.sanctuary_dragons[i];
						if (getBuildingById(CAPITAL.id, dragon.building_id).toLowerCase() == 'nest') used_nests++;
						if (dragon.gender != '' && !is_null(dragon.abilities)) count++; /*
																						 * Do
																						 * not
																						 * count
																						 * GD
																						 * and
																						 * OP
																						 * dragons.
																						 * Only
																						 * sanctuary
																						 * dragons
																						 */
					}
					if ((avail_nests - used_nests) > 0 && count < Seed.sanctuary_dragons.player_slots) can_breed = true;
					else can_breed = false;
					if (!is_breeding && can_breed) return true;
					else return false;
				}

				function dispStats(obj) {
					var m = '<table width=100%>'
					+ '	<tr valign=top>' 
					+ '		<td width=30%><label><b>' + translate('name') + '</b></label></td>' 
					+ '		<td width=70%><label>' + obj.name + '</label></td>' 
					+ '	</tr>'
					+ '	<tr valign=top>' 
					+ '		<td width=30%><label>' + translate('Level') + '</label></td>' 
					+ '		<td width=70%><label>' + obj.level + '</label></td>' 
					+ '	</tr>'
					+ '	<tr valign=top>' 
					+ '		<td width=30%><label>' + translate('Capacity') + '</label></td>' 
					+ '		<td width=70%>';
					if (!obj.abilities || obj.abilities.length == 0) m += '&nbsp;</td></tr>';
					else {
						m += '<table width=100%>';
						for (var a = 0; a < obj.abilities.length; a++) {
							var name = translateByKey('name', obj.abilities[a].name.replace(/ |_/g, '-'), 'boosts') + ' ' + obj.abilities[a].level;
							var desc = translateByKey('description', obj.abilities[a].name.replace(/ |_/g, '-'), 'boosts');
							var rate = ((obj.abilities[a].rate < 1) ? numf(obj.abilities[a].rate * 100) + '%' : numf(obj.abilities[a].rate));
							if (desc.indexOf('n%') > 0)
								desc = desc.substring(0, desc.indexOf('n%')) + rate + desc.substring(desc.indexOf('n%') + 2);
							if (desc.indexOf('%boost%') > 0)
								desc = desc.substring(0, desc.indexOf('%boost%')) + rate + desc.substring(desc.indexOf('%boost%') + 7);
							m += '<tr title="' + desc + '"><td><span class=jewel>' + name + '</span></td></tr>';
						}
						m += '</table></td></tr>';
					}
					m += '</table>';
					return m;
				}

				function dragonSelect(id, gender) {
					var found = false,
						dragons = [];
					var m = '<select id="' + setUID('tabJobSanct_dragonid_' + gender) + '" ref=' + gender + '>';
					for (var i in Seed.sanctuary_dragons) {
						var dragon = Seed.sanctuary_dragons[i];
						if (dragon.gender && dragon.gender != null && dragon.gender == ((gender == 'M') ? 'male' : 'female') && dragon.level >= 8) dragons.push(dragon);
					}
					for (var d = 0; d < dragons.length; d++) {
						var selected = '';
						if (dragons[d].id == id) {
							selected = 'selected';
							found = true;
						}
						m += '<option value="' + dragons[d].id + '" ' + selected + '>' + ( dragons[d].name != '' ? dragons[d].name : translateByKey(dragons[d].subtype, 'rank-' + dragons[d].type, 'dragons')) + '</option>';
					}
					if (!found) selected = 'selected';
					else selected = '';
					m += '<option value="0" ' + selected + '>' + translate('None') + '</option>';
					m += '</select>';
					return m;
				}

				function dragonChanged(event) {
					var id = event.target.id;
					var gender = event.target.getAttribute('ref');
					var sel = $(id);
					var value = nvl(sel.value, '0');
					sel.value = value;
					if (gender == 'M') {
						var stats = $(UID['tabJobSanct_maleInfos']);
						Data.options.sanctuary.male_id = value;
					} else {
						var stats = $(UID['tabJobSanct_femaleInfos']);
						Data.options.sanctuary.female_id = value;
					}
					if (value == '0') {
						stats.innerHTML = '&nbsp;';
						setButtonStyle($(UID['tabJobSanct_breed']), false);
					} else {
						stats.innerHTML = dispStats(Seed.sanctuary_dragons[value]);
						setBreedButton();
					}
				}

				function setBreedButton() {
					var can_breed = checkBreedPossible();
					if (can_breed) {
						if (Data.options.sanctuary.male_id && Data.options.sanctuary.male_id != '0' && Data.options.sanctuary.female_id && Data.options.sanctuary.female_id != '0') {
							setButtonStyle($(UID['tabJobSanct_breed']), true);
						} else {
							setButtonStyle($(UID['tabJobSanct_breed']), false);
						}
					} else setButtonStyle($(UID['tabJobSanct_breed']), false);
				}

				function onClickBreed() {
					var t = Tabs.Jobs;
					var can_breed = checkBreedPossible();
					if (can_breed && Data.options.sanctuary.male_id && Data.options.sanctuary.male_id != '0' && Data.options.sanctuary.female_id && Data.options.sanctuary.female_id != '0') {
						var male = translateByKey(Seed.sanctuary_dragons[Data.options.sanctuary.male_id].subtype, 'rank-' + Seed.sanctuary_dragons[Data.options.sanctuary.male_id].type, 'dragons');
						var female = translateByKey(Seed.sanctuary_dragons[Data.options.sanctuary.female_id].subtype, 'rank-' + Seed.sanctuary_dragons[Data.options.sanctuary.female_id].type, 'dragons');
						var msg = translate('dragonden-breed-dragon') + ': ' + male + ' + ' + female;
						if (t.contentType == 5) t.jobFeedback(msg);
						MyAjax.dragonBreeding(Data.options.sanctuary.male_id, Data.options.sanctuary.female_id, function(rslt) {
							if (rslt.ok) {
								actionLog(msg);
								setButtonStyle($(UID['tabJobSanct_breed']), false);
							} else {
								verboseLog(translate('Error') + ' ' + translate('dragonden-breed-dragon') + ': ' + rslt.errmsg);
								actionLog('<B>' + translate('Error') + ' ' + translate('dragonden-breed-dragon') + '</B>: ' + rslt.errmsg);
								if (t.contentType == 5) t.jobFeedback(translate('Error') + ' ' + translate('dragonden-breed-dragon') + ': ' + rslt.errmsg);
							}
						});
					} else {
						setButtonStyle($(UID['tabJobSanct_breed']), false);
						if (!can_breed)
							if (t.contentType == 5) t.jobFeedback(translate('No nest available for new egg'));
							else
						if (t.contentType == 5) t.jobFeedback(translate('No great dragon defined'));
					}
				}
			},

			/** * Jobs Tab - Sanctuary Sub-tab - Dragons feeding Sub-Sub-tab ** */
			tabJobSanctFeeding: function() {
				var t = Tabs.Jobs;
				$(UID['tabJobSanct_tabDragons']).className = '';
				$(UID['tabJobSanct_tabDragons']).style.zIndex = 0;
				$(UID['tabJobSanct_tabBreeding']).className = '';
				$(UID['tabJobSanct_tabBreeding']).style.zIndex = 0;
				$(UID['tabJobSanct_tabFeeding']).className = 'selected';
				$(UID['tabJobSanct_tabFeeding']).style.zIndex = 1;

				t.sanctContentType = 2;
				var m = '<div class=' + UID['status_ticker'] + ' style="margin-top:6px !important">' + '<div class=' + UID['subtitle'] + '>' + translate('upgrading-dragon') + '</div>' + '	<table class=' + UID['row_style'] + ' width=100%>';
				var checkBoxs = [];
				for (var id in Data.options.sanctuary.feeding) {
					var setting = Data.options.sanctuary.feeding[id];
					/* Clean data.options.sanctuary.feeding of all missing dragons */
					if (!Seed.sanctuary_dragons[id]) {
						delete(Data.options.sanctuary.feeding[id]);
						continue;
					}
					
					var dragon = Seed.sanctuary_dragons[id];
					var max_level = (Seed.requirements.dragon.feeding.level.length - 1 || 11);
					
					if (is_null(dragon.abilities) || dragon.level < 1) continue;
					
					if(!Data.options.sanctuary.hideDrgMaxLevel || dragon.level < max_level) {
						m += '	<tr valign=top>' + '			<td align=left width=35%><input type=checkbox id=' + setUID('tabJobFeeding_CB_' + id) + ' ' + (setting.enable ? 'checked' : '') + ' ref=' + id + ' /> ' + translate(translateByKey(dragon.subtype, 'rank-' + dragon.type, 'dragons')) + '<br><b>' + translate('name') + '</b> : ' + dragon.name + '			<br><div id=' + setUID('tabJobFeeding_FB_' + id) + ' class=jewel valign=top style="width:100%;white-space:normal;"></div>' + '			</td>' + '			<td width=10%><label>' + translate(dragon.gender) + '</label></td>' + '			<td width=5%><label>' + dragon.level + '</label></td>' + '			<td>';
						
						if (dragon.level < max_level) {
							m += '	<td with=5%>' + '		<select id=' + setUID('tabJobFeeding_Sel_' + id) + ' ref=' + id + '>';
							for (var lvl = 0; lvl <= max_level; lvl++)
								m += '<option value=' + lvl + (dragon.level > lvl ? ' style="display:none;"' : '') + '>' + lvl + '</option>';
							m += '	</select>' + '		</td>';
							checkBoxs.push(UID['tabJobFeeding_CB_' + id]);
						} else {
							m += '	<td with=5%>Max</td>';
						}
						m += '		<td width=45%>' + dispAbility(dragon.abilities) + '</td>';
					}
				}
				m += '</table></div></div>';

				$(UID['tabJobSanct_Content']).innerHTML = m;
				for (var i = 0; i < checkBoxs.length; ++i) {
					$(checkBoxs[i]).addEventListener('click', checkedDragon, false);
					$(checkBoxs[i]).addEventListener('change', checkedDragon, false);
					var id = toNum($(checkBoxs[i]).getAttribute('ref'));
					var selectMenu = $(UID['tabJobFeeding_Sel_' + id]);
					if (selectMenu) {
						try {
							if (!Data.options.sanctuary.feeding[id]) {
								var currentDragonLevel = Seed.sanctuary_dragons[id].level;
								selectMenu.selectedIndex = currentDragonLevel;
								Data.options.sanctuary.feeding[id].cap = currentDragonLevel;
							} else {
								selectMenu.selectedIndex = Data.options.sanctuary.feeding[id].cap;
								selectMenu.options[Data.options.sanctuary.feeding[id].cap].selected = true;
								if (Data.options.sanctuary.feeding[n].enable) t.checkFeedingReqs(id);
							}
						} catch (e) {}
						selectMenu.addEventListener('change', changeFeedingCap, false);
					}
				}

				function changeFeedingCap(event) {
					var t = Tabs.Jobs;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.sanctuary.feeding[n].cap = event.target[event.target.selectedIndex].value;
					event.target.style.backgroundColor = '';
					if (Data.options.sanctuary.feeding[n].enable) t.checkFeedingReqs(n);
					if (Data.options.sanctuary.enabled) t.feedingTick();
				}

				function checkedDragon(event) {
					var t = Tabs.Jobs;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.sanctuary.feeding[n].enable = event.target.checked;
					if (Data.options.sanctuary.feeding[n].enable) t.checkFeedingReqs(n);
					if (Data.options.sanctuary.enabled) t.feedingTick();
				}

				function dispAbility(obj) {
					if (!obj || obj.length == 0) return '&nbsp;';
					var m = '<table width=100%>';
					for (var a = 0; a < obj.length; a++) {
						var name = translateByKey('name', obj[a].name.replace(/ |_/g, '-'), 'boosts') + ' ' + obj[a].level;
						var desc = translateByKey('description', obj[a].name.replace(/ |_/g, '-'), 'boosts');
						var rate = ((obj[a].rate < 1) ? numf(obj[a].rate * 100) + '%' : numf(obj[a].rate));
						if (desc.indexOf('n%') > 0)
							desc = desc.substring(0, desc.indexOf('n%')) + rate + desc.substring(desc.indexOf('n%') + 2);
						if (desc.indexOf('%boost%') > 0)
							desc = desc.substring(0, desc.indexOf('%boost%')) + rate + desc.substring(desc.indexOf('%boost%') + 7);
						m += '<tr title="' + desc + '"><td><span class=jewel>' + name + '</span></td></tr>';
					}
					m += '</table>';
					return m;
				}
			},


			setTrainEnable: function(onOff) {
				var t = Tabs.Jobs;
				t.refreshTrainButton(onOff);
				Data.options.training.enabled = onOff;
				clearTimeout(t.trainTimer);
				if (onOff) t.trainTimer = setTimeout(t.trainTick, 3000);
				else t.jobFeedback("");
			},
			setBuildEnable: function(onOff) {
				var t = Tabs.Jobs;
				t.refreshBuildButton(onOff);
				Data.options.building.enabled = onOff;
				clearTimeout(t.buildTimer);
				if (onOff) {
					t.buildRetryTime = 20000;
					t.buildTimer = setTimeout(t.buildTick, 3000);
				} else t.jobFeedback("");
			},
			setResearchEnable: function(onOff) {
				var t = Tabs.Jobs;
				t.refreshResearchButton(onOff);
				Data.options.research.enabled = onOff;
				clearTimeout(t.researchTimer);
				if (onOff) {
					t.resRetryTime = 20000;
					t.researchTimer = setTimeout(t.researchTick, 3000);
				} else t.jobFeedback("");
			},
			setResurrectEnable: function(onOff) {
				var t = Tabs.Jobs;
				t.refreshResurrectButton(onOff);
				Data.options.resurrect.enabled = onOff;
				clearTimeout(t.resurrectTimer);
				if (onOff) {
					t.revRetryTime = 20000;
					t.resurrectTimer = setTimeout(t.resurrectTick, 3000);
				} else t.jobFeedback("");
			},
			setFeedingEnable: function(onOff) {
				var t = Tabs.Jobs;
				t.refreshFeedingButton(onOff);
				Data.options.sanctuary.enabled = onOff;
				clearTimeout(t.sanctuaryTimer);
				if (onOff) {
					t.feedRetryTime = 20000;
					t.sanctuaryTimer = setTimeout(t.feedingTick, 3000);
				} else t.jobFeedback("");
			},

			refreshTrainButton: function(onOff) {
				var t = Tabs.Jobs;
				var but = $(UID['tabJobTrain_OnOff']);
				if (!but) return;
				if (onOff) {
					but.value = translate('Training').toUpperCase();
					but.className = UID['btn_on'];
				} else {
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
				}
			},
			refreshBuildButton: function(onOff) {
				var t = Tabs.Jobs;
				var but = $(UID['tabJobBuild_OnOff']);
				if (!but) return;
				if (onOff) {
					but.value = translate('Building').toUpperCase();
					but.className = UID['btn_on'];
				} else {
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
				}
			},
			refreshResearchButton: function(onOff) {
				var t = Tabs.Jobs;
				var but = $(UID['tabJobResearch_OnOff']);
				if (!but) return;
				if (onOff) {
					but.value = translate('Researching').toUpperCase();
					but.className = UID['btn_on'];
				} else {
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
				}
			},
			refreshResurrectButton: function(onOff) {
				var t = Tabs.Jobs;
				var but = $(UID['tabJobResurrect_OnOff']);
				if (!but) return;
				if (onOff) {
					but.value = translate('Reviving').toUpperCase();
					but.className = UID['btn_on'];
				} else {
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
				}
			},
			refreshFeedingButton: function(onOff) {
				var t = Tabs.Jobs;
				var but = $(UID['tabJobSanctFeeding_OnOff']);
				if (!but) return;
				if (onOff) {
					but.value = translate('Upgrade').toUpperCase();
					but.className = UID['btn_on'];
				} else {
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
				}
			},

			trainStatTick: function() {
				var t = Tabs.Jobs,
					unitType = all_unit_types;
				var statElement = $(UID['tabJobTrain_Table']);
				if (statElement != null) Jobs.updateTrainTable(statElement, 'units');
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx] && cityIdx >= 0 && cityIdx < Seed.cities.length && cityIdx != SPECTRAL_OUTPOST.id && cityIdx != SKY_OUTPOST.id && cityIdx != LUNA_OUTPOST.id) {
						if (t.contentType == 1 && t.trainContentType == 0) {
							for (var uid = 0; uid < unitType.length; uid++) {
								if (!isTrainable(cityIdx, unitType[uid])) continue;
								var unitQty = Data.options.training.city[cityIdx].units[uid];
								var butTrainNow = $(UID['tabTrain_Now_' + cityIdx + '_' + uid]);
								if (toNum(unitQty) > 0) {
									var reqs = t.checkTrainReqs(unitType[uid], unitQty, cityIdx);
									if (!reqs.msg) setButtonStyle(butTrainNow, true, 'btn_green');
									else setButtonStyle(butTrainNow, false, 'btn_green');
								} else setButtonStyle(butTrainNow, false, 'btn_green');
							}
						}
					}
				}
			},
			resurrectStatTick: function() {
				var t = Tabs.Jobs;
				var statElement = $(UID['tabJobResurrect_Table']);
				if (statElement != null) Jobs.updateTrainTable(statElement, 'resurrection', true);
			},
			sanctStatTick: function() {
				var t = Tabs.Jobs;
				var statElement = $(UID['tabJobSanct_TableJobs']);
				if (statElement != null) Jobs.updateSanctuaryTable(statElement);

				if (t.contentType == 5 && t.sanctContentType == 2) {
					for (var id in Data.options.sanctuary.feeding) {
						if (Data.options.sanctuary.feeding[id].enable) t.checkFeedingReqs(id);
						else
							try {
								$(UID['tabJobFeeding_FB_' + id]).innerHTML = '';
							} catch (e) {}
					}
				}
			},
			buildStatFetch: false,
			buildStatTick: function() {
				var t = Tabs.Jobs;
				if (t.buildRefreshLvl) return;
				var statElement = $(UID['tabJobBuild_Table']);
				if (statElement != null) Jobs.updateBuildTable(statElement);

				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx]) {
						/* Refresh building reqs */
						if (t.contentType == 2) {
							if (t.buildRefreshTab)
								setTimeout(function() {
									t.buildRefreshTab = false;
									t.tabJobBuild();
								}, 1000);
							else {
								var buildList;
								switch (cityIdx) {
									case CAPITAL.id:
										buildList = capital_buildings.concat(field_buildings);
										break;
									case SPECTRAL_OUTPOST.id:
										buildList = spectral_buildings.concat(spectral_fields);
										break;
									case SKY_OUTPOST.id:
										buildList = skythrone_buildings;
										break;
									case CAVE_OUTPOST.id:
										buildList = cave_buildings;
										break;
									case LUNA_OUTPOST.id:
										buildList = luna_buildings;
										break;
									case COLOSSUS_OUTPOST.id:
										buildList = colossus_buildings;
										break;
									default:
										buildList = outpost_buildings.concat(field_buildings);
										break;
								}
								for (var i = 0; i < buildList.length; ++i) {
									if (Data.options.building.level_enable[cityIdx][buildList[i]])
										t.checkBuildReqs(cityIdx, buildList[i]);
								}
							}
						}
					}
				}
			},
			dragonStatTick: function() {
				var t = Tabs.Jobs;
				var statElement = $(UID['tabJobDragon_Table']);
				if (statElement != null) {
					Jobs.updateDragonTable(statElement);
				}				
			},
			tradeStatTick: function() {
				var t = Tabs.Jobs;
				var statElement = $(UID['tabJobTrade_Table']);
				if (statElement != null) {
					Jobs.updateTradeTable(statElement);
				}				
			},
			/* Build statistics - timer set to fire every 1 seconds */
			resStatFetch: false,
			researchStatTick: function() {
				var t = Tabs.Jobs;
				if (t.contentType == 3) {
					for (var id = 0; id < Seed.research.length; id++) {
						var resName = Seed.research[id];
						if (Data.options.research.res_enable[0][resName]) t.checkResearchReqs(resName);
						else
							try {
								$(UID['tabJobResearch_FB_' + resName]).innerHTML = '';
							} catch (e) {}
					}
					var jobs = Jobs.getJobs('research', true, CAPITAL.id);
					if (jobs.length > 0) {
						try {
							$(UID['tabJobResearch_FB_' + jobs[0].research_type]).innerHTML = '<font color=#000>' + translate('Researching') + '&nbsp;' + translate('Level').toLowerCase() + '&nbsp;' + jobs[0].level + '</font>';
						} catch (e) {}
					}
				}
				var statElement = $(UID['tabJobResearch_Table']);
				if (statElement != null) Jobs.updateResearchTable(statElement);
			},

			jobFeedback: function(msg) {
				var t = Tabs.Jobs;
				var elementId = '';
				switch (t.contentType) {
					case 0:
						break;
					case 1:
						elementId = 'tabJobTrain_Feedback';
						break;
					case 2:
						elementId = 'tabJobBuild_Feedback';
						break;
					case 3:
						elementId = 'tabJobResearch_Feedback';
						break;
					case 4:
						elementId = 'tabJobResurrect_Feedback';
						break;
					case 5:
						elementId = 'tabJobSanct_Feedback';
						break;
				}
				if (elementId) dispFeedback(UID[elementId], msg);
			},

			getCurrentResearchLevel: function(researchType) {
				var t = Tabs.Jobs,
					level = 0;
				try {
					if (researchType == 'Rapid Deployment') researchType = 'RapidDeployment';
					if (researchType == 'Weapons Calibration') researchType = 'Ballistics';
					if (researchType == 'Aerial Combat') researchType = 'AerialCombat';
					level = (Seed.player.research[researchType]) ? Seed.player.research[researchType] : 0;
				} catch (e) {}
				return level;
			},
			getTroopCap: function(troopType, qty) {
				var t = Tabs.Jobs;
				var cap = 0;
				var completedTroops = 0;
				var defenseTroops = 0;
				var marchingTroops = 0;
				var trainingTroops = 0;

				/* Get the cap set for this troop type */
				for (var i = 0; i < all_unit_types.length; i++) {
					if (troopType == all_unit_types[i]) {
						cap = Data.options.training.city[0].cap[i];
						break;
					}
				}
				/* If there is no cap, we are done */
				if (cap == 0) return cap;

				/* Find the number of troops still in the city */
				completedTroops += (Seed.cities[CAPITAL.id].units[troopType] != undefined) ? Seed.cities[CAPITAL.id].units[troopType] : 0;
				/* Find the number of troops present in defense forces */
				if (Seed.cities[CAPITAL.id].defense_force && Seed.cities[CAPITAL.id].defense_force[troopType])
					defenseTroops += (Seed.cities[CAPITAL.id].defense_force[troopType] != undefined) ? Seed.cities[CAPITAL.id].defense_force[troopType] : 0;

				/* Find additional troops in marches */
				for (var type in Data.marches) {
					if (!(/(attacks|waves|spies|multiple|bookmark|transport)/.test(type))) continue;
					for (var id in Data.marches[type]) {
						var march = (Data.marches[type])[id];
						for (var q in march.units) {
							if (q == troopType) marchingTroops += march.units[q];
						}
					}
				}
				var now = serverTime();
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx] && Seed.cities[cityIdx].jobs) {
						var jobs = Seed.cities[cityIdx].jobs;
						for (var j = 0; j < jobs.length; j++) {
							if (jobs[j].queue == 'units' && jobs[j].unit_type == troopType && jobs[j].run_at > now)
								trainingTroops += jobs[j].quantity;
						}
					}
				}
				return ((completedTroops + defenseTroops + marchingTroops + trainingTroops + qty) > cap) ? (completedTroops + defenseTroops + marchingTroops + trainingTroops + qty) : 0;
			},
			getBuildingCap: function(cityIdx, buildingType) {
				var t = Tabs.Jobs;
				var cap = 0;

				var cityType;
				switch (cityIdx) {
					case CAPITAL.id:
						cityType = capital_buildings.concat(field_buildings);
						break;
					case SPECTRAL_OUTPOST.id:
						cityType = spectral_buildings.concat(spectral_fields);
						break;
					case SKY_OUTPOST.id:
						cityType = skythrone_buildings;
						break;
					case CAVE_OUTPOST.id:
						cityType = cave_buildings;
						break;
					case LUNA_OUTPOST.id:
						cityType = luna_buildings;
						break;
					case COLOSSUS_OUTPOST.id:
						cityType = colossus_buildings;
						break;
					default:
						cityType = outpost_buildings.concat(field_buildings);
						break;
				}
				for (var i = 0; i < cityType.length; ++i) {
					if (cityType[i] == buildingType) {
						try {
							cap = (Data.options.building.level_cap[cityIdx][i]) ? Data.options.building.level_cap[cityIdx][i] : 0;
							break;
						} catch (e) {}
					}
				}
				return cap;
			},
			getResearchCap: function(researchType) {
				var t = Tabs.Jobs;
				var cap = 0;

				for (var id = 0; id < Seed.research.length; id++) {
					var resName = Seed.research[id];
					if (researchType == resName) {
						try {
							cap = (Data.options.research.res_cap[0][resName]) ? Data.options.research.res_cap[0][resName] : 0;
							break;
						} catch (e) {}
					}
				}
				return cap;
			},
			resUITranslate: function(researchType) {
				var t = Tabs.Jobs;
				for (var id = 0; id < Seed.research.length ; id++) {
					if (Seed.research[id] == researchType) return Seed.research[id];
				}
				return researchType;
			},
			getBuildingLevel: function(cityIdx, buildingType, buildingLevel) {
				var buildings = Seed.cities[cityIdx].buildings;
				var ret = 0;
				for (var p = 0; p < buildings.length; p++) {
					if (buildings[p].type == buildingType && buildings[p].level >= buildingLevel) {
						ret = buildings[p].level;
						break;
					}
				}
				return ret;
			},
			getRemainingQueue: function(ic, queueType, resurrect) {
				var city = Seed.cities[ic];
				var jobs = city.jobs;
				var maxQueueLength = (resurrect) ? city.figures.queue_lengths.resurrection : city.figures.queue_lengths.units;
				var usedQueue = 0;
				if (isNaN(maxQueueLength) || !maxQueueLength) return 0;
				for (var i = 0; i < jobs.length; i++) {
					if (jobs[i].queue == queueType)
					++usedQueue;
				}
				return maxQueueLength - usedQueue;
			},

			checkRequirements: function(options) {
				var t = Tabs.Jobs;
				var reqs = {};

				/* options.unit_type and options.training_type are the same, */
				/* we can use either interchangeably */
				var element_type = options.unit_type ||
					options.training_type ||
					options.building_type ||
					options.research_type ||
					options.sanctuary_type;
				/* if omitted options.city_idx, use the capital, city_idx = 0 */
				/* this value is only used by requirements.buildings case */
				var city_idx = options.city_idx || CAPITAL.id;
				 
				var typeCity = '';
				switch (city_idx) {
					case CAPITAL.id:
						typeCity = CAPITAL.type;
						break;
					case WATER_OUTPOST.id:
						typeCity = WATER_OUTPOST.type;
						break;
					case STONE_OUTPOST.id:
						typeCity = STONE_OUTPOST.type;
						break;
					case FIRE_OUTPOST.id:
						typeCity = FIRE_OUTPOST.type;
						break;
					case WIND_OUTPOST.id:
						typeCity = WIND_OUTPOST.type;
						break;
					case SPECTRAL_OUTPOST.id:
						typeCity = SPECTRAL_OUTPOST.type;
						break;
					case ICE_OUTPOST.id:
						typeCity = ICE_OUTPOST.type;
						break;
					case SWAMP_OUTPOST.id:
						typeCity = SWAMP_OUTPOST.type;
						break;
					case FOREST_OUTPOST.id:
						typeCity = FOREST_OUTPOST.type;
						break;
					case DESERT_OUTPOST.id:
						typeCity = DESERT_OUTPOST.type;
						break;
					case CHRONO_OUTPOST.id:
						typeCity = CHRONO_OUTPOST.type;
						break;
					case SKY_OUTPOST.id:
						typeCity = SKY_OUTPOST.type;
						break;
					case CAVE_OUTPOST.id:
						typeCity = CAVE_OUTPOST.type;
						break;
					case LUNA_OUTPOST.id:
						typeCity = LUNA_OUTPOST.type;
						break;
					case COLOSSUS_OUTPOST.id:
						typeCity = COLOSSUS_OUTPOST.type;
						break;
				}
				var requirements = {};
				/* Change of Kabam, now requirement for units 
				 * are for city/outpost not a single requirement
				 * for all
				 */
				if(options.reqs_type == 'unit') {
					/* take the default one */
					requirements = Seed.requirements[options.reqs_type][element_type].default;
					if(Seed.requirements[options.reqs_type][element_type][typeCity]) {
						/* take the specific one for the capital/outpost if exist */
						requirements = Seed.requirements[options.reqs_type][element_type][typeCity];
					}
				}
				else {
					requirements = Seed.requirements[options.reqs_type][element_type];
				}
				var stats = Seed.stats[options.reqs_type][element_type];

				/* in case of level */
				if (typeof(options.level) !== 'undefined') {
					requirements = requirements.level[options.level];
					stats = stats.level[options.level];
				}
				/*
				 * always use the capital data to verify the resources and the
				 * population
				 */
				var city = Seed.cities[CAPITAL.id];
				/*
				 * If we are verifying unit requirements, initialize the
				 * variable max_units
				 */
				if (options.unit_type || options.reqs_type == 'units') {
					reqs.max_units = 999999999;
					/* Check that unit is trainable for the concerned city */
					var trainable = isTrainable(options.city_idx, options.unit_type);
					if (!trainable) {
						reqs.msg = translate('Unit not trainable');
						return reqs;
					}
				}

				/* set Speed Multiplier for every case */
				var speed_multiplier = 1;
				/*
				 * For titans training time : By default training time is more
				 * than 5x the time in the manifest for titans
				 */
				/*
				 * During some events, training time for titans is divide by 5
				 * (so the time in the manifest)
				 */
				var stat_time = stats.time;
				switch (options.reqs_type) {
					case 'unit':
						/*
						 * Calculate speed_multiplier for the trainings based on
						 * garrisons / training camps of the city for which we
						 * check the training requirements
						 */
						speed_multiplier = 0;
						if (Seed.cities[city_idx] && city_idx != SPECTRAL_OUTPOST.id && city_idx != SKY_OUTPOST.id && city_idx != LUNA_OUTPOST.id) {
							var build_type = 'TrainingCamp';
							if (city_idx == CAVE_OUTPOST.id)
								build_type = 'CaveTrainingCamp';
							if (city_idx == CAPITAL.id)
								build_type = 'Garrison';

							var levels_count = 0,
								buildings_count = 0;
							for (var j = 0; j < Seed.cities[city_idx].buildings.length; j++) {
								if (Seed.cities[city_idx].buildings[j].type === build_type) {
									buildings_count++;
									levels_count += Seed.cities[city_idx].buildings[j].level;
								}
							}
							speed_multiplier = (buildings_count == 0) ? 0 : (buildings_count + ((levels_count - buildings_count) / 10));
						}
						if (city_idx == CAPITAL.id && (options.unit_type == 'BattleDragon' || options.unit_type == 'PackDragon' || options.unit_type == 'SwiftStrikeDragon')) {
							var rookery_multiplier = (Buildings.getLevel(CAPITAL.id, 'Rookery')).max;
							speed_multiplier *= (1 + (rookery_multiplier / 100));
						}
						if (city_idx == FOREST_OUTPOST.id && options.unit_type == 'Titan') stat_time = 52000;
						break;
					case 'building':
						speed_multiplier = city.figures.building.speed_multiplier;
						break;
				}

				/* Set time needed for this task */
				reqs.time = toNum(stat_time / speed_multiplier);

				/*
				 * when omitted options.unit_quantity, sets unit_quantity to 1
				 * to check the requirements of the buildings and research.
				 */
				var unit_quantity = options.unit_quantity || 1;

				/* Check Buildings requirements */
				if (requirements.buildings) {
					for (var type in requirements.buildings) {
						var fixed_type = type;
						/*
						 * we change the type of build Garrison to
						 * CaveTrainingCamp un case of CAVE_OUTPOST
						 */
						if (city_idx == CAVE_OUTPOST.id) fixed_type = 'CaveTrainingCamp';
						/*
						 * we change the type of build Garrison to TrainingCamp
						 * in case of outpost city
						 */
						else if (city_idx != CAPITAL.id && type == 'Garrison') fixed_type = 'TrainingCamp';
						var fixed_city_idx = (/Science|Metal|Officer|Rookery|Storage|Theater|Sentinel|Factory|Fortress/.test(fixed_type) ? CAPITAL.id : city_idx);
						var level = Buildings.getLevel(fixed_city_idx, fixed_type);
						if (level.max < requirements.buildings[type]) {
							if (!reqs.buildings) reqs.buildings = {};
							reqs.buildings[fixed_type] = requirements.buildings[type];
							reqs.msg = (reqs.msg || '') + translate(fixed_type) + '(' + reqs.buildings[fixed_type] + ')' + ' + ';
						}
					}
				}

				/* Check Items requirements */
				if (requirements.items) {
					for (var type in requirements.items) {
						var need = requirements.items[type] * unit_quantity;
						var have = toNum(Seed.player.items[type] || 0);
						if (have < need) {
							if (!reqs.items) reqs.items = {};
							reqs.items[type] = need - have;
							reqs.msg = (reqs.msg || '') + translate(type) + '(' + numf(reqs.items[type], ' ') + ')' + ' + ';
						}
						/*
						 * If we are verifying unit requirements, calculate the
						 * maximum units
						 */
						if (reqs.max_units) {
							var current_max = toNum(have / requirements.items[type]);
							if (reqs.max_units > current_max) reqs.max_units = current_max;
						}
					}
				}

				/* Check Population requirements */
				if (requirements.population && requirements.population.idle) {
					var need = requirements.population.idle * unit_quantity;
					var have = city.figures.population.current - city.figures.population.laborers - city.figures.population.armed_forces;
					have = (have > 0) ? have : 0;
					if (have < need) {
						reqs.population = need - have;
						reqs.msg = (reqs.msg || '') + translate('Population') + ':' + numf(reqs.population, ' ') + ' + ';
					}
					/*
					 * If we are verifying unit requirements, calculate the
					 * maximum units
					 */
					if (reqs.max_units) {
						var current_max = toNum((have + 1) / requirements.population.idle);
						if (reqs.max_units > current_max) reqs.max_units = current_max;
					}
				}

				/* Check Research requirements */
				if (requirements.research) {
					for (var type in requirements.research) {
						if (Seed.player.research[type] < requirements.research[type]) {
							if (!reqs.research) reqs.research = {};
							reqs.research[type] = requirements.research[type];
							reqs.msg = (reqs.msg || '') + translate(type) + '(' + reqs.research[type] + ')' + ' + ';
						}
					}
				}

				/* Check Resources requirements */
				if (requirements.resources) {
					for (var type in requirements.resources) {
						if (requirements.resources[type] == 0) continue;

						var need = requirements.resources[type] * unit_quantity;
						var have = toNum(city.resources[type] || 0);
						if (have < need) {
							if (!reqs.resources) reqs.resources = {};
							reqs.resources[type] = need - have;
							reqs.msg = (reqs.msg || '') + translate(type) + ':' + numf(reqs.resources[type], ' ') + ' + ';
						}
						/*
						 * If we are verifying unit requirements, calculate the
						 * maximum units
						 */
						if (reqs.max_units) {
							var current_max = toNum((have + 1) / requirements.resources[type]);
							if (reqs.max_units > current_max) reqs.max_units = current_max;
						}
					}
				}

				/* Check Units requirements */
				if (requirements.units) {
					for (var type in requirements.units) {
						var need = requirements.units[type] * unit_quantity;
						var have = toNum(city.units[type] || 0);
						if (have < need) {
							if (!reqs.units) reqs.units = {};
							reqs.units[type] = need - have;
							reqs.msg = (reqs.msg || '') + translate(type) + '(' + numf(reqs.units[type], ' ') + ')' + ' + ';
						}
						/*
						 * If we are verifying unit requirements, calculate the
						 * maximum units
						 */
						if (reqs.max_units) {
							var current_max = toNum(have / requirements.units[type]);
							if (reqs.max_units > current_max) reqs.max_units = current_max;
						}
					}
				}

				/* Set time needed for this units task based in quantity */
				if (reqs.max_units) reqs.time = toNum((options.unit_quantity || 0) * stats.time / speed_multiplier);
				if (reqs.msg) reqs.msg = reqs.msg.substring(0, reqs.msg.length - 3);
				return reqs;
			},
			checkTrainReqs: function(troopType, troopQty, cityIdx) {
				var t = Tabs.Jobs;

				var reqs = t.checkRequirements({
					reqs_type: 'unit',
					city_idx: cityIdx,
					unit_type: troopType,
					unit_quantity: troopQty
				});
				/* Check Remaining Queue */
				if (t.getRemainingQueue(cityIdx, 'units', false) == 0) reqs.queue = true;

				/* Check Units Cap */
				var capped = t.getTroopCap(troopType, troopQty);
				if (capped) {
					reqs.capped = capped;
					reqs.msg = translate('Production limit reached') + ' + ';
				}
				if (t.contentType == 1) {
					if (reqs.msg) {
						try {
							$(UID['tabJobTrain_FB_' + cityIdx + '_' + troopType]).innerHTML = '<font color="#C33">' + reqs.msg.replace(/:\+/, ':').replace(/\+\s*$/, '') + '</font>';
							$(UID['tabJobTrain_FB_' + cityIdx + '_' + troopType]).title = translate(troopType) + ' ' + reqs.msg.replace(/\+/g, ' \n');
							$(UID['tabJobBuild_Cap_' + cityIdx + '_' + troopType]).style.color = "#C33";
						} catch (e) {}
					} else {
						try {
							var fb_text = translate('Max') + ' : ' + numf(reqs.max_units, ' ') + ' (' + timestrShort(reqs.time) + ')';
							$(UID['tabJobTrain_FB_' + cityIdx + '_' + troopType]).innerHTML = fb_text;
							$(UID['tabJobTrain_FB_' + cityIdx + '_' + troopType]).title = translate(troopType) + ' \n' + fb_text;
						} catch (e) {}
					}
				}
				return reqs;
			},
			checkBuildReqs: function(cityIdx, buildingType) {
				var t = Tabs.Jobs;
				var level = (Buildings.getLevel(cityIdx, buildingType)).min + 1;
				var cap = t.getBuildingCap(cityIdx, buildingType);
				if (level <= cap) {
					var reqs = t.checkRequirements({
						reqs_type: 'building',
						city_idx: cityIdx,
						building_type: buildingType,
						level: level
					});

					if (reqs.msg) {
						if (t.contentType == 2) {
							try {
								$(UID['tabJobBuild_FB_' + cityIdx + '_' + buildingType]).innerHTML = '<font color="#C33">' + reqs.msg.replace(/:\+/, ':').replace(/\+\s*$/, '') + '</font>';
								$(UID['tabJobBuild_FB_' + cityIdx + '_' + buildingType]).title = translate(buildingType) + ' ' + reqs.msg.replace(/\+/g, ' \n');
								$(UID['tabJobBuild_Cap_' + cityIdx + '_' + buildingType]).style.color = "#C33";
							} catch (e) {}
						}
					} else {
						if (t.contentType == 2) {
							try {
								var fb_text = translate('Next level') + ' ' + translate('OK');
								$(UID['tabJobBuild_FB_' + cityIdx + '_' + buildingType]).innerHTML = fb_text;
								$(UID['tabJobBuild_FB_' + cityIdx + '_' + buildingType]).title = translate(buildingType) + ' \n' + fb_text;
							} catch (e) {}
						}
					}
					return reqs;
				} else {
					if (t.contentType == 2) {
						try {
							var fb_text = translate('Task Completed');
							$(UID['tabJobBuild_FB_' + cityIdx + '_' + buildingType]).innerHTML = '<font color=#0B0>' + fb_text + '</font>';
							$(UID['tabJobBuild_FB_' + cityIdx + '_' + buildingType]).title = translate(buildingType) + ' \n' + fb_text;
							$(UID['tabJobBuild_Cap_' + cityIdx + '_' + buildingType]).style.color = "#5B5";
						} catch (e) {}
					}
				}
				return ({
					capped: true,
					msg: translate('Maximum level reached')
				});
			},
			checkResearchReqs: function(researchType, cityIdx) {
				var t = Tabs.Jobs;
				var level = t.getCurrentResearchLevel(researchType) + 1;
				var cap = t.getResearchCap(researchType);
				if (level <= cap) {
					var reqs = t.checkRequirements({
						reqs_type: 'research',
						research_type: researchType,
						level: level,
						city_idx: (cityIdx || CAPITAL.id)
					});

					if (reqs.msg) {
						if (t.contentType == 3) {
							try {
								$(UID['tabJobResearch_FB_' + researchType]).innerHTML = '<font color=#C33>' + reqs.msg.replace(/:\+/, ':').replace(/\+\s*$/, '') + '</font>';
								$(UID['tabJobResearch_FB_' + researchType]).title = translate(researchType) + ' ' + reqs.msg.replace(/\+/g, ' \n');
								$(UID['tabJobResearch_Sel_' + researchType]).style.color = "#C33";
							} catch (e) {}
						}
					} else {
						if (t.contentType == 3) {
							try {
								var fb_text = translate('Next level') + ' ' + translate('OK');
								$(UID['tabJobResearch_FB_' + researchType]).innerHTML = fb_text;
								$(UID['tabJobResearch_FB_' + researchType]).title = translate(researchType) + ' \n' + fb_text;
							} catch (e) {}
						}
					}
					return reqs;
				} else {
					if (t.contentType == 3) {
						try {
							var fb_text = translate('Task Completed');
							$(UID['tabJobResearch_FB_' + researchType]).innerHTML = '<font color=#0B0>' + fb_text + '</font>';
							$(UID['tabJobResearch_FB_' + researchType]).title = translate(researchType) + ' \n' + fb_text;
							$(UID['tabJobResearch_Sel_' + researchType]).style.color = "#5B5";
						} catch (e) {}
					}
				}
				return ({
					capped: true,
					msg: translate('Maximum level reached')
				});
			},
			checkFeedingReqs: function(dragon_id) {
				var t = Tabs.Jobs;
				var dragon = Seed.sanctuary_dragons[dragon_id];
				var level = dragon.level + 1;
				var cap = (Data.options.sanctuary.feeding[dragon_id].cap || 0);
				if (level <= cap) {
					var reqs = t.checkRequirements({
						reqs_type: 'dragon',
						sanctuary_type: 'feeding',
						level: level,
						city_idx: CAPITAL.id
					});

					if (reqs.msg) {
						if (t.contentType == 5 && t.sanctContentType == 2) {
							try {
								$(UID['tabJobFeeding_FB_' + dragon_id]).innerHTML = '<font color=#C33>' + reqs.msg.replace(/:\+/, ':').replace(/\+\s*$/, '') + '</font>';
								$(UID['tabJobFeeding_FB_' + dragon_id]).title = translate(translateByKey(dragon.subtype, 'rank-' + dragon.type, 'dragons')) + ' ' + reqs.msg.replace(/\+/g, ' \n');
								$(UID['tabJobFeeding_Sel_' + dragon_id]).style.color = "#C33";
							} catch (e) {}
						}
					} else {
						if (t.contentType == 5 && t.sanctContentType == 2) {
							try {
								var fb_text = translate('Next level') + ' ' + translate('OK');
								$(UID['tabJobFeeding_FB_' + dragon_id]).innerHTML = fb_text;
								$(UID['tabJobFeeding_FB_' + dragon_id]).title = translate(translateByKey(dragon.subtype, 'rank-' + dragon.type, 'dragons')) + ' \n' + fb_text;
							} catch (e) {}
						}
					}
					return reqs;
				} else {
					if (t.contentType == 5 && t.sanctContentType == 2) {
						try {
							var fb_text = translate('Task Completed');
							$(UID['tabJobFeeding_FB_' + dragon_id]).innerHTML = '<font color=#0B0>' + fb_text + '</font>';
							$(UID['tabJobFeeding_FB_' + dragon_id]).title = translate(translateByKey(dragon.subtype, 'rank-' + dragon.type, 'dragons')) + ' \n' + fb_text;
							$(UID['tabJobFeeding_Sel_' + dragon_id]).style.color = "#5B5";
						} catch (e) {}
					}
				}
				return ({
					capped: true,
					msg: translate('Maximum level reached')
				});
			},
			checkResurrectReqs: function(troopType, troopQty) {
				var t = Tabs.Jobs;
				if (t.contentType == 3) {
					try {
						$(UID['tabJobResurrect_FB_' + id_found]).innerHTML = '';
						$(UID['tabJobResurrect_Troop_' + id_found]).style.backgroundColor = "none";
					} catch (e) {}
				}

				var blue_energy = 0;
				var darkPortalLevel = 0;
				var city = Seed.cities[CAPITAL.id];
				try {
					var seedReqs = Seed.requirements.resurrect[troopType];
					var statReqs = Seed.stats.resurrect[troopType];
					blue_energy = troopQty * seedReqs.resources['blue_energy'];
					darkPortalLevel = seedReqs.buildings['DarkPortal'];
				} catch (e) {
					actionLog('<B>' + translate('Training') + '</B>: ' + e.msg + ' ' + translate('Manifest not available, using defaults'));
				}

				var m = '';
				var n = ' : ';
				var ret = {
					trainable: false,
					msg: []
				};

				/* Returns zero or the building level */
				if (city.resources.blue_energy < blue_energy) m += translate('Blue energy') + ': ' + (blue_energy - city.resources.blue_energy) + ' + ';
				var availableSouls = city.souls[troopType];
				availableSouls = (availableSouls > 0) ? availableSouls : 0;
				if (availableSouls == 0) m += translate('Souls') + ' + '; /*
																			 * availableSouls <
																			 * troopQty
																			 */
				if (t.getBuildingLevel(SPECTRAL_OUTPOST.id, 'DarkPortal', darkPortalLevel) == 0) m += translate('DarkPortal') + ': ' + darkPortalLevel + ' + ';
				if (t.getRemainingQueue(SPECTRAL_OUTPOST.id, 'resurrection', true) == 0) m += translate('Resurrection queue') + ' ';
				if (m.length == 0) {
					ret.trainable = true;
					ret.msg = troopQty + ' ' + translate(troopType);
				} else {
					ret.trainable = false;
					ret.msg = n + m;
				}

				var id_found = undefined;
				for (var i = 0; i < all_unit_types.length && id_found == undefined; i++) {
					if (all_unit_types[i] == troopType) id_found = i;
				}
				if (ret.trainable == false) {
					if (t.contentType == 4) {
						try {
							$(UID['tabJobResurrect_FB_' + id_found]).innerHTML = '<font color=#C33>' + ret.msg.replace(/:\+/, ':').replace(/\+\s*$/, '') + '</font>';
							$(UID['tabJobResurrect_FB_' + id_found]).title = translate(all_unit_types[id_found]) + ' ' + ret.msg.replace(/\+/g, ' \n');
							$(UID['tabJobResurrect_Troop_' + id_found]).style.backgroundColor = "#C33";
						} catch (e) {}
					}
				} else {
					/*
					 * Calculate speed_multiplier for the revival based on dark
					 * portals of the spectral ruins
					 */
					var speed_multiplier = 0;
					if (Seed.cities[SPECTRAL_OUTPOST.id]) {
						for (var j = 0; j < Seed.cities[SPECTRAL_OUTPOST.id].buildings.length; j++) {
							if (Seed.cities[SPECTRAL_OUTPOST.id].buildings[j].type == 'DarkPortal')
								speed_multiplier += (1 + (Seed.cities[SPECTRAL_OUTPOST.id].buildings[j].level - 1) / 10);
						}
					}
					var time = toNum(troopQty * statReqs.time * (15 / 100) / speed_multiplier);
					if (t.contentType == 4) {
						try {
							var fb_text = translate('Revival allowed') + ' : ' + translate('OK') + ' (' + timestrShort(time) + ')';
							$(UID['tabJobResurrect_FB_' + id_found]).innerHTML = fb_text;
							$(UID['tabJobResurrect_FB_' + id_found]).title = translate(all_unit_types[id_found]) + ' \n' + fb_text;
						} catch (e) {}
					}
				}
				return ret;
			},

			trainTick: function() {
				var t = Tabs.Jobs;
				var doRecheck = true;

				if (!Data.options.training.enabled) return;
				clearTimeout(t.trainTimer);
				/*
				 * If a refresh of the capital city data is enqueued or running,
				 * then skip everything. troops will be queued for training
				 * after the refresh completed
				 */
				if (Seed.refresh_cities[CAPITAL.id])
					doRecheck = false;
				else
					doRecheck = true;

				var options = {
					noPlayer: true
				};
				var cityList = getTotTrainTable();
				/* logit('getTotTrainTable ='+inspectObj(cityList,8,1)); */
				/*
				 * For all cities, sorted by training queues total time, in
				 * ascending order (we deal with the city that will complete its
				 * queues first)
				 */
				for (var x = 0; x < cityList.length && doRecheck; x++) {
					var trainQueued = false;
					var cityIdx = cityList[x].cityIdx;
					if (cityIdx != undefined && !isNaN(cityIdx) && cityIdx >= 0 && cityIdx < Seed.cities.length && cityIdx != SPECTRAL_OUTPOST.id &&
						cityIdx != SKY_OUTPOST.id && Data.options.training.city[cityIdx].enabled) {
						/*
						 * Only check the job queue if we are in short queue
						 * mode
						 */
						logit('Trying to train in ' + Seed.cities[cityIdx].name);
						if (t.selectedQ == 'min_housing') {
							if ((Jobs.getJobs('units', true, cityIdx)).length == 0)
								trainQueued = t.attemptTrainQ(cityIdx, 0, all_unit_types.length, true);
						} else {
							trainQueued = t.attemptTrainQ(cityIdx, 0, all_unit_types.length, false);
						}
						if (trainQueued) {
							doRecheck = false; /* Troops have been queued. */
						} else {
							if (!options.cities) options.cities = [];
							options.cities.push(Seed.cities[cityIdx].id);
						}
					}
				}

				t.trainTimer = setTimeout(t.trainTick, Math.randRange(5000, 10000));
			},
			buildTick: function() {
				var t = Tabs.Jobs;

				if (!Data.options.building.enabled) return;
				clearTimeout(t.buildTimer);

				var recheck_build = false;
				var options = {
					noPlayer: true,
					cities: []
				};
				/* Iterate over the cities for buildings in each */
				for (var cityIdx = 0; cityIdx < Seed.cities.length; ++cityIdx) {
					if (Seed.cities[cityIdx]) {
						var bJob = Jobs.getJobs('building', true, cityIdx);
						var city = Seed.cities[cityIdx];
						var cityId = city.id;

						if (bJob.length == 0) { /* city not currently building */
							var buildOrder = [];
							var buildList = [];
							/* Reset the last building level */
							if (t.last_built[cityId]) Buildings.setLevel(cityId, t.last_built[cityId].id, t.last_built[cityId].level);

							for (var name in Data.options.building.level_enable[cityIdx]) {
								if (Data.options.building.level_enable[cityIdx][name]) {
									buildList = Buildings.getList(cityIdx, name);
									buildList.sort(function(a, b) {
										return a.level - b.level
									});
									buildOrder = buildOrder.concat(buildList);
								}
							}
							buildOrder.sort(function(a, b) {
								return a.level - b.level
							});
							/*
							 * Change: we want to iterate over each buildings
							 * comparing the level to the cap. If the cap has
							 * not been reached, call doBuild
							 */
							var bBuilt = false;
							var bBuildable = false;
							var totalCapped = 0;
							for (var i = 0; i < buildOrder.length && !bBuilt; i++) {
								var reqs = t.checkBuildReqs(cityIdx, buildOrder[i].type);
								if (reqs) {
									bBuildable = true;
									if (t.contentType == 2) t.jobFeedback(reqs.msg);
									if (!reqs.msg) {
										t.doBuild(buildOrder[i], city);
										bBuilt = true;
										return;
									} else {
										if (t.contentType == 2) t.jobFeedback(buildOrder[i].type + ' ' + reqs.msg);
										if (reqs.capped)++totalCapped;
									}
								}
							}
							if (!bBuilt && bBuildable && (buildOrder.length - totalCapped > 0))
								recheck_build = true;
						} else {
							/* We have a job running */
							var bType = getBuildingById(cityIdx, bJob[0].city_building_id);
							var msg = translate('Building') + ': ' + translate(bType) + ' ' + translate('Level').toLowerCase() + ' ' + bJob[0].level + ' ' + translate('at') + ' ' + translate(city.type);
							if (t.contentType == 2) t.jobFeedback(msg);
						}
					}
				}
				if (recheck_build) {
					/* Seed.fetchPlayer(options); */
					t.buildRetryTime *= 1.5;
					if (t.contentType == 2) t.jobFeedback(translate('Completion errors') + ': ' + translate('Retry in') + ' ' + timestr(t.buildRetryTime / 1000) + ' ' + translate('seconds'));
					t.buildTimer = setTimeout(t.buildTick, t.buildRetryTime);
					return;
				}
				t.buildTimer = setTimeout(t.buildTick, Math.randRange(15000, 25000));
			},
			feedingTick: function() {
				var t = Tabs.Jobs;
				if (!Data.options.sanctuary.enabled) return;
				clearTimeout(t.sanctuaryTimer);
				var recheck_feeding = false;
				var fBuilt = false;
				var fJob = Jobs.getJobs('feeding', true, CAPITAL.id);
				if (fJob.length == 0) {
					var toFeed = 0;
					for (var id in Data.options.sanctuary.feeding) {
						if (Data.options.sanctuary.feeding[id].enable) {
							var dragon = Seed.sanctuary_dragons[id];
							var level = dragon.level;
							var reqs = t.checkFeedingReqs(id);
							if (reqs) {
								if (!reqs.msg) {
									t.doFeeding(id, level);
									fBuilt = true;
									break;
								} else {
									if (t.contentType == 5) t.jobFeedback(translateByKey(dragon.subtype, 'rank-' + dragon.type, 'dragons') + ' ' + reqs.msg);
									++toFeed;
								}
							}
							if (fBuilt === false && toFeed)
								recheck_feeding = true;
						}
					}
				}
				if (recheck_feeding) {
					t.sanctuaryTimer = setTimeout(t.feedingTick, t.feedRetryTime);
					if (t.contentType == 5) t.jobFeedback(translate('Completion errors') + ': ' + translate('Retry in') + ' ' + timestr(t.feedRetryTime / 1000) + ' ' + translate('seconds'));
					t.feedRetryTime *= 1.5;
					return;
				}
				t.sanctuaryTimer = setTimeout(t.feedingTick, 5000);
			},
			researchTick: function() {
				var t = Tabs.Jobs;

				if (!Data.options.research.enabled) return;
				clearTimeout(t.researchTimer);

				function isInProgress(research) {
					var jobs = Jobs.getJobs('research', false, -1),
						found = false;
					for (var j = 0; j < jobs.length && !found; j++) {
						if (jobs[j].research_type == research) found = true;
					}
					return (found);
				}
				var recheck_research = false;
				var options = {
					noPlayer: true,
					cities: []
				};
				var rBuilt = false;
				/* Iterate over the cities for research in each */
				for (var cityIdx = 0; cityIdx < Seed.cities.length && !rBuilt; ++cityIdx) {
					if (!Data.options.Rcheat_enabled && cityIdx != CAPITAL.id) continue;
					if (Seed.cities[cityIdx] && cityIdx != undefined && !isNaN(cityIdx) && cityIdx >= 0 && cityIdx < Seed.cities.length && cityIdx != SPECTRAL_OUTPOST.id &&
						cityIdx != SKY_OUTPOST.id && cityIdx != CAVE_OUTPOST.id && cityIdx != LUNA_OUTPOST.id && cityIdx != COLOSSUS_OUTPOST.id && Seed.cities[cityIdx].figures.queue_lengths && Seed.cities[cityIdx].figures.queue_lengths['research']) {
						var rJob = Jobs.getJobs('research', true, cityIdx);
						var city = Seed.cities[cityIdx];
						var cityId = city.id;

						if (rJob.length == 0) {
							var toResearch = 0;
							for (var id = 0 ; id < Seed.research.length ; id++) {
								var resName = Seed.research[id];
								if (Data.options.research.res_enable[0][resName] == undefined) continue;
								if (Data.options.research.res_enable[0][resName] == true && !isInProgress(resName)) {
									var level = t.getCurrentResearchLevel(resName) + 1;
									var reqs = t.checkResearchReqs(resName, cityIdx);
									if (reqs) {
										if (!reqs.msg) {
											t.doResearch(cityIdx, resName, level);
											rBuilt = true;
											break;
										} else {
											if (t.contentType == 3) t.jobFeedback(resName + ' ' + reqs.msg);
											++toResearch;
										}
									}
								}
							}
							if (rBuilt === false && toResearch)
								recheck_research = true;
						}
					}
				}
				if (recheck_research) {
					/* Seed.fetchPlayer({cities:[cityId]}); */
					t.researchTimer = setTimeout(t.researchTick, t.resRetryTime);
					if (t.contentType == 3) t.jobFeedback(translate('Completion errors') + ': ' + translate('Retry in') + ' ' + timestr(t.resRetryTime / 1000) + ' ' + translate('seconds'));
					t.resRetryTime *= 1.5;
					return;
				}
				t.researchTimer = setTimeout(t.researchTick, 5000);
			},
			resurrectTick: function() {
				var t = Tabs.Jobs;

				if (!Data.options.resurrect.enabled) return;
				clearTimeout(t.resurrectTimer);
				var recheck_reseurrect = false;
				var sJob = Jobs.getJobs('resurrection', true, CAPITAL.id);
				var city = Seed.cities[SPECTRAL_OUTPOST.id];
				var cityId = city.id;

				if (sJob.length == 0) {
					var toResurrect = 0;
					for (var unit = 0; unit < all_unit_types.length; unit++) {
						if (Data.options.resurrect.res_enable[SPECTRAL_OUTPOST.id][all_unit_types[unit]] == undefined)
							continue;
						if (Data.options.resurrect.res_enable[SPECTRAL_OUTPOST.id][all_unit_types[unit]] == true) {
							var currentSouls = Seed.cities[CAPITAL.id].souls[all_unit_types[unit]];
							if (!currentSouls || isNaN(currentSouls)) currentSouls = 0;
							var currentMax = Data.options.resurrect.res_max[SPECTRAL_OUTPOST.id][all_unit_types[unit]];
							var checkQty = (currentSouls > currentMax) ? currentMax : currentSouls;
							var reqs = t.checkResurrectReqs(all_unit_types[unit], checkQty);
							var rRevive = false;
							if (reqs) {
								if (reqs.trainable) {
									t.doResurrect(all_unit_types[unit], checkQty);
									rRevive = true;
									break;
								} else {
									if (t.contentType == 4) t.jobFeedback(all_unit_types[unit] + ' ' + reqs.msg);
									++toResurrect;
								}
							}
						} else {
							try {
								$(UID['tabJobResurrect_FB_' + unit]).innerHTML = '';
								$(UID['tabJobResurrect_Troop_' + unit]).style.backgroundColor = "none";
							} catch (e) {}
						}
					}
					if (rRevive === false && toResurrect)
						recheck_reseurrect = true;
				}
				if (recheck_reseurrect) {
					Seed.fetchPlayer({
						cities: [cityId]
					});
					t.resurrectTimer = setTimeout(t.resurrectTick, t.revRetryTime);
					if (t.contentType == 4) t.jobFeedback(translate('Completion errors') + ': ' + translate('Retry in') + ' ' + timestr(t.revRetryTime / 1000) + ' ' + translate('seconds'));
					t.revRetryTime *= 1.5;
				} else {
					t.resurrectTimer = setTimeout(t.resurrectTick, Math.randRange(15000, 20000));
				}
			},

			attemptTrainQ: function(cityIdx, count, troopsLength, shortQ) {
				var t = Tabs.Jobs;
				var troopQueued = false;

				/* if (Seed.cities[cityIdx]) */
				/*
				 * logit('Attempting troop training for
				 * '+Seed.cities[cityIdx].name+' - get Train Jobs =
				 * '+inspectObj(Jobs.getJobs('units', true, cityIdx))+', shortQ =
				 * '+shortQ);
				 */

				if (Seed.cities[cityIdx] && (((Jobs.getJobs('units', true, cityIdx)).length == 0 && shortQ) || !shortQ)) {
					/* Get the troop types and quantities to build */
					/*
					 * logit('Attempt troop training for '+cityIdx+', length
					 * units =
					 * '+Data.options.training.city[cityIdx].units.length);
					 */
					for (var j = Data.options.training.city[cityIdx].units.length - 1; j >= 0; j--) {
						/*
						 * for (var j in
						 * Data.options.training.city[cityIdx].units){
						 */
						var troopType = all_unit_types[j],
							troopQty = Data.options.training.city[cityIdx].units[j],
							cap = 0;
						if (cityIdx == SPECTRAL_OUTPOST.id || cityIdx == SKY_OUTPOST.id || !isTrainable(cityIdx, troopType)) troopQty = 0;
						/* logit('Troop '+troopType+', qty '+troopQty); */
						if (troopQty > 0) {
							cap = t.getTroopCap(troopType, troopQty);
							/*
							 * logit('==> Test capped troop ? '+troopType+', qty =
							 * '+troopQty+', cap = '+cap);
							 */
							try {
								if (cap) {
									troopQty = 0;
									if (t.contentType == 1) t.jobFeedback(translate('Troops Capped'));
									$(UID['tabTrain_Troop_' + cityIdx + '_' + j]).style.backgroundColor = "red";
								} else if (t.contentType == 1) {
									if ($(UID['tabTrain_Troop_' + cityIdx + '_' + j]).style.backgroundColor == "red")
										$(UID['tabTrain_Troop_' + cityIdx + '_' + j]).style.backgroundColor = "white";
								}
							} catch (e) {}
						}
						if (troopQty > 0) {
							var reqs = t.checkTrainReqs(troopType, troopQty, cityIdx);
							/*
							 * logit('==> Test troop reqs ? '+troopType+', qty =
							 * '+troopQty+', reqs = '+reqs.msg);
							 */
							if (!reqs.msg) {
								if (shortQ) {
									logit('==> Do Short train ' + troopType + ', qty = ' + troopQty + ' for ' + Seed.cities[cityIdx].name);
									t.doTrain(troopType, troopQty, cityIdx);
									troopQueued = true;
									break;
								} else {
									if (t.getRemainingQueue(cityIdx, 'units', false)) {
										logit('==> Do Long train ' + troopType + ', qty = ' + troopQty + ' for ' + Seed.cities[cityIdx].name);
										t.doTrain(troopType, troopQty, cityIdx);
										troopQueued = true;
										break;
									} else {
										/*
										 * logit('==> No avalable queue for
										 * train of '+troopType+', qty =
										 * '+troopQty+' for
										 * '+Seed.cities[cityIdx].name);
										 */
										break; /*
												 * Exit loop as no queue is
												 * available for this city
												 */
									}
								}
							}
						} /*
							 * else logit('==> No quantity to train for
							 * '+troopType+', qty = '+troopQty+' for
							 * '+Seed.cities[cityIdx].name);
							 */
					}
				}
				return troopQueued;
			},
			doTrain: function(troopType, troopQty, cityIdx) {
				var t = Tabs.Jobs;
				var city = Seed.cities[cityIdx];
				var msg = translate('Training') + ': (' + numf(troopQty) + ') ' + translate(troopType) + ' ' + translate('at') + ' ' + ((city.type == 'Outpost') ? translate(city.name) : city.name);
				if (t.contentType == 1) t.jobFeedback(msg + ' (' + translate('UpKeep') + ' ' + (troopQty * Seed.stats.unit[troopType].upkeep.food) + ' ' + translate('Food') + ')');

				MyAjax.troopTraining(troopType, troopQty, city.id, function(rslt) {
					if (rslt.ok) {
						t.trainErrorCount = 0;
						actionLog(msg);
					} else {
						verboseLog('Error: Training: ' + rslt.errmsg);
						actionLog('<B>' + translate('Error') + ' ' + translate('Training') + '</B>: ' + rslt.errmsg);
						/*
						 * The queue is frequently full, but we could be getting
						 * server errors (500) too Wait a couple of minutes
						 */
						if (++t.trainErrorCount > 5) {
							if (t.contentType == 1) t.jobFeedback(translate('Too many errors, disabling auto training'));
							t.setTrainEnable(false);
							t.trainErrorCount = 0;
						} else {
							if (t.contentType == 1) t.jobFeedback(translate('Error') + ' ' + translate('Training') + ': ' + rslt.errmsg);
							t.trainRetryTime *= 1.5;
						}
					}
					/* Get the troops being built so the will be displayed */
					Seed.updateCity(rslt.dat.result.city);
					/* Get capital city to show new resources */
					if (rslt.dat.result.city.id !== Seed.cities[CAPITAL.id].id) {
						Seed.addToRefresh(Seed.cities[CAPITAL.id].id, false);
						/* Seed.fetchCity (Seed.cities[CAPITAL.id].id); */
					}
					if (t.contentType == 1 && t.trainContentType == 0) t.tabJobTrainSets(); /*
																							 * to
																							 * refresh
																							 * total
																							 * time
																							 * in
																							 * city
																							 * title
																							 * bar
																							 */
				});
			},
			doBuild: function(building, city) {
				var t = Tabs.Jobs;
				var msg = '<B>' + translate('Building') + '</B>: ' + translate(building.type) + ' ' + translate('Level').toLowerCase() + ' ' + (building.level + 1) + ' ' + translate('at') + ' ' + translate(city.type);
				if (t.contentType == 2) t.jobFeedback(msg);

				MyAjax.buildingUpgrade(city.id, building.id, function(rslt) {
					if (rslt.ok) {
						t.buildErrorCount = 0;
						actionLog(msg);
						clearTimeout(t.buildTimer);
						t.buildTimer = setTimeout(t.buildTick, Math.randRange(15000, 25000));
						return;
					} else {
						Seed.fetchPlayer({
							cities: [city.id]
						});
						actionLog(building.type + ': ' + rslt.errmsg);
						if (++t.buildErrorCount > 3) {
							if (t.contentType == 2) t.jobFeedback(translate('Too many errors, disabling auto-build'));
							t.setBuildEnable(false);
							t.buildErrorCount = 0;
							return;
						}
						if (t.contentType == 2) t.jobFeedback(building.type + ': ' + rslt.errmsg);
						clearTimeout(t.buildTimer);
						t.buildTimer = setTimeout(t.buildTick, t.buildRetryTime);
						return;
					}
				});
			},
			doFeeding: function(dragon_id, dragon_level) {
				var t = Tabs.Jobs;
				var dragon = Seed.sanctuary_dragons[dragon_id];
				var msg = '<b>' + translate('upgrading-dragon') + ': </b> ' + translateByKey(dragon.subtype, 'rank-' + dragon.type, 'dragons') + ' (' + dragon_level + ') ';
				if (t.contentType == 5) t.jobFeedback(msg);
				MyAjax.dragonFeeding(dragon_id, function(rslt) {
					if (rslt.ok) {
						t.feedErrorCount = 0;
						actionLog(msg);
						return;
					} else {
						Seed.fetchPlayer({
							cities: [],
							dragons: true,
							jobs: true
						});
						actionLog(msg + ' : ' + rslt.errmsg);
						if (++t.feedErrorCount > 5) {
							if (t.contentType == 5) t.jobFeedback(translate('Too many errors, disabling auto-feeding'));
							t.setFeedingEnable(false);
							t.feedErrorCount = 0;
							return;
						}
						if (t.contentType == 5) t.jobFeedback(translate('FEEDING ERROR') + ': ' + rslt.errmsg);
						return;
					}
				});
			},
			doResearch: function(cityIdx, researchType, researchLevel) {
				var t = Tabs.Jobs;
				var city = Seed.cities[cityIdx];
				var msg = '<b>' + translate('Researching') + ': </b> ' + translate(t.resUITranslate(researchType)) + ' (' + researchLevel + ') ';
				if (t.contentType == 3) t.jobFeedback(msg);
				actionLog('<B>' + translate('Research Started') + '</B>: ' + translate(t.resUITranslate(researchType)) + ' (' + researchLevel + ') ');

				MyAjax.researchStart(city.id, researchType, function(rslt) {
					if (rslt.ok) {
						t.resErrorCount = 0;
						actionLog(msg);
						return;
					} else {
						Seed.fetchPlayer({
							cities: [],
							jobs: true
						});
						actionLog('<B>' + translate('Research Error').toUpperCase() + '</B>: ' + rslt.errmsg);
						if (++t.resErrorCount > 5) {
							if (t.contentType == 3) t.jobFeedback(translate('Too many errors, disabling auto-research'));
							t.setResearchEnable(false);
							t.resErrorCount = 0;
							return;
						}
						if (t.contentType == 3) t.jobFeedback(translate('RESEARCH ERROR') + ': ' + rslt.errmsg);
						return;
					}
				});
			},
			doResurrect: function(troopType, troopQty) {
				var t = Tabs.Jobs;
				var city = Seed.cities[SPECTRAL_OUTPOST.id];
				var msg = '<B>' + translate('Reviving') + '</B>: (' + troopQty + ') ' + translate(troopType) + ' ' + translate('at') + ' ' + city.type;
				if (t.contentType == 4) t.jobFeedback(msg);
				MyAjax.troopReviving(troopType, troopQty, city.id, function(rslt) {
					clearTimeout(t.resurrectTimer);
					if (rslt.ok) {
						t.revErrorCount = 0;
						actionLog(msg);
						Seed.cities[CAPITAL.id].souls[all_unit_types[troopType]] -= troopQty;
						t.resurrectTimer = setTimeout(function() {
							t.resurrectTick(0)
						}, Math.randRange(3000, 13000));
						/* Get the troops being built so the will be displayed */
						Seed.updateCity(rslt.dat.result.city);
						/* Get capital city to show new resources */
						if (rslt.dat.result.city.id !== Seed.cities[CAPITAL.id].id)
							Seed.addToRefresh(Seed.cities[CAPITAL.id].id, false);
					} else {
						verboseLog('Error: Reviving: ' + rslt.errmsg);
						actionLog('<B>' + translate('Error') + ' ' + translate('Reviving') + '</B>: ' + rslt.errmsg);
						/*
						 * The queue is frequently full, but we could be getting
						 * server errors (500) too Wait a couple of minutes
						 */
						if (++t.revErrorCount > 5) {
							if (t.contentType == 4) t.jobFeedback(translate('Too many errors, disabling auto reviving'));
							t.setResurrectEnable(false);
							t.revErrorCount = 0;
						} else {
							if (t.contentType == 4) t.jobFeedback(translate('Error') + ' ' + translate('Reviving') + ': ' + rslt.errmsg);
							t.resurrectTimer = setTimeout(function() {
								t.resurrectTick(ic)
							}, t.revRetryTime);
							t.revRetryTime *= 1.5;
						}
					}
				});
				if (t.contentType == 4) setTimeout(t.tabJobResurrect, 2000); /*
																				 * to
																				 * refresh
																				 * souls
																				 * qties
																				 */
			}
		}
		/**
		 * ****************************** Jobs Tab
		 * **********************************
		 */

		/**
		 * ****************************** Multi Tab
		 * *********************************
		 */
		Tabs.Multiple = {
			tabOrder: MULTI_TAB_ORDER,
			tabLabel: 'Multi',
			tabDisabled: !MULTI_TAB_ENABLE,
			container: null,
			enabled: false,
			attackTimer: null,
			marchTimer: null,
			attackErrors: 0,
			contentType: 0,
			/* 0 = config, 2 = stats */
			lastSubTab: 'tabMultiConfig',
			running: {
				start_at: 0
			},
			secondarySent: 0,

			init: function(div) {
				var t = Tabs.Multiple;
				Data.setDefaultValues('multiple');

				t.container = div;
				var m = '' + '<div class=' + UID['title'] + '>' + translate('Attack One Target in Multiple waves') + '</div>' + '<div id=' + setUID('tabMulti_Status') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<center><input id=' + setUID('tabMulti_OnOff') + ' type=button value="OnOff" /></center>' + '	<div id=' + setUID('tabMulti_Report') + ' style="margin-top:5px;height:140px; max-height:140px; width:540px; max-width:540px; overflow:auto;">' + '		<table id=' + setUID('tabMulti_Marches') + ' class=' + UID['table'] + '></table>' + '	</div>' + '	<div id=' + setUID('tabMulti_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabMultiConfig') + '>' + translate('Config') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabMultiStats') + '>' + translate('Stats') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabMulti_Content') + ' style="padding-top:0px; height:440px; overflow-y:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabMultiConfig']).addEventListener('click', t.tabMultiConfig, false);
				$(UID['tabMultiStats']).addEventListener('click', t.tabMultiStats, false);
				$(UID['tabMulti_OnOff']).addEventListener('click', function() {
					t.setMultiEnable(!Data.options.multiple.enabled);
				}, false);
				window.addEventListener('unload', t.onUnload, false);
				t.setMultiEnable(Data.options.multiple.enabled);
				t.contentType = toNum(Data.options.multiple.current_tab);
				t.show();
			},

			tabMultiConfig: function() {
				var t = Tabs.Multiple;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabMultiConfig']).className = 'selected';
				$(UID['tabMultiConfig']).style.zIndex = 1;
				t.lastSubTab = 'tabMultiConfig';

				t.contentType = 0;

				var m = '<div class="' + UID['title'] + '">' + translate('Attacks') + ' ( ' + translate('Max') + '. ' + translate('Troops') + ' ' + numf(toNum((getMusterPoint(CAPITAL.id)).max_troops), ' ') + ' )</div>' + '<div class=' + UID['content'] + '>' + '	<div>' + '		<b>' + translate('Coords') + ':&nbsp;</b>&nbsp;' + '		X: <input id=' + setUID('tabMulti_CoordsX') + ' size=1 maxlength=3 type=text value="' + Data.options.multiple.target.x + '" /> ' + '		Y: <input id=' + setUID('tabMulti_CoordsY') + ' size=2 maxlength=3 type=text value="' + Data.options.multiple.target.y + '" /> ' + '		&nbsp <b>' + translate('Distance') + ':</b> <span id=' + setUID('tabMulti_Distance') + '></span><BR>' + '		<div class=' + UID['status_ticker'] + ' style="height:auto !important;margin:5px 10px !important;">' + '			<center><span id=' + setUID('tabMulti_Tile') + '></span></center>' + '		</div>' + '	</div>' + '  <div>' + '	<table id=' + setUID('tabMulti_Troops') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=10>' + translate('Troops for Primary Attack') + ':&nbsp;</td>' + '		</tr>' + '	</table>' + '	</div>' + '  <div>' + '	<table id=' + setUID('tabMulti_Dragons') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=left>' + '			<td class=left colspan=10>' + translate('Include Great Dragon') + ':&nbsp;</td>';
				var currentDragons_1 = [];
				for (var j = 0; j < Seed.dragonList.length; j++) {
					var dragon = Seed.dragonList[j];
					if (j % 5 == 0)
						m += '</tr><tr>';
					m += '	<td class=right><span title="' + translate(dragon.type) + '">' + translate(Names.getTroopAbbr(dragon.type)) + ':<span></td>' + '	<td align=center><input type=checkbox id=' + setUID('tabMulti_Dragons_' + j) + ' ref="' + j + '" ' + (Data.options.multiple.target.dragons_1[dragon.type] ? ' checked' : '') + ' /></td>';
					currentDragons_1.push(j);
				}
				m += '</tr>' + '	</table>' + '	</div><br>' + '  <div>' + '	<table id=' + setUID('tabMulti_Troops2') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=10>' + translate('Troops for Secondary Attacks') + ':&nbsp;</td>' + '		</tr>' + '	</table>' + '	</div>' + '  <div>' + '	<table id=' + setUID('tabMulti_Dragons2') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=left>' + '			<td class=left colspan=10>' + translate('Include Great Dragon') + ':&nbsp;</td>';
				var currentDragons_2 = [];
				for (var j = 0; j < Seed.dragonList.length; j++) {
					var dragon = Seed.dragonList[j];
					if (j % 5 == 0)
						m += '</tr><tr>';
					m += '	<td class=right><span title="' + translate(dragon.type) + '">' + translate(Names.getTroopAbbr(dragon.type)) + ':<span></td>' + '	<td align=center><input type=checkbox id=' + setUID('tabMulti_Dragons2_' + j) + ' ref="' + j + '" ' + (Data.options.multiple.target.dragons_2[dragon.type] ? ' checked' : '') + ' /></td>';
					currentDragons_2.push(j);
				}
				m += '</tr>' + '	</table>' + '	</div><br>' + '	<table class=' + UID['table'] + '>' + '		<tr>' + '			<td class=right> ' + translate('Delete Battle Reports') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabMulti_DelReports') + ' type=checkbox ' + (Data.options.multiple.delete_reports ? 'CHECKED' : '') + ' /></td>' + '		</tr><tr>' + '			<td class=right>' + translate('Stop if any troops lost') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabMulti_StopOnLoss') + ' type=checkbox ' + (Data.options.multiple.stop_on_loss ? 'CHECKED' : '') + ' /></td>' + '		</tr><tr>' + '			<td class=right>' + translate('Delay before sending Primary attack') + ':&nbsp;</td>' + '			<td>' + '				<input id=' + setUID('tabMulti_DelayMin') + ' type=text size=1 maxlength=4 value="' + Data.options.multiple.delay_min + '" />' + '				 to <span id=' + setUID('tabMulti_DelayMax') + '>' + Data.options.multiple.delay_max + '</span>&nbsp;' + translate('seconds') + '			</td>' + '		</tr><tr>' + '			<td class=right> ' + translate('Delay before first secondary attack') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabMulti_DelayB4Secondary') + ' type=text size=1 maxlength=4 value="' + Data.options.multiple.delay_b4_secondary + '" /></td>' + '		</tr><tr>' + '			<td class=right>' + translate('Delay Between Secondary Attacks') + ':&nbsp;</td>' + '			<td>' + '				<input id=' + setUID('tabMulti_DelayMin2') + ' type=text size=1 maxlength=4 value="' + Data.options.multiple.delay_min2 + '" />' + '				 to <span id=' + setUID('tabMulti_DelayMax2') + '>' + Data.options.multiple.delay_max2 + '</span>&nbsp;' + translate('seconds') + '			</td>' + '		</tr><tr>' + '			<td class=right> ' + translate('Maximum simultaneous marches') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabMulti_MaxMarches') + ' type=text size=1 maxlength=2 value="' + Data.options.multiple.max_marches + '" /></td>' + '		</tr><tr>' + '			<td class=right> ' + translate('Maximum secondary marches before sending another primary attack') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabMulti_MaxSecondary') + ' type=text size=1 maxlength=2 value="' + Data.options.multiple.max_secondary + '" /></td>' + '		</tr>' + '	</table>' + '</div>';
				$(UID['tabMulti_Content']).innerHTML = m;
				$(UID['tabMulti_CoordsX']).addEventListener('change', eventCoords, false);
				$(UID['tabMulti_CoordsY']).addEventListener('change', eventCoords, false);
				$(UID['tabMulti_DelReports']).addEventListener('click', function(event) {
					Data.options.multiple.delete_reports = event.target.checked;
				}, false);
				$(UID['tabMulti_StopOnLoss']).addEventListener('click', function(event) {
					Data.options.multiple.stop_on_loss = event.target.checked;
				}, false);
				$(UID['tabMulti_DelayMin']).addEventListener('change', delayChanged, false);
				$(UID['tabMulti_DelayMin2']).addEventListener('change', delayChanged2, false);
				$(UID['tabMulti_DelayB4Secondary']).addEventListener('change', delaySecondaryChanged, false);
				$(UID['tabMulti_MaxMarches']).addEventListener('change', maxMarchesChanged, false);
				$(UID['tabMulti_MaxSecondary']).addEventListener('change', maxSecondaryChanged, false);
				setTroopTable($(UID['tabMulti_Troops']), 1, 'PW', wave_unit_types,
					Data.options.multiple.target.primary_units, Data.options.multiple.target.saved_units_1, eventTroops, true);
				setTroopTable($(UID['tabMulti_Troops2']), 1, 'SW', wave_unit_types,
					Data.options.multiple.target.secondary_units, Data.options.multiple.target.saved_units_2, eventTroops2, true);
				for (var j = 0; j < currentDragons_1.length; ++j) {
					$(UID['tabMulti_Dragons_' + currentDragons_1[j]]).addEventListener('change', function(event) {
						var args = event.target.getAttribute('ref');
						Data.options.multiple.target.dragons_1[Seed.dragonList[args].type] = event.target.checked;
						var include_great_dragon = false;
						for (var x = 0; x < Seed.dragonList.length && !include_great_dragon; x++) {
							var dragon = Seed.dragonList[x];
							if (Data.options.multiple.target.dragons_1[dragon.type]) include_great_dragon = true;
						}
						if (include_great_dragon) Data.options.multiple.target.include_gd_1 = true;
						else Data.options.multiple.target.include_gd_1 = false;
					}, false);
				}
				for (var j = 0; j < currentDragons_2.length; ++j) {
					$(UID['tabMulti_Dragons2_' + currentDragons_2[j]]).addEventListener('change', function(event) {
						var args = event.target.getAttribute('ref');
						Data.options.multiple.target.dragons_2[Seed.dragonList[args].type] = event.target.checked;
						var include_great_dragon = false;
						for (var x = 0; x < Seed.dragonList.length && !include_great_dragon; x++) {
							var dragon = Seed.dragonList[x];
							if (Data.options.multiple.target.dragons_2[dragon.type]) include_great_dragon = true;
						}
						if (include_great_dragon) Data.options.multiple.target.include_gd_2 = true;
						else Data.options.multiple.target.include_gd_2 = false;
					}, false);
				}
				eventCoords();

				function delayChanged(event) {
					var min = toNum(event.target.value);
					var max = toNum(min * 1.5);
					if (min < nvl(MIN_DELAY_BETWEEN_WAVE, 10) || min > 3600) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					$(UID['tabMulti_DelayMax']).innerHTML = max;
					event.target.style.backgroundColor = '';
					Data.options.multiple.delay_min = min;
					Data.options.multiple.delay_max = max;
				}

				function delayChanged2(event) {
					var min = toNum(event.target.value);
					var max = toNum(min * 1.5);
					if (min < 3 || min > 3600) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					$(UID['tabMulti_DelayMax2']).innerHTML = max;
					event.target.style.backgroundColor = '';
					Data.options.multiple.delay_min2 = min;
					Data.options.multiple.delay_max2 = max;
				}

				function delaySecondaryChanged(event) {
					var delay = toNum(event.target.value);
					if (delay < 3 || delay > 3600) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					event.target.style.backgroundColor = '';
					Data.options.multiple.delay_b4_secondary = delay;
				}

				function eventCoords(event) {
					checkCoords('tabMulti', Data.options.multiple.target.primary_units, Data.options.multiple.target);
				}

				function eventTroops(event) {
					var args = event.target.name.split('_');
					if (args[0] == 'PW') {
						var tt = wave_unit_types[args[1]];
						var tr = Data.options.multiple.target.primary_units;
						tr[tt] = event.target.value;
						var tr = Data.options.multiple.target.saved_units_1;
						tr[tt] = event.target.value;
						var time = getMarchTime(Data.options.multiple.target.x, Data.options.multiple.target.y, Data.options.multiple.target.primary_units);
						$(UID['tabMulti_Distance']).innerHTML = getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Data.options.multiple.target.x, Data.options.multiple.target.y) + ' (' + timestrShort(time) + ')';
					}
				}

				function eventTroops2(event) {
					var args = event.target.name.split('_');
					if (args[0] == 'SW') {
						var tt = wave_unit_types[args[1]];
						var tr = Data.options.multiple.target.secondary_units;
						tr[tt] = event.target.value;
						var tr = Data.options.multiple.target.saved_units_2;
						tr[tt] = event.target.value;
					}
				}

				function maxMarchesChanged(event) {
					var val = toNum($(UID['tabMulti_MaxMarches']).value);
					if (val < 0 || val > Seed.cities[CAPITAL.id].figures.marches.maximum) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					event.target.style.backgroundColor = '';
					Data.options.multiple.max_marches = val;
				}

				function maxSecondaryChanged(event) {
					var val = toNum($(UID['tabMulti_MaxSecondary']).value);
					if (val < 0 || val > Seed.cities[CAPITAL.id].figures.marches.maximum) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					event.target.style.backgroundColor = '';
					Data.options.multiple.max_secondary = val;
				}
			},

			tabMultiStats: function() {
				var t = Tabs.Multiple;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabMultiStats']).className = 'selected';
				$(UID['tabMultiStats']).style.zIndex = 1;
				t.lastSubTab = 'tabMultiStats';

				t.contentType = 1;

				var m = '<div class=' + UID['title'] + '>' + translate('Attacks Stats') + '</div>' + '<div id=' + setUID('tabMultiStats_Statbox') + ' class=' + UID['status_ticker'] + '>' + '<div id=' + setUID('tabMultiStats_Status') + '></div>' + '<div id=' + setUID('tabMultiStats_Percent') + '></div>' + '<br/>' + '<center><input id=' + setUID('tabMultiStats_Clear') + ' type=button value="' + translate('Clear Stats') + '" /></center>' + '<br></div>';
				$(UID['tabMulti_Content']).innerHTML = m;
				$(UID['tabMultiStats_Clear']).addEventListener('click', function() {
					clearStats();
					t.showStats();
				}, false);
				t.showStats();

				function clearStats() {
					var t = Tabs.Multiple;
					var now = serverTime();
					Data.stats.multiple = {
						start_at: now,
						run_time: 0,
						total_attacks: 0,
						loss: {},
						items: {},
						resources: {}
					};
					t.showStats();
				}
			},
			gotBattleReport: function(rpt_m) {
				var t = Tabs.Multiple,
					has_loss = false;
				if (!rpt_m) return;
				if (rpt_m.report.location.x == Data.options.multiple.target.x &&
					rpt_m.report.location.y == Data.options.multiple.target.y
				) {
					var march_id = null;
					for (var id in Data.marches.multiple) {
						var march = Data.marches.multiple[id];
						if (march.general.id === rpt_m.report.attacker.general.id) {
							march_id = id;
							break;
						}
					}
					if (march_id && march_id != null) t.trackStats(march_id, rpt_m);
					var items = rpt_m.report.spoils.items;
					if (items.length !== 0) Seed.fetchPlayer({
						noCities: true
					});
					if (!Data.options.multiple.delete_reports && !Data.options.multiple.stop_on_loss) return;

					if (Data.options.multiple.stop_on_loss && rpt_m.report.attacker.name == Seed.player.name) {
						for (var p in rpt_m.report.attacker.units) {
							if (rpt_m.report.attacker.units[p][0] != rpt_m.report.attacker.units[p][1]) {
								has_loss = true;
								var ts = new Date(rpt_m.report_notification.created_at * 1000).myString();
								t.setMultiEnable(false);
								dispFeedback(UID['tabMulti_Feedback'], translate('Troops lost') + '! (' + ts + ')');
								actionLog(translate('Multi') + ': ' + translate('Troops lost') + '! (' + ts + ')');
								for (var id in Data.marches.multiple) {
									if (Data.marches.multiple[id].status === 'marching')
										doRecallMarch(Data.marches.multiple[id].city_id, id);
								}
								return;
							}
						}
					}
					if (Data.options.multiple.delete_reports && rpt_m.report.attacker.name == Seed.player.name && !has_loss)
						Messages.deleteMessage(rpt_m.report_notification.id);
				}

				function doRecallMarch(city_id, id) {
					var targMsg = 'Recall march ' + id;
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.marchRecall(city_id, id, function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('succeeded'));
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
				}
			},
			marchTick: function() {
				var t = Tabs.Multiple;
				clearTimeout(t.marchTimer);
				Marches.updateTable($(UID['tabMulti_Marches']), 'multiple');
				t.marchTimer = setTimeout(t.marchTick, 1000);
			},
			setMultiEnable: function(onOff) {
				var t = Tabs.Multiple;
				var but = $(UID['tabMulti_OnOff']);
				clearTimeout(t.attackTimer);
				Data.options.multiple.enabled = onOff;
				if (onOff) {
					Messages.addBattleReportListener(t.gotBattleReport);
					but.value = translate('Attacking').toUpperCase();
					but.className = UID['btn_on'];
					t.multiAttackTick();
					t.running.start_at = serverTime();
					Data.stats.multiple.start_at = serverTime();
				} else {
					Messages.removeReportListener('multiple', t.gotBattleReport);
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
					if (t.running.start_at !== 0) {
						Data.stats.multiple.run_time += (serverTime() - t.running.start_at);
					}
				}
			},
			showStats: function() {
				var t = Tabs.Multiple;
				var div = $(UID['tabMultiStats_Status']);
				if (div == null) return;

				var run_time = Data.stats.multiple.run_time;
				if (Data.options.multiple.enabled)
					run_time += (serverTime() - t.running.start_at);

				var trueRunTime = (run_time > 0) ? (run_time / 3600) : 1;

				var m = '<table class=' + UID['table'] + '>' + '	<tr>' + '		<td class=right>' + translate('Start Date') + ': </td>' + '		<td colspan=>' + new Date(Data.stats.multiple.start_at * 1000).myString() + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Run Time') + ': </td>' + '		<td>' + timestr(run_time, true) + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Attacks') + ': </td>' + '		<td>' + Data.stats.multiple.total_attacks + '</td>' + '	<tr valign=top align=right>' + '		<td class=right>' + translate('Troops lost') + ': </td>';
				var first = true;
				for (var name in Data.stats.multiple.loss) {
					var perHour = Math.round(Data.stats.multiple.loss[name] / trueRunTime);
					if (first) first = false;
					else m += '	<tr align=right><td></td>';
					m += '		<td>' + translate(name) + ':</td>' + '		<td>' + numf(Data.stats.multiple.loss[name], ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
				}
				m += '</tr><tr valign=top align=right>' + '		<td class=right>' + translate('Resources') + ': </td>';
				var first = true;
				for (var name in Data.stats.multiple.resources) {
					var perHour = Math.round(Data.stats.multiple.resources[name] / trueRunTime);
					if (first) first = false;
					else m += '	<tr align=right><td></td>';
					m += '			<td>' + translate(name) + ':</td>' + '			<td>' + numf(Data.stats.multiple.resources[name], ' ') + '</td>' + '			<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '		</tr>';
				}

				m += '<tr valign=top align=right>' + '		<td class=right>' + translate('Items') + ': </td>';
				var items = [];
				for (var name in Data.stats.multiple.items)
					items.push({
						desc: translate(name),
						qty: Data.stats.multiple.items[name]
					});
				if (items.length > 0) {
					items.sort(function(a, b) {
						a = a.desc.toLowerCase();
						b = b.desc.toLowerCase();
						if (a > b) return 1;
						if (a < b) return -1;
						return 0;
					});
					for (var i = 0; i < items.length; i++) {
						var perHour = Math.round(items[i].qty / trueRunTime);
						if (i > 0) m += '<tr align=right><td></td>';
						m += '		<td>' + items[i].desc + ':</td>' + '		<td>' + numf(items[i].qty, ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
					}
				}
				m += '</table>';
				div.innerHTML = m;
			},
			trackStats: function(marchId, rpt_mu) {
				var t = Tabs.Multiple;
				if (DEBUG_MARCHES) debugLog('Tabs.Multiple.trackStats: ' + marchId);

				if (is_null(Data.stats.multiple.total_attacks)) Data.stats.multiple.total_attacks = 0;
				if (is_null(Data.stats.total.total_attacks)) Data.stats.total.total_attacks = 0;
				++Data.stats.multiple.total_attacks;
				++Data.stats.total.total_attacks;
				var res = rpt_mu.report.spoils.resources;
				for (var p in res) {
					objAddTo(Data.stats.multiple.resources, p, toNum(res[p]), false);
					objAddTo(Data.stats.total.resources, p, toNum(res[p]), false);
				}
				var killRes = rpt_mu.report.spoils.kill_items;
				for (var p in killRes) {
					objAddTo(Data.stats.multiple.resources, p, toNum(killRes[p]), false);
					objAddTo(Data.stats.total.resources, p, toNum(killRes[p]), false);
				}
				var items = rpt_mu.report.spoils.items;
				for (var i = 0; i < items.length; i++) {
					objAddTo(Data.stats.multiple.items, items[i], 1, true);
					objAddTo(Data.stats.total.items, items[i], 1, true);
				}
				for (var p in rpt_mu.report.attacker.units) {
					if (rpt_mu.report.attacker.units[p][0] != rpt_mu.report.attacker.units[p][1]) {
						var nb = toNum(rpt_mu.report.attacker.units[p][0]) - toNum(rpt_mu.report.attacker.units[p][1]);
						objAddTo(Data.stats.multiple.loss, p, nb, true);
						objAddTo(Data.stats.total.loss, p, nb, true);
					}
				}
				Data.marches.multiple[marchId].has_report = true;
				t.showStats();
			},

			/* For primary attack wave */
			multiAttackTick: function() {
				var t = Tabs.Multiple,
					targetMsg, retryDelay, availableGeneral, multiUnits, marchCount = 0;
				clearTimeout(t.attackTimer);

				if (!Data.options.multiple.enabled) return;

				targetMsg = Data.options.multiple.target.type + translate(' at ') + Data.options.multiple.target.x + '/' + Data.options.multiple.target.y;
				var actionMsg = translate('Primary attack to ') + targetMsg;
				var feedback_element = UID['tabMulti_Feedback'];

				var cur_march = getMinDelay();
				marchCount = cur_march.count;
				retryDelay = cur_march.delay;
				availableGeneral = getAvailableGeneral();
				var chk = checkMarch(actionMsg,
					feedback_element,
					marchCount,
					retryDelay,
					Marches.count.multiple,
					Data.options.multiple.max_marches,
					availableGeneral, true);
				if (chk != 0) {
					t.attackTimer = setTimeout(t.multiAttackTick, retryDelay * 1000);
					return;
				}
				Data.options.multiple.target.primary_units = cloneProps(Data.options.multiple.target.saved_units_1);
				multiUnits = checkTroops(CAPITAL.id, Data.options.multiple.target.primary_units);
				if (multiUnits !== null) {
					raiseMessage(actionMsg, feedback_element, multiUnits, true, retryDelay);
					t.attackTimer = setTimeout(t.multiAttackTick, retryDelay * 1000);
					return;
				}
				if (Data.options.multiple.target.include_gd_1) {
					var greatDrag = null;
					if ((greatDrag = getAvailableDragon(true, Data.options.multiple.target.dragons_1)) == null) {
						raiseMessage(actionMsg, feedback_element, 5, false, retryDelay);
						t.attackTimer = setTimeout(t.multiAttackTick, retryDelay * 1000);
						return;
					}
					Data.options.multiple.target.primary_units[greatDrag] = 1;
				}
				t.secondarySent = 0;
				verboseLog(actionMsg + ' ' + translate('attempted'));

				new MyAjax.marchSend(Seed.cities[CAPITAL.id].id, Data.options.multiple.target.x, Data.options.multiple.target.y, availableGeneral.id, Data.options.multiple.target.primary_units, 'multiple', function(rslt) {
					var t = Tabs.Multiple,
						multiDelay, retryDelay;
					if (rslt.ok && rslt.dat.result.success) {
						t.attackErrors = 0;
						var delay_min = toNum(Data.options.multiple.delay_b4_secondary, 3);
						var delay_max = toNum(delay_min * 0.2);
						multiDelay = Math.floor(Math.random() * (delay_max - delay_min + 1) + delay_min);
						verboseLog(actionMsg + ' ' + translate('Successfully'));
						actionLog(actionMsg);
						dispFeedback(feedback_element, actionMsg);
						t.attackTimer = setTimeout(t.multiAttackTick2, (multiDelay + 10) * 1000);
					} else {
						t.attackErrors++
						retryDelay = 30 * (t.attackErrors * t.attackErrors);
						verboseLog(actionMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg + ' - ' + translate('Retry in') + ' ' + retryDelay + ' ' + translate('seconds'));
						actionLog(actionMsg + ' ' + translate('failed'));
						if (rslt.status === 429) {
							retryDelay = E429_DELAY;
							raiseMessage(actionMsg + ' ' + translate('failed') + ' - <b>API</b> ', feedback_element, 6, false, retryDelay);
						} else if (rslt.status === 509) {
							retryDelay = 600;
							raiseMessage(actionMsg + ' ' + translate('failed') + ' - ', feedback_element, 6, false, retryDelay);
						} else
							dispFeedback(feedback_element, actionMsg + ' ' + translate('failed'));
						t.attackTimer = setTimeout(t.multiAttackTick, retryDelay * 1000);
					}
				});
			},
			/* For secondary attack waves */
			multiAttackTick2: function() {
				var t = Tabs.Multiple,
					targetMsg, retryDelay, availableGeneral, multiUnits, marchCount = 0;
				clearTimeout(t.attackTimer);

				if (!Data.options.multiple.enabled) return;
				targetMsg = Data.options.multiple.target.type + translate(' at ') + Data.options.multiple.target.x + '/' + Data.options.multiple.target.y;
				var actionMsg = translate('Secondary attack to ') + targetMsg;
				var feedback_element = UID['tabMulti_Feedback'];

				var cur_march = getMinDelay();
				marchCount = cur_march.count;
				var delay_min = toNum(Data.options.multiple.delay_min, nvl(MIN_DELAY_BETWEEN_WAVE, cur_march.delay));
				var delay_max = toNum(Data.options.multiple.delay_max, toNum(delay_min * 1.5));
				retryDelay = Math.floor(Math.random() * (delay_max - delay_min + 1) + delay_min);
				availableGeneral = getAvailableGeneral();
				var chk = checkMarch(actionMsg,
					feedback_element,
					marchCount,
					retryDelay,
					Marches.count.multiple,
					Data.options.multiple.max_marches,
					availableGeneral, true);
				if (chk != 0) {
					t.attackTimer = setTimeout(t.multiAttackTick, retryDelay * 1000);
					return;
				}
				Data.options.multiple.target.secondary_units = cloneProps(Data.options.multiple.target.saved_units_2);
				multiUnits = checkTroops(CAPITAL.id, Data.options.multiple.target.secondary_units);
				if (multiUnits !== null) {
					raiseMessage(actionMsg, feedback_element, multiUnits, true, retryDelay);
					t.attackTimer = setTimeout(t.multiAttackTick, retryDelay * 1000);
					return;
				}
				if (Data.options.multiple.target.include_gd_2) {
					var greatDrag = null;
					if ((greatDrag = getAvailableDragon(true, Data.options.multiple.target.dragons_2)) == null) {
						raiseMessage(actionMsg, feedback_element, 5, false, retryDelay);
						t.attackTimer = setTimeout(t.multiAttackTick, retryDelay * 1000);
						return;
					}
					Data.options.multiple.target.secondary_units[greatDrag] = 1;
				}
				verboseLog(actionMsg + ' ' + translate('attempted'));

				new MyAjax.marchSend(Seed.cities[CAPITAL.id].id, Data.options.multiple.target.x, Data.options.multiple.target.y, availableGeneral.id, Data.options.multiple.target.secondary_units, 'multiple', function(rslt) {
					var t = Tabs.Multiple,
						multiDelay, retryDelay;
					if (rslt.ok && rslt.dat.result.success) {
						t.attackErrors = 0;
						verboseLog(actionMsg + ' ' + translate('Successfully'));
						actionLog(actionMsg);
						dispFeedback(feedback_element, actionMsg);
						t.secondarySent++;
						if (t.secondarySent >= Data.options.multiple.max_secondary) {
							var delay_min = toNum(Data.options.multiple.delay_min, nvl(MIN_DELAY_BETWEEN_WAVE, 10));
							var delay_max = toNum(Data.options.multiple.delay_max, toNum(delay_min * 1.5));
							multiDelay = Math.floor(Math.random() * (delay_max - delay_min + 1) + delay_min);
							t.attackTimer = setTimeout(t.multiAttackTick, multiDelay * 1000);
						} else {
							var delay_min = toNum(Data.options.multiple.delay_min2, 3);
							var delay_max = toNum(Data.options.multiple.delay_max2, toNum(delay_min * 1.5));
							multiDelay = Math.floor(Math.random() * (delay_max - delay_min + 1) + delay_min);
							t.attackTimer = setTimeout(t.multiAttackTick2, multiDelay * 1000);
						}
					} else {
						t.attackErrors++
						var delay_min = toNum(Data.options.multiple.delay_min, nvl(MIN_DELAY_BETWEEN_WAVE, 10));
						var delay_max = toNum(Data.options.multiple.delay_max, toNum(delay_min * 1.5));
						retryDelay = Math.floor(Math.random() * (delay_max - delay_min + 1) + delay_min);
						/* retryDelay = 30 * (t.attackErrors * t.attackErrors); */
						verboseLog(actionMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg + ' - ' + translate('Retry in') + ' ' + retryDelay + ' ' + translate('seconds'));
						actionLog(actionMsg + ' ' + translate('failed'));
						if (rslt.status === 429) {
							retryDelay = E429_DELAY;
							raiseMessage(actionMsg + ' ' + translate('failed') + ' - <b>API</b> ', feedback_element, 6, false, retryDelay);
						} else if (rslt.status === 509) {
							retryDelay = 600;
							raiseMessage(actionMsg + ' ' + translate('failed') + ' - ', feedback_element, 6, false, retryDelay);
						} else
							dispFeedback(feedback_element, actionMsg + ' ' + translate('failed'));
						t.attackTimer = setTimeout(t.multiAttackTick, retryDelay * 1000);
					}
				});
			},

			onUnload: function() {
				var t = Tabs.Multiple;
				if (Data.options.multiple.enabled && t.running.start_at != 0) Data.stats.multiple.run_time += (serverTime() - t.running.start_at);
			},
			show: function() {
				var t = Tabs.Multiple;
				t.marchTick();
				switch (t.contentType || 0) {
					case 0:
						t.tabMultiConfig();
						break;
					case 1:
						t.tabMultiStats();
						break;
				}
			},
			hide: function() {
				var t = Tabs.Multiple;
				clearTimeout(t.marchTimer);
				Data.options.multiple.current_tab = t.contentType;
			}
		}
		/**
		 * ****************************** Multi Tab
		 * *********************************
		 */

		/**
		 * ****************************** Map search Tab
		 * ****************************
		 */
		Tabs.Search = {
			tabOrder: SEARCH_TAB_ORDER,
			tabLabel: 'Map',
			tabDisabled: !SEARCH_TAB_ENABLE,
			container: null,
			checkMapBusy: false,
			MAX_DISTANCE: 75,
			contentType: 0,
			/* 0 = cities list, 1 = Wildernesses list */
			lastSubTab: 'tabSearchC',

			init: function(div) {
				var t = Tabs.Search;
				Data.setDefaultValues('search');

				t.container = div;
				var m = '<div class=' + UID['title'] + '>' + translate('Map Search') + '</div>' + '<div class=' + UID['content'] + '>' + '	<div>' + '		<b>' + translate('Search coords') + ':&nbsp;</b>&nbsp;' + '		X: <input id=' + setUID('tabSearch_CoordsX') + ' size=2 maxlength=3 type=text value="' + Data.options.search.target.x + '" /> ' + '		Y: <input id=' + setUID('tabSearch_CoordsY') + ' size=2 maxlength=3 type=text value="' + Data.options.search.target.y + '" /> ' + '		&nbsp <b>' + translate('Search max radius') + ':</b>' + '	<select id=' + setUID('tabSearch_MaxRadius') + '>';
				for (var i = 8; i <= 40; i += 8) {
					m += '		<option value="' + i + '" ' + (Data.options.search.target.distance == i ? 'selected' : '') + '>' + i + '</option>';
				}
				m += '	</select><br>' + '		<table class=' + UID['table'] + ' style="margin-top:3px" width=100%>' + '			<tr valign=top align=center>' + '				<td width=33%><label><input id=' + setUID('tabSearch_Refresh') + ' type=button value="' + translate('Refresh map data') + '" /></label></td>' + '				<td width=33%><label><input id=' + setUID('tabSearch_RefreshCities') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Scan cities') + '" /></label></td>' + '				<td width=33%><label><input id=' + setUID('tabSearch_RefreshWilds') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Scan wilds') + '" /></label></td>' + '			</tr>' + '		</table><br>' + '		<div class=' + UID['status_ticker'] + ' style="height:auto !important;margin:1px 10px 5px !important;">' + '			<center><span id=' + setUID('tabSearch_Tile') + '></span></center>' + '		</div>' + '	</div>' + '	<table class=' + UID['table'] + ' width=100%>' + '		<tr><td class=left width=50%><div id=' + setUID('tabSearch_Alliance') + '></div></td>' + '			<td class=left width=50%><div id=' + setUID('tabSearch_Players') + '></div></td>' + '		</tr>' + '	</table>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabSearchC') + '>' + translate('Player cities') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabSearchW') + '>' + translate('Wildernesses') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabSearch_Content') + ' style="padding-top:none; height:525px; ; max-height:525px; overflow-x:auto; overflow-y:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabSearch_CoordsX']).addEventListener('change', t.eventCoords, false);
				$(UID['tabSearch_CoordsY']).addEventListener('change', t.eventCoords, false);
				$(UID['tabSearch_MaxRadius']).addEventListener('change', function(event) {
					var el = event.target;
					Data.options.search.target.distance = toNum(el.options[el.selectedIndex].value);
					t.show();
				}, false);
				$(UID['tabSearch_Refresh']).addEventListener('click', function() {
					t.refreshMapData(0);
				}, false);
				$(UID['tabSearch_RefreshCities']).addEventListener('click', function() {
					t.refreshMapData(1);
				}, false);
				$(UID['tabSearch_RefreshWilds']).addEventListener('click', function() {
					t.refreshMapData(2);
				}, false);
				$(UID['tabSearch_Alliance']).addEventListener('change', t.eventAlliance, false);
				$(UID['tabSearch_Players']).addEventListener('change', t.eventPlayer, false);
				$(UID['tabSearchC']).addEventListener('click', t.tabSearchC, false);
				$(UID['tabSearchW']).addEventListener('click', t.tabSearchW, false);
				t.eventCoords();
				t.contentType = toNum(Data.options.search.current_tab);
				t.show();
			},
			hide: function() {},
			show: function() {
				var t = Tabs.Search;
				if (!t.checkMapBusy) {
					t.displayAllianceList();
					t.displayPlayersList();
					switch (toNum(t.contentType)) {
						case 0:
							t.tabSearchC();
							break;
						case 1:
							t.tabSearchW();
							break;
					}
				} else setTimeout(t.show, 100);
			},
			onUnload: function() {
				var t = Tabs.Search;
				Data.options.search.current_tab = t.contentType;
			},
			eventCoords: function(event) {
				checkCoords('tabSearch', null, Data.options.search.target);
			},
			eventAlliance: function(event) {
				var t = Tabs.Search;
				var ea = $(UID['tabSearch_SelAlliance']);
				var alli = ea.value;
				Data.options.search.target.alliance = alli;
				if (alli == null) {
					ea.style.backgroundColor = 'red';
					return;
				}
				ea.style.backgroundColor = '';
				t.displayPlayersList();
				t.show();
			},
			eventPlayer: function(event) {
				var t = Tabs.Search;
				var ea = $(UID['tabSearch_SelPlayer']);
				var plyr = ea.value;
				Data.options.search.target.player = plyr;
				if (plyr == null) {
					ea.style.backgroundColor = 'red';
					return;
				}
				ea.style.backgroundColor = '';
				t.show();
			},
			displayAllianceList: function() {
				var t = Tabs.Search;
				var list = t.getAllianceList();
				if (list.length > 0)
					list.sort(function(a, b) {
						a = a.name.toLowerCase();
						b = b.name.toLowerCase();
						if (a > b) return 1;
						if (a < b) return -1;
						return 0;
					});
				var m = '<span class=left>' + translate('Alliance') + ':&nbsp </span><select id=' + setUID('tabSearch_SelAlliance') + '>' + '<option value="*" ' + ((Data.options.search.target.alliance == '*') ? 'selected' : '') + '>' + translate('actions-all-alliances').initCap() + '</option>' + '<option value="0" ' + ((Data.options.search.target.alliance == '0') ? 'selected' : '') + '>' + translate('Without alliance') + '</option>' + '<option value="-1" ' + ((Data.options.search.target.alliance == '-1') ? 'selected' : '') + '>' + translate('Foes') + '</option>' + '<option value="1" ' + ((Data.options.search.target.alliance == '1') ? 'selected' : '') + '>' + translate('Friends') + '</option>';
				for (var i = 0; i < list.length; i++) {
					var selected = '';
					if (list[i].id == Data.options.search.target.alliance) selected = 'selected'
					m += '<option value="' + list[i].id + '" ' + selected + '>' + list[i].name + '</option>';
				}
				m += '</select>';
				$(UID['tabSearch_Alliance']).innerHTML = m;
				t.displayPlayersList();
			},
			displayPlayersList: function() {
				var t = Tabs.Search;
				var list = t.getPlayersList();
				if (list.length > 0)
					list.sort(function(a, b) {
						a = a.name.toLowerCase();
						b = b.name.toLowerCase();
						if (a > b) return 1;
						if (a < b) return -1;
						return 0;
					});
				var m = '<span class=left>' + translate('Player name') + ':&nbsp </span><select id=' + setUID('tabSearch_SelPlayer') + '>' + '<option value="*" ' + ((Data.options.search.target.player == '*') ? 'selected' : '') + '>' + translate('All players') + '</option>';
				for (var i = 0; i < list.length; i++) {
					var selected = '';
					if (list[i].id == Data.options.search.target.player) selected = 'selected'
					m += '<option value="' + list[i].id + '" ' + selected + '>' + list[i].name + '</option>';
				}
				m += '</select>';
				$(UID['tabSearch_Players']).innerHTML = m;
			},

			/* return array of different alliances found */
			getAllianceList: function() {
				var t = Tabs.Search;
				var ret = [];
				for (var alliance in Data.map.alliance) {
					if (alliance != 0) ret.push({
						id: alliance,
						name: (Data.map.alliance[alliance] || '')
					});
				}
				return ret;
			},

			/* return array of different alliances found */
			getPlayersList: function() {
				var t = Tabs.Search;
				var ret = [];
				for (var pid in Data.map.players) {
					if ((Data.options.search.target.alliance == "*") ||
						((Data.options.search.target.alliance == "1") && (getAllianceState(Data.map.players[pid][3]) == '1')) ||
						((Data.options.search.target.alliance == "-1") && (getAllianceState(Data.map.players[pid][3]) == '-1')) ||
						((Data.options.search.target.alliance != "*" && Data.options.search.target.alliance != "1" && Data.options.search.target.alliance != "-1") &&
							((Data.map.players[pid][3] == Data.options.search.target.alliance) ||
								(Data.map.players[pid][3] == 0 && (Data.options.search.target.alliance == null || Data.options.search.target.alliance == 0))))
					)
						if (Data.map.players[pid][0] && Data.map.players[pid][0] != null && Data.map.players[pid][0] != '')
							ret.push({
								id: pid,
								name: (Data.map.players[pid][0] || '')
							});
				}
				logit('Player count = ' + ret.length);
				return ret;
			},

			/*
			 * return array of cities that satisfy config (max distance,
			 * alliance name)
			 */
			getCityList: function() {
				var t = Tabs.Search;
				var radius = Data.options.search.target.distance || 16;
				var x = Data.options.search.target.x;
				var y = Data.options.search.target.y;
				if (isNaN(x)) x = Seed.cities[CAPITAL.id].x;
				if (isNaN(y)) y = Seed.cities[CAPITAL.id].y;
				var terrains = Map.getTargets({
					x: x,
					y: y,
					radius: radius,
					map_type: 'C'
				});
				var targets = [];
				var alliance = Data.options.search.target.alliance || '*';
				var player = Data.options.search.target.player || '*';
				for (var map_type in terrains) {
					if (map_type == 'City' || map_type == 'Outpost') {
						if (terrains[map_type]) {
							for (var i = 0; i < terrains[map_type].length; i++) {
								var target = (terrains[map_type])[i];
								if ((target && target.d <= radius) &&
									(((target.ai == alliance || alliance == '*') ||
											(alliance == "1" && getAllianceState(target.ai) == '1') ||
											(alliance == "-1" && getAllianceState(target.ai) == '-1') ||
											((!target.ai || target.ai == 0) && (alliance == null || alliance == 0))) &&
										(target.id == player || player == '*'))) {
									if (!target.a && target.n) target.a = '';
									if (!target.n) {
										target.n = '?????';
										target.a = '?????';
										target.m = '?';
									}
									targets.push(target);
								}
							}
						}
					}
				}
				terrains = null;
				return targets;
			},

			/*
			 * return array of cities that satisfy config (max distance,
			 * alliance name)
			 */
			getWildernessesList: function() {
				var t = Tabs.Search;
				var ret = [];
				var radius = Data.options.search.target.distance || 16;
				var x = Data.options.search.target.x;
				var y = Data.options.search.target.y;
				if (isNaN(x)) x = Seed.cities[CAPITAL.id].x;
				if (isNaN(y)) y = Seed.cities[CAPITAL.id].y;
				var alliance = Data.options.search.target.alliance || '*';
				var terrains = Map.getTargets({
					x: x,
					y: y,
					radius: radius,
					map_type: 'W'
				});
				var targets = [];
				for (var map_type in terrains) {
					if ((map_type == 'hill' && Data.options.search.hill) ||
						(map_type == 'grassland' && Data.options.search.grassland) ||
						(map_type == 'lake' && Data.options.search.lake) ||
						(map_type == 'mountain' && Data.options.search.mountain) ||
						(map_type == 'forest' && Data.options.search.forest) ||
						(map_type == 'plain' && Data.options.search.plain)) {
						if (terrains[map_type]) {
							for (var i = 0; i < terrains[map_type].length; i++) {
								var target = (terrains[map_type])[i];
								if ((target && target.d <= radius) &&
									((target.l) >= toNum(Data.options.search.min_level) &&
										(target.l) <= toNum(Data.options.search.max_level)) &&
									(((((!target.id || target.id == 0) && Data.options.search.unowned) || (!Data.options.search.unowned)) &&
											(((target.ai == alliance || alliance == "*") ||
													(alliance == "1" && getAllianceState(target.ai) == '1') ||
													(alliance == "-1" && getAllianceState(target.ai) == '-1') ||
													((!target.ai || target.ai == 0) && alliance == null)) &&
												(target.id == Data.options.search.target.player || Data.options.search.target.player == "*")) && target.l >= 7) ||
										target.l < 7)) {
									if (target.l < 7 && !target.n) {
										target.n = '-';
										target.a = '-';
										target.m = '-';
									}
									if (!target.a && target.n) target.a = '';
									if (!target.n) {
										target.n = '?????';
										target.a = '?????';
										target.m = '?';
									}
									targets.push(target);
								}
							}
						}
					}
				   }
				terrains = null;
				return targets;
			},

			/** CITY PLAYER SUB-TAB ** */
			tabSearchC: function() {
				var t = Tabs.Search;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSearchC']).className = 'selected';
				$(UID['tabSearchC']).style.zIndex = 1;
				t.lastSubTab = 'tabSearchC';
				t.contentType = 0;
				if (!is_null(Data.options.search.last_update)) kLastupdate = ' (' + Data.options.search.last_update + ')';
				else kLastupdate = '';
				var m = '<div id=' + setUID('tabSearch_Results') + ' style="height:500px">' + '	<div class=' + UID['title'] + '>' + translate('Player cities list') + kLastupdate + '</div>' + '	<div id=' + setUID('tabSearch_ResultList') + ' class=' + UID['status_ticker'] + '	 style="height:475px; max-height:475px; width:540px; max-width:540px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabSearch_Content']).innerHTML = m;

				var m = '<table class=' + UID['row_style'] + ' width=100%>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td id=' + setUID('tabSearch_tsc_0') + ' width="20px"><A><span>' + translate('Dist') + '</span></A></td>' + '		<td id=' + setUID('tabSearch_tsc_1') + ' width="40px"><A><span>' + translate('Coords') + '</span></A></td>';
				if (Data.options.search.target.alliance == '*' || Data.options.search.target.alliance == '-1' || Data.options.search.target.alliance == '1')
					m += '	<td id=' + setUID('tabSearch_tsc_2') + '><A><span>' + translate('Alliance') + '</span></A></td>';

				m += '		<td id=' + setUID('tabSearch_tsc_3') + ' width="200px" style="overflow-x:auto"><A><span>' + translate('members') + '</span></A></td>' + '		<td id=' + setUID('tabSearch_tsc_4') + ' width="40px" align=right><A><span>' + translate('Might') + '</span></A></td>' + '		<td width="40px" align=right>' + translate('Evol') + '</td>' + '		<td id=' + setUID('tabSearch_tsc_5') + '><A><span>' + translate('Type') + '</span></A></td>' + '		<td style="background:none"></td>' + '	</tr>';

				var cities = t.getCityList(),
					ul = [];
				sortCityList();
				for (var i = 0; i < cities.length; i++) {
					m += '<tr><td>' + cities[i].d + '</td><td align=center>' + cities[i].x + ',' + cities[i].y + '</td>';
					if (Data.options.search.target.alliance == "*" || Data.options.search.target.alliance == '-1' || Data.options.search.target.alliance == '1')
						m += '<td align=left>' + getAllianceRelationship(cities[i].ai, cities[i].a) + '</td>';
					if (cities[i].m != null && cities[i].m != '?')
						mightF = numf(cities[i].m, ' ');
					else
						mightF = '?';
					var evol = 'x';
					if (Data.map.evolution[cities[i].id] && cities[i].m && cities[i].m != '?') {
						evol = cities[i].m - Data.map.evolution[cities[i].id].m;
						if (evol < 0) evol = '<span class=' + UID['red'] + '>' + numf(evol, ' ') + '</span>';
						else if (evol > 0) evol = '<span class=' + UID['green'] + '>+' + numf(evol, ' ') + '</span>';
						else evol = numf(evol, ' ');
					}
					m += '<td align=left>' + getAllianceRelationship(cities[i].ai, cities[i].n) + '</td>' + '<td align=right>' + mightF + '</td>' + '<td align=right>' + evol + '</td>' + '<td align=center>' + ((cities[i].t > 9) ? translate(Map.names.type[cities[i].t]) : '') + '</td>' + '<td><input id=' + setUID('tabSearch_Spy_' + i) + ' ref=' + i + ' class=Xtrasmall style="width:auto !important;" type=submit value="' + translate('Spy') + '" />';
					if (cities[i].id && cities[i].id != '' && cities[i].n && cities[i].n != '') {
						var user_ids = cities[i].id + '_' + cities[i].n;
						var UIDMsg = setUID('tabSearch_Msg_' + i);
						m += '	&nbsp &nbsp<input id=' + UIDMsg + ' ref=' + user_ids + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" /></td>';
						ul.push(UIDMsg);
					} else {
						m += '</td>';
					}
					m += '</tr>';
				}
				$(UID['tabSearch_ResultList']).innerHTML = m + '</table>';

				for (var h = 0; h < 6; h++)
					if ((h != 2) || ((Data.options.search.target.alliance == '*' || Data.options.search.target.alliance == '-1' || Data.options.search.target.alliance == '1') && h == 2))
						$(UID['tabSearch_tsc_' + h]).addEventListener('click', onChangeSort, false);

				var own_alliance = Seed.player.alliance ? Seed.player.alliance.id : -1;
				for (var i = 0; i < cities.length; i++) {
					var butSpy = $(UID['tabSearch_Spy_' + i]);
					butSpy.addEventListener('click', butSpyNow, false);
					if ((((cities[i].t > 9) && (cities[i].t != 20)) || (cities[i].t < 9)) &&
						((!cities[i].ai || cities[i].ai == 0 || cities[i].ai == null) || (cities[i].ai != own_alliance))) {
						butSpy.disabled = false;
						Element.removeClassName(butSpy, UID['btn_disabled']);
						Element.addClassName(butSpy, UID['btn_green']);
					} else {
						butSpy.disabled = true;
						Element.removeClassName(butSpy, UID['btn_green']);
						Element.addClassName(butSpy, UID['btn_disabled']);
					}
				}
				for (var u = 0; u < ul.length; u++)
					$(ul[u]).addEventListener('click', onClickMsg, false);

				function butSpyNow(event) {
					var n = toNum(event.target.getAttribute('ref'));
					buttonSpyNow(t.container, cities[n]);
				}

				function onChangeSort(event) {
					var t = Tabs.Search;
					var arg = event.target.parentNode.parentNode.id;
					if (arg == UID['tabSearch_tsc_0']) {
						if (Data.options.search.sort_list == '0')
							Data.options.search.sort_list = '-0';
						else Data.options.search.sort_list = '0';
					} else if (arg == UID['tabSearch_tsc_1']) {
						if (Data.options.search.sort_list == '1')
							Data.options.search.sort_list = '-1';
						else Data.options.search.sort_list = '1';
					} else if (arg == UID['tabSearch_tsc_2']) {
						if (Data.options.search.sort_list == '2')
							Data.options.search.sort_list = '-2';
						else Data.options.search.sort_list = '2';
					} else if (arg == UID['tabSearch_tsc_3']) {
						if (Data.options.search.sort_list == '3')
							Data.options.search.sort_list = '-3';
						else Data.options.search.sort_list = '3';
					} else if (arg == UID['tabSearch_tsc_4']) {
						if (Data.options.search.sort_list == '4')
							Data.options.search.sort_list = '-4';
						else Data.options.search.sort_list = '4';
					} else if (arg == UID['tabSearch_tsc_5']) {
						if (Data.options.search.sort_list == '5')
							Data.options.search.sort_list = '-5';
						else Data.options.search.sort_list = '5';
					}
					t.tabSearchC();
				}

				function sortCityList() {
					var t = Tabs.Search;
					switch (Data.options.search.sort_list) {
						case '-0':
							cities.sort(function(a, b) {
								return b.d - a.d
							});
							break;
						case '0':
							cities.sort(function(a, b) {
								return a.d - b.d
							});
							break;
						case '-1':
							cities.sort(function(a, b) {
								return b.x - a.x
							});
							break;
						case '1':
							cities.sort(function(a, b) {
								return a.x - b.x
							});
							break;
						case '-2':
							cities.sort(function(a, b) {
								a = a.a.toLowerCase();
								b = b.a.toLowerCase();
								if (a > b) return -1;
								if (a < b) return 1;
								return 0;
							});
							break;
						case '2':
							cities.sort(function(a, b) {
								a = a.a.toLowerCase();
								b = b.a.toLowerCase();
								if (a > b) return 1;
								if (a < b) return -1;
								return 0;
							});
							break;
						case '-3':
							cities.sort(function(a, b) {
								a = a.n.toLowerCase();
								b = b.n.toLowerCase();
								if (a > b) return -1;
								if (a < b) return 1;
								return 0;
							});
							break;
						case '3':
							cities.sort(function(a, b) {
								a = a.n.toLowerCase();
								b = b.n.toLowerCase();
								if (a > b) return 1;
								if (a < b) return -1;
								return 0;
							});
							break;
						case '-4':
							cities.sort(function(a, b) {
								return b.m - a.m
							});
							break;
						case '4':
							cities.sort(function(a, b) {
								return a.m - b.m
							});
							break;
						case '-5':
							cities.sort(function(a, b) {
								return b.t - a.t
							});
							break;
						case '5':
							cities.sort(function(a, b) {
								return a.t - b.t
							});
							break;
						default:
							cities.sort(function(a, b) {
								return b.d - a.d
							});
							break;
					}
				}
			},

			/** WILDERNESSES SUB-TAB ** */
			tabSearchW: function() {
				var t = Tabs.Search;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSearchW']).className = 'selected';
				$(UID['tabSearchW']).style.zIndex = 1;
				t.lastSubTab = 'tabSearchW';
				t.contentType = 1;

				var m = '<div class=' + UID['content'] + '>' + '<table class=' + UID['table'] + ' width=100%>' + '	<tr>' + '		<td width=3%><input id=' + setUID('tabSearch_WildG') + ' type=checkbox ' + (Data.options.search.grassland ? 'CHECKED' : '') + ' /></td>' + '		<td width=20%> ' + translate('Grassland') + '</td>' + '		<td width=3%><input id=' + setUID('tabSearch_WildL') + ' type=checkbox ' + (Data.options.search.lake ? 'CHECKED' : '') + ' /></td>' + '		<td width=20%> ' + translate('Lake') + '</td>' + '		<td width=3%><input id=' + setUID('tabSearch_WildP') + ' type=checkbox ' + (Data.options.search.plain ? 'CHECKED' : '') + ' /></td>' + '		<td width=20%> ' + translate('Plain') + '</td>' + '		<td width=31%>' + translate('Min level') + ': ' + levelSelect('Min', nvl(Data.options.search.min_level, '1')) + '</td>' + '	</tr><tr>' + '		<td><input id=' + setUID('tabSearch_WildH') + ' type=checkbox ' + (Data.options.search.hill ? 'CHECKED' : '') + ' /></td>' + '		<td> ' + translate('Hill') + '</td>' + '		<td><input id=' + setUID('tabSearch_WildM') + ' type=checkbox ' + (Data.options.search.mountain ? 'CHECKED' : '') + ' /></td>' + '		<td> ' + translate('Mountain') + '</td>' + '		<td><input id=' + setUID('tabSearch_WildF') + ' type=checkbox ' + (Data.options.search.forest ? 'CHECKED' : '') + ' /></td>' + '		<td> ' + translate('Forest') + '</td>' + '		<td width=31%>' + translate('Max level') + ': ' + levelSelect('Max', nvl(Data.options.search.max_level, '10')) + '</td>' + '	</tr>' + '</table>' + '<table class=' + UID['table'] + ' width=100%>' + '	<tr>' + '		<td width=3%><input id=' + setUID('tabSearch_Unowned') + ' type=checkbox ' + (Data.options.search.unowned ? 'CHECKED' : '') + ' /></td>' + '		<td width=20%> ' + translate('Unowned only') + '</td>' + '		<td width=77% align=center>&nbsp</td>' + '	</tr>' + '</table>' + '</div>' + '<div id=' + setUID('tabSearch_Wilds') + ' style="height:430px">' + '	<div class=' + UID['title'] + '>' + translate('Wildernesses list') + '</div>' + '	<div id=' + setUID('tabSearch_WildList') + ' class=' + UID['status_ticker'] + '	 style="height:400px; max-height:400px; width:540px; max-height:540px; overflow:auto; white-space:nowrap; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabSearch_Content']).innerHTML = m;
				$(UID['tabSearch_WildG']).addEventListener('click', eventWildFlag, false);
				$(UID['tabSearch_WildL']).addEventListener('click', eventWildFlag, false);
				$(UID['tabSearch_WildP']).addEventListener('click', eventWildFlag, false);
				$(UID['tabSearch_WildH']).addEventListener('click', eventWildFlag, false);
				$(UID['tabSearch_WildM']).addEventListener('click', eventWildFlag, false);
				$(UID['tabSearch_WildF']).addEventListener('click', eventWildFlag, false);
				$(UID['tabSearch_LvMin']).addEventListener('change', levelChanged, false);
				$(UID['tabSearch_LvMax']).addEventListener('change', levelChanged, false);
				$(UID['tabSearch_Unowned']).addEventListener('click', eventWildFlag, false);
				displayWildResults();

				function levelChanged(event) {
					var t = Tabs.Search;
					var id = event.target.id;
					var x = toNum(event.target.value);
					if (isNaN(x) || x < 1 || x > 10) {
						event.target.style.backgroundColor = 'red';
					} else {
						if (id == UID['tabSearch_LvMin']) Data.options.search.min_level = x;
						else Data.options.search.max_level = x;
						event.target.value = x;
						var min = Data.options.search.min_level;
						var max = Data.options.search.max_level;
						if (min > max)
							event.target.style.backgroundColor = 'red';
						else {
							event.target.style.backgroundColor = '';
							displayWildResults();
						}
					}
				}

				function levelSelect(MinMax, curVal) {
					var newUID = setUID('tabSearch_Lv' + MinMax);
					var m = '<select id="' + newUID + '">';
					for (var k = 1; k <= 10; k++)
						m += '<option value="' + k + '" ' + (curVal == k ? 'selected' : '') + '>' + k + '</option>';
					m += '</select>';
					return m;
				}

				function eventWildFlag() {
					var t = Tabs.Search;
					var cG = $(UID['tabSearch_WildG']);
					var cL = $(UID['tabSearch_WildL']);
					var cP = $(UID['tabSearch_WildP']);
					var cH = $(UID['tabSearch_WildH']);
					var cM = $(UID['tabSearch_WildM']);
					var cF = $(UID['tabSearch_WildF']);
					var cU = $(UID['tabSearch_Unowned']);
					Data.options.search.grassland = cG.checked;
					Data.options.search.lake = cL.checked;
					Data.options.search.plain = cP.checked;
					Data.options.search.hill = cH.checked;
					Data.options.search.mountain = cM.checked;
					Data.options.search.forest = cF.checked;
					Data.options.search.unowned = cU.checked;
					displayWildResults();
				}

				function displayWildResults() {
					var t = Tabs.Search;
					var m = '<table class=' + UID['row_style'] + ' id=' + setUID('tabSearch_WildTab') + ' width=100%>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td id=' + setUID('tabSearch_tsw_0') + ' width="20px"><A><span>' + translate('Dist') + '</span></A></td>' + '		<td id=' + setUID('tabSearch_tsw_1') + ' width="40px"><A><span>' + translate('Coords') + '</span></A></td>' + '		<td id=' + setUID('tabSearch_tsw_5') + ' width="60px"><A><span>' + translate('Type') + '</span></A></td>' + '		<td id=' + setUID('tabSearch_tsw_6') + ' width="20px"><A><span>' + translate('Level') + '</span></A></td>' + '		<td id=' + setUID('tabSearch_tsw_3') + ' width="200px" style="overflow-x:auto"><A><span>' + translate('Owner') + '</span></A></td>' + '		<td id=' + setUID('tabSearch_tsw_4') + ' width="40px" align=right><A><span>' + translate('Might') + '</span></A></td>' + '		<td id=' + setUID('tabSearch_tsw_2') + '><A><span>' + translate('Alliance') + '</span></A></td>' + '		<td style="background:none"></td>' + '	</tr>';
					var wilds = t.getWildernessesList(),
						ul = [];
					sortWildList();
					for (var i = 0; i < wilds.length; i++) {
						var mightF = null;
						if (wilds[i].m != null && wilds[i].m != '?')
							mightF = numf(wilds[i].m, ' ');
						else mightF = '?';
						if (wilds[i].l < 7 && !wilds[i].n) {
							wilds[i].n = '-';
							wilds[i].a = '-';
							mightF = '-';
						}
						m += '<tr><td>' + wilds[i].d + '</td>' + '	<td align=center>' + wilds[i].x + ',' + wilds[i].y + '</td>' + '	<td align=left>' + translate(Map.names.type[wilds[i].t]) + '</td>' + '	<td align=right>' + wilds[i].l + '</td>' + '	<td align=left>' + getAllianceRelationship(wilds[i].ai, wilds[i].n) + '</td>' + '	<td align=right>' + mightF + '</td>' + '	<td align=left>' + getAllianceRelationship(wilds[i].ai, wilds[i].a) + '</td>' + '	<td>' + '		<input id=' + setUID('tabSearch_Att_' + i) + ' ref=' + i + ' class=Xtrasmall style="width:auto !important;" type=submit value="' + translate('Attack') + '" />';
						if (wilds[i].id && wilds[i].id != '' && wilds[i].n && wilds[i].n != '' && wilds[i].n != '-') {
							var user_ids = wilds[i].id + '_' + wilds[i].n;
							var UIDMsg = setUID('tabSearchWild_Msg_' + i);
							m += '	&nbsp &nbsp<input id=' + UIDMsg + ' ref=' + user_ids + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" /></td>';
							ul.push(UIDMsg);
						}
						m += '	</td>' + '</tr>';
					}
					$(UID['tabSearch_WildList']).innerHTML = m + '</table>';
					for (var h = 0; h < 7; h++)
						$(UID['tabSearch_tsw_' + h]).addEventListener('click', onChangeSort, false);
					for (var u = 0; u < ul.length; u++)
						$(ul[u]).addEventListener('click', onClickMsg, false);

					var own_alliance = Seed.player.alliance ? Seed.player.alliance.id : -1;
					for (var i = 0; i < wilds.length; i++) {
						var butAttack = $(UID['tabSearch_Att_' + i]);
						butAttack.addEventListener('click', butAttackNow, false);
						if ((!wilds[i].ai || wilds[i].ai == 0 || wilds[i].ai == null) || (wilds[i].ai != own_alliance)) {
							butAttack.disabled = false;
							Element.removeClassName(butAttack, UID['btn_disabled']);
							Element.addClassName(butAttack, UID['btn_green']);
						} else {
							butAttack.disabled = true;
							Element.removeClassName(butAttack, UID['btn_green']);
							Element.addClassName(butAttack, UID['btn_disabled']);
						}
					}

					function butAttackNow(event) {
						var n = toNum(event.target.getAttribute('ref'));
						var dial = new ModalDialog(t.container, 300, 150, '', false);
						dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
						dial.getContentDiv().innerHTML = translate('Attacking');
						checkAttack(wilds[n], notify);

						function notify(rslt) {
							if (rslt != 'OK') {
								dial.getContentDiv().innerHTML = '<b>' + rslt + '</b>';
								dial.allowClose(true);
							} else {
								dial.getContentDiv().innerHTML = '<B>' + translate('OK') + '</b>';
								setTimeout(function() {
									dial.destroy()
								}, 1000);
							}
						}
					}

					function checkAttack(targetObj, notify) {
						var t = Tabs.Search;
						var cityId = Seed.cities[CAPITAL.id].id;
						var cityIdx = CAPITAL.id;
						var availableGeneral = null;

						/* check troops */
						var units = [];
						units['Spy'] = 1;
						attackUnits = checkTroops(CAPITAL.id, units);
						if (attackUnits != null) {
							notify(getErrorText(attackUnits, 'fb'));
							return;
						}
						availableGeneral = getAvailableGeneral();
						if (availableGeneral == null) {
							notify(getErrorText(3, 'fb'));
							return;
						}
						var targMsg = '<B>' + translate('Manual attack sent to') + '</B>: ' + targetObj.n + ' ' + translate('at') + ' ' + targetObj.x + '/' + targetObj.y;
						verboseLog(targMsg + ' ' + translate('attempted'));

						new MyAjax.marchSend(cityId, targetObj.x, targetObj.y, availableGeneral.id, units, 'attacks', function(rslt) {
							if (rslt.ok && rslt.dat.result.success) {
								verboseLog(targMsg + ' ' + translate('Successfully'));
								actionLog(targMsg);
								if (notify) notify('OK');
							} else {
								verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
								if (notify) notify(translate('Error') + ': ' + rslt.errmsg);
							}
						});
					}

					function onChangeSort(event) {
						var t = Tabs.Search;
						var arg = event.target.parentNode.parentNode.id;
						if (arg == UID['tabSearch_tsw_0']) {
							if (Data.options.search.sort_list == '0')
								Data.options.search.sort_list = '-0';
							else Data.options.search.sort_list = '0';
						} else if (arg == UID['tabSearch_tsw_1']) {
							if (Data.options.search.sort_list == '1')
								Data.options.search.sort_list = '-1';
							else Data.options.search.sort_list = '1';
						} else if (arg == UID['tabSearch_tsw_2']) {
							if (Data.options.search.sort_list == '2')
								Data.options.search.sort_list = '-2';
							else Data.options.search.sort_list = '2';
						} else if (arg == UID['tabSearch_tsw_3']) {
							if (Data.options.search.sort_list == '3')
								Data.options.search.sort_list = '-3';
							else Data.options.search.sort_list = '3';
						} else if (arg == UID['tabSearch_tsw_4']) {
							if (Data.options.search.sort_list == '4')
								Data.options.search.sort_list = '-4';
							else Data.options.search.sort_list = '4';
						} else if (arg == UID['tabSearch_tsw_5']) {
							if (Data.options.search.sort_list == '5')
								Data.options.search.sort_list = '-5';
							else Data.options.search.sort_list = '5';
						} else if (arg == UID['tabSearch_tsw_6']) {
							if (Data.options.search.sort_list == '6')
								Data.options.search.sort_list = '-6';
							else Data.options.search.sort_list = '6';
						}
						displayWildResults();
					}

					function sortWildList() {
						var t = Tabs.Search;
						switch (Data.options.search.sort_list) {
							case '-0':
								wilds.sort(function(a, b) {
									return b.d - a.d
								});
								break;
							case '0':
								wilds.sort(function(a, b) {
									return a.d - b.d
								});
								break;
							case '-1':
								wilds.sort(function(a, b) {
									return b.x - a.x
								});
								break;
							case '1':
								wilds.sort(function(a, b) {
									return a.x - b.x
								});
								break;
							case '-2':
								wilds.sort(function(a, b) {
									a = a.a.toLowerCase();
									b = b.a.toLowerCase();
									if (a > b) return -1;
									if (a < b) return 1;
									return 0;
								});
								break;
							case '2':
								wilds.sort(function(a, b) {
									a = a.a.toLowerCase();
									b = b.a.toLowerCase();
									if (a > b) return 1;
									if (a < b) return -1;
									return 0;
								});
								break;
							case '-3':
								wilds.sort(function(a, b) {
									a = a.n.toLowerCase();
									b = b.n.toLowerCase();
									if (a > b) return -1;
									if (a < b) return 1;
									return 0;
								});
								break;
							case '3':
								wilds.sort(function(a, b) {
									a = a.n.toLowerCase();
									b = b.n.toLowerCase();
									if (a > b) return 1;
									if (a < b) return -1;
									return 0;
								});
								break;
							case '-4':
								wilds.sort(function(a, b) {
									return b.m - a.m
								});
								break;
							case '4':
								wilds.sort(function(a, b) {
									return a.m - b.m
								});
								break;
							case '-5':
								wilds.sort(function(a, b) {
									return b.t - a.t
								});
								break;
							case '5':
								wilds.sort(function(a, b) {
									return a.t - b.t
								});
								break;
							case '-6':
								wilds.sort(function(a, b) {
									return b.l - a.l
								});
								break;
							case '6':
								wilds.sort(function(a, b) {
									return a.l - b.l
								});
								break;
							default:
								wilds.sort(function(a, b) {
									return b.d - a.d
								});
								break;
						}
					}
				}
			},

			refreshMapData: function(scan_type) {
				var t = Tabs.Search;
				t.checkMapBusy = false;
				t.checkMapData(scan_type);
				t.show();
			},
			checkMapData: function(type) {
				var t = Tabs.Search;
				if (t.checkMapBusy) return false;
				t.checkMapBusy = true;
				Data.options.search.target.alliance = '*';
				Data.options.search.target.player = '*';
				t.scanMap(type, Data.options.search.target.distance, function() {
					logit('****** Setting checkMapBusy to FALSE');
					Tabs.Search.checkMapBusy = false
				});
				return true;
			},
			scanMap: function(type, radius, notify) {
				var t_s = Tabs.Search;
				if (type == 0 || type == 1) {
					for (var pid in Data.map.players) {
						if (Data.map.players[pid] && Data.map.players[pid][2]) {
							if (!Data.map.evolution[pid]) Data.map.evolution[pid] = {};
							Data.map.evolution[pid].m = Data.map.players[pid][2];
						}
					}
				}
				var x = Data.options.search.target.x;
				var y = Data.options.search.target.y;
				if (radius == null) radius = Data.options.search.target.distance || 16;

				logit('======> search tab scanMap (' + x + ',' + y + ', ' + radius + ')');
				progressBar.init(800 + Math.randRange(1, 50), 100, 300, 150, translate('Message'), 200, true, t_s.container);

				switch (type) {
					case 0:
						/* All map data scan */
							progressBar.start({
								steps: 100,
								delay: 1,
								byCount: true,
								title: translate('Scanning map for cities/wildernesses') + '...',
								stepText: translate('Please wait...')
							});
						Map.scanMap({
							x: x,
							y: y,
							radius: radius,
							city_detail: true,
							wild_detail: true,
							force_request: true
						}, callback);
						break;
					case 1:
						/* Cities scan */
							progressBar.start({
								steps: 100,
								delay: 1,
								byCount: true,
								title: translate('Scanning map for cities') + '...',
								stepText: translate('Please wait...')
							});
						Map.scanMap({
							x: x,
							y: y,
							radius: radius,
							city_detail: true,
							wild_detail: false,
							force_request: true
						}, callback);
						break;
					case 2:
						/* Wilds scan */
							progressBar.start({
								steps: 100,
								delay: 1,
								byCount: true,
								title: translate('Scanning map for wildernesses') + '...',
								stepText: translate('Please wait...')
							});
						Map.scanWilds({
							x: x,
							y: y,
							radius: radius
						}, callback);
						break;
				}

				function callback(res) {
					if (res == null) {
						progressBarPop.getContentDiv().innerHTML = '<B>' + translate('Bummer, there was an error while scanning the map') + '.</B>';
						progressBarPop.allowClose(true);
						if (notify) notify(false);
						return;
					}
					if (res.done) {
						actionLog('<B>scanMap</B>: ' + translate('complete'));
						var now = serverTime();
						Data.options.search.last_update = new Date(now * 1000).myString();
						if (notify) notify(true);
						progressBarPop.destroy();
					}
				}
			}
		};
		/**
		 * ****************************** Map search Tab
		 * ****************************
		 */


		/**
		 * ****************************** Single attack Tab
		 * *************************
		 */
		Tabs.Single = {
			tabOrder: SINGLE_TAB_ORDER,
			tabLabel: 'Single',
			tabDisabled: !SINGLE_TAB_ENABLE,
			container: null,
			contentType: 0,
			lastSubTab: 'tabSingleAttack',

			init: function(div) {
				var t = Tabs.Single;
				t.container = div;
				/* Data.setDefaultValues ('single'); */
				var m = '<div class=' + UID['title'] + '>' + translate('Single attack') + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabSingleAttack') + '>' + translate('Attack') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabSinglePresets') + '>' + translate('Presets') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabSingleTargets') + '>' + translate('Targets') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabSingle_Content') + ' style="padding-top:0px; height:655px; max-height:655px; overflow-y:auto; width:540px; max-width:540px; overflow-x:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabSingleAttack']).addEventListener('click', t.tabSingleAttack, false);
				$(UID['tabSinglePresets']).addEventListener('click', t.tabSinglePresets, false);
				$(UID['tabSingleTargets']).addEventListener('click', t.tabSingleTargets, false);
				window.addEventListener('unload', t.onUnload, false);
				t.contentType = toNum(Data.options.single.current_tab);
				t.show();
			},
			show: function() {
				var t = Tabs.Single;
				switch (toNum(t.contentType)) {
					case 0:
						t.tabSingleAttack();
						break;
					case 1:
						t.tabSinglePresets();
						break;
					case 2:
						t.tabSingleTargets();
						break;
				}
			},
			onUnload: function() {
				var t = Tabs.Single;
				logit('===============  Tabs.Single.onUnload');
				Data.options.single.current_tab = t.contentType;
			},

			/** SINGLE ATTACK SUB-TAB ** */
			tabSingleAttack: function() {
				var t = Tabs.Single;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSingleAttack']).className = 'selected';
				$(UID['tabSingleAttack']).style.zIndex = 1;
				t.lastSubTab = 'tabSingleAttack';
				t.contentType = 0;
				var m = '<div class="' + UID['title'] + '">' + translate('Single attack') + ' ( ' + translate('Max') + '. ' + translate('Troops') + ' ' + numf(toNum((getMusterPoint(CAPITAL.id)).max_troops), ' ') + ' )</div>' + '<div class=' + UID['content'] + '>' + '	<div>' + '		<b>' + translate('Coords') + ':&nbsp;</b>&nbsp;' + '		X: <input id=' + setUID('tabSingle_CoordsX') + ' size=1 maxlength=3 type=text value="' + Data.options.single.target.x + '" /> ' + '		Y: <input id=' + setUID('tabSingle_CoordsY') + ' size=2 maxlength=3 type=text value="' + Data.options.single.target.y + '" /> ' + '		&nbsp <b>' + translate('Distance') + ':</b> <span id=' + setUID('tabSingle_Distance') + '></span>' + '		&nbsp <input id=' + setUID('tabSingle_Save') + ' class="' + UID['btn_green'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Save') + ' " />' + '		&nbsp <input id=' + setUID('tabSingle_Spy') + ' class="' + UID['btn_green'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Spy') + ' " />' + '		&nbsp <input id=' + setUID('tabSingle_Bookmark') + ' class="' + UID['btn_blue'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Bookmark') + ' " />';
				if (Data.options.single.target.id && Data.options.single.target.id != '' && Data.options.single.target.n && Data.options.single.target.n != '') {
					var user_ids = Data.options.single.target.id + '_' + Data.options.single.target.n;
					m += '	&nbsp <input id=' + setUID('tabSingle_Msg') + ' ref=' + user_ids + ' class="' + UID['btn_blue'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Msg') + ' " />';
				}
				m += '	<br><br><label>' + translate('description') + ' :</label>&nbsp' + '		<textarea id=' + setUID('tabSingle_Comment') + ' cols="80" rows="2" wrap="PHYSICAL">' + Data.options.single.target.comment + '</textarea>' + '		<br><center><input type=button value="' + translate('Attack') + '" id=' + setUID('tabSingle_Attack') + ' class=' + UID['btn_red'] + ' /></center><br>' + '		<div class=' + UID['status_ticker'] + ' style="height:auto !important;margin:5px 10px !important;">' + '			<center><span id=' + setUID('tabSingle_Tile') + '></span></center>' + '		</div>' + '	</div>' + '  <div>' + '	<table id=' + setUID('tabSingle_Troops') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=10>' + translate('Troops') + ':&nbsp;</td>' + '		</tr>' + '	</table>' + '	</div><br>' + '  <div>' + '	<table id=' + setUID('tabSingle_Dragons') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=10>' + translate('Include Great Dragon') + ':&nbsp;</td>';
				var currentDragons = [];
				for (var j = 0; j < Seed.dragonList.length; j++) {
					var dragon = Seed.dragonList[j];
					if (j % 5 === 0)
						m += '</tr><tr>';
					m += '	<td class=right><span title="' + translate(dragon.type) + '">' + translate(Names.getTroopAbbr(dragon.type)) + ':<span></td>' + '	<td align=center><input type=checkbox id=' + setUID('tabSingle_Dragons_' + j) + ' ref="' + j + '" ' + (Data.options.single.target.dragons[dragon.type] ? ' checked' : '') + ' /></td>';
					currentDragons.push(j);
				}
				m += '</tr>' + '	</table>' + '</div></div><br>' + '<div class=' + UID['status_ticker'] + ' style="height:260px; max-height:260px; overflow-y:auto; margin-top:15px !important">' + '	<table class="' + UID['table_targets'] + '">' + '	<tr class=' + UID['row_headers'] + ' cellpadding=1 >' + '		<td width=15%>' + translate('Preset') + '</td>' + '		<td width=55%>' + translate('Troops') + '</td>' + '	</tr>';
				var row_style, el = [];
				for (var i = 0; i < Data.options.single.presets.length; i++) {
					if (i % 2 == 1) row_style = "White";
					else row_style = "rgb(239,239,224)";
					m += '<tr valign=middle style="border-bottom: 1px solid #898989; background-color:' + row_style + '"><td width=15%>' + Data.options.single.presets[i].name + '</td>' + '	<td align=left width=55%>' + getTroops(Data.options.single.presets[i].units, ' ') + '</td>' + '	<td align=center width=30%><input id=' + setUID('tabSingle_SetTroops_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Choose') + '" />&nbsp' + '		<input id=' + setUID('tabSingle_Edit_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Edit') + '" />&nbsp' + '		<input id=' + setUID('tabSingle_Delete_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_red'] + '" style="width:auto !important;" type=submit value=" X " /></td>' + '</tr>';
					el.push(UID['tabSingle_SetTroops_' + i]);
				} + '</div>';
				$(UID['tabSingle_Content']).innerHTML = m;
				$(UID['tabSingle_CoordsX']).addEventListener('change', eventCoords, false);
				$(UID['tabSingle_CoordsY']).addEventListener('change', eventCoords, false);
				$(UID['tabSingle_Save']).addEventListener('click', saveCoords, false);
				$(UID['tabSingle_Bookmark']).addEventListener('click', addBookmark, false);
				$(UID['tabSingle_Comment']).addEventListener('change', function() {
					Data.options.single.target.comment = $(UID['tabSingle_Comment']).value
				}, false);
				$(UID['tabSingle_Attack']).addEventListener('click', butAttackNow, false);
				if (Data.options.single.target.id && Data.options.single.target.id != '' && Data.options.single.target.n && Data.options.single.target.n != '')
					$(UID['tabSingle_Msg']).addEventListener('click', onClickMsg, false);
				setTroopTable($(UID['tabSingle_Troops']), 1, 'SA', all_unit_types,
					Data.options.single.target.units, Data.options.single.target.saved_units, eventTroops, true);

				for (var j = 0; j < currentDragons.length; ++j) {
					$(UID['tabSingle_Dragons_' + currentDragons[j]]).addEventListener('change', function(event) {
						var args = event.target.getAttribute('ref');
						Data.options.single.target.dragons[Seed.dragonList[args].type] = event.target.checked;
						var include_great_dragon = false;
						for (var x = 0; x < Seed.dragonList.length && !include_great_dragon; x++) {
							var dragon = Seed.dragonList[x];
							if (Data.options.single.target.dragons[dragon.type]) include_great_dragon = true;
						}
						if (include_great_dragon) Data.options.single.target.include_great_dragon = true;
						else Data.options.single.target.include_great_dragon = false;
					}, false);
				}
				for (var i = 0; i < el.length; i++) {
					var butSetTrp = $(UID['tabSingle_SetTroops_' + i]);
					var butEdit = $(UID['tabSingle_Edit_' + i]);
					var butDelete = $(UID['tabSingle_Delete_' + i]);
					butSetTrp.addEventListener('click', onClickSetTroops, false);
					butEdit.addEventListener('click', onClickEdit, false);
					butDelete.addEventListener('click', onClickDelete, false);
				}
				eventCoords();
				var butSpy = $(UID['tabSingle_Spy']);
				butSpy.addEventListener('click', butSpyNow, false);
				var tile = Data.options.single.target;
				if (!tile.ai || tile.ai == 0 || tile.ai == null || tile.ai != (Seed.player.alliance ? Seed.player.alliance.id : -1))
					setButtonStyle(butSpy, true, 'btn_green', 'btn_disabled');
				else
					setButtonStyle(butSpy, false, 'btn_green', 'btn_disabled');

				function butSpyNow(event) {
					buttonSpyNow(t.container, Data.options.single.target);
				}

				function butAttackNow() {
					var dial = new ModalDialog(t.container, 300, 150, '', false);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('Attacking');
					checkAttack(notify);

					function notify(rslt) {
						if (rslt != 'OK') {
							try {
								dial.getContentDiv().innerHTML = '<B>' + rslt + '</b>';
								dial.allowClose(true);
							} catch (e) {}
						} else {
							try {
								dial.getContentDiv().innerHTML = '<b>' + translate('OK') + '</b>';
								setTimeout(function() {
									dial.destroy()
								}, 1000);
							} catch (e) {}
						}
					}
				}

				function checkAttack(notify) {
					var t = Tabs.Single;
					var cityId = Seed.cities[CAPITAL.id].id;
					var cityIdx = CAPITAL.id;
					var availableGeneral, attackUnits;

					/* check units */
					var target = Data.options.single.target;
					var units = cloneProps(target.units);
					attackUnits = checkTroops(CAPITAL.id, units);
					if (attackUnits != null) {
						notify(getErrorText(attackUnits, 'fb'));
						return;
					}
					if ((availableGeneral = getAvailableGeneral()) == null) {
						notify(getErrorText(3, 'fb'));
						return;
					}
					var greatDrag = null;
					if (target.include_great_dragon) {
						if ((greatDrag = getAvailableDragon(true, target.dragons)) == null) {
							notify(getErrorText(5, 'fb'));
							return;
						}
						if (greatDrag && greatDrag != null) units[greatDrag] = 1;
					}
					var targMsg = translate('Single attack sent to') + ': ' + target.type + translate(' at ') + target.x + '/' + target.y;
					verboseLog(targMsg + ' ' + translate('attempted'));

					new MyAjax.marchSend(cityId, target.x, target.y, availableGeneral.id, units, 'attacks', function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('Successfully'));
							actionLog(targMsg);
							notify('OK');
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
							notify(translate('Error') + ': ' + rslt.errmsg);
						}
					});
				}

				function eventCoords(event) {
					checkCoords('tabSingle', Data.options.single.target.units, Data.options.single.target);
				}

				function eventTroops(event) {
					var t = Tabs.Single;
					var args = event.target.name.split('_');
					if (args[0] == 'SA') {
						var tt = all_unit_types[args[1]];
						var tr = Data.options.single.target.units;
						tr[tt] = event.target.value;
						var tr = Data.options.single.target.saved_units;
						tr[tt] = event.target.value;
						var time = getMarchTime(Data.options.single.target.x, Data.options.single.target.y, Data.options.single.target.units);
						$(UID['tabSingle_Distance']).innerHTML = getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Data.options.single.target.x, Data.options.single.target.y) + ' (' + timestrShort(time) + ')';
					}
				}

				function onClickSetTroops(event) {
					var t = Tabs.Single;
					var city = Seed.cities[CAPITAL.id];
					var n = toNum(event.target.getAttribute('ref'));
					var presetUnits = Data.options.single.presets[n].units;
					var units = {};
					Data.options.single.target.units = {};
					for (var i = 0; i < all_unit_types.length; i++) {
						Data.options.single.target.units[all_unit_types[i]] = 0;
						Data.options.single.target.saved_units[all_unit_types[i]] = 0;
					}
					for (var pu in presetUnits) {
						var numTroops = getTroopNumbers(city, pu);
						var unit_max = numTroops.incity;
						if (unit_max < presetUnits[pu] && presetUnits[pu] > 0) units[pu] = unit_max;
						else if (presetUnits[pu] <= 0) units[pu] = 0;
						else units[pu] = presetUnits[pu];
						Data.options.single.target.units[pu] = units[pu];
						Data.options.single.target.saved_units[pu] = units[pu];
					}
					$(UID['tabSingle_Troops']).innerHTML = '<tr align=center class=' + UID['row_headers'] + '>' + '	<td colspan=10>' + translate('Troops') + ':&nbsp;</td></tr>';
					setTroopTable($(UID['tabSingle_Troops']), 1, 'SA', all_unit_types,
						Data.options.single.target.units, Data.options.single.target.saved_units, eventTroops, true);
				}

				function onClickEdit(event) {
					var t = Tabs.Single;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.single.preset.name = Data.options.single.presets[n].name;
					Data.options.single.preset.units = cloneProps(Data.options.single.presets[n].units);
					t.tabSinglePresets();
				}

				function onClickDelete(event) {
					var t = Tabs.Single;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.single.presets.splice(n, 1);
					t.tabSingleAttack();
				}

				function saveCoords() {
					var t = Tabs.Single;
					if (Data.options.single.history && Data.options.single.history.length > 0) {
						var h = cloneProps(Data.options.single.history);
						for (var i = h.length - 1; i >= 0; i--) {
							if ((h[i].x == Data.options.single.target.x) && (h[i].y == Data.options.single.target.y))
								Data.options.single.history.splice(i, 1);
						}
					}
					var rec = {
						x: Data.options.single.target.x,
						y: Data.options.single.target.y,
						type: Data.options.single.target.type,
						level: Data.options.single.target.level,
						id: Data.options.single.target.id,
						n: Data.options.single.target.n,
						units: cloneProps(Data.options.single.target.saved_units),
						dragons: cloneProps(Data.options.single.target.dragons),
						ai: Data.options.single.target.ai,
						inc: Data.options.single.target.include_great_dragon,
						comment: Data.options.single.target.comment
					};
					Data.options.single.history.push(rec);
				}

				function addBookmark(event) {
					var n = toNum(event.target.getAttribute('ref'));
					saveBookmark(t.container,
						Data.options.single.target.x,
						Data.options.single.target.y,
						Data.options.single.target.type,
						Data.options.single.target.level,
						Data.options.single.target.id,
						Data.options.single.target.n,
						Data.options.single.target.saved_units,
						Data.options.single.target.ai,
						Data.options.single.target.include_great_dragon, true,
						Data.options.single.target.dragons,
						Data.options.single.target.comment);
				}
			},

			/** PRESETS SUB-TAB ** */
			tabSinglePresets: function() {
				var t = Tabs.Single;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSinglePresets']).className = 'selected';
				$(UID['tabSinglePresets']).style.zIndex = 1;
				t.lastSubTab = 'tabSinglePresets';
				t.contentType = 1;
				var m = '<div class=' + UID['title'] + '>' + translate('Army presets') + '</div>' + '	<div id=' + setUID('tabSingle_Presets') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<label><b>' + translate('Preset name') + ' :</b></label>' + '	&nbsp &nbsp<input id=' + setUID('tabSingle_Name') + ' size=30 maxlength=50 type=text value="' + Data.options.single.preset.name + '" /><br><br>' + '	<table id=' + setUID('tabSingle_Troops') + ' class=' + UID['table'] + '>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=3 width=50%>' + translate('Troops') + ':&nbsp;</td>' + '			<td width=15%>' + translate('Total') + '</td>' + '		</tr>';
				var UIDTrp = setUID('tabSingle_Trp');
				var UIDMax = setUID('tabSingle_MaxT');
				var city = Seed.cities[CAPITAL.id];
				for (i = 0; i < all_unit_types.length; i++) {
					var num = toNum(Data.options.single.preset.units[all_unit_types[i]]);
					var numTroops = getTroopNumbers(city, all_unit_types[i]);
					m += '<tr><td class=right width=25%>' + translate(Names.troops.byName[all_unit_types[i]][1]) + ':</td>' + '	<td width=15%><input type=text id=' + UIDTrp + '_' + i + ' maxlength=9 style="width:55px" size=2 value="' + num + '"\></td>' + '	<td width=10%><input class=small id=' + UIDMax + '_' + i + ' ref=' + i + ' type=button  style="width:auto !important;" value=" Max " \></td>' + '	<td align=right width=15%>' + numf(numTroops.total, ' ') + '</td>' + '	<td width=35%>&nbsp</td>' + '</tr>';
				}
				m += '</table><br>' + '<table class=' + UID['table'] + ' style="margin-top:3px" width=60%>' + '	<tr valign=top align=center>' + '		<td width=40%><label><input id=' + setUID('tabSingle_clearAll') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Clear all') + '" /></label></td>' + '		<td width=40%><label><input id=' + setUID('tabSingle_savePreset') + ' type=button value="' + translate('Save preset') + '" /></label></td>' + '	</tr>' + '</table><br>' + '<br></div>';
				$(UID['tabSingle_Content']).innerHTML = m;
				$(UID['tabSingle_Name']).addEventListener('change', function() {
					Data.options.single.preset.name = $(UID['tabSingle_Name']).value
				}, false);
				$(UID['tabSingle_clearAll']).addEventListener('click', onClickClearAll, false);
				$(UID['tabSingle_savePreset']).addEventListener('click', onClickSavePreset, false);
				for (i = 0; i < all_unit_types.length; i++) {
					$(UIDTrp + '_' + i).addEventListener('change', eventTroops, false);
					butMax = $(UIDMax + '_' + i);
					butMax.addEventListener('click', setTroupsMax, false);
					setButtonStyle(butMax, true, 'btn_green');
				}

				function eventTroops(event) {
					var args = event.target.id.split('_');
					var x = toNum(event.target.value);
					for (i = 0; i < all_unit_types.length; i++)
						$(UID['tabSingle_Trp'] + '_' + i).style.backgroundColor = '';
					if (isNaN(x) || x < -1)
						event.target.style.backgroundColor = 'red';
					else event.target.style.backgroundColor = '';
					event.target.value = x;
					Data.options.single.preset.units[all_unit_types[args[1]]] = x;
				}

				function onClickClearAll() {
					var t = Tabs.Single;
					for (var i = 0; i < all_unit_types.length; i++)
						Data.options.single.preset.units[all_unit_types[i]] = 0;
					t.tabSinglePresets();
				}

				function onClickSavePreset() {
					var t = Tabs.Single;
					if (Data.options.single.presets && Data.options.single.presets.length > 0) {
						var h = cloneProps(Data.options.single.presets);
						for (var i = h.length - 1; i >= 0; i--) {
							if (h[i].name == Data.options.single.preset.name)
								Data.options.single.presets.splice(i, 1);
						}
					}
					var rec = {
						name: Data.options.single.preset.name,
						units: cloneProps(Data.options.single.preset.units)
					};
					Data.options.single.presets.push(rec);
					t.tabSinglePresets();
				}

				function setTroupsMax(event) {
					var args = event.target.id.split('_');
					var max = 0;
					var cur = toNum(Seed.cities[CAPITAL.id].units[all_unit_types[args[1]]]);
					t.totalForces = 0;
					for (var r = 0; r < all_unit_types.length; r++)
						if (r != args[1]) t.totalForces = toNum(t.totalForces) + toNum(Data.options.single.preset.units[all_unit_types[r]]);
					max = (getMusterPoint(CAPITAL.id)).max_troops - toNum(t.totalForces);
					if (max > cur) max = cur;
					Data.options.single.preset.units[all_unit_types[args[1]]] = toNum(max);
					t.tabSinglePresets();
				}
			},

			/** TARGETS SUB-TAB ** */
			tabSingleTargets: function() {
				var t = Tabs.Single;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSingleTargets']).className = 'selected';
				$(UID['tabSingleTargets']).style.zIndex = 1;
				t.lastSubTab = 'tabSingleTargets';
				t.contentType = 2;
				var m = '<div class="' + UID['title'] + '">' + translate('Targets') + '</div>' + '	<div id=' + setUID('tabSingle_Targets') + ' class=' + UID['status_ticker'] + ' style="height:390px; max-height:390px; width:540px; max-width:540px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabSingle_Content']).innerHTML = m;
				var m = '<table class=' + UID['row_style'] + '>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td width="15px">&nbsp</td>' + '		<td width="35px"><A><span>' + translate('Dist') + '</span></A></td>' + '		<td width="50px"><A><span>' + translate('Coords') + '</span></A></td>' + '		<td width="160px"><A><span>' + translate('Target') + '</span></A></td>' + '		<td width="175px"><A><span>' + translate('Troops') + '</span></A></td>' + '	</tr>';
				var ul = [];
				for (var i = 0; i < Data.options.single.history.length; i++) {
					var style = '',
						row_style = '';
					if (!Data.options.single.history[i].comment || Data.options.single.history[i].comment == null || Data.options.single.history[i].comment == '')
						style = 'style="border-bottom: 1px solid #898989;"';
					if (i % 2 == 1) row_style = "White";
					else row_style = "rgb(239,239,224)";
					var time = getMarchTime(Data.options.single.history[i].x, Data.options.single.history[i].y, Data.options.single.history[i].units);
					m += '<tr valign=top style="background-color:' + row_style + '">' + '	<td><input id=' + setUID('tabSingle_Delete_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_red'] + '" style="width:auto !important;" type=submit value=" X " /></td>' + '	<td ' + style + '>' + getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Data.options.single.history[i].x, Data.options.single.history[i].y) + '<br> (' + timestrShort(time) + ')</td>' + '	<td align=center ' + style + '>' + Data.options.single.history[i].x + ',' + Data.options.single.history[i].y + '</td>' + '	<td align=left ' + style + '>' + Data.options.single.history[i].type + '</td>' + '	<td align=left ' + style + '>' + getTroops(Data.options.single.history[i].units, '<br>') + '</td>' + '	<td><input id=' + setUID('tabSingle_Recall_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Recall') + '" /><br>' + '		<input id=' + setUID('tabSingle_Bookmark_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Bookmark') + '" /></td>';
					if (Data.options.single.history[i].id && Data.options.single.history[i].id != '' && Data.options.single.history[i].n && Data.options.single.history[i].n != '') {
						var user_ids = Data.options.single.history[i].id + '_' + Data.options.single.history[i].n;
						var UIDMsg = setUID('tabSingle_Msg_' + i);
						m += '	<td><input id=' + setUID('tabSingle_Spy_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Spy') + '" /><br>' + '		<input id=' + UIDMsg + ' ref=' + user_ids + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" /></td>';
						ul.push(UIDMsg);
					} else {
						m += '	<td><input id=' + setUID('tabSingle_Spy_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Spy') + '" /></td>';
					}
					m += '</tr>';
					if (Data.options.single.history[i].comment && Data.options.single.history[i].comment != null && Data.options.single.history[i].comment != '')
						m += '<tr valign=top style="background-color:' + row_style + '"><td colspan=4 style="border-bottom: 1px solid #898989;">' + Data.options.single.history[i].comment + '</td><td colspan=2>&nbsp</td></tr>';
				}
				$(UID['tabSingle_Targets']).innerHTML = m + '</table>';
				for (var i = 0; i < Data.options.single.history.length; i++) {
					var butRecall = $(UID['tabSingle_Recall_' + i]);
					var butDelete = $(UID['tabSingle_Delete_' + i]);
					var butBookmark = $(UID['tabSingle_Bookmark_' + i]);
					var butSpy = $(UID['tabSingle_Spy_' + i]);
					butRecall.addEventListener('click', recallTarget, false);
					butDelete.addEventListener('click', deleteTarget, false);
					butBookmark.addEventListener('click', addBookmark, false);
					butSpy.addEventListener('click', butSpyNow, false);
					var tile = Data.options.single.history[i];
					if (!tile.ai || tile.ai == 0 || tile.ai == null || tile.ai != (Seed.player.alliance ? Seed.player.alliance.id : -1))
						setButtonStyle(butSpy, true, 'btn_green', 'btn_disabled');
					else
						setButtonStyle(butSpy, false, 'btn_green', 'btn_disabled');
				}
				for (var u = 0; u < ul.length; u++)
					$(ul[u]).addEventListener('click', onClickMsg, false);

				function butSpyNow(event) {
					var n = toNum(event.target.getAttribute('ref'));
					buttonSpyNow(t.container, Data.options.single.history[n]);
				}

				function recallTarget(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.single.target.x = Data.options.single.history[n].x;
					Data.options.single.target.y = Data.options.single.history[n].y;
					Data.options.single.target.type = Data.options.single.history[n].type;
					Data.options.single.target.level = Data.options.single.history[n].level;
					Data.options.single.target.id = Data.options.single.history[n].id;
					Data.options.single.target.n = Data.options.single.history[n].n;
					Data.options.single.target.ai = Data.options.single.history[n].ai;
					Data.options.single.target.units = cloneProps(Data.options.single.history[n].units);
					Data.options.single.target.dragons = cloneProps(Data.options.single.history[n].dragons);
					Data.options.single.target.saved_units = cloneProps(Data.options.single.history[n].units)
					Data.options.single.target.include_great_dragon = Data.options.single.history[n].inc;
					Data.options.single.target.comment = Data.options.single.history[n].comment;
					t.tabSingleAttack();
				}

				function deleteTarget(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.single.history.splice(n, 1);
					t.tabSingleTargets();
				}

				function addBookmark(event) {
					var n = toNum(event.target.getAttribute('ref'));
					saveBookmark(t.container,
						Data.options.single.history[n].x,
						Data.options.single.history[n].y,
						Data.options.single.history[n].type,
						Data.options.single.history[n].level,
						Data.options.single.history[n].id,
						Data.options.single.history[n].n,
						Data.options.single.history[n].units,
						Data.options.single.history[n].ai,
						Data.options.single.history[n].inc, true,
						Data.options.single.history[n].dragons,
						Data.options.single.history[n].comment);
				}
			},

			hide: function() {
				var t = Tabs.Single;
				Data.options.single.current_tab = t.contentType;
			}
		}
		/**
		 * ****************************** Single attack Tab
		 * *************************
		 */


		/**
		 * ****************************** Spy Tab
		 * ***********************************
		 */
		Tabs.Spies = {
			tabOrder: SPY_TAB_ORDER,
			tabLabel: 'Spy',
			tabDisabled: !SPY_TAB_ENABLE,
			container: null,
			enabled: false,
			attackTimer: null,
			marchTimer: null,
			attackErrors: 0,
			contentType: 0,
			/* 0 = attack, 1 = history, 2 = stats, 3 = last report */
			lastSubTab: 'tabSpyAttack',
			running: {
				start_at: 0
			},
			last_report: null,

			init: function(div) {
				var t = Tabs.Spies;
				Data.setDefaultValues('spies');
				t.container = div;
				var m = '<div class=' + UID['title'] + '>' + translate('Spy One Target') + '</div>' + '<div id=' + setUID('tabSpy_Status') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<center><input id=' + setUID('tabSpy_OnOff') + ' type=button value="OnOff" /></center>' + '	<div id=' + setUID('tabSpy_Report') + ' style="margin-top:5px;height:140px; max-height:140px; width:540px; max-width:540px; overflow:auto;">' + '		<table id=' + setUID('tabSpy_Marches') + ' class=' + UID['table'] + '></table>' + '	</div>' + '	<div id=' + setUID('tabSpy_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabSpyAttack') + '>' + translate('Spy') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabSpyHistory') + '>' + translate('History') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabSpyStats') + '>' + translate('Stats') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabSpyLastReport') + '>' + translate('Last report') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabSpy_Content') + ' style="padding-top:0px; height:440px; overflow-y:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabSpyAttack']).addEventListener('click', t.tabSpyAttack, false);
				$(UID['tabSpyHistory']).addEventListener('click', t.tabSpyHistory, false);
				$(UID['tabSpyStats']).addEventListener('click', t.tabSpyStats, false);
				$(UID['tabSpyLastReport']).addEventListener('click', t.tabSpyLastReport, false);
				$(UID['tabSpy_OnOff']).addEventListener('click', function() {
					t.setSpyEnable(!Data.options.spies.enabled);
				}, false);
				t.contentType = toNum(Data.options.spies.current_tab, 0);
				t.marchTick();
				t.setSpyEnable(false);
				window.addEventListener('unload', t.onUnload, false);
				t.show();
			},
			show: function() {
				var t = Tabs.Spies;
				t.marchTick();
				switch (t.contentType || 0) {
					case 0:
						t.tabSpyAttack();
						break;
					case 1:
						t.tabSpyHistory();
						break;
					case 2:
						t.tabSpyStats();
						break;
					case 3:
						t.tabSpyLastReport();
						break;
				}
			},
			hide: function() {
				var t = Tabs.Spies;
				clearTimeout(t.marchTimer);
				Data.options.spies.current_tab = t.contentType;
			},
			onUnload: function() {
				var t = Tabs.Spies;
				if (Data.options.spies.enabled && t.running.start_at != 0)
					Data.stats.spies.run_time += (serverTime() - t.running.start_at);
				Data.options.spies.current_tab = t.contentType;
			},

			tabSpyAttack: function() {
				var t = Tabs.Spies;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSpyAttack']).className = 'selected';
				$(UID['tabSpyAttack']).style.zIndex = 1;
				t.lastSubTab = 'tabSpyAttack';
				t.contentType = 0;

				var m = '<div class="' + UID['title'] + '">' + translate('Spy') + '</div>' + '<div class=' + UID['content'] + '>' + '	<div>' + '		<b>' + translate('Coords') + ':&nbsp;</b>&nbsp;' + '		X: <input id=' + setUID('tabSpy_CoordsX') + ' size=1 maxlength=3 type=text value="' + Data.options.spies.target.x + '" /> ' + '		Y: <input id=' + setUID('tabSpy_CoordsY') + ' size=2 maxlength=3 type=text value="' + Data.options.spies.target.y + '" /> ' + '		&nbsp <b>' + translate('Distance') + ':</b> <span id=' + setUID('tabSpy_Distance') + '></span>' + '		&nbsp <input id=' + setUID('tabSpy_Save') + ' class="' + UID['btn_green'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Save') + ' " />'
				if (Data.options.spies.target.id && Data.options.spies.target.id != '' && Data.options.spies.target.n && Data.options.spies.target.n != '') {
					var user_ids = Data.options.spies.target.id + '_' + Data.options.spies.target.n;
					m += '	&nbsp <input id=' + setUID('tabSpy_Msg') + ' ref=' + user_ids + ' class="' + UID['btn_blue'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Msg') + ' " />';
				}
				m += '		<br><br><label>' + translate('description') + ' :</label>&nbsp' + '		<textarea id=' + setUID('tabSpy_Comment') + ' cols="80" rows="2" wrap="PHYSICAL">' + Data.options.spies.target.comment + '</textarea><br>' + '		<div class=' + UID['status_ticker'] + ' style="height:auto !important;margin:5px 10px !important;">' + '			<center><span id=' + setUID('tabSpy_Tile') + '></span></center>' + '		</div>' + '	</div>' + '  <div>' + '	<table id=' + setUID('tabSpy_Troops') + ' class=' + UID['table'] + '>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=8>' + translate('Spies number') + ':&nbsp;</td>' + '		</tr>' + '	</table>' + '	</div><br>' + '	<table class=' + UID['table'] + '>' + '		<tr>' + '			<td class=right> ' + translate('Delete spy Reports') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabSpy_DelReports') + ' type=checkbox ' + (Data.options.spies.delete_reports ? 'CHECKED' : '') + ' /></td>' + '		</tr><tr>' + '			<td class=right>' + translate('Stop if any troops lost') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabSpy_StopOnLoss') + ' type=checkbox ' + (Data.options.spies.stop_on_loss ? 'CHECKED' : '') + ' /></td>' + '		</tr><tr>' + '			<td class=right>' + translate('Delay Between Attacks') + ':&nbsp;</td>' + '			<td>' + '				<input id=' + setUID('tabSpy_DelayMin') + ' type=text size=1 maxlength=4 value="' + Data.options.spies.delay_min + '" />' + '				 to <span id=' + setUID('tabSpy_DelayMax') + '>' + Data.options.spies.delay_max + '</span>&nbsp;' + translate('seconds') + '			</td>' + '		</tr><tr>' + '			<td class=right> ' + translate('Maximum simultaneous marches') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabSpy_MaxMarches') + ' type=text size=1 maxlength=2 value="' + Data.options.spies.max_marches + '" /></td>' + '		</tr>' + '	</table>' + '</div>';
				$(UID['tabSpy_Content']).innerHTML = m;
				$(UID['tabSpy_CoordsX']).addEventListener('change', t.eventCoords, false);
				$(UID['tabSpy_CoordsY']).addEventListener('change', t.eventCoords, false);
				$(UID['tabSpy_Save']).addEventListener('click', saveCoords, false);
				$(UID['tabSpy_Comment']).addEventListener('change', function() {
					Data.options.spies.target.comment = $(UID['tabSpy_Comment']).value
				}, false);
				$(UID['tabSpy_DelReports']).addEventListener('click', function(event) {
					Data.options.spies.delete_reports = event.target.checked;
				}, false);
				$(UID['tabSpy_StopOnLoss']).addEventListener('click', function(event) {
					Data.options.spies.stop_on_loss = event.target.checked;
				}, false);
				$(UID['tabSpy_DelayMin']).addEventListener('change', delayChanged, false);
				$(UID['tabSpy_MaxMarches']).addEventListener('change', maxMarchesChanged, false);
				if (Data.options.spies.target.id && Data.options.spies.target.id != '' && Data.options.spies.target.n && Data.options.spies.target.n != '')
					$(UID['tabSpy_Msg']).addEventListener('click', onClickMsg, false);
				setTroopTable($(UID['tabSpy_Troops']), 1, 'SP', spy_unit_types,
					Data.options.spies.target.units, undefined, t.eventTroops, false);
				t.eventCoords();

				function delayChanged(event) {
					var min = toNum(event.target.value);
					var max = toNum(min * 1.5);
					if (min < nvl(MIN_DELAY_BETWEEN_WAVE, 10) || min > 3600) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					$(UID['tabSpy_DelayMax']).innerHTML = max;
					event.target.style.backgroundColor = '';
					Data.options.spies.delay_min = min;
					Data.options.spies.delay_max = max;
				}

				function maxMarchesChanged(event) {
					var val = toNum($(UID['tabSpy_MaxMarches']).value);
					if (val < 0 || val > Seed.cities[CAPITAL.id].figures.marches.maximum) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					event.target.style.backgroundColor = '';
					Data.options.spies.max_marches = val;
				}

				function saveCoords() {
					var t = Tabs.Spies;
					if (Data.options.spies.history && Data.options.spies.history.length > 0) {
						var h = cloneProps(Data.options.spies.history);
						for (var i = h.length - 1; i >= 0; i--) {
							if ((h[i].x == Data.options.spies.target.x) && (h[i].y == Data.options.spies.target.y))
								Data.options.spies.history.splice(i, 1);
						}
					}
					var rec = {
						x: Data.options.spies.target.x,
						y: Data.options.spies.target.y,
						type: Data.options.spies.target.type,
						level: Data.options.spies.target.level,
						id: Data.options.spies.target.id,
						n: Data.options.spies.target.n,
						units: cloneProps(Data.options.spies.target.units),
						ai: Data.options.spies.target.ai,
						comment: Data.options.spies.target.comment
					};
					Data.options.spies.history.push(rec);
				}
			},
			tabSpyHistory: function() {
				var t = Tabs.Spies;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSpyHistory']).className = 'selected';
				$(UID['tabSpyHistory']).style.zIndex = 1;
				t.lastSubTab = 'tabSpyHistory';
				t.contentType = 1;

				var m = '<div class="' + UID['title'] + '">' + translate('History') + '</div>' + '	<div id=' + setUID('tabSpy_HistoryList') + ' class=' + UID['status_ticker'] + ' style="height:400px; max-height:400px; width:540px; max-width:540px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabSpy_Content']).innerHTML = m;
				var m = '<table class=' + UID['row_style'] + '>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td width="10px">&nbsp</td>' + '		<td width="35px"><A><span>' + translate('Dist') + '</span></A></td>' + '		<td width="50px"><A><span>' + translate('Coords') + '</span></A></td>' + '		<td width="160px"><A><span>' + translate('Target') + '</span></A></td>' + '		<td width="175px"><A><span>' + translate('Troops') + '</span></A></td>' + '	</tr>';
				var ul = [];
				for (var i = 0; i < Data.options.spies.history.length; i++) {
					var style = '',
						row_style = '';
					if (!Data.options.spies.history[i].comment || Data.options.spies.history[i].comment == null || Data.options.spies.history[i].comment == '')
						style = 'style="border-bottom: 1px solid #898989;"';
					if (i % 2 == 1) row_style = "White";
					else row_style = "rgb(239,239,224)";
					var time = getMarchTime(Data.options.spies.history[i].x, Data.options.spies.history[i].y, Data.options.spies.history[i].units);
					m += '<tr valign=top style="background-color:' + row_style + '">' + '	<td><input id=' + setUID('tabSpy_Delete_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_red'] + '" style="width:auto !important;" type=submit value=" X " /></td>' + '	<td ' + style + '>' + getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Data.options.spies.history[i].x, Data.options.spies.history[i].y) + '<br> (' + timestrShort(time) + ')</td>' + '	<td align=center ' + style + '>' + Data.options.spies.history[i].x + ',' + Data.options.spies.history[i].y + '</td>' + '	<td align=left ' + style + '>' + Data.options.spies.history[i].type + '</td>' + '	<td align=left ' + style + '>' + getTroops(Data.options.spies.history[i].units, '<br>') + '</td>' + '	<td><input id=' + setUID('tabSpy_Recall_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Recall') + '" />';
					if (Data.options.spies.history[i].id && Data.options.spies.history[i].id != '' && Data.options.spies.history[i].n && Data.options.spies.history[i].n != '') {
						var user_ids = Data.options.spies.history[i].id + '_' + Data.options.spies.history[i].n;
						var UIDMsg = setUID('tabSpy_Msg_' + i);
						m += '	<br><input id=' + UIDMsg + ' ref=' + user_ids + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" />';
						ul.push(UIDMsg);
					}
					m += '</td></tr>';
					if (Data.options.spies.history[i].comment && Data.options.spies.history[i].comment != null && Data.options.spies.history[i].comment != '')
						m += '<tr valign=top style="background-color:' + row_style + '"><td colspan=5 style="border-bottom: 1px solid #898989;">' + Data.options.spies.history[i].comment + '</td><td colspan=2>&nbsp</td></tr>';
				}
				$(UID['tabSpy_HistoryList']).innerHTML = m + '</table>';
				for (var i = 0; i < Data.options.spies.history.length; i++) {
					var butRecall = $(UID['tabSpy_Recall_' + i]);
					var butDelete = $(UID['tabSpy_Delete_' + i]);
					butRecall.addEventListener('click', recallTarget, false);
					butDelete.addEventListener('click', deleteTarget, false);
				}
				for (var u = 0; u < ul.length; u++)
					$(ul[u]).addEventListener('click', onClickMsg, false);

				function recallTarget(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.spies.target.x = Data.options.spies.history[n].x;
					Data.options.spies.target.y = Data.options.spies.history[n].y;
					Data.options.spies.target.type = Data.options.spies.history[n].type;
					Data.options.spies.target.level = Data.options.spies.history[n].level;
					Data.options.spies.target.id = Data.options.spies.history[n].id;
					Data.options.spies.target.n = Data.options.spies.history[n].n;
					Data.options.spies.target.ai = Data.options.spies.history[n].ai;
					Data.options.spies.target.units = cloneProps(Data.options.spies.history[n].units);
					Data.options.spies.target.comment = Data.options.spies.history[n].comment;
					t.tabSpyAttack();
				}

				function deleteTarget(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.spies.history.splice(n, 1);
					t.tabSpyHistory();
				}
			},
			tabSpyStats: function() {
				var t = Tabs.Spies;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSpyStats']).className = 'selected';
				$(UID['tabSpyStats']).style.zIndex = 1;
				t.lastSubTab = 'tabSpyStats';
				t.contentType = 2;

				var m = '<div class=' + UID['title'] + '>' + translate('Attacks Stats') + '</div>' + '<div id=' + setUID('tabSpyStats_Statbox') + ' class=' + UID['status_ticker'] + '>' + '<div id=' + setUID('tabSpyStats_Status') + '></div>' + '<br/>' + '<center><input id=' + setUID('tabSpyStats_Clear') + ' type=button value="' + translate('Clear Stats') + '" /></center>' + '<br></div>';
				$(UID['tabSpy_Content']).innerHTML = m;
				$(UID['tabSpyStats_Clear']).addEventListener('click', function() {
					t.clearStats();
					t.showStats();
				}, false);
				t.showStats();
			},
			tabSpyLastReport: function() {
				var t = Tabs.Spies;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabSpyLastReport']).className = 'selected';
				$(UID['tabSpyLastReport']).style.zIndex = 1;
				t.lastSubTab = 'tabSpyLastReport';
				t.contentType = 3;
				var m = '<div id=' + setUID('tabSpy_ShowReport') + ' class=' + UID['status_ticker'] + ' style="height:395px; max-height:395px; width:540px; max-width:540px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important"></div>';
				$(UID['tabSpy_Content']).innerHTML = m;
				var m = '<div class=' + UID['title'] + '>' + translate('Last report') + '</div>';
				if (t.last_report)
					m += '<center>' + Messages.displaySpyReport(t.last_report) + '</center>';
				$(UID['tabSpy_ShowReport']).innerHTML = m;
			},

			gotSpyReport: function(rpt_s) {
				var t = Tabs.Spies,
					has_loss = false;
				if (!rpt_s) return;
				if (rpt_s.report.location.x == Data.options.spies.target.x &&
					rpt_s.report.location.y == Data.options.spies.target.y &&
					rpt_s.report_notification.report_type == 'SpyReport'
				) {
					t.last_report = Messages.details[rpt_s.report_notification.id];
					var march_id = null;
					for (var id in Data.marches.spies) {
						march_id = id;
						break;
					}
					if (is_null(Data.stats.spies.total_attacks)) Data.stats.spies.total_attacks = 0;
					++Data.stats.spies.total_attacks;
					for (var p in rpt_s.report.attacker.units) {
						if (rpt_s.report.attacker.units[p][0] != rpt_s.report.attacker.units[p][1]) {
							var nb = toNum(rpt_s.report.attacker.units[p][0]) - toNum(rpt_s.report.attacker.units[p][1]);
							objAddTo(Data.stats.spies.loss, p, nb, true);
						}
					}
					Data.marches.spies[march_id].has_report = true;
					t.showStats();

					if (Data.options.spies.stop_on_loss && rpt_s.report.attacker.name == Seed.player.name) {
						for (var p in rpt_s.report.attacker.units) {
							if (rpt_s.report.attacker.units[p][0] != rpt_s.report.attacker.units[p][1]) {
								has_loss = true;
								var ts = new Date(rpt_s.report_notification.created_at * 1000).myString();
								t.setSpyEnable(false);
								dispFeedback(UID['tabSpy_Feedback'], translate('Troops lost') + '! (' + ts + ')');
								actionLog(translate('Spy') + ': ' + translate('Troops lost') + '! (' + ts + ')');
								/*
								 * Recall all remaining marches of that type to
								 * avoid other troop loss
								 */
								for (var id in Data.marches.spies) {
									if (Data.marches.spies[id].status === 'marching')
										doRecallMarch(Data.marches.spies[id].city_id, id);
								}
								return;
							}
						}
					}
					if (Data.options.spies.delete_reports && rpt_s.report.attacker.name == Seed.player.name && !has_loss)
						Messages.deleteMessage(rpt_s.report_notification.id);
				}

				function doRecallMarch(city_id, id) {
					var targMsg = 'Recall march ' + id;
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.marchRecall(city_id, id, function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('succeeded'));
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
				}
			},
			clearStats: function() {
				var t = Tabs.Spies;
				var now = serverTime();
				Data.stats.spies = {
					start_at: now,
					run_time: 0,
					total_attacks: 0,
					loss: {}
				};
				t.showStats();
			},
			showStats: function() {
				var t = Tabs.Spies;
				var div = $(UID['tabSpyStats_Status']);
				if (div == null) return;

				var run_time = Data.stats.spies.run_time;
				if (Data.options.spies.enabled)
					run_time += (serverTime() - t.running.start_at);
				var trueRunTime = (run_time > 0) ? (run_time / 3600) : 1;

				var m = '<table class=' + UID['table'] + '>' + '	<tr>' + '		<td class=right>' + translate('Start Date') + ': </td>' + '		<td colspan=>' + new Date(Data.stats.spies.start_at * 1000).myString() + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Run Time') + ': </td>' + '		<td>' + timestr(run_time, true) + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Attacks') + ': </td>' + '		<td>' + Data.stats.spies.total_attacks + '</td>' + '	<tr valign=top align=right>' + '		<td class=right>' + translate('Troops lost') + ': </td>';
				var first = true;
				for (var name in Data.stats.spies.loss) {
					var perHour = Math.round(Data.stats.spies.loss[name] / trueRunTime);
					if (first) first = false;
					else m += '	<tr align=right><td></td>';
					m += '		<td>' + translate(name) + ':</td>' + '		<td>' + numf(Data.stats.spies.loss[name], ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
				}
				m += '</table>';
				div.innerHTML = m;
			},

			eventCoords: function(event) {
				checkCoords('tabSpy', Data.options.spies.target.units, Data.options.spies.target);
			},
			eventTroops: function(event) {
				var t = Tabs.Spies;
				var args = event.target.name.split('_');
				if (args[0] == 'SP') {
					var tt = spy_unit_types[args[1]];
					var tr = Data.options.spies.target.units;
					tr[tt] = event.target.value;
					var time = getMarchTime(Data.options.spies.target.x, Data.options.spies.target.y, Data.options.spies.target.units);
					$(UID['tabSpy_Distance']).innerHTML = getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Data.options.spies.target.x, Data.options.spies.target.y) + ' (' + timestrShort(time) + ')';
				}
			},

			setSpyEnable: function(onOff) {
				var t = Tabs.Spies;
				var but = $(UID['tabSpy_OnOff']);
				clearTimeout(t.attackTimer);
				Data.options.spies.enabled = onOff;
				if (onOff) {
					Messages.addSpyReportListener(t.gotSpyReport);
					but.value = translate('Attacking').toUpperCase();
					but.className = UID['btn_on'];
					t.spyAttackTick();
					t.running.start_at = serverTime();
					Data.stats.spies.start_at = serverTime();
				} else {
					Messages.removeReportListener('spies', t.gotSpyReport);
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
					if (t.running.start_at !== 0) {
						Data.stats.spies.run_time += (serverTime() - t.running.start_at);
					}
				}
			},

			spyAttackTick: function() {
				var t = Tabs.Spies,
					targetMsg, retryDelay, spyUnits, marchCount = 0;
				clearTimeout(t.attackTimer);

				if (!Data.options.spies.enabled) return;

				targetMsg = Data.options.spies.target.type + translate(' at ') + Data.options.spies.target.x + '/' + Data.options.spies.target.y;
				var actionMsg = translate('Spy to ') + targetMsg;
				var feedback_element = UID['tabSpy_Feedback'];

				var cur_march = getMinDelay();
				marchCount = cur_march.count;
				retryDelay = cur_march.delay;
				var chk = checkMarch(actionMsg,
					feedback_element,
					marchCount,
					retryDelay,
					Marches.count.spies,
					Data.options.spies.max_marches,
					null, false);
				if (chk != 0) {
					t.attackTimer = setTimeout(t.spyAttackTick, retryDelay * 1000);
					return;
				}
				spyUnits = checkTroops(CAPITAL.id, Data.options.spies.target.units);
				if (spyUnits !== null) {
					raiseMessage(actionMsg, feedback_element, spyUnits, true, retryDelay);
					t.attackTimer = setTimeout(t.spyAttackTick, retryDelay * 1000);
					return;
				}
				verboseLog(actionMsg + ' ' + translate('attempted'));

				new MyAjax.marchSpy(Seed.cities[CAPITAL.id].id, Data.options.spies.target.x, Data.options.spies.target.y, Data.options.spies.target.units, 'spies', function(rslt) {
					var t = Tabs.Spies,
						spyDelay, retryDelay;
					if (rslt.ok && rslt.dat.result.success) {
						t.attackErrors = 0;
						var delay_min = toNum(Data.options.spies.delay_min, nvl(MIN_DELAY_BETWEEN_WAVE, 10));
						var delay_max = toNum(Data.options.spies.delay_max, toNum(delay_min * 1.5));
						spyDelay = Math.floor(Math.random() * (delay_max - delay_min + 1) + delay_min);
						verboseLog(actionMsg + ' ' + translate('Successfully'));
						actionLog(actionMsg);
						dispFeedback(feedback_element, actionMsg);
						t.attackTimer = setTimeout(t.spyAttackTick, spyDelay * 1000);
					} else {
						t.attackErrors++
						retryDelay = 30 * (t.attackErrors * t.attackErrors);
						verboseLog(actionMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg + ' - ' + translate('Retry in') + ' ' + retryDelay + ' ' + translate('seconds'));
						actionLog(actionMsg + ' ' + translate('failed'));
						if (rslt.status === 429) {
							retryDelay = E429_DELAY;
							raiseMessage(actionMsg + ' ' + translate('failed') + ' - <b>API</b> ', feedback_element, 6, false, retryDelay);
						} else if (rslt.status === 509) {
							retryDelay = 600;
							raiseMessage(actionMsg + ' ' + translate('failed') + ' - ', feedback_element, 6, false, retryDelay);
						} else
							dispFeedback(feedback_element, actionMsg + ' ' + translate('failed'));
						t.attackTimer = setTimeout(t.spyAttackTick, retryDelay * 1000);
					}
				});
			},
			marchTick: function() {
				var t = Tabs.Spies;
				clearTimeout(t.marchTimer);
				Marches.updateTable($(UID['tabSpy_Marches']), 'spies');
				t.marchTimer = setTimeout(t.marchTick, 1000);
			}
		}
		/**
		 * ****************************** Spy Tab
		 * ***********************************
		 */


		/**
		 * ****************************** Tower Tab
		 * *********************************
		 */
		Tabs.Tower = {
			tabOrder: TOWER_TAB_ORDER,
			tabLabel: 'Tower',
			tabDisabled: !TOWER_TAB_ENABLE,
			container: null,
			alarmTimer: null,
			deleteTimer: null,
			fetchTimer: null,
			logTab: null,
			maxEntries: 100,
			saveEntries: 100,
			readList: [],
			clockTimer: 0,
			checkSetDefenseBusy: false,
			contentType: 0,
			/* 0 = Wall management, 1 = Config, 2 = Message */
			lastSubTab: 'tabTowerWall',
			intervalWarning: 0,
			startup: true,

			init: function(div) {
				var t = Tabs.Tower;
				t.container = div;
				var m = '<div class=' + UID['title'] + '>' + translate('Sentinel tower') + '</div>' + '<div class=' + UID['status_ticker'] + ' style="height:250px; max-height:250px; overflow-y:auto ; margin-bottom:5px ; margin-top:1px !important">' + '	<div id=' + setUID('tabTower_LogList') + ' style="height:227px; max-height:227px; overflow-y:auto ; overflow-x:auto; margin-bottom:1px">' + '		<table id=' + setUID('tabTower_Log') + ' class=' + UID['table_console'] + ' cellpadding=0 cellspacing=1 width=100%>' + '		</table>' + '	</div>' + '	<div id=' + setUID('tabTower_Warning') + ' valign=bottom></div>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabTowerWall') + '>' + translate('Wall management') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabTowerConfig') + '>' + translate('Config') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabTowerMessage') + '>' + translate('Message') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabTower_Content') + ' style="padding-top:0px; height:405px; overflow-y:auto"></div>' + '<div id=' + setUID('tabTower_SwfPlayer') + '></div>';
				t.container.innerHTML = m;
				$(UID['tabTowerWall']).addEventListener('click', t.tabTowerWall, false);
				$(UID['tabTowerConfig']).addEventListener('click', t.tabTowerConfig, false);
				$(UID['tabTowerMessage']).addEventListener('click', t.tabTowerMessage, false);
				t.logTab = $(UID['tabTower_Log']);
				Data.options.messages_tower = [];
				t.printTab();
				t.deleteTick();
				Messages.addAlarmReportListener(t.gotAlarmReport);
				window.addEventListener('unload', t.onUnload, false);
				t.contentType = toNum(Data.options.tower.current_tab);
				t.show();
				t.startup = false;
			},

			tabTowerWall: function() {
				var t = Tabs.Tower;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabTowerWall']).className = 'selected';
				$(UID['tabTowerWall']).style.zIndex = 1;
				t.lastSubTab = 'tabTowerWall';

				var wallStatus = translate((Seed.cities[CAPITAL.id].defended) ? 'Defend' : 'Hiding').toUpperCase();
				t.contentType = 0;
				var m = '<div class="' + UID['title'] + '">' + translate('Wall management') + '</div>' + '<div id=' + setUID('tabTower_HistoryList') + ' class=' + UID['status_ticker'] + ' style="height:355px; max-height:355px; width:540px; max-width:540px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important">' + '	<table class=' + UID['table_targets'] + ' style="margin-top:3px" width=100%>' + '		<tr valign=top>' + '			<td width=25%><label><input id=' + setUID('tabTower_AllDef') + ' type=button value="' + translate('Troops max') + '" /></label></td>' + '			<td width=25%><label><input id=' + setUID('tabTower_NoDef') + ' type=button value="' + translate('remove-all') + '" /></label></td>' + '			<td width=50% align=right><b>' + translate('wall-defense-strategy') + ':</b>' + '			&nbsp <input id=' + setUID('tabTower_setWallStat') + ' type=button value=' + wallStatus + ' class=' + UID[(Seed.cities[CAPITAL.id].defended ? 'btn_off' : 'btn_on')] + '></input></td>' + '		</tr>' + '	</table>' + '	<table class=' + UID['table_targets'] + ' style="margin-top:3px" width=100%>' + '		<tr valign=top>' + '			<td width=25%><div id=' + setUID('tabTower_SelPreset') + '></div></td>' + '			<td align=left width=65%><div id=' + setUID('tabTower_PresetTroops') + '></div></td>' + '			<td align=left width=10%><div id=' + setUID('tabTower_PresetButton') + '></div></td>' + '		</tr>' + '	</table>' + '	<div id=' + setUID('tabTower_DefForce') + '></div>' + '</div>';
				$(UID['tabTower_Content']).innerHTML = m;
				$(UID['tabTower_AllDef']).addEventListener('click', onClickAllDef, false);
				$(UID['tabTower_NoDef']).addEventListener('click', onClickNoDef, false);
				$(UID['tabTower_setWallStat']).addEventListener('click', switchDefense, false);
				$(UID['tabTower_SelPreset']).addEventListener('change', onChangePreset, false);
				dispDefenseForce();
				displayPresetList();
				dispPresetForce();

				function dispDefenseForce() {
					var city = Seed.cities[CAPITAL.id];
					var m = '<table class=' + UID['row_style'] + ' style="margin-top:3px" width=100%>' + '	<tr class=' + UID['row_headers'] + ' align=center>' + '		<td width=40%>' + translate('Troops') + '</td>' + '		<td width=15%>' + translate('Total') + '</td>' + '		<td width=15%>' + translate('Defense') + '</td>' + '		<td width=15%>' + translate('In city') + '</td>' + '		<td width=15%>' + translate('In march') + '</td>' + '	</tr>';
					for (var i = 0; i < all_unit_types.length; i++) {
						var numTroops = getTroopNumbers(city, all_unit_types[i]);
						m += '	<tr valign=top>' + '		<td class=right width=40%>' + translate(all_unit_types[i]) + ':</td>' + '		<td align=right width=15%>' + numf(numTroops.total, ' ') + '</td>' + '		<td align=right width=15%>' + ((numTroops.indefense > 0) ? '<b>' + numf(numTroops.indefense, ' ') + '</b>' : numf(numTroops.indefense, ' ')) + '</td>' + '		<td align=right width=15%>' + numf(numTroops.incity, ' ') + '</td>' + '		<td align=right width=15%>' + (numTroops.marches ? '&nbsp;+&nbsp;<b>' + numf(numTroops.marches, ' ') + '</b>' : '') + '</td>' + '	</tr>';
					}
					m += '</table>';
					$(UID['tabTower_DefForce']).innerHTML = m;
				}

				function displayPresetList() {
					var t = Tabs.Tower;
					var m = '<select id=' + setUID('tabTower_SelBoxPreset') + '>';
					if (Data.options.wall.presets && Data.options.wall.presets.length > 0) {
						for (var i = 0; i < Data.options.wall.presets.length; i++) {
							m += '<option value="' + Data.options.wall.presets[i].name + '" ' + (Data.options.tower.preset == Data.options.wall.presets[i].name ? 'selected' : '') + '>' + Data.options.wall.presets[i].name + '</option>';
						}
					} else {
						m += '<option value="-" ' + (Data.options.tower.preset == "-" ? 'selected' : '') + '>' + translate('None') + '</option>';
					}
					m += '</select>';
					$(UID['tabTower_SelPreset']).innerHTML = m;
				}

				function dispPresetForce() {
					var t = Tabs.Tower;
					var city = Seed.cities[CAPITAL.id];
					var result = '';
					var tRes = [];
					var found = false;
					if (Data.options.tower.preset && Data.options.tower.preset != '-') {
						for (var i = 0; i < Data.options.wall.presets.length && !found; i++) {
							if (Data.options.tower.preset == Data.options.wall.presets[i].name) {
								found = true;
								var trps = Data.options.wall.presets[i].units;
								for (var x in trps) {
									if (trps[x] > 0)
										tRes.push(numf(trps[x], ' ') + ' ' + translate(x));
									else if (trps[x] == -1)
										tRes.push('Max ' + translate(x));
								}
							}
						}
						if (tRes.length > 0) result = tRes.join(', ');
						else result = '---';
					} else result = '---';
					$(UID['tabTower_PresetTroops']).innerHTML = '<font color="#000000">' + result + '</font>';
					if (Data.options.tower.preset && Data.options.tower.preset != '-') {
						$(UID['tabTower_PresetButton']).innerHTML = '<input id=' + setUID('tabTower_SetDef') + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Set Def') + '" />';
						$(UID['tabTower_SetDef']).addEventListener('click', onClickSetDef, false);
					}
				}

				function onChangePreset(event) {
					var t = Tabs.Tower;
					var element = $(UID['tabTower_SelBoxPreset']);
					var preset = element.value;
					element.value = preset;
					Data.options.tower.preset = preset;
					dispPresetForce();
				}

				function onClickAllDef() {
					var t = Tabs.Tower;
					var city = Seed.cities[CAPITAL.id];
					var units = {};
					for (var i = 0; i < all_unit_types.length; i++) {
						var numTroops = getTroopNumbers(city, all_unit_types[i]);
						var unit_max = numTroops.incity + numTroops.indefense;
						if (unit_max > 0) units[all_unit_types[i]] = unit_max;
					}
					if (t.checkSetDefenseBusy) return false;
					t.checkSetDefenseBusy = true;
					set_defense_forces(t.container, city.id, units, function() {
						logit(translate('wall-defenders-updated'));
						Tabs.Tower.checkSetDefenseBusy = false;
						dispDefenseForce();
					});
				}

				function onClickNoDef() {
					var t = Tabs.Tower;
					var city = Seed.cities[CAPITAL.id];
					var units = {};
					if (t.checkSetDefenseBusy) return false;
					t.checkSetDefenseBusy = true;
					set_defense_forces(t.container, city.id, units, function() {
						logit(translate('wall-defenders-updated'));
						Tabs.Tower.checkSetDefenseBusy = false;
						dispDefenseForce();
					});
				}

				function onClickSetDef() {
					var t = Tabs.Tower;
					var city = Seed.cities[CAPITAL.id];
					if (Data.options.tower.preset && Data.options.tower.preset != '-') {
						var found = false;
						for (var i = 0; i < Data.options.wall.presets.length && !found; i++) {
							if (Data.options.tower.preset == Data.options.wall.presets[i].name) {
								var presetUnits = Data.options.wall.presets[i].units;
								var units = {};
								for (var pu in presetUnits) {
									var numTroops = getTroopNumbers(city, pu);
									var unit_max = numTroops.incity + numTroops.indefense;
									if (unit_max < presetUnits[pu] || presetUnits[pu] == -1) units[pu] = unit_max;
									else units[pu] = presetUnits[pu];
								}
								if (t.checkSetDefenseBusy) return false;
								t.checkSetDefenseBusy = true;
								set_defense_forces(t.container, city.id, units, function() {
									logit(translate('wall-defenders-updated'));
									Tabs.Tower.checkSetDefenseBusy = false;
									dispDefenseForce();
								});
								found = true;
							}
						}
					}
				}

				function switchDefense(event) {
					var t = Tabs.Tower;
					var button = event.target;
					var cityId = Seed.cities[CAPITAL.id].id;
					var wallStatus = Seed.cities[CAPITAL.id].defended;
					var numTroops = 0;
					for (var i = 0; i < all_unit_types.length; i++) {
						numTroops += getTroopNumbers(Seed.cities[CAPITAL.id], all_unit_types[i]).indefense;
					}
					if (numTroops == 0) return;
					var targMsg = translate('Switching defense');
					verboseLog(targMsg + ' ' + translate('attempted'));
					var dial = new ModalDialog(t.container, 300, 165, '', false, null);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('Switch defense wall status');
					new MyAjax.switchDefense(cityId, wallStatus, function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('Successfully'));
							actionLog(targMsg);
							button.className = UID[(Seed.cities[CAPITAL.id].defended ? 'btn_off' : 'btn_on')];
							button.value = translate(Seed.cities[CAPITAL.id].defended ? 'Defend' : 'Hiding').toUpperCase();
							dial.destroy();
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
							if (rslt.errmsg)
								dial.getContentDiv().innerHTML = translate('Error while setting defense wall status') + ' : ' + rslt.errmsg;
							else dial.getContentDiv().innerHTML = translate('Error while setting defense wall status');
							dial.allowClose(true);
						}
					});
					var state = Seed.cities[CAPITAL.id].defended;
					button.className = UID[(state ? 'btn_off' : 'btn_on')];
					button.value = translate(state ? 'Defend' : 'Hiding').toUpperCase();
				}
			},

			tabTowerConfig: function() {
				var t = Tabs.Tower;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabTowerConfig']).className = 'selected';
				$(UID['tabTowerConfig']).style.zIndex = 1;
				t.lastSubTab = 'tabTowerConfig';

				t.contentType = 1;
				var m = '<div class="' + UID['title'] + '">' + translate('Tower configuration') + '</div>' + '<div id=' + setUID('tabTower_ConfigBox') + ' class=' + UID['status_ticker'] + ' style="height:355px; max-height:355px; width:540px; max-width:540px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important">' + '<table class=' + UID['table'] + ' width=100% style="color:#000;">' + '	<tr valign=top>' + '		<td><label><input id=' + setUID('tabTower_Alert') + ' type=checkbox /></label></td>' + '		<td colspan=2><label>' + translate('Enable the sentinel tower') + '</label></td>' + '	</tr><tr valign=top>' + '		<td></td><td colspan=2><label>' + translate('Check sentinel reports every ') + '</label>' + '		<input id=' + setUID('tabTower_chkTime') + ' size=1 maxlength=2 type=text value="' + Data.options.tower.delay + '" />&nbsp' + '		<select id=' + setUID('tabTower_chkUnit') + ' size=1>' + '			<option value=1 ' + (Data.options.tower.unit == 1 ? 'selected' : '') + '>' + translate('Seconds') + '</option>' + '			<option value=60 ' + (Data.options.tower.unit == 60 ? 'selected' : '') + '>' + translate('minutes') + '</option>' + '			<option value=3600 ' + (Data.options.tower.unit == 3600 ? 'selected' : '') + '>' + translate('hours') + '</option>' + '		</select>' + '		</td>' + '	</tr><tr valign=top>' + '		<td  style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabTower_NoSpy') + ' type=checkbox /></label></td>' + '		<td colspan=2><label>' + translate('Hide spy alerts') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabTower_Del') + ' type=checkbox /></label></td>' + '		<td colspan=2><label>' + translate('Do not show alerts obsolete since') + ' :</label>' + '		<input id=' + setUID('tabTower_DelTime') + ' size=1 maxlength=2 type=text value="' + Data.options.tower.delete_delay + '" />&nbsp' + '		<select id=' + setUID('tabTower_DelUnit') + ' size=1>' + '			<option value=60 ' + (Data.options.tower.delete_unit == 60 ? 'selected' : '') + '>' + translate('minutes') + '</option>' + '			<option value=3600 ' + (Data.options.tower.delete_unit == 3600 ? 'selected' : '') + '>' + translate('hours') + '</option>' + '			<option value=86400 ' + (Data.options.tower.delete_unit == 86400 ? 'selected' : '') + '>' + translate('days') + '</option>' + '		</select>' + '		</td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabTower_SendMsg') + ' type=checkbox /></label></td>' + '		<td colspan=2><label>' + translate('Send a message to alliance members in case of attack') + '</label></td>' + '	</tr>' + '</table>' + '<br>' + '<table class=' + UID['table'] + ' style="color:#000;">' + '	<tr valign=top>' + '		<td colspan=2><b>' + translate('Sound configuration') + ': </b></td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabTower_Sound') + ' type=checkbox ' + (Data.options.sound.enable_sentinel ? 'CHECKED ' : '') + '/></label></td>' + '		<td><label>' + translate('Play sound on incoming sentinel report') + '</label></td>' + '	</tr><tr valign=top>' + '		<td></td>' + '		<td><table cellpadding=0 cellspacing=0>' + '				<tr valign=top>' + '					<td><label>' + translate('Attack sound file') + '</label></td>' + '					<td><input id=' + setUID('tabTower_File') + ' size=50 maxlength=160 type=text value="' + Data.options.sound.URL_attack + '" />&nbsp</td>' + '					<td><input id=' + setUID('tabTower_Play') + ' type=submit value=Play>' + '						<input id=' + setUID('tabTower_Stop') + ' type=submit value=Stop>' + '						<input id=' + setUID('tabTower_Default') + ' type=submit value=Default>' + '						<input id=' + setUID('tabTower_Test') + ' type=submit value=Test></td>' + '				</tr><tr valign=top>' + '					<td><label>' + translate('Spy sound file') + '</label></td>' + '					<td><input id=' + setUID('tabTower_SFile') + ' size=50 maxlength=160 type=text value="' + Data.options.sound.URL_spy + '" />&nbsp</td>' + '					<td><input id=' + setUID('tabTower_SPlay') + ' type=submit value=Play>' + '						<input id=' + setUID('tabTower_SStop') + ' type=submit value=Stop>' + '						<input id=' + setUID('tabTower_SDefault') + ' type=submit value=Default>' + '						<input id=' + setUID('tabTower_STest') + ' type=submit value=Test></td>' + '				</tr>' + '			</table>' + '		</td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabTower_Repeat') + ' type=checkbox ' + (Data.options.sound.repeat_attack ? 'CHECKED ' : '') + '/></label></td>' + '		<td><label>' + translate('Repeat attack alarm every') + ' </label>' + '			<input id=' + setUID('tabTower_Every') + ' size=2 maxlength=5 type=text value="' + Data.options.sound.attack_rdelay + '" />' + translate('minutes').toLowerCase() + '</td>' + '	</tr><tr valign=top>' + '		<td><label><input id=' + setUID('tabTower_SRepeat') + ' type=checkbox ' + (Data.options.sound.repeat_spy ? 'CHECKED ' : '') + '/></label></td>' + '		<td><label>' + translate('Repeat spy alarm every') + ' </label>' + '			<input id=' + setUID('tabTower_SEvery') + ' size=2 maxlength=5 type=text value="' + Data.options.sound.spy_rdelay + '" />' + translate('minutes').toLowerCase() + '</td>' + '	</tr>' + '</table>' + '</div>';
				$(UID['tabTower_Content']).innerHTML = m;
				togOpt(UID['tabTower_Alert'], Data.options.tower.enabled, setEnable);
				togOpt(UID['tabTower_NoSpy'], Data.options.tower.nospy, setEnableNoSpy);
				togOpt(UID['tabTower_Del'], Data.options.tower.delete_report, setDeleteReport);
				togOpt(UID['tabTower_SendMsg'], Data.options.tower.send_message, setEnableMsg);
				$(UID['tabTower_chkTime']).addEventListener('change', timeChanged, false);
				$(UID['tabTower_chkUnit']).addEventListener('change', unitChanged, false);
				$(UID['tabTower_DelTime']).addEventListener('change', timeDeleteChanged, false);
				$(UID['tabTower_DelUnit']).addEventListener('change', unitDeleteChanged, false);
				$(UID['tabTower_Sound']).addEventListener('change', function(event) {
					Data.options.sound.enable_sentinel = event.target.checked
				}, false);
				$(UID['tabTower_Repeat']).addEventListener('change', function(event) {
					Data.options.sound.repeat_attack = event.target.checked
				}, false);
				$(UID['tabTower_SRepeat']).addEventListener('change', function(event) {
					Data.options.sound.repeat_spy = event.target.checked
				}, false);
				$(UID['tabTower_Every']).addEventListener('change', function(event) {
					Data.options.sound.attack_rdelay = event.target.value
				}, false);
				$(UID['tabTower_SEvery']).addEventListener('change', function(event) {
					Data.options.sound.spy_rdelay = event.target.value
				}, false);

				$(UID['tabTower_File']).addEventListener('change', function() {
					Data.options.sound.URL_attack = $(UID['tabTower_File']).value;
				}, false);
				$(UID['tabTower_Play']).addEventListener('click', function() {
					playSound('attack')
				}, false);
				$(UID['tabTower_Stop']).addEventListener('click', function() {
					stopSound('attack')
				}, false);
				$(UID['tabTower_Default']).addEventListener('click', function() {
					$(UID['tabTower_File']).value = SoundPlayer.DEFAULT_SOUND_URL.attack;
					Data.options.sound.URL_attack = SoundPlayer.DEFAULT_SOUND_URL.attack;
					playSound('attack');
				}, false);
				$(UID['tabTower_Test']).addEventListener('click', testAlarmReport, false);
				$(UID['tabTower_Stop']).disabled = true;

				$(UID['tabTower_SFile']).addEventListener('change', function() {
					Data.options.sound.URL_spy = $(UID['tabTower_SFile']).value;
				}, false);
				$(UID['tabTower_SPlay']).addEventListener('click', function() {
					playSound('spy')
				}, false);
				$(UID['tabTower_SStop']).addEventListener('click', function() {
					stopSound('spy')
				}, false);
				$(UID['tabTower_SDefault']).addEventListener('click', function() {
					$(UID['tabTower_SFile']).value = SoundPlayer.DEFAULT_SOUND_URL.spy;
					Data.options.sound.URL_spy = SoundPlayer.DEFAULT_SOUND_URL.spy;
					playSound('spy');
				}, false);
				$(UID['tabTower_STest']).addEventListener('click', testSpyReport, false);
				$(UID['tabTower_SStop']).disabled = true;

				function playSound(type) {
					var t = Tabs.Tower;
					try {
						if (type == 'attack')
							$(UID['tabTower_Stop']).disabled = false;
						else $(UID['tabTower_SStop']).disabled = false;
					} catch (e) {}
					SoundPlayer.PlaySound(type, true);
				}

				function setEnable(onOff) {
					var t = Tabs.Tower;
					Data.options.tower.enabled = onOff;
				}

				function setEnableMsg(onOff) {
					var t = Tabs.Tower;
					Data.options.tower.send_message = onOff;
				}

				function setEnableNoSpy(onOff) {
					var t = Tabs.Tower;
					Data.options.tower.nospy = onOff;
					t.printTab();
				}

				function setDeleteReport(onOff) {
					var t = Tabs.Tower;
					Data.options.tower.delete_report = onOff;
					t.deleteTick();
				}

				function stopSound(type) {
					var t = Tabs.Tower;
					SoundPlayer.StopSound(type);
					if (type == 'attack')
						$(UID['tabTower_Stop']).disabled = true;
					else $(UID['tabTower_SStop']).disabled = true;
				}

				function testAlarmReport() {
					var t = Tabs.Tower;
					var test_units = cloneProps(Data.options.attacks.units[1]);
					var test_troupes = '';
					var results = [];
					for (var p in test_units) {
						if (test_units[p] > 0) {
							var unit = numf(test_units[p], ' ') + ' ' + translate(p);
							results.push(unit);
						}
					}
					if (results.length > 0) test_troups = results.join(', ');
					var now = toNum(new Date().getTime());
					var test_date = new Date(now + 155000);
					var msg = {
						id: 1,
						type: 0,
						arrive_at: test_date,
						alliance: 'Tower alarm test',
						x: 0,
						y: 0,
						units: test_units,
						troups: test_troups,
						general: 0,
						op: (Seed.cities[WATER_OUTPOST.id] ? Seed.cities[WATER_OUTPOST.id].id : 0)
					};
					Data.options.messages_tower.push(msg);
					t._addTab(msg, false);
				}

				function testSpyReport() {
					var t = Tabs.Tower;
					var test_units = {
						spy: 1
					};
					var test_troups = '1 ' + translate('spy');
					var now = toNum(new Date().getTime());
					var test_date = new Date(now + 105000);
					var msg = {
						id: 1,
						type: 1,
						arrive_at: test_date,
						alliance: 'Tower alarm test',
						x: 0,
						y: 0,
						units: test_units,
						troups: test_troups,
						general: 0,
						op: (Seed.cities[CAPITAL.id] ? Seed.cities[CAPITAL.id].id : 0)
					};
					Data.options.messages_tower.push(msg);
					t._addTab(msg, false);
				}

				function timeChanged(event) {
					var t = Tabs.Tower;
					var etime = $(UID['tabTower_chkTime']);
					var time = toNum(etime.value);
					etime.value = time;
					Data.options.tower.delay = time;
				}

				function timeDeleteChanged(event) {
					var t = Tabs.Tower;
					var etime = $(UID['tabTower_DelTime']);
					var time = toNum(etime.value);
					etime.value = time;
					Data.options.tower.delete_delay = time;
					t.deleteTick();
				}

				function togOpt(checkboxId, optionVar, callEnable, callIsAvailable) {
					var t = Tabs.Tower;
					var checkbox = $(checkboxId);
					if (callIsAvailable && callIsAvailable() == false) {
						checkbox.disabled = true;
						return;
					}
					if (optionVar) checkbox.checked = true;
					checkbox.addEventListener('change', new eventToggle(checkboxId, optionVar, callEnable).handler, false);

					function eventToggle(checkboxId, optionVar, callOnChange) {
						this.handler = handler;
						var optVar = optionVar;
						var callback = callOnChange;

						function handler(event) {
							optVar = this.checked;
							if (callback != null)
								callback(this.checked);
						}
					}
				}

				function unitChanged(event) {
					var t = Tabs.Tower;
					var eunit = $(UID['tabTower_chkUnit']);
					var unit = toNum(eunit.value);
					eunit.value = unit;
					Data.options.tower.unit = unit;
				}

				function unitDeleteChanged(event) {
					var t = Tabs.Tower;
					var eunit = $(UID['tabTower_DelUnit']);
					var unit = toNum(eunit.value);
					eunit.value = unit;
					Data.options.tower.delete_unit = unit;
					t.deleteTick();
				}
			},

			tabTowerMessage: function() {
				var t = Tabs.Tower;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabTowerMessage']).className = 'selected';
				$(UID['tabTowerMessage']).style.zIndex = 1;
				t.lastSubTab = 'tabTowerMessage';

				t.contentType = 2;
				var m = '<div class="' + UID['title'] + '">' + translate('Message configuration') + '</div>' + '<div id=' + setUID('tabTower_MsgBox') + ' class=' + UID['status_ticker'] + ' style="height:355px; max-height:355px; width:540px; max-width:540px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important">' + '<table class=' + UID['table'] + ' width=100% style="color:#000;">' + '	<tr valign=top>' + '		<td><label>' + translate('Subject') + ' :</label></td>' + '		<td><input id=' + setUID('tabTower_subject') + ' size=50 maxlength=160 type=text value="' + Data.options.tower.msg_subject + '" /></td>' + '	</tr><tr valign=top>' + '		<td><label>' + translate('Message') + ' :</label></td>' + '		<td><textarea id=' + setUID('tabTower_body') + ' cols="60" rows="10" wrap="PHYSICAL">' + Data.options.tower.msg_body + '</textarea></td>' + '	</tr>' + '</table>' + '<br>' + '<table class=' + UID['table'] + ' style="color:#000;">' + '	<tr valign=top>' + '		<td><b>' + translate('Parameters') + ' :</b></td>' + '	</tr><tr valign=top>' + '		<td><label>%1 = ' + translate('Ennemy name and alliance') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label>%2 = ' + translate('Ennemy coordinates') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label>%3 = ' + translate('Attack forces') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label>%4 = ' + translate('Attack arrival time') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label>%5 = ' + translate('My name') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label>%6 = ' + translate('My city/OP name where the attack is coming') + '</label></td>' + '	</tr><tr valign=top>' + '		<td><label>%7 = ' + translate('My city/OP coordinates') + '</label></td>' + '	</tr>' + '</table>' + '</div>';
				$(UID['tabTower_Content']).innerHTML = m;
				$(UID['tabTower_subject']).addEventListener('change', function() {
					Data.options.tower.msg_subject = $(UID['tabTower_subject']).value
				}, false);
				$(UID['tabTower_body']).addEventListener('change', function() {
					Data.options.tower.msg_body = $(UID['tabTower_body']).value
				}, false);
			},

			onUnload: function() {
				var t = Tabs.Tower;
				logit('===============  Tabs.Tower.onUnload');
			},
			hide: function() {
				var t = Tabs.Tower;
				Data.options.tower.current_tab = t.contentType;
				clearInterval(t.intervalWarning);
			},
			show: function() {
				var t = Tabs.Tower;
				t.intervalWarning = setInterval(t.displayWarning, 1000);
				switch (t.contentType || 0) {
					case 0:
						t.tabTowerWall();
						break;
					case 1:
						t.tabTowerConfig();
						break;
					case 2:
						t.tabTowerMessage();
						break;
				}
			},
			displayWarning: function() {
				var t = Tabs.Tower;
				var m = SoundPlayer.alertString.replace('&incoming_spy&', (SoundPlayer.getFirstAlert()).spy).replace('&incoming_attack&', (SoundPlayer.getFirstAlert()).attack);
				$(UID['tabTower_Warning']).innerHTML = m;
			},
			printTab: function() {
				var t = Tabs.Tower;
				t.logTab.innerHTML = '';
				t._addTab('', true);
				for (var i = 0; i < Data.options.messages_tower.length; i++)
					t._addTab(Data.options.messages_tower[i], false);
			},
			_addTab: function(msg, head) {
				var t = Tabs.Tower;
				if (!head && Data.options.tower.nospy && msg.type == 1)
					return;
				var rows = t.logTab.getElementsByTagName('tr');
				var rowCount = rows.length;
				var row = t.logTab.insertRow((head == true ? 0 : 1));
				row.vAlign = 'top';
				if (head) {
					row.id = 0;
					row.className = UID['row_headers'];
				} else {
					if (rowCount % 2 == 1) row.style.backgroundColor = "White";
					else row.style.backgroundColor = "rgb(239,239,224)";
					row.id = msg.id;
				}
				var cell;
				var txt;
				for (var i = 0; i < 5; i++) {
					cell = row.insertCell(i);
					if (head) {
						switch (i) {
							case 0:
								txt = translate('Type');
								break;
							case 1:
								txt = translate('Arrival time');
								break;
							case 2:
								txt = translate('Attacker');
								break;
							case 3:
								txt = translate('Alliance');
								break;
							default:
								txt = translate('Troops');
								break;
						}
					} else {
						switch (i) {
							case 0:
								txt = (msg.type == 0 ? translate('Attack') : translate('Spy'));
								if (toNum(msg.op) != 0) txt = txt + getCityType(toNum(msg.op));
								break;
							case 1:
								if (msg.arrive_at != 0) txt = new Date(msg.arrive_at).formatDate() + ' ' + new Date(msg.arrive_at).formatTime();
								else txt = '';
								break;
							case 2:
								if (msg.x != -1) txt = msg.x + ',' + msg.y;
								else txt = '';
								break;
							case 3:
								txt = msg.alliance;
								break;
							default:
								txt = msg.troups;
								break;
						}
					}
					cell.innerHTML = txt;
					if (i > 2) cell.width = '30%';
					else if (i == 2) cell.width = '10%';
					else cell.width = '15%';
					if (head) {
						cell.style.fontWeight = 'bold';
					} else {
						cell.style.fontWeight = 'normal';
						cell.style.color = 'Black';
					}
				}
				if (!head && msg.type == 0 && msg.op != 0) {
					if ($(UID['goto_reinforcement'])) {
						$(UID['goto_reinforcement']).addEventListener('click', function(event) {
							var cityId = $(UID['goto_reinforcement']).getAttribute('ref');
							if (toNum(cityId) != 0) Data.options.alliance.reinforce_id = cityId;
							var t = tabManager;
							for (k in t.tabList)
								if (t.tabList[k].name == 'Alliance') {
									var newTab = t.tabList[k];
									break;
								}
							if (t.currentTab.name != newTab.name) {
								t.setTabStyle($(newTab.uid), true);
								t.setTabStyle($(t.currentTab.uid), false);
								t.currentTab.obj.hide();
								t.currentTab.div.style.display = 'none';
								t.currentTab = newTab;
								newTab.div.style.display = 'block';
								Data.options.currentTab = newTab.name;
							}
							newTab.obj.show();
							Tabs.Alliance.tabAllianceReinforcement();
						}, false);
					}
				}
			},
			removeRow: function(msg) {
				var t = Tabs.Tower;
				for (var i = 0; i < t.logTab.rows.length; i++) {
					if (t.logTab.rows[i].id == msg.id) {
						t.logTab.deleteRow(i);
						break;
					}
				}
			},
			deleteTick: function() {
				var t = Tabs.Tower;
				clearTimeout(t.deleteTimer);
				if (Data.options.tower.delete_report) {
					var d;
					for (var i = Data.options.messages_tower.length - 1; i >= 0; i--) {
						d = Date.parse(Data.options.messages_tower[i].arrive_at) / 1000;
						var now = toNum(serverTime());
						var diff = now - d;
						if (diff >= Data.options.tower.delete_delay * Data.options.tower.delete_unit) {
							t.removeRow(Data.options.messages_tower[i]);
							Data.options.messages_tower.splice(i, 1);
						}
					}
					t.deleteTimer = setTimeout(t.deleteTick, Data.options.tower.delete_delay * Data.options.tower.delete_unit * 1000);
				}
			},
			gotAlarmReport: function(rpt_alm, msgid) {
				var t = Tabs.Tower;
				var msg = {
					id: msgid,
					type: 0,
					arrive_at: 0,
					alliance: '',
					x: 0,
					y: 0,
					units: {},
					troups: '',
					general: 0,
					op: 0
				};
				if (!rpt_alm) return;
				if (rpt_alm.report.warnings) {
					var warn = rpt_alm.report.warnings;
					if (warn.attacker_name) msg.alliance = warn.attacker_name;
					if (warn.attacker_title && warn.attacker_title.alliance) {
						if (msg.alliance) msg.alliance = msg.alliance + ' / ' + warn.attacker_title.alliance;
						else msg.alliance = warn.attacker_title.alliance;
					}
					if (warn.outpost_attack) msg.op = warn.march_incoming;
					if (warn.attacker_coords) {
						msg.x = warn.attacker_coords.x;
						msg.y = warn.attacker_coords.y;
					}
					if (warn.march_type && warn.march_type == 'SpyMarch') {
						msg.type = 1;
					}
					if (warn.general_rank) msg.general = warn.general_rank;
					if (warn.attacker_units) {
						var results = [];
						for (var tr in warn.attacker_units) {
							var unit = numf(warn.attacker_units[tr], ' ') + ' ' + translate(tr);
							results.push(unit);
						}
						if (results.length > 0) msg.troups = results.join(', ');
						msg.units = cloneProps(warn.attacker_units);
					}
					if (warn.march_arrival_time) {
						msg.arrive_at = t.getTimeAlarm(warn.march_arrival_time);
						var d = Date.parse(msg.arrive_at) / 1000;
						if (toNum(serverTime()) - d >= Data.options.tower.delete_delay * Data.options.tower.delete_unit)
							return;
					}
				}
				var found = false;
				for (var i = 0; i < Data.options.messages_tower.length && !found; i++) {
					if (Data.options.messages_tower[i].id == msgid) found = true;
				}
				/*
				 * logit ('Message : '+ msg.id + ', type '+msg.type+', arrive_at
				 * '+msg.arrive_at+', alliance '+msg.alliance+', at
				 * '+msg.x+','+msg.y);
				 */
				if (!found) {
					Data.options.messages_tower.push(msg);
					t._addTab(msg, false);
				}
			},
			getTimeAlarm: function(str) {
				var result = 0;
				if (str.length >= 19) {
					var year = toNum(str.substr(0, 4));
					var month = toNum(str.substr(5, 2));
					if (month == 0) month = toNum(str.substr(6, 1));
					var day = toNum(str.substr(8, 2));
					if (day == 0) day = toNum(str.substr(9, 1));
					var hours = toNum(str.substr(11, 2));
					if (hours == 0) hours = toNum(str.substr(12, 1));
					var minutes = toNum(str.substr(14, 2));
					if (minutes == 0) minutes = toNum(str.substr(15, 1));
					var seconds = toNum(str.substr(17, 2));
					if (seconds == 0) seconds = toNum(str.substr(18, 1));
					result = new Date(Date.UTC(year, month - 1, day, hours, minutes, seconds));
				}
				return result;
			}
		}
		/**
		 * ****************************** Tower Tab
		 * *********************************
		 */


		/**
		 * ****************************** Wall features Tab
		 * *************************
		 */
		Tabs.Wall = {
			tabOrder: WALL_TAB_ORDER,
			tabLabel: 'Wall',
			tabDisabled: !WALL_TAB_ENABLE,
			container: null,
			contentType: 0,
			/*
			 * 0 = preset list, 1 = Preset definition, sool : 2 = Dragon Scales
			 * and Armors, 3 = Auto wall
			 */
			totalForces: 0,
			lastSubTab: 'tabWallManagement',
			checkSetDefenseBusy: false,

			init: function(div) {
				var t = Tabs.Wall;

				t.container = div;
				var m = '<div class=' + UID['title'] + '>' + translate('wall-choose-defenders') + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabWallManagement') + '>' + translate('Wall management') + '</a></li>' + '	<li class="tab first"><a id=' + setUID('tabAutoWallManagement') + '>' + translate('Auto') + ' ' + translate('Wall') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabWallSetDefense') + '>' + translate('wall-manage-defense') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabDragonManagement') + '>' + translate('Dragons management') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabWall_Content') + ' style="padding-top:0px; height:655px; max-height:655px; overflow-y:auto; width:540px; max-width:540px; overflow-x:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabWallManagement']).addEventListener('click', t.tabWallManagement, false);
				$(UID['tabWallSetDefense']).addEventListener('click', t.tabWallSetDefense, false);
				$(UID['tabDragonManagement']).addEventListener('click', t.tabDragonManagement, false);
				$(UID['tabAutoWallManagement']).addEventListener('click', t.tabAutoWallManagement, false);
				
				window.addEventListener('unload', t.onUnload, false);
				t.contentType = toNum(Data.options.wall.current_tab);
				t.show();
			},
			show: function() {
				var t = Tabs.Wall;
				switch (toNum(t.contentType)) {
					case 0:
						t.tabWallManagement();
						break;
					case 1:
						t.tabWallSetDefense();
						break;
					case 2:
						t.tabDragonManagement();
						break;
					case 3:
						t.tabAutoWallManagement();
						break;
				}
			},
			onUnload: function() {
				var t = Tabs.Wall;
				logit('===============  Tabs.Wall.onUnload');
				Data.options.wall.current_tab = t.contentType;
			},
			hide: function() {},


			/** WALL MANAGEMENT SUB-TAB ** */
			tabWallManagement: function() {
				var t = Tabs.Wall;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabWallManagement']).className = 'selected';
				$(UID['tabWallManagement']).style.zIndex = 1;
				t.lastSubTab = 'tabWallManagement';

				t.contentType = 0;

				var m = '<div id=' + setUID('tabWall_Results') + ' style="height:640px">' + '	<div class=' + UID['title'] + '>' + translate('Wall management') + '</div>' + '	<div id=' + setUID('tabWall_ResultList') + ' class=' + UID['status_ticker'] + ' style="height:600px; max-height:600px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabWall_Content']).innerHTML = m;

				var el = [];
				var wallStatus = translate((Seed.cities[CAPITAL.id].defended) ? 'Defend' : 'Hiding').toUpperCase();
				var m = '<table class=' + UID['table'] + ' style="margin-top:3px" width=100%>' + '	<tr valign=top>' + '		<td width=25%><label><input id=' + setUID('tabWall_AllDef') + ' type=button value="' + translate('Troops max') + '" /></label></td>' + '		<td width=25%><label><input id=' + setUID('tabWall_NoDef') + ' type=button value="' + translate('remove-all') + '" /></label></td>' + '		<td width=50% align=right><b>' + translate('wall-defense-strategy') + ':</b>' + '		&nbsp <input id=' + setUID('tabWall_setWallStat') + ' type=button value=' + wallStatus + ' class=' + UID[(Seed.cities[CAPITAL.id].defended ? 'btn_off' : 'btn_on')] + '></input></td>' + '	</tr>' + '</table><br>' + dispUnits(CAPITAL.id) + '<br><table class="' + UID['table_targets'] + '">' + '	<tr class=' + UID['row_headers'] + ' cellpadding=1 >' + '		<td width=15%>' + translate('Preset') + '</td>' + '		<td width=55%>' + translate('Troops') + '</td>' + '	</tr>';
				var row_style;
				for (var i = 0; i < Data.options.wall.presets.length; i++) {
					if (i % 2 == 1) row_style = "White";
					else row_style = "rgb(239,239,224)";
					m += '<tr valign=middle style="border-bottom: 1px solid #898989; background-color:' + row_style + '"><td width=15%>' + Data.options.wall.presets[i].name + '</td>' + '	<td align=left width=55%>' + getTroops(Data.options.wall.presets[i].units, ' ') + ', ' + translate(Data.options.wall.presets[i].scales) + ',' + translate(Data.options.wall.presets[i].armor) + '</td>' + '	<td align=center width=30%>' + '      <input id=' + setUID('tabWall_SetDefense_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Set Def') + '" />&nbsp' + '		<input id=' + setUID('tabWall_Edit_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Edit') + '" />&nbsp' + '		<input id=' + setUID('tabWall_Delete_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_red'] + '" style="width:auto !important;" type=submit value=" X " /></td>' + '</tr>';
					el.push(UID['tabWall_SetDefense_' + i]);
				}
				$(UID['tabWall_ResultList']).innerHTML = m + '</table>';
				$(UID['tabWall_AllDef']).addEventListener('click', onClickAllDef, false);
				$(UID['tabWall_NoDef']).addEventListener('click', onClickNoDef, false);
				$(UID['tabWall_setWallStat']).addEventListener('click', switchDefense, false);
				for (var i = 0; i < el.length; i++) {
					var butSetDef = $(UID['tabWall_SetDefense_' + i]);
					var butEdit = $(UID['tabWall_Edit_' + i]);
					var butDelete = $(UID['tabWall_Delete_' + i]);
					butSetDef.addEventListener('click', onClickSetDef, false);
					butEdit.addEventListener('click', onClickEdit, false);
					butDelete.addEventListener('click', onClickDelete, false);
				}

				function dispUnits(cityIdx) {
					var city = Seed.cities[cityIdx];
					var m = '<table class=' + UID['row_style'] + ' style="margin-top:3px" width=100%>' + '	<tr class=' + UID['row_headers'] + ' align=center>' + '		<td width=40%>' + translate('Troops') + '</td>' + '		<td width=15%>' + translate('Total') + '</td>' + '		<td width=15%>' + translate('Defense') + '</td>' + '		<td width=15%>' + translate('In city') + '</td>' + '		<td width=15%>' + translate('In march') + '</td>' + '	</tr>';
					for (var i = 0; i < all_unit_types.length; i++) {
						var numTroops = getTroopNumbers(city, all_unit_types[i]);
						m += '	<tr valign=top>' + '		<td class=right width=40%>' + translate(all_unit_types[i]) + ':</td>' + '		<td align=right width=15%>' + numf(numTroops.total, ' ') + '</td>' + '		<td align=right width=15%>' + ((numTroops.indefense > 0) ? '<b>' + numf(numTroops.indefense, ' ') + '</b>' : numf(numTroops.indefense, ' ')) + '</td>' + '		<td align=right width=15%>' + numf(numTroops.incity, ' ') + '</td>' + '		<td align=right width=15%>' + (numTroops.marches ? '&nbsp;+&nbsp;<b>' + numf(numTroops.marches, ' ') + '</b>' : '') + '</td>' + '	</tr>';
					}
					m += '</table>';
					return m;
				}

				function onClickAllDef() {
					var t = Tabs.Wall;
					var city = Seed.cities[CAPITAL.id];
					var units = {};
					for (var i = 0; i < all_unit_types.length; i++) {
						var numTroops = getTroopNumbers(city, all_unit_types[i]);
						var unit_max = numTroops.incity + numTroops.indefense;
						if (unit_max > 0) units[all_unit_types[i]] = unit_max;
					}
					if (t.checkSetDefenseBusy) return false;
					t.checkSetDefenseBusy = true;
					set_defense_forces(t.container, city.id, units, function() {
						logit(translate('wall-defenders-updated'));
						Tabs.Wall.checkSetDefenseBusy = false;
						t.tabWallManagement();
					});
				}

				function onClickNoDef() {
					var t = Tabs.Wall;
					var city = Seed.cities[CAPITAL.id];
					var units = {};
					if (t.checkSetDefenseBusy) return false;
					t.checkSetDefenseBusy = true;
					set_defense_forces(t.container, city.id, units, function() {
						logit(translate('wall-defenders-updated'));
						Tabs.Wall.checkSetDefenseBusy = false;
						t.tabWallManagement();
					});
				}

				function onClickSetDef(event) {
					var t = Tabs.Wall;
					var city = Seed.cities[CAPITAL.id];
					var n = toNum(event.target.getAttribute('ref'));
					var presetUnits = Data.options.wall.presets[n].units;
					var units = {};
					for (var pu in presetUnits) {
						var numTroops = getTroopNumbers(city, pu);
						var unit_max = numTroops.incity + numTroops.indefense;
						if (unit_max < presetUnits[pu] || presetUnits[pu] == -1) units[pu] = unit_max;
						else units[pu] = presetUnits[pu];
					}
					if (t.checkSetDefenseBusy) return false;
					t.checkSetDefenseBusy = true;
					set_defense_forces(t.container, city.id, units, function() {
						logit(translate('wall-defenders-updated'));
						Tabs.Wall.checkSetDefenseBusy = false;
						new MyAjax.setCustomization('GreatDragon', Data.options.wall.presets[n].armor, Data.options.wall.presets[n].scales, function(rslt) {});
						t.tabWallManagement();
					});
				}

				function onClickEdit(event) {
					var t = Tabs.Wall;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.wall.preset.name = Data.options.wall.presets[n].name;
					Data.options.wall.preset.units = cloneProps(Data.options.wall.presets[n].units);
					Data.options.wall.preset.scales = Data.options.wall.presets[n].scales;
					Data.options.wall.preset.armor = Data.options.wall.presets[n].armor;
					t.tabWallSetDefense();
				}

				function onClickDelete(event) {
					var t = Tabs.Wall;
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.wall.presets.splice(n, 1);
					t.tabWallManagement();
				}

				function switchDefense(event) {
					var t = Tabs.Wall;
					var button = event.target;
					var cityId = Seed.cities[CAPITAL.id].id;
					var wallStatus = Seed.cities[CAPITAL.id].defended;
					var numTroops = 0;
					for (var i = 0; i < all_unit_types.length; i++) {
						numTroops += getTroopNumbers(Seed.cities[CAPITAL.id], all_unit_types[i]).indefense;
					}
					if (numTroops == 0) return;
					var targMsg = translate('Switching defense');
					verboseLog(targMsg + ' ' + translate('attempted'));
					var dial = new ModalDialog(t.container, 300, 165, '', false, null);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('Switch defense wall status');
					new MyAjax.switchDefense(cityId, wallStatus, function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('Successfully'));
							actionLog(targMsg);
							button.className = UID[(Seed.cities[CAPITAL.id].defended ? 'btn_off' : 'btn_on')];
							button.value = translate(Seed.cities[CAPITAL.id].defended ? 'Defend' : 'Hiding').toUpperCase();
							dial.destroy();
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
							if (rslt.errmsg)
								dial.getContentDiv().innerHTML = translate('Error while setting defense wall status') + ' : ' + rslt.errmsg;
							else dial.getContentDiv().innerHTML = translate('Error while setting defense wall status');
							dial.allowClose(true);
						}
					});
					var state = Seed.cities[CAPITAL.id].defended;
					button.className = UID[(state ? 'btn_off' : 'btn_on')];
					button.value = translate(state ? 'Defend' : 'Hiding').toUpperCase();
				}
			},

			/** AUTO WALL SUB-TAB ** */
			tabAutoWallManagement: function() {
				var t = Tabs.Wall;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabAutoWallManagement']).className = 'selected';
				$(UID['tabAutoWallManagement']).style.zIndex = 1;
				t.lastSubTab = 'tabAutoWallManagement';
				t.contentType = 3;

				var m = '<div id=' + setUID('tabAutoWall_Results') + ' style="height:570px">' 
						+ '	<div class=' + UID['title'] + '>' + translate('Config') + '</div>' 
						+ '	<table class=' + UID['table'] + ' width=100%>' 
						+ '	<tr>'
						+ '		<td width=33% class=right><input type=checkbox id=' + setUID('tabAutoWallEnable') + (Data.options.wall.auto.enable ? ' checked' : '') + ' />' + '</td>' 
						+ '		<td align=left colspan=2>' + translate('Enabled') + '</td>'
						+ '	</tr>'
						+ '	<tr>'
						+ '		<td width=33% class=right><input type=checkbox id=' + setUID('tabAutoWallHideTroopEndAlert') + (Data.options.wall.auto.hide_troop_after_last ? ' checked' : '') + ' />' + '</td>' 
						+ '		<td align=left colspan=2>' + translate('Hide troops at end of alert') + '</td>'
						+ '	</tr>'
						+ ' </table>'
						+ ' <div class=' + UID['subtitle'] + '>' + translate('spies') + '</div>'	
						+ '	<table class=' + UID['table'] + ' width=100%>' 
						+ '	<tr>'
						+ '		<td width=33% class=right><input type=checkbox id=' + setUID('tabAutoWallSpyUseTruce') + (Data.options.wall.auto.spy.use_truce ? ' checked' : '') + ' />' + '</td>' 
						+ '		<td align=left colspan=2>' + translate('Use') + '&nbsp;' + translate('momentarytruce') + '</td>'
						+ '	</tr>'
						+ '	<tr>'
						+ '		<td width=33% class=right>&lt; 100</td>' 
						+ '		<td width=33% align=left>' + getPresetList('spy', 0, Data.options.wall.auto.spy.preset[0]) + '</td>'
						+ '		<td width=34% align=left>' + displayTroops(Data.options.wall.auto.spy.preset[0], 0, 'spy') + '</td>'
						+ '	</tr>'
						+ '	<tr>'
						+ '		<td width=33% class=right>100 &lt; 1 000</td>' 
						+ '		<td width=33% align=left>' + getPresetList('spy', 1, Data.options.wall.auto.spy.preset[1]) + '</td>'
						+ '		<td width=34% align=left>' + displayTroops(Data.options.wall.auto.spy.preset[1], 1, 'spy') + '</td>'
						+ '	</tr>'
						+ '	<tr>'
						+ '		<td width=33% class=right>1000 &lt; 5 000</td>' 
						+ '		<td width=33% align=left>' + getPresetList('spy', 2, Data.options.wall.auto.spy.preset[2]) + '</td>'
						+ '		<td width=34% align=left>' + displayTroops(Data.options.wall.auto.spy.preset[2], 2, 'spy') + '</td>'
						+ '	</tr>'
						+ '	<tr>'
						+ '		<td width=33% class=right>5 000 &lt; 10 000</td>' 
						+ '		<td width=33% align=left>' + getPresetList('spy', 3, Data.options.wall.auto.spy.preset[3]) + '</td>'
						+ '		<td width=34% align=left>' + displayTroops(Data.options.wall.auto.spy.preset[3], 3, 'spy') + '</td>'
						+ '	</tr>'
						+ '	<tr>'
						+ '		<td width=33% class=right>&gt; 10 000</td>' 
						+ '		<td width=33% align=left>' + getPresetList('spy', 4, Data.options.wall.auto.spy.preset[4]) + '</td>'
						+ '		<td width=34% align=left>' + displayTroops(Data.options.wall.auto.spy.preset[4], 4, 'spy') + '</td>'
						+ '	</tr>'
						+ '	</table>'
						+ '<div class=' + UID['subtitle'] + '>' + translate('Attack') + '</div>'
						+ '	<table class=' + UID['table'] + ' width=100%>' 
						+ '	<tr>'
						+ '		<td width=33% class=right><input type=checkbox id=' + setUID('tabAutoWallAttackUseTruce') + (Data.options.wall.auto.attack.use_truce ? ' checked' : '') + ' />' + '</td>' 
						+ '		<td align=left colspan=2>' + translate('Use') + '&nbsp;' + translate('momentarytruce') + '</td>'
						+ '	</tr>'
						+ '	<tr>'
						+ '		<td width=33% class=right><input type=checkbox id=' + setUID('tabAutoWallAttackHideMulti') + (Data.options.wall.auto.attack.hide_troop_on_multi_attack ? ' checked' : '') + ' />' + '</td>' 
						+ '		<td align=left colspan=2>' + translate('Hide troops on multi-attack') + '</td>'
						+ '	</tr>'
						+ '	<tr>'
						+ '		<td width=33% class=right>' + translate('Use') + '</td>' 
						+ '		<td width=33% align=left>' + getPresetList('attack', 0, Data.options.wall.auto.attack.preset_default) + '</td>'
						+ '		<td width=34% align=left>' + displayTroops(Data.options.wall.auto.attack.preset_default, 0, 'attack') + '</td>'
						+ '	</tr>'
						+ ' </table>'
						+ '</div>';

				$(UID['tabWall_Content']).innerHTML = m;
				
				$(UID['tabAutoWallEnable']).addEventListener('click', function(event) {
					Data.options.wall.auto.enable = event.target.checked;
				}, false);
				$(UID['tabAutoWallHideTroopEndAlert']).addEventListener('click', function(event) {
					Data.options.wall.auto.hide_troop_after_last = event.target.checked;
				}, false);
				$(UID['tabAutoWallAttackUseTruce']).addEventListener('click', function(event) {
					Data.options.wall.auto.attack.use_truce = event.target.checked;
				}, false);
				$(UID['tabAutoWallSpyUseTruce']).addEventListener('click', function(event) {
					Data.options.wall.auto.spy.use_truce = event.target.checked;
				}, false);
				$(UID['tabAutoWallAttackHideMulti']).addEventListener('click', function(event) {
					Data.options.wall.auto.attack.hide_troop_on_multi_attack = event.target.checked;
				}, false);
				$(UID['tabAutoWall_SelBoxPreset_attack_0']).addEventListener('change', function(event) {
					Data.options.wall.auto.attack.preset_default = $(UID['tabAutoWall_SelBoxPreset_attack_0']).options[$(UID['tabAutoWall_SelBoxPreset_attack_0']).selectedIndex].value;
					$(UID['tabAutoWall_SelBoxPreset_Troop_attack_0']).innerHTML = getTroops(Data.options.wall.presets[Data.options.wall.auto.attack.preset_default].units, ' ');
				}, false);
				$(UID['tabAutoWall_SelBoxPreset_spy_0']).addEventListener('change', function(event) {
					Data.options.wall.auto.spy.preset[0] = $(UID['tabAutoWall_SelBoxPreset_spy_0']).options[$(UID['tabAutoWall_SelBoxPreset_spy_0']).selectedIndex].value;
					$(UID['tabAutoWall_SelBoxPreset_Troop_spy_0']).update(getTroops(Data.options.wall.presets[Data.options.wall.auto.spy.preset[0]].units, ' '));
				}, false);
				$(UID['tabAutoWall_SelBoxPreset_spy_1']).addEventListener('change', function(event) {
					Data.options.wall.auto.spy.preset[1] = $(UID['tabAutoWall_SelBoxPreset_spy_1']).options[$(UID['tabAutoWall_SelBoxPreset_spy_1']).selectedIndex].value;
					$(UID['tabAutoWall_SelBoxPreset_Troop_spy_1']).update(getTroops(Data.options.wall.presets[Data.options.wall.auto.spy.preset[1]].units, ' '));
				}, false);
				$(UID['tabAutoWall_SelBoxPreset_spy_2']).addEventListener('change', function(event) {
					Data.options.wall.auto.spy.preset[2] = $(UID['tabAutoWall_SelBoxPreset_spy_2']).options[$(UID['tabAutoWall_SelBoxPreset_spy_2']).selectedIndex].value;
					$(UID['tabAutoWall_SelBoxPreset_Troop_spy_2']).update(getTroops(Data.options.wall.presets[Data.options.wall.auto.spy.preset[2]].units, ' '));
				}, false);
				$(UID['tabAutoWall_SelBoxPreset_spy_3']).addEventListener('change', function(event) {
					Data.options.wall.auto.spy.preset[3] = $(UID['tabAutoWall_SelBoxPreset_spy_3']).options[$(UID['tabAutoWall_SelBoxPreset_spy_3']).selectedIndex].value;
					$(UID['tabAutoWall_SelBoxPreset_Troop_spy_3']).update(getTroops(Data.options.wall.presets[Data.options.wall.auto.spy.preset[3]].units, ' '));
				}, false);
				$(UID['tabAutoWall_SelBoxPreset_spy_4']).addEventListener('change', function(event) {
					Data.options.wall.auto.spy.preset[4] = $(UID['tabAutoWall_SelBoxPreset_spy_4']).options[$(UID['tabAutoWall_SelBoxPreset_spy_4']).selectedIndex].value;
					$(UID['tabAutoWall_SelBoxPreset_Troop_spy_4']).update(getTroops(Data.options.wall.presets[Data.options.wall.auto.spy.preset[4]].units, ' '));
				}, false);
				
				function getPresetList(type, nb, def) {
					var t = Tabs.Wall;
					var m = '<select id=' + setUID('tabAutoWall_SelBoxPreset_'+type+'_'+nb) + '>';
					if (Data.options.wall.presets && Data.options.wall.presets.length > 0) {
						for (var i = 0; i < Data.options.wall.presets.length; i++) {
							m += '<option value="' + i + '" ' + (def == i ? 'selected' : '') + '>' + Data.options.wall.presets[i].name + '</option>';
						}
					}
					m += '<option value="-" ' + (Data.options.tower.preset == "-" ? 'selected' : '') + '>' + translate('None') + '</option>';
					m += '</select>';
					return m;
				}
				
				function displayTroops(id, nb, type) {
					var dispTrp = '<span id='+ setUID('tabAutoWall_SelBoxPreset_Troop_'+type+'_'+nb) + '>';
					if(Data.options.wall.presets[id]) {
						dispTrp += getTroops(Data.options.wall.presets[id].units, ' ');
					}
					dispTrp += '</span>';
					return dispTrp
				}
			},

			/** WALL DEFENSE PRESET EDIT SUB-TAB ** */
			tabWallSetDefense: function() {
				var t = Tabs.Wall;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabWallSetDefense']).className = 'selected';
				$(UID['tabWallSetDefense']).style.zIndex = 1;
				t.lastSubTab = 'tabWallSetDefense';
				t.contentType = 1;

				var m = '<div id=' + setUID('tabWall_Results') + ' style="height:570px">' + '	<div class=' + UID['title'] + '>' + translate('wall-manage-defense') + '</div>' + '	<div id=' + setUID('tabWall_Status') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<label><b>' + translate('Preset name') + ' :</b></label>' + '	&nbsp &nbsp<input id=' + setUID('tabWall_Name') + ' size=30 maxlength=50 type=text value="' + Data.options.wall.preset.name + '" /><br><br>' + '	<table id=' + setUID('tabWall_Troops') + ' class=' + UID['table'] + '>' + '		<tr align=left class=' + UID['row_headers_left'] + '>' + '			<td colspan=3 width=50%>' + translate('Troops for defense') + ':&nbsp;</td>' + '			<td width=10%>' + translate('Total') + '</td>' + '			<td width=10%>' + translate('Defense') + '</td>' + '			<td width=10%>' + translate('In city') + '</td>' + '			<td width=10%>' + translate('In march') + '</td>' + '		</tr>';

				var UIDTrp = setUID('tabWall_Trp');
				var UIDMax = setUID('tabWall_MaxT');
				var city = Seed.cities[CAPITAL.id];
				for (i = 0; i < all_unit_types.length; i++) {
					var num = toNum(Data.options.wall.preset.units[all_unit_types[i]]);
					var numTroops = getTroopNumbers(city, all_unit_types[i]);
					m += '<tr><td class=right width=25%>' + translate(Names.troops.byName[all_unit_types[i]][1]) + ':</td>' + '	<td width=15%><input type=text id=' + UIDTrp + '_' + i + ' maxlength=9 style="width:55px" size=2 value="' + num + '"\></td>' + '	<td width=10%><input class=small id=' + UIDMax + '_' + i + ' ref=' + i + ' type=button  style="width:auto !important;" value=" Max " \></td>' + '	<td align=right width=15%>' + numf(numTroops.total, ' ') + '</td>' + '	<td align=right width=15%>' + numf(numTroops.indefense, ' ') + '</td>' + '	<td align=right width=15%>' + numf(numTroops.incity, ' ') + '</td>' + '	<td align=right width=15%>' + (numTroops.marches ? '&nbsp;+&nbsp;<b>' + numf(numTroops.marches, ' ') + '</b>' : '') + '</td>' + '</tr>';
				}

				m += '<tr><td colspan=4 class=jewel>' + translate('Enter -1 as troop quantity to use the maximum available') + '</td></tr>' + '</table><br>';

				m += '<table class=' + UID['table'] + ' style="margin-top:3px" width=60%>' + '	<tr valign=top align=center>' + '		<td width=25%><label><input id=' + setUID('tabWall_setAll') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Troops max') + '" /></label></td>' + '		<td width=25%><label><input id=' + setUID('tabWall_clearAll') + ' type=button class="' + UID['btn_green'] + '" value="' + translate('Clear all') + '" /></label></td>' + '	</tr>' + '</table><br>';

				m += '<table class=' + UID['table'] + '>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td>' + translate('Dragons') + '</td>' + '			<td>' + translate('Scales') + '</td>' + '			<td>' + translate('Armor') + '</td>' + '		</tr>';

				for (var gd = 0; gd < Seed.dragonList.length; gd++) {
					var dragon = Seed.dragons[Seed.dragonList[gd].type];
					if (dragon.name == 'GreatDragon') {
						m += '<tr><td class=right>' + translate(dragon.name) + ':</td>' + '<td> ' + getScales(dragon, 'nomEcaille') + '</td>' + '<td> ' + getArmors(dragon, Seed.dragonList[gd].type, 'nomArmure') + '</td></tr>'
					}

				}

				m += '</table><br>' + '<table class=' + UID['table'] + ' style="margin-top:3px" width=60%>' + '	<tr valign=top align=center>' + '		<td width=25%><label><input id=' + setUID('tabWall_savePreset') + ' type=button value="' + translate('Save preset') + '" /></label></td>' + '		<td width=25%><label><input id=' + setUID('tabWall_setDefense') + ' type=button value="' + translate('wall-update-defenders') + '" /></label></td>' + '	</tr>' + '</table><br>' + '<br>' + '<br><div id=' + setUID('tabDragonManagement_Feedback') + ' class=' + UID['status_feedback'] + '></div></div></div>'; + '<br></div></div>';

				$(UID['tabWall_Content']).innerHTML = m;
				$(UID['tabWall_Name']).addEventListener('change', function() {
					Data.options.wall.preset.name = $(UID['tabWall_Name']).value
				}, false);
				$(UID['tabWall_setAll']).addEventListener('click', onClickSetAll, false);
				$(UID['tabWall_clearAll']).addEventListener('click', onClickClearAll, false);
				$(UID['tabWall_savePreset']).addEventListener('click', onClickSavePreset, false);
				$(UID['tabWall_setDefense']).addEventListener('click', onClickSetDefense, false);

				for (var gd = 0; gd < Seed.dragonList.length; gd++) {
					if (Seed.dragons[Seed.dragonList[gd].type].name == 'GreatDragon') {
						if ($(UID['preset_scales_' + Seed.dragons[Seed.dragonList[gd].type].id])) {
							$(UID['preset_scales_' + Seed.dragons[Seed.dragonList[gd].type].id]).addEventListener('change', eventScales, false);
							if($(UID['preset_scales_' + Seed.dragons[Seed.dragonList[gd].type].id]).value == Data.options.wall.preset.scales) {
								$(UID['preset_scales_' + Seed.dragons[Seed.dragonList[gd].type].id]).value = Data.options.wall.preset.scales;
							}
						}
						if ($(UID['preset_armor_' + Seed.dragons[Seed.dragonList[gd].type].id])) {
							$(UID['preset_armor_' + Seed.dragons[Seed.dragonList[gd].type].id]).addEventListener('change', eventArmor, false);
							if($(UID['preset_armor_' + Seed.dragons[Seed.dragonList[gd].type].id]).value == Data.options.wall.preset.armor) {
								$(UID['preset_armor_' + Seed.dragons[Seed.dragonList[gd].type].id]).value = Data.options.wall.preset.armor;
							}
						}
					}
				}

				for (i = 0; i < all_unit_types.length; i++) {
					$(UIDTrp + '_' + i).addEventListener('change', eventTroops, false);
					butMax = $(UIDMax + '_' + i);
					butMax.addEventListener('click', setTroupsMax, false);
					setButtonStyle(butMax, true, 'btn_green');
				}

				function eventScales() {
					var greatDragon;
					for (var gd = 0; gd < Seed.dragonList.length; gd++) {
						Seed.dragons[Seed.dragonList[gd].type];
						if (Seed.dragons[Seed.dragonList[gd].type].name == 'GreatDragon') {
							greatDragon = Seed.dragons[Seed.dragonList[gd].type];
						}
					}
					if ($(UID['preset_scales_' + greatDragon.id]))
						Data.options.wall.preset.scales = $(UID['preset_scales_' + greatDragon.id]).value;
					else
						Data.options.wall.preset.scales = '';
				}

				function eventArmor() {
					var greatDragon;
					for (var gd = 0; gd < Seed.dragonList.length; gd++) {
						Seed.dragons[Seed.dragonList[gd].type];
						if (Seed.dragons[Seed.dragonList[gd].type].name == 'GreatDragon') {
							greatDragon = Seed.dragons[Seed.dragonList[gd].type];
						}
					}
					if ($(UID['preset_armor_' + greatDragon.id]))
						Data.options.wall.preset.armor = $(UID['preset_armor_' + greatDragon.id]).value;
					else
						Data.options.wall.preset.armor = '';
				}

				function eventTroops(event) {
					var args = event.target.id.split('_');
					var x = toNum(event.target.value);
					for (i = 0; i < all_unit_types.length; i++)
						$(UID['tabWall_Trp'] + '_' + i).style.backgroundColor = '';
					if (isNaN(x) || x < -1)
						event.target.style.backgroundColor = 'red';
					else event.target.style.backgroundColor = '';
					event.target.value = x;
					Data.options.wall.preset.units[all_unit_types[args[1]]] = x;
				}

				function onClickSetAll() {
					var t = Tabs.Wall;
					var city = Seed.cities[CAPITAL.id];
					for (var i = 0; i < all_unit_types.length; i++) {
						var numTroops = getTroopNumbers(city, all_unit_types[i]);
						var unit_max = numTroops.incity + numTroops.indefense;
						if (unit_max > 0) Data.options.wall.preset.units[all_unit_types[i]] = unit_max;
						else Data.options.wall.preset.units[all_unit_types[i]] = 0;
					}
					t.tabWallSetDefense();
				}

				function onClickClearAll() {
					var t = Tabs.Wall;
					for (var i = 0; i < all_unit_types.length; i++) {
						Data.options.wall.preset.units[all_unit_types[i]] = 0;
					}
					t.tabWallSetDefense();
				}

				function onClickSavePreset() {
					eventArmor();
					eventScales();
					var t = Tabs.Wall;

					if (Data.options.wall.presets && Data.options.wall.presets.length > 0) {
						var h = cloneProps(Data.options.wall.presets);
						for (var i = h.length - 1; i >= 0; i--) {
							if (h[i].name == Data.options.wall.preset.name)
								Data.options.wall.presets.splice(i, 1);
						}
					}
					var rec = {
						name: Data.options.wall.preset.name,
						units: cloneProps(Data.options.wall.preset.units),
						scales: Data.options.wall.preset.scales,
						armor: Data.options.wall.preset.armor
					};
					Data.options.wall.presets.push(rec);
					t.tabWallManagement();
				}

				function onClickSetDefense() {
					eventArmor();
					eventScales();
					var t = Tabs.Wall;
					var city = Seed.cities[CAPITAL.id];
					var presetUnits = Data.options.wall.preset.units;
					var units = {};
					for (var pu in presetUnits) {
						var numTroops = getTroopNumbers(city, pu);
						var unit_max = numTroops.incity + numTroops.indefense;
						if (unit_max < presetUnits[pu] || presetUnits[pu] == -1) units[pu] = unit_max;
						else units[pu] = presetUnits[pu];
					}
					if (t.checkSetDefenseBusy) return false;
					t.checkSetDefenseBusy = true;
					set_defense_forces(t.container, city.id, units, function() {
						logit(translate('wall-defenders-updated'));
						Tabs.Wall.checkSetDefenseBusy = false;
						t.tabWallSetDefense();
					});
					new MyAjax.setCustomization('GreatDragon', Data.options.wall.preset.armor, Data.options.wall.preset.scales, function(rslt) {});
				}

				function setTroupsMax(event) {
					var args = event.target.id.split('_');
					var city = Seed.cities[CAPITAL.id];
					var units = {};
					var numTroops = getTroopNumbers(city, all_unit_types[args[1]]);
					var unit_max = toNum(numTroops.incity) + toNum(numTroops.indefense);
					Data.options.wall.preset.units[all_unit_types[args[1]]] = toNum(unit_max);
					t.tabWallSetDefense();
				}

				function getScales(dragon) {
					var ret = 'n/a';
					if (dragon.customizations && dragon.customizations.scales && dragon.slots && dragon.slots.scales) {
						ret = '<select id=' + setUID('preset_scales_' + dragon.id) + '>';
						for (var i = 0; i < dragon.customizations.scales.length; i++) {
							ret += '<option ' + ((dragon.customizations.scales[i] == dragon.slots.scales) ? 'selected' : '') + ' value="' + dragon.customizations.scales[i] + '">' + translate(dragon.customizations.scales[i]) + '</option>';
						}
						ret += '</select>';
					}
					return ret;
				}

				function getArmors(dragon, dragon_type) {
					var ret = translate('Not ready') + countArmorDragon(dragon_type);
					if (dragon.customizations && dragon.customizations.armor && dragon.slots && dragon.slots.armor) {
						ret = '<select id=' + setUID('preset_armor_' + dragon.id) + '>';
						for (var i = 0; i < dragon.customizations.armor.length; i++) {
							ret += '<option ' + ((dragon.customizations.armor[i] == dragon.slots.armor) ? 'selected' : '') + ' value="' + dragon.customizations.armor[i] + '">' + translate(dragon.customizations.armor[i]) + '</option>';
						}
						ret += '</select>';
					}
					return ret;
				}

				function countArmorDragon(dragon_type) {
					var armors = ['BodyArmor', 'ClawGuards', 'TailGuard', 'Helmet'];
					var ret = 0;
					for (var i = 0; i < armors.length; i++) {
						if (toNum(Seed.player.items[dragon_type + armors[i]]) !== 0) {
							ret++;
						}
					}
					if (ret == 4) return '';
					else return ' (' + translate('Got') + ' ' + ret + '/4)';
				}
			},

			/** WALL DRAGON DEFENSE SUB-TAB ** */
			tabDragonManagement: function() {
				var t = Tabs.Wall;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabDragonManagement']).className = 'selected';
				$(UID['tabDragonManagement']).style.zIndex = 1;
				t.lastSubTab = 'tabDragonManagement';
				t.contentType = 2;

				var m = '<div id=' + setUID('tabWall_Results') + ' style="height:570px">' 
                + '	<div class=' + UID['title'] + '>' + translate('Dragons management') + '</div>' 
                + '	<div id=' + setUID('tabWall_Dragon') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' 
                + '	<table id=' + setUID('tabWall_Dragons') + ' class=' + UID['table'] + '>' 
                + '		<tr align=center class=' + UID['row_headers'] + '>' 
                + '			<td>' + translate('Dragons') + '</td>' 
                + '			<td>' + translate('Armor') + '&nbsp;&amp;&nbsp;' + translate('Scales') + '</td>' 
                + '			<td>' + translate('Update') + '</td>' 
                + '		</tr>';

				for (var gd = 0; gd < Seed.dragonList.length; gd++) {
					var row_style = '';
					if (gd % 2 == 1) row_style = "White";
					else row_style = "rgb(239,239,224)";
					var dragon = Seed.dragons[Seed.dragonList[gd].type];
					m += '<tr style="background-color:' + row_style + '"><td class=right>' + translate(dragon.name) + ':</td>' + '<td> ' + getArmors(dragon, Seed.dragonList[gd].type) + '<br/>' + getScales(dragon) + '</td>' + '<td><input class=small id=' + setUID('eq' + '_' + dragon.id) + ' ref=armor_' + dragon.name + '_' + dragon.id + ' type=button  style="width:auto !important;" value="Ok" \></td></tr>';

				}

				m += '</table><br>' + '<br>' + '<br><div id=' + setUID('tabDragonManagement_Feedback') + ' class=' + UID['status_feedback'] + '></div></div></div>';

				$(UID['tabWall_Content']).innerHTML = m;

				for (var gd = 0; gd < Seed.dragonList.length; gd++) {
					var dragon = Seed.dragons[Seed.dragonList[gd].type];
					$(UID['eq' + '_' + dragon.id]).addEventListener('click', onClickSetCustomization, false);
				}

				function onClickSetCustomization(event) {
					var args = event.target.getAttribute('ref').split('_');
					var dragonName = args[1];
					var dragonId = args[2];
					var armorDrg, scalesDrg;

					if ($(UID['armor_' + dragonId]))
						armorDrg = $(UID['armor_' + dragonId]).value;

					if ($(UID['scales_' + dragonId]))
						scalesDrg = $(UID['scales_' + dragonId]).value;

					new MyAjax.setCustomization(dragonName, armorDrg, scalesDrg,
						function(rslt) {
							var disRslt = '';
							if (rslt.dat.result.success) {
								var dragon_name = rslt.dat.result.unit_type.substring(rslt.dat.result.unit_type.indexOf('::') + 2);
								disRslt = 'OK : ' + translate(dragon_name) + '(' + translate((rslt.dat.result.slots.scales == undefined) ? 'GreenScales' : rslt.dat.result.slots.scales) + ',' + translate((rslt.dat.result.slots.armor == undefined ? 'GreenArmor' : rslt.dat.result.slots.armor)) + ')';
							} else
								disRslt = translate('Failed');
							dispFeedback(UID['tabDragonManagement_Feedback'], disRslt);
						});
				}

				function getScales(dragon) {
					var ret = 'n/a';
					if (dragon.customizations && dragon.customizations.scales && dragon.slots && dragon.slots.scales) {
						ret = '<select id=' + setUID('scales_' + dragon.id) + '>';
						for (var i = 0; i < dragon.customizations.scales.length; i++) {
							ret += '<option ' + ((dragon.customizations.scales[i] == dragon.slots.scales) ? 'selected' : '') + ' value="' + dragon.customizations.scales[i] + '">' + translate(dragon.customizations.scales[i]) + '</option>';
						}
						ret += '</select>';
					}
					return ret;
				}

				function getArmors(dragon, dragon_type) {
					var ret = translate('Not ready') + countArmorDragon(dragon_type);
					if (dragon.customizations && dragon.customizations.armor && dragon.slots && dragon.slots.armor) {
						ret = '<select id=' + setUID('armor_' + dragon.id) + '>';
						for (var i = 0; i < dragon.customizations.armor.length; i++) {
							ret += '<option ' + ((dragon.customizations.armor[i] == dragon.slots.armor) ? 'selected' : '') + ' value="' + dragon.customizations.armor[i] + '">' + translate(dragon.customizations.armor[i]) + '</option>';
						}
						ret += '</select>';
					}
					return ret;
				}

				function countArmorDragon(dragon_type) {
					var armors = ['BodyArmor', 'ClawGuards', 'TailGuard', 'Helmet'];
					var ret = 0;
					for (var i = 0; i < armors.length; i++) {
						if (toNum(Seed.player.items[dragon_type + armors[i]]) !== 0) {
							ret++;
						}
					}
					if (ret == 4) return '';
					else return ' (' + translate('Got') + ' ' + ret + '/4)';
				}

			}

		}
		/**
		 * ****************************** Wall features Tab
		 * *************************
		 */


		/**
		 * ****************************** Wave Tab
		 * **********************************
		 */
		Tabs.Waves = {
			tabOrder: WAVE_TAB_ORDER,
			tabLabel: 'Wave',
			tabDisabled: !WAVE_TAB_ENABLE,
			container: null,
			enabled: false,
			attackTimer: null,
			marchTimer: null,
			attackErrors: 0,
			contentType: 0,
			/* 0 = attack, 1 = history, 2 = stats, 3 = last report */
			lastSubTab: 'tabWaveAttack',
			running: {
				start_at: 0
			},
			last_report: null,

			init: function(div) {
				var t = Tabs.Waves;
				Data.setDefaultValues('waves');
				t.container = div;
				var m = '' + '<div class=' + UID['title'] + '>' + translate('Wave') + '</div>' + '<div id=' + setUID('tabWave_Status') + ' class=' + UID['status_ticker'] + ' style="margin-bottom:5px !important">' + '	<center><input id=' + setUID('tabWave_OnOff') + ' type=button value="OnOff" /></center>' + '	<div id=' + setUID('tabWave_Report') + ' style="margin-top:5px;height:140px; max-height:140px; width:540px; max-width:540px; overflow:auto;">' + '		<table id=' + setUID('tabWave_Marches') + ' class=' + UID['table'] + '>' + '		</table>' + '	</div>' + '	<div id=' + setUID('tabWave_Feedback') + ' class=' + UID['status_feedback'] + '></div>' + '</div>' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabWaveAttack') + '>' + translate('Attack') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabWaveHistory') + '>' + translate('History') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabWaveStats') + '>' + translate('Stats') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabWaveLastReport') + '>' + translate('Last report') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabWave_Content') + ' style="padding-top:0px; height:440px; overflow-y:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabWaveAttack']).addEventListener('click', t.tabWaveAttack, false);
				$(UID['tabWaveHistory']).addEventListener('click', t.tabWaveHistory, false);
				$(UID['tabWaveStats']).addEventListener('click', t.tabWaveStats, false);
				$(UID['tabWaveLastReport']).addEventListener('click', t.tabWaveLastReport, false);
				$(UID['tabWave_OnOff']).addEventListener('click', function() {
					t.setWaveEnable(!Data.options.waves.enabled);
				}, false);
				window.addEventListener('unload', t.onUnload, false);
				t.setWaveEnable(Data.options.waves.enabled);
				t.contentType = toNum(Data.options.waves.current_tab);
				t.show();
			},

			tabWaveAttack: function() {
				var t = Tabs.Waves;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabWaveAttack']).className = 'selected';
				$(UID['tabWaveAttack']).style.zIndex = 1;
				t.lastSubTab = 'tabWaveAttack';
				t.contentType = 0;
				var m = '<div class="' + UID['title'] + '">' + translate('Attacks') + ' ( ' + translate('Max') + '. ' + translate('Troops') + ' ' + numf(toNum((getMusterPoint(CAPITAL.id)).max_troops), ' ') + ' )</div>' + '<div class=' + UID['content'] + '>' + '	<div>' + '		<b>' + translate('Coords') + ':&nbsp;</b>&nbsp;' + '		X: <input id=' + setUID('tabWave_CoordsX') + ' size=1 maxlength=3 type=text value="' + Data.options.waves.target.x + '" /> ' + '		Y: <input id=' + setUID('tabWave_CoordsY') + ' size=2 maxlength=3 type=text value="' + Data.options.waves.target.y + '" /> ' + '		&nbsp <b>' + translate('Distance') + ':</b> <span id=' + setUID('tabWave_Distance') + '></span>' + '		&nbsp <input id=' + setUID('tabWave_Save') + ' class="' + UID['btn_green'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Save') + ' " />' + '		&nbsp <input id=' + setUID('tabWave_Spy') + ' class="' + UID['btn_green'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Spy') + ' " />' + '		&nbsp <input id=' + setUID('tabWave_Bookmark') + ' class="' + UID['btn_blue'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Bookmark') + ' " />';
				if (Data.options.waves.target.id && Data.options.waves.target.id != '' && Data.options.waves.target.n && Data.options.waves.target.n != '') {
					var user_ids = Data.options.waves.target.id + '_' + Data.options.waves.target.n;
					m += '	&nbsp <input id=' + setUID('tabWave_Msg') + ' ref=' + user_ids + ' class="' + UID['btn_blue'] + ' small" style="width:auto !important;" type=submit value=" ' + translate('Msg') + ' " />';
				}
				m += '		<br><br><label>' + translate('description') + ' :</label>&nbsp' + '		<textarea id=' + setUID('tabWave_Comment') + ' cols="80" rows="2" wrap="PHYSICAL">' + Data.options.waves.target.comment + '</textarea><br>' + '		<div class=' + UID['status_ticker'] + ' style="height:auto !important;margin:5px 10px !important;">' + '			<center><span id=' + setUID('tabWave_Tile') + '></span></center>' + '		</div>' + '	</div>' + '  <div>' + '	<table id=' + setUID('tabWave_Troops') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=10>' + translate('Troops for Wave Attack') + ':&nbsp;</td>' + '		</tr>' + '	</table>' + '	</div><br>' + '  <div>' + '	<table id=' + setUID('tabWave_Dragons') + ' class=' + UID['table'] + ' width=100%>' + '		<tr align=center class=' + UID['row_headers'] + '>' + '			<td colspan=10>' + translate('Include Great Dragon') + ':&nbsp;</td>';
				var currentDragons = [];
				for (var j = 0; j < Seed.dragonList.length; j++) {
					var dragon = Seed.dragonList[j];
					if (j % 5 == 0)
						m += '</tr><tr>';
					m += '	<td class=right><span title="' + translate(dragon.type) + '">' + translate(Names.getTroopAbbr(dragon.type)) + ':<span></td>' + '	<td align=center><input type=checkbox id=' + setUID('tabWave_Dragons_' + j) + ' ref="' + j + '" ' + (Data.options.waves.target.dragons[dragon.type] ? ' checked' : '') + ' /></td>';
					currentDragons.push(j);
				}
				m += '</tr>' + '	</table>' + '	</div><br>' + '	<table class=' + UID['table'] + '>' + '		<tr>' + '			<td class=right> ' + translate('Delete Battle Reports') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabWave_DelReports') + ' type=checkbox ' + (Data.options.waves.delete_reports ? 'CHECKED' : '') + ' /></td>' + '		</tr><tr>' + '			<td class=right>' + translate('Stop if any troops lost') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabWave_StopOnLoss') + ' type=checkbox ' + (Data.options.waves.stop_on_loss ? 'CHECKED' : '') + ' /></td>' + '		</tr><tr>' + '			<td class=right>' + translate('Delay Between Attacks') + ':&nbsp;</td>' + '			<td>' + '				<input id=' + setUID('tabWave_DelayMin') + ' type=text size=1 maxlength=4 value="' + Data.options.waves.delay_min + '" />' + '				 to <span id=' + setUID('tabWave_DelayMax') + '>' + Data.options.waves.delay_max + '</span>&nbsp;' + translate('seconds') + '			</td>' + '		</tr><tr>' + '			<td class=right> ' + translate('Maximum simultaneous marches') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabWave_MaxMarches') + ' type=text size=1 maxlength=2 value="' + Data.options.waves.max_marches + '" /></td>' + '		</tr><tr>' + '			<td class=right> ' + translate('Send even without Dragon') + ':&nbsp;</td>' + '			<td><input id=' + setUID('tabWave_SendWithoutDragon') + ' type=checkbox ' + (Data.options.waves.send_without_dragon ? 'CHECKED' : '') + ' /></td>' + '		</tr>' + '	</table>' + '</div>';
				$(UID['tabWave_Content']).innerHTML = m;
				$(UID['tabWave_CoordsX']).addEventListener('change', t.eventCoords, false);
				$(UID['tabWave_CoordsY']).addEventListener('change', t.eventCoords, false);
				$(UID['tabWave_Save']).addEventListener('click', saveCoords, false);
				$(UID['tabWave_Bookmark']).addEventListener('click', addBookmark, false);
				$(UID['tabWave_Comment']).addEventListener('change', function() {
					Data.options.waves.target.comment = $(UID['tabWave_Comment']).value
				}, false);
				$(UID['tabWave_DelReports']).addEventListener('click', function(event) {
					Data.options.waves.delete_reports = event.target.checked;
				}, false);
				$(UID['tabWave_StopOnLoss']).addEventListener('click', function(event) {
					Data.options.waves.stop_on_loss = event.target.checked;
				}, false);
				$(UID['tabWave_SendWithoutDragon']).addEventListener('click', function(event) {
					Data.options.waves.send_without_dragon = event.target.checked;
				}, false);
				$(UID['tabWave_DelayMin']).addEventListener('change', delayChanged, false);
				$(UID['tabWave_MaxMarches']).addEventListener('change', maxMarchesChanged, false);
				if (Data.options.waves.target.id && Data.options.waves.target.id != '' && Data.options.waves.target.n && Data.options.waves.target.n != '')
					$(UID['tabWave_Msg']).addEventListener('click', onClickMsg, false);

				setTroopTable($(UID['tabWave_Troops']), 1, 'AW', wave_unit_types,
					Data.options.waves.target.units, Data.options.waves.target.saved_units, t.eventTroops, true);

				for (var j = 0; j < currentDragons.length; ++j) {
					$(UID['tabWave_Dragons_' + currentDragons[j]]).addEventListener('change', function(event) {
						var args = event.target.getAttribute('ref');
						Data.options.waves.target.dragons[Seed.dragonList[args].type] = event.target.checked;
						var include_great_dragon = false;
						for (var x = 0; x < Seed.dragonList.length && !include_great_dragon; x++) {
							var dragon = Seed.dragonList[x];
							if (Data.options.waves.target.dragons[dragon.type]) include_great_dragon = true;
						}
						if (include_great_dragon) Data.options.waves.target.include_great_dragon = true;
						else Data.options.waves.target.include_great_dragon = false;
					}, false);
				}
				t.eventCoords();
				var butSpy = $(UID['tabWave_Spy']);
				butSpy.addEventListener('click', butSpyNow, false);
				var tile = Data.options.waves.target;
				if (!tile.ai || tile.ai == 0 || tile.ai == null || tile.ai != (Seed.player.alliance ? Seed.player.alliance.id : -1))
					setButtonStyle(butSpy, true, 'btn_green', 'btn_disabled');
				else
					setButtonStyle(butSpy, false, 'btn_green', 'btn_disabled');

				function butSpyNow(event) {
					buttonSpyNow(t.container, Data.options.waves.target);
				}

				function delayChanged(event) {
					var min = toNum(event.target.value);
					var max = toNum(min * 1.5);
					if (min < nvl(MIN_DELAY_BETWEEN_WAVE, 10) || min > 3600) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					$(UID['tabWave_DelayMax']).innerHTML = max;
					event.target.style.backgroundColor = '';
					Data.options.waves.delay_min = min;
					Data.options.waves.delay_max = max;
				}

				function maxMarchesChanged(event) {
					var val = toNum($(UID['tabWave_MaxMarches']).value);
					if (val < 0 || val > Seed.cities[CAPITAL.id].figures.marches.maximum) {
						event.target.style.backgroundColor = 'red';
						return;
					}
					event.target.style.backgroundColor = '';
					Data.options.waves.max_marches = val;
				}

				function saveCoords() {
					var t = Tabs.Waves;
					if (Data.options.waves.history && Data.options.waves.history.length > 0) {
						var h = cloneProps(Data.options.waves.history);
						for (var i = h.length - 1; i >= 0; i--) {
							if ((h[i].x == Data.options.waves.target.x) && (h[i].y == Data.options.waves.target.y))
								Data.options.waves.history.splice(i, 1);
						}
					}
					var rec = {
						x: Data.options.waves.target.x,
						y: Data.options.waves.target.y,
						type: Data.options.waves.target.type,
						level: Data.options.waves.target.level,
						id: Data.options.waves.target.id,
						n: Data.options.waves.target.n,
						units: cloneProps(Data.options.waves.target.saved_units),
						dragons: cloneProps(Data.options.waves.target.dragons),
						ai: Data.options.waves.target.ai,
						inc: Data.options.waves.target.include_great_dragon,
						comment: Data.options.waves.target.comment
					};
					Data.options.waves.history.push(rec);
				}

				function addBookmark(event) {
					var n = toNum(event.target.getAttribute('ref'));
					saveBookmark(t.container,
						Data.options.waves.target.x,
						Data.options.waves.target.y,
						Data.options.waves.target.type,
						Data.options.waves.target.level,
						Data.options.waves.target.id,
						Data.options.waves.target.n,
						Data.options.waves.target.saved_units,
						Data.options.waves.target.ai,
						Data.options.waves.target.include_great_dragon, true,
						Data.options.waves.target.dragons,
						Data.options.waves.target.comment);
				}
			},
			tabWaveHistory: function() {
				var t = Tabs.Waves;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabWaveHistory']).className = 'selected';
				$(UID['tabWaveHistory']).style.zIndex = 1;
				t.lastSubTab = 'tabWaveHistory';
				t.contentType = 1;
				var m = '<div class="' + UID['title'] + '">' + translate('History') + '</div>' + '	<div id=' + setUID('tabWave_HistoryList') + ' class=' + UID['status_ticker'] + ' style="height:390px; max-height:390px; width:540px; max-width:540px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important"></div>' + '	</div>';
				$(UID['tabWave_Content']).innerHTML = m;
				var m = '<table class=' + UID['row_style'] + '>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td width="10px">&nbsp</td>' + '		<td width="35px"><A><span>' + translate('Dist') + '</span></A></td>' + '		<td width="50px"><A><span>' + translate('Coords') + '</span></A></td>' + '		<td width="160px"><A><span>' + translate('Target') + '</span></A></td>' + '		<td width="175px"><A><span>' + translate('Troops') + '</span></A></td>' + '	</tr>';
				var ul = [];
				for (var i = 0; i < Data.options.waves.history.length; i++) {
					var style = '',
						row_style = '';
					if (!Data.options.waves.history[i].comment || Data.options.waves.history[i].comment == null || Data.options.waves.history[i].comment == '')
						style = 'style="border-bottom: 1px solid #898989;"';
					if (i % 2 == 1) row_style = "White";
					else row_style = "rgb(239,239,224)";
					var time = getMarchTime(Data.options.waves.history[i].x, Data.options.waves.history[i].y, Data.options.waves.history[i].units);
					m += '<tr valign=top style="background-color:' + row_style + '">' + '	<td><input id=' + setUID('tabWave_Delete_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_red'] + '" style="width:auto !important;" type=submit value=" X " /></td>' + '	<td ' + style + '>' + getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Data.options.waves.history[i].x, Data.options.waves.history[i].y) + '<br> (' + timestrShort(time) + ')</td>' + '	<td align=center ' + style + '>' + Data.options.waves.history[i].x + ',' + Data.options.waves.history[i].y + '</td>' + '	<td align=left ' + style + '>' + Data.options.waves.history[i].type + '</td>' + '	<td align=left ' + style + '>' + getTroops(Data.options.waves.history[i].units, '<br>') + '</td>' + '	<td><input id=' + setUID('tabWave_Recall_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Recall') + '" /><br>' + '		<input id=' + setUID('tabWave_Bookmark_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Bookmark') + '" /></td>';
					if (Data.options.waves.history[i].id && Data.options.waves.history[i].id != '' && Data.options.waves.history[i].n && Data.options.waves.history[i].n != '') {
						var user_ids = Data.options.waves.history[i].id + '_' + Data.options.waves.history[i].n;
						var UIDMsg = setUID('tabWave_Msg_' + i);
						m += '	<td><input id=' + setUID('tabWave_Spy_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Spy') + '" /><br>' + '		<input id=' + UIDMsg + ' ref=' + user_ids + ' class="Xtrasmall ' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="' + translate('Msg') + '" /></td>';
						ul.push(UIDMsg);
					} else {
						m += '	<td><input id=' + setUID('tabWave_Spy_' + i) + ' ref=' + i + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('Spy') + '" /></td>';
					}
					m += '</tr>';
					if (Data.options.waves.history[i].comment && Data.options.waves.history[i].comment != null && Data.options.waves.history[i].comment != '')
						m += '<tr valign=top style="background-color:' + row_style + '"><td colspan=5 style="border-bottom: 1px solid #898989;">' + Data.options.waves.history[i].comment + '</td><td colspan=2>&nbsp</td></tr>';
				}
				$(UID['tabWave_HistoryList']).innerHTML = m + '</table>';
				for (var i = 0; i < Data.options.waves.history.length; i++) {
					var butRecall = $(UID['tabWave_Recall_' + i]);
					var butDelete = $(UID['tabWave_Delete_' + i]);
					var butBookmark = $(UID['tabWave_Bookmark_' + i]);
					var butSpy = $(UID['tabWave_Spy_' + i]);
					butRecall.addEventListener('click', recallTarget, false);
					butDelete.addEventListener('click', deleteTarget, false);
					butBookmark.addEventListener('click', addBookmark, false);
					butSpy.addEventListener('click', butSpyNow, false);
					var tile = Data.options.waves.history[i];
					if (!tile.ai || tile.ai == 0 || tile.ai == null || tile.ai != (Seed.player.alliance ? Seed.player.alliance.id : -1))
						setButtonStyle(butSpy, true, 'btn_green', 'btn_disabled');
					else
						setButtonStyle(butSpy, false, 'btn_green', 'btn_disabled');
				}
				for (var u = 0; u < ul.length; u++)
					$(ul[u]).addEventListener('click', onClickMsg, false);

				function butSpyNow(event) {
					var n = toNum(event.target.getAttribute('ref'));
					buttonSpyNow(t.container, Data.options.waves.history[n]);
				}

				function recallTarget(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.waves.target.x = Data.options.waves.history[n].x;
					Data.options.waves.target.y = Data.options.waves.history[n].y;
					Data.options.waves.target.type = Data.options.waves.history[n].type;
					Data.options.waves.target.level = Data.options.waves.history[n].level;
					Data.options.waves.target.id = Data.options.waves.history[n].id;
					Data.options.waves.target.n = Data.options.waves.history[n].n;
					Data.options.waves.target.ai = Data.options.waves.history[n].ai;
					Data.options.waves.target.units = cloneProps(Data.options.waves.history[n].units);
					Data.options.waves.target.dragons = cloneProps(Data.options.waves.history[n].dragons);
					Data.options.waves.target.saved_units = cloneProps(Data.options.waves.history[n].units)
					Data.options.waves.target.include_great_dragon = Data.options.waves.history[n].inc;
					Data.options.waves.target.comment = Data.options.waves.history[n].comment;
					t.tabWaveAttack();
				}

				function deleteTarget(event) {
					var n = toNum(event.target.getAttribute('ref'));
					Data.options.waves.history.splice(n, 1);
					t.tabWaveHistory();
				}

				function addBookmark(event) {
					var n = toNum(event.target.getAttribute('ref'));
					saveBookmark(t.container,
						Data.options.waves.history[n].x,
						Data.options.waves.history[n].y,
						Data.options.waves.history[n].type,
						Data.options.waves.history[n].level,
						Data.options.waves.history[n].id,
						Data.options.waves.history[n].n,
						Data.options.waves.history[n].units,
						Data.options.waves.history[n].ai,
						Data.options.waves.history[n].inc, true,
						Data.options.waves.history[n].dragons,
						Data.options.waves.history[n].comment);
				}
			},
			tabWaveStats: function() {
				var t = Tabs.Waves;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabWaveStats']).className = 'selected';
				$(UID['tabWaveStats']).style.zIndex = 1;
				t.lastSubTab = 'tabWaveStats';
				t.contentType = 2;
				var m = '<div class=' + UID['title'] + '>' + translate('Attacks Stats') + '</div>' + '<div id=' + setUID('tabWaveStats_Statbox') + ' class=' + UID['status_ticker'] + '>' + '<div id=' + setUID('tabWaveStats_Status') + '></div>' + '<div id=' + setUID('tabWaveStats_Percent') + '></div>' + '<br/>' + '<center><input id=' + setUID('tabWaveStats_Clear') + ' type=button value="' + translate('Clear Stats') + '" /></center>' + '<br></div>';
				$(UID['tabWave_Content']).innerHTML = m;
				$(UID['tabWaveStats_Clear']).addEventListener('click', function() {
					t.clearStats();
					t.showStats();
				}, false);
				t.showStats();
			},
			tabWaveLastReport: function() {
				var t = Tabs.Waves;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabWaveLastReport']).className = 'selected';
				$(UID['tabWaveLastReport']).style.zIndex = 1;
				t.lastSubTab = 'tabWaveLastReport';
				t.contentType = 3;
				var m = '<div id=' + setUID('tabWave_ShowReport') + ' class=' + UID['status_ticker'] + ' style="height:395px; max-height:395px; width:540px; max-width:540px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important"></div>';
				$(UID['tabWave_Content']).innerHTML = m;
				var m = '<div class=' + UID['title'] + '>' + translate('Last report') + '</div>';
				if (t.last_report)
					m += '<center>' + Messages.displayBattleReport(t.last_report) + '</center>';
				$(UID['tabWave_ShowReport']).innerHTML = m;
			},

			gotBattleReport: function(rpt_w) {
				var t = Tabs.Waves,
					has_loss = false;
				if (!rpt_w) return;
				if (rpt_w.report.location.x == Data.options.waves.target.x &&
					rpt_w.report.location.y == Data.options.waves.target.y &&
					rpt_w.report_notification.report_type == 'BattleReport'
				) {
					var march_id = null;
					for (var id in Data.marches.waves) {
						var march = Data.marches.waves[id];
						if (march.general.id === rpt_w.report.attacker.general.id) {
							march_id = id;
							break;
						}
					}
					t.last_report = Messages.details[rpt_w.report_notification.id];
					if (march_id && march_id != null) t.trackStats(march_id, rpt_w);
					var items = rpt_w.report.spoils.items;
					if (items.length !== 0) Seed.fetchPlayer({
						noCities: true
					});
					if (!Data.options.waves.delete_reports && !Data.options.waves.stop_on_loss) return;

					if (Data.options.waves.stop_on_loss && rpt_w.report.attacker.name == Seed.player.name) {
						for (var p in rpt_w.report.attacker.units) {
							if (rpt_w.report.attacker.units[p][0] != rpt_w.report.attacker.units[p][1]) {
								has_loss = true;
								var ts = new Date(rpt_w.report_notification.created_at * 1000).myString();
								t.setWaveEnable(false);
								dispFeedback(UID['tabWave_Feedback'], translate('Troops lost') + '! (' + ts + ')');
								actionLog(translate('Wave') + ': ' + translate('Troops lost') + '! (' + ts + ')');
								for (var id in Data.marches.waves) {
									if (Data.marches.waves[id].status === 'marching')
										doRecallMarch(Data.marches.waves[id].city_id, id);
								}
								return;
							}
						}
					}
					if (Data.options.waves.delete_reports && rpt_w.report.attacker.name == Seed.player.name && !has_loss)
						Messages.deleteMessage(rpt_w.report_notification.id);
				}

				function doRecallMarch(city_id, id) {
					var targMsg = 'Recall march ' + id;
					verboseLog(targMsg + ' ' + translate('attempted'));
					new MyAjax.marchRecall(city_id, id, function(rslt) {
						if (rslt.ok) {
							verboseLog(targMsg + ' ' + translate('succeeded'));
						} else {
							verboseLog(targMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg);
						}
					});
				}
			},
			clearStats: function() {
				var t = Tabs.Waves;
				var now = serverTime();
				Data.stats.waves = {
					start_at: now,
					run_time: 0,
					total_attacks: 0,
					loss: {},
					items: {},
					resources: {}
				};
				t.showStats();
			},
			showStats: function() {
				var t = Tabs.Waves;
				var div = $(UID['tabWaveStats_Status']);
				if (div == null) return;

				var run_time = Data.stats.waves.run_time;
				if (Data.options.waves.enabled)
					run_time += (serverTime() - t.running.start_at);

				var trueRunTime = (run_time > 0) ? (run_time / 3600) : 1;

				var m = '<table class=' + UID['table'] + '>' + '	<tr>' + '		<td class=right>' + translate('Start Date') + ': </td>' + '		<td colspan=>' + new Date(Data.stats.waves.start_at * 1000).myString() + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Run Time') + ': </td>' + '		<td>' + timestr(run_time, true) + '</td>' + '	</tr><tr>' + '		<td class=right>' + translate('Attacks') + ': </td>' + '		<td>' + Data.stats.waves.total_attacks + '</td>' + '	<tr valign=top align=right>' + '		<td class=right>' + translate('Troops lost') + ': </td>';
				var first = true;
				for (var name in Data.stats.waves.loss) {
					var perHour = Math.round(Data.stats.waves.loss[name] / trueRunTime);
					if (first) first = false;
					else m += '	<tr align=right><td></td>';
					m += '		<td>' + translate(name) + ':</td>' + '		<td>' + numf(Data.stats.waves.loss[name], ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
				}
				m += '</tr><tr valign=top align=right>' + '		<td class=right>' + translate('Resources') + ': </td>';
				var first = true;
				for (var name in Data.stats.waves.resources) {
					var perHour = Math.round(Data.stats.waves.resources[name] / trueRunTime);
					if (first) first = false;
					else m += '	<tr align=right><td></td>';
					m += '			<td>' + translate(name) + ':</td>' + '			<td>' + numf(Data.stats.waves.resources[name], ' ') + '</td>' + '			<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '		</tr>';
				}
				m += '<tr valign=top align=right>' + '		<td class=right>' + translate('Items') + ': </td>';
				var items = [];
				for (var name in Data.stats.waves.items)
					items.push({
						desc: translate(name),
						qty: Data.stats.waves.items[name]
					});
				if (items.length > 0) {
					items.sort(function(a, b) {
						a = a.desc.toLowerCase();
						b = b.desc.toLowerCase();
						if (a > b) return 1;
						if (a < b) return -1;
						return 0;
					});
					for (var i = 0; i < items.length; i++) {
						var perHour = Math.round(items[i].qty / trueRunTime);
						if (i > 0) m += '<tr align=right><td></td>';
						m += '		<td>' + items[i].desc + ':</td>' + '		<td>' + numf(items[i].qty, ' ') + '</td>' + '		<td>(' + numf(perHour, ' ') + ' /' + translate('h') + ')</td>' + '	</tr>';
					}
				}
				m += '</table>';
				div.innerHTML = m;
			},
			trackStats: function(marchId, rpt_wa) {
				var t = Tabs.Waves;
				if (DEBUG_MARCHES) debugLog('Tabs.Waves.trackStats: ' + marchId);

				if (is_null(Data.stats.waves.total_attacks)) Data.stats.waves.total_attacks = 0;
				if (is_null(Data.stats.total.total_attacks)) Data.stats.total.total_attacks = 0;
				++Data.stats.waves.total_attacks;
				++Data.stats.total.total_attacks;
				var res = rpt_wa.report.spoils.resources;
				for (var p in res) {
					objAddTo(Data.stats.waves.resources, p, toNum(res[p]), false);
					objAddTo(Data.stats.total.resources, p, toNum(res[p]), false);
				}
				var killRes = rpt_wa.report.spoils.kill_items;
				for (var p in killRes) {
					objAddTo(Data.stats.waves.resources, p, toNum(killRes[p]), false);
					objAddTo(Data.stats.total.resources, p, toNum(killRes[p]), false);
				}
				var items = rpt_wa.report.spoils.items;
				for (var i = 0; i < items.length; i++) {
					objAddTo(Data.stats.waves.items, items[i], 1, true);
					objAddTo(Data.stats.total.items, items[i], 1, true);
				}
				for (var p in rpt_wa.report.attacker.units) {
					if (rpt_wa.report.attacker.units[p][0] != rpt_wa.report.attacker.units[p][1]) {
						var nb = toNum(rpt_wa.report.attacker.units[p][0]) - toNum(rpt_wa.report.attacker.units[p][1]);
						objAddTo(Data.stats.waves.loss, p, nb, true);
						objAddTo(Data.stats.total.loss, p, nb, true);
					}
				}
				Data.marches.waves[marchId].has_report = true;
				t.showStats();
			},
			eventCoords: function(event) {
				checkCoords('tabWave', Data.options.waves.target.units, Data.options.waves.target);
			},
			eventTroops: function(event) {
				var t = Tabs.Waves;
				var args = event.target.name.split('_');
				if (args[0] == 'AW') {
					var tt = wave_unit_types[args[1]];
					var tr = Data.options.waves.target.units;
					tr[tt] = event.target.value;
					var tr = Data.options.waves.target.saved_units;
					tr[tt] = event.target.value;
					var time = getMarchTime(Data.options.waves.target.x, Data.options.waves.target.y, Data.options.waves.target.units);
					$(UID['tabWave_Distance']).innerHTML = getDistance(Seed.cities[CAPITAL.id].x, Seed.cities[CAPITAL.id].y, Data.options.waves.target.x, Data.options.waves.target.y) + ' (' + timestrShort(time) + ')';
				}
			},

			setWaveEnable: function(onOff) {
				var t = Tabs.Waves;
				var but = $(UID['tabWave_OnOff']);
				clearTimeout(t.attackTimer);
				Data.options.waves.enabled = onOff;
				if (onOff) {
					Messages.addBattleReportListener(t.gotBattleReport);
					but.value = translate('Attacking').toUpperCase();
					but.className = UID['btn_on'];
					t.waveAttackTick();
					t.running.start_at = serverTime();
					Data.stats.waves.start_at = serverTime();
				} else {
					Messages.removeReportListener('waves', t.gotBattleReport);
					but.value = translate('Disabled').toUpperCase();
					but.className = UID['btn_off'];
					if (t.running.start_at !== 0) {
						Data.stats.waves.run_time += (serverTime() - t.running.start_at);
					}
				}
			},

			onUnload: function() {
				var t = Tabs.Waves;
				if (Data.options.waves.enabled && t.running.start_at != 0) {
					Data.stats.waves.run_time += (serverTime() - t.running.start_at);
				}
			},

			waveAttackTick: function() {
				var t = Tabs.Waves,
					targetMsg, retryDelay, availableGeneral, waveUnits, marchCount = 0;
				clearTimeout(t.attackTimer);

				if (!Data.options.waves.enabled) return;

				targetMsg = Data.options.waves.target.type + translate(' at ') + Data.options.waves.target.x + '/' + Data.options.waves.target.y;
				var actionMsg = translate('Wave attack to ') + targetMsg;
				var feedback_element = UID['tabWave_Feedback'];

				var cur_march = getMinDelay();
				marchCount = cur_march.count;
				retryDelay = cur_march.delay;
				availableGeneral = getAvailableGeneral();
				var chk = checkMarch(actionMsg,
					feedback_element,
					marchCount,
					retryDelay,
					Marches.count.waves,
					Data.options.waves.max_marches,
					availableGeneral, true);
				if (chk != 0) {
					t.attackTimer = setTimeout(t.waveAttackTick, retryDelay * 1000);
					return;
				}
				Data.options.waves.target.units = cloneProps(Data.options.waves.target.saved_units);
				waveUnits = checkTroops(CAPITAL.id, Data.options.waves.target.units);
				if (waveUnits !== null) {
					raiseMessage(actionMsg, feedback_element, waveUnits, true, retryDelay);
					t.attackTimer = setTimeout(t.waveAttackTick, retryDelay * 1000);
					return;
				}

				if (Data.options.waves.target.include_great_dragon) {
					var greatDrag = null;
					if ((greatDrag = getAvailableDragon(true, Data.options.waves.target.dragons)) == null) {
						if (!Data.options.waves.send_without_dragon) {
							raiseMessage(actionMsg, feedback_element, 5, false, retryDelay);
							t.attackTimer = setTimeout(t.waveAttackTick, retryDelay * 1000);
							return;
						}
					} else {
						Data.options.waves.target.units[greatDrag] = 1;
					}
				}

				verboseLog(actionMsg + ' ' + translate('attempted'));

				new MyAjax.marchSend(Seed.cities[CAPITAL.id].id, Data.options.waves.target.x, Data.options.waves.target.y, availableGeneral.id, Data.options.waves.target.units, 'waves', function(rslt) {
					var t = Tabs.Waves,
						waveDelay, retryDelay;
					if (rslt.ok && rslt.dat.result.success) {
						t.attackErrors = 0;
						var delay_min = toNum(Data.options.waves.delay_min, nvl(MIN_DELAY_BETWEEN_WAVE, 10));
						var delay_max = toNum(Data.options.waves.delay_max, toNum(delay_min * 1.5));
						waveDelay = Math.floor(Math.random() * (delay_max - delay_min + 1) + delay_min);
						verboseLog(actionMsg + ' ' + translate('Successfully'));
						actionLog(actionMsg);
						dispFeedback(feedback_element, actionMsg);
						t.attackTimer = setTimeout(t.waveAttackTick, waveDelay * 1000);
					} else {
						t.attackErrors++
						retryDelay = 30 * (t.attackErrors * t.attackErrors);
						verboseLog(actionMsg + ' ' + translate('failed and returned error') + ': ' + rslt.errmsg + ' - ' + translate('Retry in') + ' ' + retryDelay + ' ' + translate('seconds'));
						actionLog(actionMsg + ' ' + translate('failed'));
						if (rslt.status === 429) {
							retryDelay = E429_DELAY;
							raiseMessage(actionMsg + ' ' + translate('failed') + ' - <b>API</b> ', feedback_element, 6, false, retryDelay);
						} else if (rslt.status === 509) {
							retryDelay = 600;
							raiseMessage(actionMsg + ' ' + translate('failed') + ' - ', feedback_element, 6, false, retryDelay);
						} else
							dispFeedback(feedback_element, actionMsg + ' ' + translate('failed'));
						t.attackTimer = setTimeout(t.waveAttackTick, retryDelay * 1000);
					}
				});
			},
			marchTick: function() {
				var t = Tabs.Waves;
				clearTimeout(t.marchTimer);
				Marches.updateTable($(UID['tabWave_Marches']), 'waves');
				t.marchTimer = setTimeout(t.marchTick, 1000);
			},
			show: function() {
				var t = Tabs.Waves;
				t.marchTick();
				switch (t.contentType || 0) {
					case 0:
						t.tabWaveAttack();
						break;
					case 1:
						t.tabWaveHistory();
						break;
					case 2:
						t.tabWaveStats();
						break;
					case 3:
						t.tabWaveLastReport();
						break;
				}
			},
			hide: function() {
				var t = Tabs.Waves;
				clearTimeout(t.marchTimer);
				Data.options.waves.current_tab = t.contentType;
			}
		};
		/**
		 * ****************************** Wave Tab
		 * **********************************
		 */


		/**
		 * ****************************** Fortuna's Wheel Tab
		 * ***********************
		 */
		Tabs.Wheel = {
			tabOrder: WHEEL_TAB_ORDER,
			tabLabel: 'Fortuna',
			tabDisabled: !WHEEL_TAB_ENABLE,
			container: null,
			contentType: 0,
			lastSubTab: 'tabWheelPlay',
			minigame_id: 0,
			last_results: [],
			last_type: 'regular',
			played: 0,
			timer: 0,
			autoTimer: 0,
			refreshTimer: 0,
			delay: 0,
			is_running: false,

			init: function(div) {
				var t = Tabs.Wheel;
				t.container = div;
				Data.setDefaultValues('wheel');
				var m = '<div class=' + UID['title'] + '>' + translate('Fortuna\'s chance') + '</div>' 
                + '<ul class=tabs>' 
                + '	<li class="tab first"><a id=' + setUID('tabWheelPlay') + '>' + translate('Play') + '</a></li>' 
                + '	<li class=tab><a id=' + setUID('tabWheelStats') + '>' + translate('Stats') + '</a></li>' 
                + '</ul>' 
                + '<div id=' + setUID('tabWheel_Content') + ' style="padding-top:0px; height:655px; max-height:655px; overflow-y:auto; width:540px; max-width:540px; overflow-x:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabWheelPlay']).addEventListener('click', t.tabWheelPlay, false);
				$(UID['tabWheelStats']).addEventListener('click', t.tabWheelStats, false);
				window.addEventListener('unload', t.onUnload, false);
				t.contentType = toNum(Data.options.wheel.current_tab);
				t.played = 0;
				t.show();
			},
			show: function() {
				var t = Tabs.Wheel;
				switch (toNum(t.contentType)) {
					case 0:
						t.tabWheelPlay();
						break;
					case 1:
						t.tabWheelStats();
						break;
				}
			},
			onUnload: function() {
				var t = Tabs.Wheel;
				logit('===============  Tabs.Wheel.onUnload');
				Data.options.wheel.current_tab = t.contentType;
			},

			/** PLAY SUB-TAB ** */
			tabWheelPlay: function() {
				var t = Tabs.Wheel;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabWheelPlay']).className = 'selected';
				$(UID['tabWheelPlay']).style.zIndex = 1;
				t.lastSubTab = 'tabWheelPlay';
				t.contentType = 0;
				setUID('tabWheel_Type');
				var m = '<div id=' + setUID('tabWheel_grid') + ' style="height:640px">' + '<div class=' + UID['title'] + '>' + translate('Play') + ' ' + translate('Fortuna\'s chance') + '</div>' + '<div class=' + UID['content'] + '>' + '	<table class=' + UID['table'] + ' style="margin-top:3px" width=100%>' + '		<tr valign=top align=left>' + '			<td width=5%><input type=radio name=' + UID['tabWheel_Type'] + ' value="regular" /></td>' + '			<td width=35% align=left><label>' + translate('FortunasTicket') + '<span id=' + setUID('tabWheel_nbTickets') + '></span></label></td>' + '			<td width=60% align=center><label><input id=' + setUID('tabWheel_Play') + ' type=button value="' + translate('Play') + '" /></label></td>' + '		</tr>' + '		<tr valign=top align=left>' + '			<td width=5%><input type=radio name=' + UID['tabWheel_Type'] + ' value="golden" /></td>' + '			<td align=left width=35%><label>' + translate('FortunasGoldenTicket') + '<span id=' + setUID('tabWheel_nbGold') + '></span></label></td>' + '			<td width=60% align=center><label><input id=' + setUID('tabWheel_Choose') + ' type=button value="' + translate('Choose') + '" /></label></td>' + '		</tr>' + '	</table><br>' + '	<center><div id=' + setUID('tabWheel_Grid') + ' style="padding-top:0px; height:311px; max-height:311px; overflow-y:auto; width:479px; max-width:479px"></div></center>' + '	<br>' + '	<table class=' + UID['table'] + ' style="margin-top:3px" width=100%>' + '		<tr valign=top align=center>' + '			<td width=30%><label><input id=' + setUID('tabWheel_Refresh') + ' type=button value="' + translate('Refresh') + '" /></label></td>' + '			<td width=40% class=jewel><div id=' + setUID('tabWheel_wait') + '></div></td>' + '			<td width=30%><label><input id=' + setUID('tabWheel_Stop') + ' type=button value="' + translate('Stop') + '" /></label></td>' + '		</tr>' + '	</table><br>' + '	<div class=' + UID['title'] + ' style="margin-bottom:10px">' + translate('Config') + '</div>' + '	<table class=' + UID['table'] + ' width=100% style="color:#000;">' + '		<tr valign=top>' + '			<td><label><input id=' + setUID('tabWheel_AutoRefresh') + ' ' + (Data.options.wheel.auto_refresh ? 'CHECKED ' : '') + ' type=checkbox /></label></td>' + '			<td><label>' + translate('Auto-refresh wheel prize list every') + '&nbsp</label>' + '				<input id=' + setUID('tabWheel_chkTime') + ' size=1 maxlength=2 type=text value="' + Data.options.wheel.delay + '" />&nbsp' + '				<select id=' + setUID('tabWheel_chkUnit') + ' size=1>' + '					<option value=1 ' + (Data.options.wheel.unit == 1 ? 'selected' : '') + '>' + translate('Seconds') + '</option>' + '					<option value=60 ' + (Data.options.wheel.unit == 60 ? 'selected' : '') + '>' + translate('minutes') + '</option>' + '					<option value=3600 ' + (Data.options.wheel.unit == 3600 ? 'selected' : '') + '>' + translate('hours') + '</option>' + '				</select>' + '			</td>' + '		</tr><tr valign=top>' + '			<td  style="font-size:2px">&nbsp</td>' + '		</tr><tr valign=top>' + '			<td></td><td><label>' + translate('Stop the wheel when found the following items') + '&nbsp' + '		</tr><tr valign=top>' + '			<td colspan=2>' + '				<table class=' + UID['table'] + ' width=100% style="color:#000;"><tr valign=top>' + '					<td width=50%><table width=100%><tr valign=top><td><div id=' + setUID('tabWheel_item1') + '></div></td></tr></table></td>' + '					<td width=50%><table width=100%><tr valign=top><td><div id=' + setUID('tabWheel_item2') + '></div></td></tr></table></td>' + '				</tr></table>' + '			</td>' + '		</tr><tr valign=top>' + '			<td width=5%></td><td><label>' + translate('And at least') + '&nbsp' + '				<select id=' + setUID('tabWheel_number') + ' size=1>' + '					<option value=1 ' + (Data.options.wheel.number == 1 ? 'selected' : '') + '>1</option>' + '					<option value=2 ' + (Data.options.wheel.number == 2 ? 'selected' : '') + '>2</option>' + '					<option value=3 ' + (Data.options.wheel.number == 3 ? 'selected' : '') + '>3</option>' + '					<option value=4 ' + (Data.options.wheel.number == 4 ? 'selected' : '') + '>4</option>' + '					<option value=5 ' + (Data.options.wheel.number == 5 ? 'selected' : '') + '>5</option>' + '					<option value=6 ' + (Data.options.wheel.number == 6 ? 'selected' : '') + '>6</option>' + '				</select>&nbsp' + translate('of the following items') + '</label></td>' + '		</tr><tr valign=top>' + '		</tr>' + '	</table>' + '	<table class=' + UID['table'] + ' width=100% style="color:#000;">' + '		<tr valign=top>' + '			<td width=50%><table width=100%>' + '				<tr valign=top><td><div id=' + setUID('tabWheel_item3') + '></div></td></tr>' + '				<tr valign=top><td><div id=' + setUID('tabWheel_item4') + '></div></td></tr>' + '				<tr valign=top><td><div id=' + setUID('tabWheel_item5') + '></div></td></tr>' + '			</table></td>' + '			<td width=50%><table width=100%>' + '				<tr valign=top><td><div id=' + setUID('tabWheel_item6') + '></div></td></tr>' + '				<tr valign=top><td><div id=' + setUID('tabWheel_item7') + '></div></td></tr>' + '				<tr valign=top><td><div id=' + setUID('tabWheel_item8') + '></div></td></tr>' + '			</table>' + '			</td>' + '		</tr>' + '	</table>' + '	<table class=' + UID['table'] + ' width=100% style="color:#000;">' + '		<tr valign=top>' + '			<td><label><input id=' + setUID('tabWheel_AutoPlay') + ' ' + (Data.options.wheel.auto_play ? 'CHECKED ' : '') + ' type=checkbox /></label></td>' + '			<td><label>' + translate('Auto-play : Maximum tickets to play ') + '&nbsp</label>' + '				<input id=' + setUID('tabWheel_AutoMax') + ' size=1 maxlength=4 type=text value="' + Data.options.wheel.max_auto + '" />&nbsp (0 = ' + translate('no max') + ')' + '			</td>' + '			<td width=20% align=right class=jewel><div id=' + setUID('tabWheel_played') + '></div></td>' + '		</tr>' + '	</table>' + '</div>';

				$(UID['tabWheel_Content']).update(m);

				$(UID['tabWheel_Play']).observe('click', onPlay);
				$(UID['tabWheel_Refresh']).observe('click', getPrizeList);
				$(UID['tabWheel_chkTime']).observe('change', delayChanged);
				$(UID['tabWheel_chkUnit']).observe('change', delayChanged);
				$(UID['tabWheel_number']).observe('change', numberChanged);
				$(UID['tabWheel_AutoMax']).observe('change', maxChanged);
				$(UID['tabWheel_Choose']).observe('click', onChoose);
				$(UID['tabWheel_Stop']).observe('click', onStop);
				$(UID['tabWheel_item1']).observe('change', onChangeMandatory);
				$(UID['tabWheel_item2']).observe('change', onChangeMandatory);
				$(UID['tabWheel_item3']).observe('change', onChangeOptional);
				$(UID['tabWheel_item4']).observe('change', onChangeOptional);
				$(UID['tabWheel_item5']).observe('change', onChangeOptional);
				$(UID['tabWheel_item6']).observe('change', onChangeOptional);
				$(UID['tabWheel_item7']).observe('change', onChangeOptional);
				$(UID['tabWheel_item8']).observe('change', onChangeOptional);
				$(UID['tabWheel_AutoRefresh']).observe('change', function(event) {
					Data.options.wheel.auto_refresh = event.target.checked;
					if (t.timer) {
						clearTimeout(t.timer);
					}
					checkRefreshTimer();
				});
				$(UID['tabWheel_AutoPlay']).observe('change', function(event) {
					Data.options.wheel.auto_play = event.target.checked;
					if (t.timer) {
						clearTimeout(t.timer);
					}
				});

				var r = document.getElementsByName(UID['tabWheel_Type']);
				for (i = 0; i < r.length; i++) {
					r[i].addEventListener('change', onChangeType, false);
					r[i].checked = (r[i].value == Data.options.wheel.type);
				}
				checkRefreshTimer();
				display_grid();
				for (var i = 0; i < 8; i++) displayItemList(i);

				function checkRefreshTimer() {
					var t = Tabs.Wheel;
					if (t.refreshTimer) clearInterval(t.refreshTimer);
					if (Data.options.wheel.auto_refresh)
						t.refreshTimer = setInterval(refreshTick, 1000);
				}

				function delayChanged(event) {
					var t = Tabs.Wheel;
					var etime = $(UID['tabWheel_chkTime']);
					var eunit = $(UID['tabWheel_chkUnit']);
					var time = toNum(etime.value);
					var unit = toNum(eunit.value);
					etime.value = time;
					eunit.value = unit;
					if ((time * unit) < 3) { /*
												 * Do not allow delay lower than
												 * 3secs
												 */
						etime.style.backgroundColor = 'red';
						eunit.style.backgroundColor = 'red';
						return;
					}
					etime.style.backgroundColor = '';
					eunit.style.backgroundColor = '';
					Data.options.wheel.delay = time;
					Data.options.wheel.unit = unit;
				}

				function display_grid() {
					var t = Tabs.Wheel,
						i = 0,
						regular = ((Data.options.wheel.type == 'regular') ? 0 : 1);
					if ($(UID['tabWheel_nbTickets'])) $(UID['tabWheel_nbTickets']).innerHTML = ' (' + translate('You have') + ' <b>' + getTicketNb() + '</b>)'
					if ($(UID['tabWheel_nbGold'])) $(UID['tabWheel_nbGold']).innerHTML = ' (' + translate('You have') + ' <b>' + getGoldenNb() + '</b>)'
					setButtonStyle($(UID['tabWheel_Play']), false);
					setButtonStyle($(UID['tabWheel_Choose']), false);
					setButtonStyle($(UID['tabWheel_Refresh']), false);
					setButtonStyle($(UID['tabWheel_Stop']), false, 'btn_off');
					var m = '<table class=' + UID['table_wrap'] + ' style="border:1px solid #898989; background:none" width="479px" height=100% style="white-space:wrap">';
					if ((getTicketNb() == 0 && regular == 0) || (getGoldenNb() == 0 && regular == 1)) {
						m += '	<tr valign=center align=center style="height:308px">' + '	<td width=100%><span class=' + UID['red'] + '><b>' + translate('You have') + ' 0 ' + translate((regular == 0) ? 'FortunasTicket' : 'FortunasGoldenTicket') + '</b></span></td>' + '</tr>';
					} else {
						for (var y = 0; y < 4; y++) {
							m += '	<tr valign=center align=center style="height:76px">';
							for (var x = 0; x < 3; x++) {
								m += '	<td  id=' + setUID('tabWheel_box_' + i) + ' width="158px" style="border:1px solid #898989"><div id=' + setUID('tabWheel_square_' + i) + '></div></td>';
								i++;
							}
							m += '</tr>';
						}
					}
					m += '</table>';
					if ($(UID['tabWheel_Grid'])) $(UID['tabWheel_Grid']).innerHTML = m;
					if ($(UID['tabWheel_played'])) $(UID['tabWheel_played']).innerHTML = '(' + translate('played this session') + ' <b>' + t.played + '</b>)';
					if ((getTicketNb() > 0 && regular == 0) || (getGoldenNb() > 0 && regular == 1)) {
						if (t.minigame_id && t.minigame_id != 0 && t.last_type == Data.options.wheel.type) {
							for (var r = 0; r < t.last_results.length; r++) {
								if ($(UID['tabWheel_square_' + r]))
									$(UID['tabWheel_square_' + r]).innerHTML = translate(t.last_results[r].type);
								if ($(UID['tabWheel_box_' + r]))
									$(UID['tabWheel_box_' + r]).style.backgroundColor = 'rgb(245,245,228)';
								var found = false;
								for (var s = 0; s < Data.options.wheel.mandatory[regular].length && !found; s++) {
									if (Data.options.wheel.mandatory[regular][s] == t.last_results[r].type) {
										found = true;
										if ($(UID['tabWheel_box_' + r]))
											$(UID['tabWheel_box_' + r]).style.backgroundColor = 'rgb(255,190,165)';
									}
								}
								var found = false;
								for (var s = 0; s < Data.options.wheel.optional[regular].length && !found; s++) {
									if (Data.options.wheel.optional[regular][s] == t.last_results[r].type) {
										found = true;
										if ($(UID['tabWheel_box_' + r]))
											$(UID['tabWheel_box_' + r]).style.backgroundColor = 'rgb(255,220,205)';
									}
								}
							}
							setButtonStyle($(UID['tabWheel_Choose']), true, 'btn_green');
							if ((Data.options.wheel.auto_play || (t.played >= Data.options.wheel.max_auto && Data.options.wheel.max_auto > 0)) && !t.is_running) {
								setButtonStyle($(UID['tabWheel_Play']), true);
							} else if (Data.options.wheel.auto_refresh) {
								setButtonStyle($(UID['tabWheel_Refresh']), true);
								if (t.is_running) {
									setButtonStyle($(UID['tabWheel_Stop']), true, 'btn_off');
									setButtonStyle($(UID['tabWheel_Refresh']), false);
								}
							}
						} else if (!Data.options.wheel.auto_play || (t.played >= Data.options.wheel.max_auto && Data.options.wheel.max_auto > 0) || !t.minigame_id || t.minigame_id == 0)
							setButtonStyle($(UID['tabWheel_Play']), true);
					} else setButtonStyle($(UID['tabWheel_Play']), false);
				}

				function displayItemList(num) {
					var t = Tabs.Wheel;
					if (num < 2)
						var source = Data.options.wheel.mandatory[((Data.options.wheel.type == 'regular') ? 0 : 1)][num];
					else
						var source = Data.options.wheel.optional[((Data.options.wheel.type == 'regular') ? 0 : 1)][num];
					var list = getItemList();
					var m = '<span class=left>- &nbsp</span><select id="' + setUID('tabWheel_sel' + num) + '" ref=' + num + '>' + '	<option value="null">&nbsp</option>';
					for (var i = 0; i < list.length; i++) {
						var selected = '',
							desc = '';
						if (list[i].type == source) selected = 'selected';
						if (list[i].desc.length > 38) desc = list[i].desc.substring(0, 35) + '...';
						else desc = list[i].desc;
						m += '<option value="' + list[i].type + '" ' + selected + '>' + desc + '</option>';
					}
					m += '</select>';
					var id = 'tabWheel_item' + (num + 1);
					if ($(UID[id])) $(UID[id]).innerHTML = m;
				}

				function gatherObjstat(item, played, earned) {
					var regular = ((Data.options.wheel.type == 'regular') ? 0 : 1);
					if (!Data.stats.wheel.items[regular][item]) Data.stats.wheel.items[regular][item] = [0, 0, 0]; /*
																													 * [displayed,
																													 * played,
																													 * won]
																													 */
					if (!played) {
						Data.stats.wheel.items[regular][item][0]++;
						Data.stats.wheel.total_grids[regular]++;
					} else if (!earned) {
						Data.stats.wheel.items[regular][item][1]++;
						Data.stats.wheel.total_played[regular]++;
					} else {
						Data.stats.wheel.items[regular][item][2]++;
						Data.stats.wheel.last_won[regular].push({
							item: item,
							at: serverTime()
						});
					}
				}

				function getItemList(limit) {
					var t = Tabs.Wheel;
					var items = [];
					for (var type in Seed.items) {
						for (item = 0; item < Seed.items[type].length; item++) {
							var found = false;
							for (var x = 0; x < items.length && !found; x++)
								if (items[x].type == Seed.items[type][item].type) found = true;
							if (!found) items.push({
								desc: translate(Seed.items[type][item].type, true),
								type: Seed.items[type][item].type
							});
						}
					}
					items.sort(function(a, b) {
						a = a.desc.toLowerCase();
						b = b.desc.toLowerCase();
						if (a > b) return 1;
						if (a < b) return -1;
						return 0;
					});
					return items;
				}

				function getGoldenNb() {
					return (toNum(Seed.player.items['FortunasGoldenTicket'] || 0) + (Seed.player.tickets.gold_club ? 1 : 0));
				}

				function getTicketNb() {
					return (toNum(Seed.player.items['FortunasTicket'] || 0) + (Seed.player.tickets.fortunas_chance ? 1 : 0));
				}

				function getPrizeList() {
					if (t.timer) clearTimeout(t.timer);
					if (t.autoTimer) clearTimeout(t.autoTimer);
					t.is_running = true;
					setButtonStyle($(UID['tabWheel_Choose']), false);
					setButtonStyle($(UID['tabWheel_Refresh']), false);
					setButtonStyle($(UID['tabWheel_Stop']), false, 'btn_off');
					MyAjax.getMinigame((Data.options.wheel.type || 'regular'), function(results) {
						var t = Tabs.Wheel,
							regular = ((Data.options.wheel.type == 'regular') ? 0 : 1);
						if (results && results.ok) {
							t.last_results = cloneProps(results.list);
							t.last_type = Data.options.wheel.type;
							var searched = 0,
								have = 0,
								count = 0;
							for (var i = 0; i < Data.options.wheel.mandatory[regular].length && !found; i++) {
								var mandatory_item = Data.options.wheel.mandatory[regular][i];
								if (mandatory_item != null && mandatory_item != undefined && mandatory_item != 'null') searched++;
							}
							for (var x = 0; x < results.list.length; x++) {
								gatherObjstat(results.list[x].type);
								if ($(UID['tabWheel_square_' + x]))
									$(UID['tabWheel_square_' + x]).innerHTML = translate(results.list[x].type);
								if ($(UID['tabWheel_box_' + x]))
									$(UID['tabWheel_box_' + x]).style.backgroundColor = 'rgb(245,245,228)';
								var found = false;
								for (var i = 0; i < Data.options.wheel.mandatory[regular].length && !found; i++) {
									if (Data.options.wheel.mandatory[regular][i] == results.list[x].type) {
										have++;
										found = true;
										if ($(UID['tabWheel_box_' + x]))
											$(UID['tabWheel_box_' + x]).style.backgroundColor = 'rgb(255,190,165)';
									}
								}
								var found = false;
								for (var i = 0; i < Data.options.wheel.optional[regular].length && !found; i++) {
									if (Data.options.wheel.optional[regular][i] == results.list[x].type) {
										count++;
										found = true;
										if ($(UID['tabWheel_box_' + x]))
											$(UID['tabWheel_box_' + x]).style.backgroundColor = 'rgb(255,220,205)';
									}
								}
							}
							t.minigame_id = results.id;
							Seed.player.tickets.fortunas_chance = results.ticket;
							Seed.player.tickets.gold_club = results.golden;
							if (toNum(t.minigame_id) > 0) setButtonStyle($(UID['tabWheel_Choose']), true, 'btn_green');
							if (Data.options.wheel.auto_refresh && (have < searched || count < Data.options.wheel.number)) {
								setButtonStyle($(UID['tabWheel_Stop']), true, 'btn_off');
								t.delay = Data.options.wheel.delay * Data.options.wheel.unit;
								t.timer = setTimeout(getPrizeList, (Data.options.wheel.delay * Data.options.wheel.unit) * 1000 + Math.randRange(10, 500));
							} else {
								if (Data.options.wheel.auto_play && (t.played < Data.options.wheel.max_auto || Data.options.wheel.max_auto == 0)) {
									setButtonStyle($(UID['tabWheel_Stop']), true, 'btn_off');
									t.autoTimer = setTimeout(onAutoChoose, (Data.options.wheel.delay * Data.options.wheel.unit) * 1000 + Math.randRange(10, 500));
								} else
									SoundPlayer.PlaySound('fortuna');
								setButtonStyle($(UID['tabWheel_Refresh']), true);
							}
						}
					});
				}

				function maxChanged(event) {
					var t = Tabs.Wheel;
					var emax = $(UID['tabWheel_AutoMax']);
					var max = toNum(emax.value);
					emax.value = max;
					if (max < 0) {
						emax.style.backgroundColor = 'red';
						return;
					}
					emax.style.backgroundColor = '';
					Data.options.wheel.max_auto = max;
				}

				function numberChanged(event) {
					var t = Tabs.Wheel;
					var el = $(UID['tabWheel_number']);
					var num = toNum(el.value);
					el.value = num;
					Data.options.wheel.number = num;
				}

				function onChangeMandatory(event) {
					var t = Tabs.Wheel;
					var regular = ((Data.options.wheel.type == 'regular') ? 0 : 1);
					var num = event.target.getAttribute('ref');
					var type = event.target.value;
					Data.options.wheel.mandatory[regular][num] = type;
					display_grid();
				}

				function onChangeOptional(event) {
					var t = Tabs.Wheel;
					var regular = ((Data.options.wheel.type == 'regular') ? 0 : 1);
					var num = event.target.getAttribute('ref');
					var type = event.target.value;
					Data.options.wheel.optional[regular][num] = type;
					display_grid();
				}

				function onChangeType(event) {
					var t = Tabs.Wheel;
					Data.options.wheel.type = event.target.value;
					if (t.timer) clearTimeout(t.timer);
					t.is_running = false;
					display_grid();
					for (var i = 0; i < 8; i++) displayItemList(i);
				}

				function onAutoChoose() {
					var t = Tabs.Wheel;
					if (t.timer) clearTimeout(t.timer);
					if (t.autoTimer) clearTimeout(t.autoTimer);
					setButtonStyle($(UID['tabWheel_Choose']), false);
					setButtonStyle($(UID['tabWheel_Refresh']), false);
					setButtonStyle($(UID['tabWheel_Stop']), false, 'btn_off');
					for (var r = 0; r < t.last_results.length; r++)
						gatherObjstat(t.last_results[r].type, true);
					MyAjax.saveMinigame(t.minigame_id, t.last_type, callback, false);

					function callback(r) {
						var t = Tabs.Wheel;
						if (r.ok && r.item) {
							t.played++;
							t.minigame_id = 0;
							consoleLog('Fortuna : ' + translate('You won') + ' <b>' + translate(r.item.type) + '</b>');
							CalciumNotifications.showFortunaWin(translate('You won') + ' ' + translate(r.item.type));
							SoundPlayer.PlaySound('fortuna');
							gatherObjstat(r.item.type, true, true);
							if ($(UID['tabWheel_played']))
								$(UID['tabWheel_played']).innerHTML = '(' + translate('played this session') + ' <b>' + t.played + '</b>)';
							if (Data.options.wheel.auto_play && t.played < Data.options.wheel.max_auto) {
								setButtonStyle($(UID['tabWheel_Refresh']), false);
								setButtonStyle($(UID['tabWheel_Stop']), true, 'btn_off');
								t.delay = Data.options.wheel.delay * Data.options.wheel.unit;
								t.timer = setTimeout(getPrizeList, (Data.options.wheel.delay * Data.options.wheel.unit) * 1000 + Math.randRange(10, 500));
							} else {
								t.is_running = false;
								display_grid();
							}
						} else {
							setButtonStyle($(UID['tabWheel_Stop']), false, 'btn_off');
							consoleLog(translate('Error while retrieving the item won') + ' : ' + r.errmsg);
						}
					}
				}

				function onChoose() {
					var t = Tabs.Wheel;
					if (t.timer) clearTimeout(t.timer);
					if (t.autoTimer) clearTimeout(t.autoTimer);
					t.is_running = false;
					setButtonStyle($(UID['tabWheel_Choose']), false);
					setButtonStyle($(UID['tabWheel_Refresh']), false);
					setButtonStyle($(UID['tabWheel_Stop']), false, 'btn_off');
					for (var r = 0; r < t.last_results.length; r++)
						gatherObjstat(t.last_results[r].type, true);
					var dial = new ModalDialog(t.container, 300, 165, '', false, null);
					dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
					dial.getContentDiv().innerHTML = translate('Please wait...');
					MyAjax.saveMinigame(t.minigame_id, t.last_type, callback, false);

					function callback(r) {
						var t = Tabs.Wheel;
						if (r.ok && r.item) {
							dial.getContentDiv().innerHTML = translate('You won') + '\n\n <b>' + translate(r.item.type) + '</b>';
							t.minigame_id = 0;
							consoleLog('Fortuna : ' + translate('You won') + ' <b>' + translate(r.item.type) + '</b>');
							gatherObjstat(r.item.type, true, true);
						} else
							dial.getContentDiv().innerHTML = translate('Error while retrieving the item won') + ' : ' + r.errmsg;
						dial.allowClose(true);
						dial.notifyClose = display_grid();
					}
				}

				function onPlay() {
					var t = Tabs.Wheel;
					setButtonStyle($(UID['tabWheel_Play']), false);
					t.played = 0;
					checkRefreshTimer();
					getPrizeList();
				}

				function onStop() {
					var t = Tabs.Wheel;
					if (t.timer) clearTimeout(t.timer);
					if (t.autoTimer) clearTimeout(t.autoTimer);
					t.is_running = false;
					display_grid();
				}

				function refreshTick() {
					var t = Tabs.Wheel,
						wait = $(UID['tabWheel_wait']);
					if (t.is_running && Data.options.wheel.auto_refresh) {
						if (wait) wait.innerHTML = translate('Refresh in') + ' ' + t.delay + 's';
						t.delay--;
						if (t.delay < 0) t.delay = 0;
					} else {
						if (wait) wait.innerHTML = '';
					}
				}
			},

			/** STATS SUB-TAB ** */
			tabWheelStats: function() {
				var t = Tabs.Wheel;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabWheelStats']).className = 'selected';
				$(UID['tabWheelStats']).style.zIndex = 1;
				t.lastSubTab = 'tabWheelStats';
				t.contentType = 1;
				var m = '<div id=' + setUID('tabWheel_stats') + ' style="height:655px">' + '<div class=' + UID['title'] + '>' + translate('Stats') + ' ' + translate('Fortuna\'s chance') + '</div>' + '<div class=' + UID['content'] + '>' + '	<table class=' + UID['table'] + ' style="margin-top:3px" width=100%>' + '		<tr valign=top align=left>' + '			<td width=5%><input type=radio name=' + UID['tabWheelStats_Type'] + ' value="regular" /></td>' + '			<td width=35% align=left><label>' + translate('FortunasTicket') + '</label></td>' + '			<td width=20%>&nbsp</td>' + '			<td width=5%><input type=radio name=' + UID['tabWheelStats_Type'] + ' value="golden" /></td>' + '			<td align=left width=35%><label>' + translate('FortunasGoldenTicket') + '</label></td>' + '		</tr>' + '	</table>' + '	<div id=' + setUID('tabWheelStats_Content') + ' style="padding-top:0px; height:580px; max-height:580px; overflow-y:auto"></div>' + '	<center><input id=' + setUID('tabWheelStats_Clear') + ' type=button value="' + translate('Clear Stats') + '" /></center>' + '</div></div>';
				$(UID['tabWheel_Content']).innerHTML = m;
				$(UID['tabWheelStats_Clear']).addEventListener('click', function() {
					clearStats();
					showStats();
				}, false);
				var r = document.getElementsByName(UID['tabWheelStats_Type']);
				for (i = 0; i < r.length; i++) {
					r[i].addEventListener('change', onChangeType, false);
					r[i].checked = (r[i].value == Data.stats.wheel.type);
				}
				showStats();

				function clearStats() {
					var t = Tabs.Wheel;
					Data.stats.wheel = {
						type: 'regular',
						total_grids: [0, 0],
						total_played: [0, 0],
						items: [{}, {}],
						last_won: [
							[],
							[]
						]
					};
					showStats();
				}

				function onChangeType(event) {
					var t = Tabs.Wheel;
					Data.stats.wheel.type = event.target.value;
					showStats();
				}

				function showStats() {
					var t = Tabs.Wheel,
						i = 0,
						regular = ((Data.stats.wheel.type == 'regular') ? 0 : 1);
					var total = toNum(Data.stats.wheel.total_grids[regular]);
					var played = toNum(Data.stats.wheel.total_played[regular]);
					var m = '<div id=' + setUID('tabWheelStats_Report') + ' class=' + UID['status_ticker'] + ' style="height:545px; max-height:545px; overflow-y:auto ; overflow-x:auto ; margin-top:1px !important">' + '<table class=' + UID['table'] + ' width=100%>' + '	<tr>' + '		<td class=right width=15%>' + translate('Total grids displayed') + ': </td>' + '		<td width=25%>' + numf(Math.round(total / 12)) + '</td>' + '		<td width=20%>&nbsp</td>' + '		<td class=right width=15%>' + translate('Total grids played') + ': </td>' + '		<td width=25%>' + numf(Math.round(played / 12)) + '</td>' + '	</tr>' + '</table>' + '<div id=' + setUID('tabWheelStats_ItemsWon') + ' style="height:75px; max-height:75px; overflow-y:auto; margin-top:1px !important"></div>' + '<div id=' + setUID('tabWheelStats_ItemsStats') + ' style="height:440px; max-height:440px; overflow-y:auto; margin-top:1px !important"></div>' + '</div>';
					$(UID['tabWheelStats_Content']).innerHTML = m;
					var m = '<table class=' + UID['row_style'] + ' width=100%>' + '	</tr><tr class=' + UID['row_headers'] + '>' + '		<td width="60%">' + translate('Last items won') + '</td>' + '		<td width="40%">' + translate('Date') + '</td>' + '	</tr>';
					var item_won = cloneProps(Data.stats.wheel.last_won[regular]);
					item_won.sort(function(a, b) {
						return (b.at - a.at);
					});
					for (var i = 0; i < item_won.length; i++) {
						m += '<tr><td class=left>' + translate(item_won[i].item, true) + '</td>' + '	<td align=right>' + new Date(item_won[i].at * 1000).myString() + '</td>' + '</tr>';
					}
					$(UID['tabWheelStats_ItemsWon']).innerHTML = m + '</table>';
					var m = '<table class=' + UID['row_style'] + ' width=100%>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td valign=middle width=33%><b>' + translate('Items') + '</b></td>' + '		<td valign=middle width=20% colspan=2><b>' + translate('All grids') + '</b></td>' + '		<td valign=middle width=40% colspan=4><b>' + translate('Grids played') + '</b></td>' + '		<td valign=middle width=7% colspan=2><b>' + translate('Chance') + '</b></td>' + '	</tr>' + '	<tr class=' + UID['row_headers'] + '>' + '		<td valign=middle width=30%>&nbsp</td>' + '		<td valign=middle width=13%><b>' + translate('Displayed') + '</b></td>' + '		<td valign=middle width=7%><b>' + translate('%age') + '</b></td>' + '		<td valign=middle width=13%><b>' + translate('Played') + '</b></td>' + '		<td valign=middle width=7%><b>' + translate('%age') + '</b></td>' + '		<td valign=middle width=13%><b>' + translate('Won') + '</b></td>' + '		<td valign=middle width=7%><b>' + translate('%age') + '</b></td>'+'   			<td valign=middle width=7%><b>' + translate('to win') + '</b></td>' + '	</tr>';
					var item_stats = [];
					for (var item in Data.stats.wheel.items[regular]) {
						var obj = Data.stats.wheel.items[regular][item];
						item_stats.push({
							item: item,
							found: toNum(obj[0]),
							played: toNum(obj[1]),
							won: toNum(obj[2])
						});
					}
					item_stats.sort(function(a, b) {
						if (a.found < b.found) return 1;
						else if (a.found > b.found) return -1;
						else {
							a = translate(a.item, true).toLowerCase();
							b = translate(b.item).toLowerCase();
							if (a > b) return 1;
							else if (a < b) return -1;
							return 0;
						}
					});
					for (var i = 0; i < item_stats.length; i++) {
						var found = toNum(item_stats[i].found);
						var pctf = Math.round(found / total * 10000) / 100;
						var tried = toNum(item_stats[i].played);
						var pctt = ((tried > 0) ? (Math.round(tried / played * 10000) / 100) + '%' : '');
						var won = toNum(item_stats[i].won);
						var pctw = ((won > 0) ? (Math.round(won / Math.round(played / 12) * 10000) / 100) + '%' : '');
						var chance = ((won > 0) ? (Math.round(won / (tried * 12) * 10000) / 100) + '%' : '');
						m += '<tr><td class=left>' + translate(item_stats[i].item, true) + '</td>' + '	<td align=right>' + numf(found) + '</td>' + '	<td align=right>' + pctf + '%</td>' + '	<td align=right>' + ((tried > 0) ? numf(tried) : '') + '</td>' + '	<td align=right>' + pctt + '</td>' + '	<td align=right>' + ((won > 0) ? numf(won) : '') + '</td>' + '	<td align=right>' + pctw + '</td>' + '	<td align=right>' + chance + '</td>' + '</tr>';
					}
					$(UID['tabWheelStats_ItemsStats']).innerHTML = m + '</table>';
				}
			},

			hide: function() {
				var t = Tabs.Wheel;
				if (t.refreshTimer) clearInterval(t.refreshTimer);
			}
		}
		/**
		 * ****************************** Fortuna's Wheel Tab
		 * ***********************
		 */


		/**
		 * ****************************** Options Tab
		 * *******************************
		 */
		Tabs.Options = {
			tabOrder: OPTIONS_TAB_ORDER,
			tabLabel: 'Opts',
			tabDisabled: !OPTIONS_TAB_ENABLE,
			container: null,
			refreshTimer: null,
			flashRefreshTimer: null,
			refreshPlayerBusy: false,

			init: function(div) {
				var t = Tabs.Options;
				t.container = div;
				t.own = Seed.player.alliance ? Seed.player.alliance.id : -1;

				var selected = new Array(4);
				for (var i = 0; i < selected.length; i++) {
					selected[i] = '';
				}
				switch (Data.options.autoCollect.unit) {
					case 1:
						selected[1] = 'selected';
						break;
					case 60:
						selected[2] = 'selected';
						break;
					case 3600:
						selected[3] = 'selected';
						break;
					case 86400:
						selected[4] = 'selected';
						break;
					default:
						seleacted[3] = 'selected';
				}
				try {
					m = '<div class=' + UID['title'] + ' style="margin-bottom:10px">' + translate('Options') + '</div>' 
					+ '<div style="height:665px; max-height:665px; width:540px; max-width:540px; overflow-y:auto; overflow-x:auto; color:#000;">' 
					+ '<table class=' + UID['table'] + '>' 
					+ '	<tr valign=top>' 
					+ '		<td><b>' + translate('Game Options') + ': </b></td>' 
					+ '	</tr>' + '	<tr valign=top>' 
					+ '		<td>' + '		<label>' + '		<input id=' + setUID('tabOptions_CB_Collect') + ' type=checkbox ' + (Data.options.autoCollect.enabled ? 'CHECKED ' : '') + ' /> ' + translate('Auto harvest resources from outposts every') + '		</label> ' + '		<input id=' + setUID('tabOptions_collectTime') + ' size=1 maxlength=2 type=text value="' + Data.options.autoCollect.delay + '" />' + '		<select id=' + setUID('tabOptions_collectUnit') + ' size=1>' + '			<option value=1 ' + selected[1] + '>' + translate('Seconds') + '</option>' + '			<option value=60 ' + selected[2] + '>' + translate('minutes') + '</option>' + '			<option value=3600 ' + selected[3] + '>' + translate('hours') + '</option>' + '			<option value=86400 ' + selected[4] + '>' + translate('days') + '</option>' + '		</select>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_UTCtime') + ' type=checkbox ' + (Data.options.utc_time ? ' CHECKED ' : '') + ' /> ' + translate('Check to use UTC time instead of local time') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_Speedups') + ' type=checkbox ' + (Data.options.speedups_enabled ? ' CHECKED ' : '') + ' /> ' + translate('Enable use of speed-ups in attacks waves') + '</label>' 
					+ '		</td>' + '	</tr><tr valign=top>' 
					+ '		<td>'
					+ '		<label><input id=' + setUID('tabOptions_CB_Confirmation') + ' type=checkbox ' + (Data.options.use_speedup_confirmation ? ' CHECKED ' : '') + ' /> ' + translate('Enable confirmation on use of speed-ups') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_JobsSpeedups') + ' type=checkbox ' + (Data.options.jobs_speedups_enabled ? ' CHECKED ' : '') + ' /> ' + translate('Enable use of speed-ups in training/resurrection jobs') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_JobsCancel_Confirmation') + ' type=checkbox ' + (Data.options.jobs_cancel_confirmation ? ' CHECKED ' : '') + ' /> ' + translate('Enable confirmation on cancelling job in training/resurrection') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_Cheat') + ' type=checkbox ' + (Data.options.cheat_enabled ? ' CHECKED ' : '') + ' /> ' + translate('Enable transport of ') + translate('enchanting') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_SancHideMax') + ' type=checkbox ' + (Data.options.sanctuary.hideDrgMaxLevel ? ' CHECKED ' : '') + ' /> ' + translate('Hide sanctuary dragon at max level') + '</label>' 
					+ '		</td>' 
					+ '	</tr>' 
					+ '</table>' + '<br>' 
					+ '<table class=' + UID['table'] + '>' + '	<tr valign=top>' + '		<td><b>' + translate('Script Options') + ': </b></td>' + '	</tr><tr valign=top>' + '		<td>' + translate('Script language') + ': &nbsp' + '		<select id=' + setUID('tabOptions_language') + ' size=1>';
					for (var lang = 0; lang < Translation.available_langs.length; lang++) {
						m += '	<option value="' + Translation.available_langs[lang].code + '" ' + (Data.options.user_language == Translation.available_langs[lang].code ? 'selected' : '') + '>' + translate(Translation.available_langs[lang].desc) + '</option>'
					}
					m += '		</select>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_Drag') + ' type=checkbox ' + (Data.options.popUp.drag ? ' CHECKED ' : '') + ' /> ' + translate('Enable window drag') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_Verbose') + ' type=checkbox ' + (Data.options.verboseLog.enabled ? ' CHECKED ' : '') + ' /> ' + translate('Enable verbose logging') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CB_Background') + ' type=checkbox ' + (Data.options.background ? ' CHECKED ' : '') + ' /> ' + translate('Display official background image') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<table cellpadding=3><tr valign=top>' 
					+ '			<td>&nbsp<label>' + translate('Wiki URL') + '</label>&nbsp &nbsp</td>' 
					+ '			<td><input id=' + setUID('tabOptions_Wiki') + ' size=50 maxlength=200 type=text value="' + Data.options.wikiUrl + '" />&nbsp</td>' 
					+ '		</tr><tr valign=top>' 
					+ '			<td>&nbsp<label>' + translate('Forum link') + '</label>&nbsp &nbsp</td>' 
					+ '			<td><input id=' + setUID('tabOptions_Forum') + ' size=50 maxlength=200 type=text value="' + Data.options.forumUrl + '" />&nbsp</td>' 
					+ '		</tr></table>' 
					+ '	</tr>' 
					+ '</table>' 
					+ '<br>' 
					+ '<table class=' + UID['table'] + ' style="color:#000;">' 
					+ '	<tr valign=top>' 
					+ '		<td colspan=4><b>' + translate('Sound configuration') + ': </b></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label><input id=' + setUID('tabOptions_JobsSound') + ' type=checkbox ' + (Data.options.sound.enable_jobs ? 'CHECKED ' : '') + '/></label></td>' 
					+ '		<td><label>' + translate('Play sound on task completion') + '. ' + translate('Sound file') + ' ' + translate('for') + ' :</label></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td></td>' 
					+ '		<td><table cellpadding=0 cellspacing=0>' 
					+ '				<tr valign=top>' 
					+ '					<td><label>' + translate('Building') + '</label></td>' 
					+ '					<td><input id=' + setUID('tabOptions_BFile') + ' size=40 maxlength=150 type=text value="' + Data.options.sound.URL_building + '" />&nbsp</td>' 
					+ '					<td><input id=' + setUID('tabOptions_BPlay') + ' type=submit value=Play>' 
					+ '						<input id=' + setUID('tabOptions_BStop') + ' type=submit value=Stop>' 
					+ '						<input id=' + setUID('tabOptions_BDefault') + ' type=submit value=Default></td>' 
					+ '				</tr>' 
					+ '				<tr valign=top>' 
					+ '					<td><label>' + translate('Training') + '</label></td>' 
					+ '					<td><input id=' + setUID('tabOptions_TFile') + ' size=40 maxlength=150 type=text value="' + Data.options.sound.URL_units + '" />&nbsp</td>' 
					+ '					<td><input id=' + setUID('tabOptions_TPlay') + ' type=submit value=Play>' 
					+ '						<input id=' + setUID('tabOptions_TStop') + ' type=submit value=Stop>' 
					+ '						<input id=' + setUID('tabOptions_TDefault') + ' type=submit value=Default></td>' 
					+ '				</tr>' 
					+ '				<tr valign=top>' 
					+ '					<td><label>' + translate('Research') + '</label></td>' 
					+ '					<td><input id=' + setUID('tabOptions_RFile') + ' size=40 maxlength=150 type=text value="' + Data.options.sound.URL_research + '" />&nbsp</td>' 
					+ '					<td><input id=' + setUID('tabOptions_RPlay') + ' type=submit value=Play>' 
					+ '						<input id=' + setUID('tabOptions_RStop') + ' type=submit value=Stop>' 
					+ '						<input id=' + setUID('tabOptions_RDefault') + ' type=submit value=Default></td>' 
					+ '				</tr>' 
					+ '			</table>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label><input id=' + setUID('tabOptions_FortunaSound') + ' type=checkbox ' + (Data.options.sound.enable_fortuna ? 'CHECKED ' : '') + '/></label></td>' 
					+ '		<td><label>' + translate('Play sound when Fortuna\'s ticket played or a matching grid is found') + ' :</label></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td></td>' 
					+ '		<td><table cellpadding=0 cellspacing=0>' 
					+ '				<tr valign=top>' 
					+ '					<td><label>' + translate('Fortuna') + '</label></td>' 
					+ '					<td><input id=' + setUID('tabOptions_FFile') + ' size=40 maxlength=150 type=text value="' + Data.options.sound.URL_fortuna + '" />&nbsp</td>' 
					+ '					<td><input id=' + setUID('tabOptions_FPlay') + ' type=submit value=Play>' 
					+ '						<input id=' + setUID('tabOptions_FStop') + ' type=submit value=Stop>' 
					+ '						<input id=' + setUID('tabOptions_FDefault') + ' type=submit value=Default></td>' 
					+ '				</tr>' 
					+ '			</table>' 
					+ '		</td>' 
					+ '	</tr>' 
					+ '</table>' 
					+ '<br>' 
					+ '<table class=' + UID['table'] + '>' 
					+ '	<tr valign=top>' 
					+ '		<td><b>' + translate('Features') + ': </b></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_AutoRefresh') + ' type=checkbox ' + (Data.options.autoRefresh.enabled ? 'CHECKED ' : '') + ' /> ' + translate('Auto refresh info tab data every') + '</label>' 
					+ '		<input id=' + setUID('tabOptions_refreshTime') + ' size=1 maxlength=2 type=text value="' + Data.options.autoRefresh.delay + '" />' 
					+ '		<select id=' + setUID('tabOptions_refreshUnit') + ' size=1>' 
					+ '			<option value=1 ' + (Data.options.autoRefresh.unit == 1 ? 'selected' : '') + '>' + translate('Seconds') + '</option>' 
					+ '			<option value=60 ' + (Data.options.autoRefresh.unit == 60 ? 'selected' : '') + '>' + translate('minutes') + '</option>' 
					+ '			<option value=3600 ' + (Data.options.autoRefresh.unit == 3600 ? 'selected' : '') + '>' + translate('hours') + '</option>' 
					+ '			<option value=86400 ' + (Data.options.autoRefresh.unit == 86400 ? 'selected' : '') + '>' + translate('days') + '</option>' 
					+ '		</select>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_FlashRefresh') + ' type=checkbox ' + (Data.options.flashRefresh.enabled ? 'CHECKED ' : '') + ' /> ' + translate('Flash game Auto refresh every') + '</label>' 
					+ '		<input id=' + setUID('tabOptions_flashRefreshTime') + ' size=1 maxlength=2 type=text value="' + Data.options.flashRefresh.delay + '" />' 
					+ '		<select id=' + setUID('tabOptions_flashRefreshUnit') + ' size=1>' 
					+ '			<option value=60 ' + (Data.options.flashRefresh.unit == 60 ? 'selected' : '') + '>' + translate('minutes') + '</option>' 
					+ '			<option value=3600 ' + (Data.options.flashRefresh.unit == 3600 ? 'selected' : '') + '>' + translate('hours') + '</option>' 
					+ '		</select>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_CheckNotification') + ' type=button value="' + translate('Test') + '" /> ' + translate('Notification permission test') + '</label>' + '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_NotificationFortuna') + ' type=checkbox ' + (Data.options.enable_notifications_fortuna ? 'CHECKED ' : '') + ' /> ' + translate('Enable notifications when i win an object in Fortuna automatic play') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabInboxTchatAlliance_cbEnableNotif') + ' type=checkbox ' + (Data.options.tchat.enable_notif_alliance ? 'CHECKED ' : '') + ' /> ' + translate('Enable notifications for tchat alliance') + '</label>' 
					+ '		</td>'
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabInboxTchatRealm_cbEnableNotif') + ' type=checkbox ' + (Data.options.tchat.enable_notif_realm ? 'CHECKED ' : '') + ' /> ' + translate('Enable notifications for tchat realm') + '</label>' 
					+ '		</td>'					
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_NotificationSpy') + ' type=checkbox ' + (Data.options.enable_notifications_spy ? 'CHECKED ' : '') + ' /> ' + translate('Enable notifications when i receive spy') + '</label>' 
					+ '		</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_NotificationAttack') + ' type=checkbox ' + (Data.options.enable_notifications_attack ? 'CHECKED ' : '') + ' /> ' + translate('Enable notifications when i receive attack') + '</label>' 
					+ '		</td>' 
					+ '	</tr>' 
					+ '</table>' 
					+ '<br>' 
					+ '<table class=' + UID['table'] + '>' 
					+ '	<tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_btnRefresh') + ' type=button value="' + translate('Refresh') + '" /></label>' 
					+ '		</td>' 
					+ '	</tr>'
					/*+ '	<tr valign=top>' 
					+ '		<td>' 
					+ '		<label><input id=' + setUID('tabOptions_testCPT') + ' type=button value="Test CPT" /></label>' 
					+ '		<input id=' + setUID('tabOptions_testtype') + ' type=text /><input id=' + setUID('tabOptions_testid') + ' type=text />'
					+ '		</td>' 
					+ '	</tr>'*/
					+ '</table>' 
					+ '<br>' 
					+ '<table class=' + UID['table'] + ' width=100%>' 
					+ '	<tr valign=top>' 
					+ '		<td width=40%><b>' + translate('Tabs Options') + ': </b></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabWave') + ' type=checkbox ' + (Data.options.disable_wave ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Wave</B> tab') + '</label></td>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabMulti') + ' type=checkbox ' + (Data.options.disable_multi ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Multi</B> tab') + '</label></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabBookmark') + ' type=checkbox ' + (Data.options.disable_bookmark ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Bookmarks</B> tab') + '</label></td>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabSearch') + ' type=checkbox ' + (Data.options.disable_search ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Search</B> tab') + '</label></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabAlliance') + ' type=checkbox ' + (Data.options.disable_alliance ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Alliance</B> tab') + '</label></td>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabSpy') + ' type=checkbox ' + (Data.options.disable_spies ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Spy</B> tab') + '</label></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label>&nbsp;</td>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabWall') + ' type=checkbox ' + (Data.options.disable_wall ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Wall</B> tab') + '</label></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabWheel') + ' type=checkbox ' + (Data.options.disable_wheel ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Fortuna\'s</B> tab') + '</label></td>' 
					+ '		<td>&nbsp;</td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabSingle') + ' type=checkbox ' + (Data.options.disable_single ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Single</B> tab') + '</label></td>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabLog') + ' type=checkbox ' + (Data.options.disable_log ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Log</B> tab') + '</label></td>' 
					+ '	</tr><tr valign=top>' 
					+ '		<td><label><input id=' + setUID('tabOptions_TabInbox') + ' type=checkbox ' + (Data.options.disable_inbox ? 'CHECKED ' : '') + ' /> ' + translate('Disable <B>Inbox</B> tab') + '</label></td>' 
					+ '		<td>&nbsp;</td>' 
					+ '	</tr>' 
					+ '</table><br>' 
					+ '<div class=' + UID['title'] + ' style="margin-bottom:10px">' + translate('Cache data') + '</div>' 
					+ '<table class=' + UID['table'] + ' width=100%>' + '	<tr valign=top>' + '		<td width=30%><label><input id=' + setUID('tabOptions_btnSave') + ' type=button value="' + translate('Save') + '" title="' + translate('Force saving current script settings') + '" /></label></td>' + '		<td width=30%><label><input id=' + setUID('tabOptions_btnClean') + ' type=button value="' + translate('delete') + '" title="' + translate('Clear local storage (internet cache)') + '" /></label></td>' + '		<td width=40%><label><input id=' + setUID('tabOptions_btnInspect') + ' type=button value="' + translate('View') + '" title="' + translate('Inspect current script settings') + '" /></label></td>' + '	</tr><tr valign=top><td style="font-size:2px">&nbsp</td>' + '	</tr><tr valign=top>' + '		<td width=30%><label><input id=' + setUID('tabOptions_btnBackup') + ' type=button value="' + translate('Backup') + '" title="' + translate('Save current script settings in a local file') + '" /></label></td>' + '		<td width=30%><label><input id=' + setUID('tabOptions_btnBackupMap') + ' type=button value="' + translate('Backup') + ' ' + translate('Map') + '" title="' + translate('Save current map data in a local file') + '" /></label></td>' + '		<td width=40%><label><input id=' + setUID('tabOptions_btnRestore') + ' type=button value="' + translate('Restore') + '" title="' + translate('Restore script settings from local file') + '" /></label>' + '		<input id=' + setUID('tabOptions_storage_file') + ' type="file" multiple style="opacity:0;position:absolute;z-index:-1"/></td>' + '	</tr>' + '</table><br>' + '</div>';
					t.container.innerHTML = m;

					/*$(UID['tabOptions_testCPT']).observe('click', function(){
						new MyAjax.searchCPT($(UID['tabOptions_testtype']).value, $(UID['tabOptions_testid']).value, function(rslt) {});
					});*/
					
					$(UID['tabOptions_collectTime']).addEventListener('change', t.timeChanged, false);
					$(UID['tabOptions_collectUnit']).addEventListener('change', t.unitChanged, false);
					$(UID['tabOptions_refreshTime']).addEventListener('change', t.refreshTimeChanged, false);
					$(UID['tabOptions_refreshUnit']).addEventListener('change', t.refreshUnitChanged, false);
					$(UID['tabOptions_flashRefreshTime']).addEventListener('change', t.flashRefreshTimeChanged, false);
					$(UID['tabOptions_flashRefreshUnit']).addEventListener('change', t.flashRefreshUnitChanged, false);
					$(UID['tabOptions_language']).addEventListener('change', t.onChangeLanguage, false);
					$(UID['tabOptions_CB_Drag']).addEventListener('click', function(event) {
						Data.options.popUp.drag = event.target.checked
					}, false);
					$(UID['tabOptions_CB_Speedups']).addEventListener('click', function(event) {
						Data.options.speedups_enabled = event.target.checked
					}, false);
					$(UID['tabOptions_CB_Speedups']).addEventListener('change', function(event) {
						Data.options.speedups_enabled = event.target.checked
					}, false);
					$(UID['tabOptions_CB_SancHideMax']).addEventListener('click', function(event) {
						Data.options.sanctuary.hideDrgMaxLevel = event.target.checked
					}, false);
					$(UID['tabOptions_CB_SancHideMax']).addEventListener('change', function(event) {
						Data.options.sanctuary.hideDrgMaxLevel = event.target.checked
					}, false);
					$(UID['tabOptions_CB_Confirmation']).addEventListener('click', function(event) {
						Data.options.use_speedup_confirmation = event.target.checked
					}, false);
					$(UID['tabOptions_CB_Confirmation']).addEventListener('change', function(event) {
						Data.options.use_speedup_confirmation = event.target.checked
					}, false);
					$(UID['tabOptions_CB_JobsSpeedups']).addEventListener('click', function(event) {
						Data.options.jobs_speedups_enabled = event.target.checked
					}, false);
					$(UID['tabOptions_CB_JobsSpeedups']).addEventListener('change', function(event) {
						Data.options.jobs_speedups_enabled = event.target.checked
					}, false);
					$(UID['tabOptions_CB_JobsCancel_Confirmation']).addEventListener('click', function(event) {
						Data.options.jobs_cancel_confirmation = event.target.checked
					}, false);
					$(UID['tabOptions_CB_JobsCancel_Confirmation']).addEventListener('change', function(event) {
						Data.options.jobs_cancel_confirmation = event.target.checked
					}, false);
					$(UID['tabOptions_CB_UTCtime']).addEventListener('click', function(event) {
						Data.options.utc_time = event.target.checked
					}, false);
					$(UID['tabOptions_CB_UTCtime']).addEventListener('change', function(event) {
						Data.options.utc_time = event.target.checked
					}, false);
					$(UID['tabOptions_Wiki']).addEventListener('change', function() {
						Data.options.wikiUrl = $(UID['tabOptions_Wiki']).value
					}, false);
					$(UID['tabOptions_Forum']).addEventListener('change', function() {
						Data.options.forumUrl = $(UID['tabOptions_Forum']).value
					}, false);
					$(UID['tabOptions_JobsSound']).addEventListener('change', function(event) {
						Data.options.sound.enable_jobs = event.target.checked
					}, false);
					$(UID['tabOptions_FortunaSound']).addEventListener('change', function(event) {
						Data.options.sound.enable_fortuna = event.target.checked
					}, false);
					$(UID['tabOptions_btnRefresh']).addEventListener('click', t.onClickRefresh, false);
					$(UID['tabOptions_btnSave']).addEventListener('click', t.onClickSaveSetting, false);
					$(UID['tabOptions_btnClean']).addEventListener('click', t.onClickClearStorage, false);
					$(UID['tabOptions_btnInspect']).addEventListener('click', t.onClickInspect, false);
					$(UID['tabOptions_btnBackup']).addEventListener('click', t.onClickBackupFile, false);
					$(UID['tabOptions_btnBackupMap']).addEventListener('click', t.onClickBackupMap, false);
					$(UID['tabOptions_storage_file']).addEventListener('change', t.onChangeRestoreFile, false);
					$(UID['tabOptions_CheckNotification']).addEventListener('click', function(event) {
						CalciumNotifications.showNotification('Test', 'OK', 'tag', 'http://icdn.pro/images/fr/a/c/accepter-check-ok-oui-icone-4851-96.png');
					}, false);
					$(UID['tabOptions_NotificationFortuna']).addEventListener('click', function(event) {
						Data.options.enable_notifications_fortuna = event.target.checked
					}, false);
					$(UID['tabOptions_NotificationSpy']).addEventListener('click', function(event) {
						Data.options.enable_notifications_spy = event.target.checked
					}, false);
					$(UID['tabOptions_NotificationAttack']).addEventListener('click', function(event) {
						Data.options.enable_notifications_attack = event.target.checked
					}, false);
					$(UID['tabInboxTchatRealm_cbEnableNotif']).addEventListener('click', function(event) {
						Data.options.tchat.enable_notif_realm = event.target.checked
					}, false);
					$(UID['tabInboxTchatAlliance_cbEnableNotif']).addEventListener('click', function(event) {
						Data.options.tchat.enable_notif_alliance = event.target.checked
					}, false);
					
					$(UID['tabOptions_CB_Cheat']).addEventListener('click', function(event) {
						Data.options.cheat_enabled = event.target.checked;
						if (Data.options.cheat_enabled)
							transportable_resource_types = cloneProps(all_resource_types);
						else
							transportable_resource_types = cloneProps(transportable_resource_types);
					}, false);
					$(UID['tabOptions_CB_Cheat']).addEventListener('change', function(event) {
						Data.options.cheat_enabled = event.target.checked;
						if (Data.options.cheat_enabled)
							transportable_resource_types = cloneProps(all_resource_types);
						else
							transportable_resource_types = cloneProps(transportable_resource_types);
					}, false);
					$(UID['tabOptions_btnRestore']).addEventListener('click', function() {
						debugLog($(UID['tabOptions_storage_file']));
						$(UID['tabOptions_storage_file']).click();
					}, false);
					t.togOpt(UID['tabOptions_CB_Collect'], Data.options.autoCollect.enabled, AutoCollect.setEnable);
					t.togOpt(UID['tabOptions_CB_Verbose'], Data.options.verboseLog.enabled, VerboseLog.setEnable);
					t.togOpt(UID['tabOptions_CB_Background'], Data.options.background, t.onChangeBackground);
					t.togOpt(UID['tabOptions_AutoRefresh'], Data.options.autoRefresh.enabled, t.setEnableRefresh);
					t.togOpt(UID['tabOptions_FlashRefresh'], Data.options.flashRefresh.enabled, AutoRefresh.setEnable);
					t.togOpt(UID['tabOptions_TabWave'], Data.options.disable_wave, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabMulti'], Data.options.disable_multi, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabBookmark'], Data.options.disable_bookmark, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabSpy'], Data.options.disable_spies, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabInbox'], Data.options.disable_inbox, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabSearch'], Data.options.disable_search, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabAlliance'], Data.options.disable_alliance, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabSingle'], Data.options.disable_single, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabWall'], Data.options.disable_wall, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabWheel'], Data.options.disable_wheel, t.setEnableTab);
					t.togOpt(UID['tabOptions_TabLog'], Data.options.disable_log, t.setEnableTab);

					$(UID['tabOptions_BFile']).addEventListener('change', function() {
						Data.options.sound.URL_building = $(UID['tabOptions_BFile']).value;
					}, false);
					$(UID['tabOptions_BPlay']).addEventListener('click', function() {
						t.playSound('building')
					}, false);
					$(UID['tabOptions_BStop']).addEventListener('click', function() {
						t.stopSound('building')
					}, false);
					$(UID['tabOptions_BDefault']).addEventListener('click', function() {
						$(UID['tabOptions_BFile']).value = SoundPlayer.DEFAULT_SOUND_URL.building;
						Data.options.sound.URL_building = SoundPlayer.DEFAULT_SOUND_URL.building;
						t.playSound('building');
					}, false);
					$(UID['tabOptions_BStop']).disabled = true;

					$(UID['tabOptions_TFile']).addEventListener('change', function() {
						Data.options.sound.URL_units = $(UID['tabOptions_TFile']).value;
					}, false);
					$(UID['tabOptions_TPlay']).addEventListener('click', function() {
						t.playSound('units')
					}, false);
					$(UID['tabOptions_TStop']).addEventListener('click', function() {
						t.stopSound('units')
					}, false);
					$(UID['tabOptions_TDefault']).addEventListener('click', function() {
						$(UID['tabOptions_TFile']).value = SoundPlayer.DEFAULT_SOUND_URL.units;
						Data.options.sound.URL_units = SoundPlayer.DEFAULT_SOUND_URL.units;
						t.playSound('units');
					}, false);
					$(UID['tabOptions_TStop']).disabled = true;

					$(UID['tabOptions_RFile']).addEventListener('change', function() {
						Data.options.sound.URL_research = $(UID['tabOptions_RFile']).value;
					}, false);
					$(UID['tabOptions_RPlay']).addEventListener('click', function() {
						t.playSound('research')
					}, false);
					$(UID['tabOptions_RStop']).addEventListener('click', function() {
						t.stopSound('research')
					}, false);
					$(UID['tabOptions_RDefault']).addEventListener('click', function() {
						$(UID['tabOptions_RFile']).value = SoundPlayer.DEFAULT_SOUND_URL.research;
						Data.options.sound.URL_research = SoundPlayer.DEFAULT_SOUND_URL.research;
						t.playSound('research');
					}, false);
					$(UID['tabOptions_RStop']).disabled = true;

					$(UID['tabOptions_FFile']).addEventListener('change', function() {
						Data.options.sound.URL_fortuna = $(UID['tabOptions_FFile']).value;
					}, false);
					$(UID['tabOptions_FPlay']).addEventListener('click', function() {
						t.playSound('fortuna')
					}, false);
					$(UID['tabOptions_FStop']).addEventListener('click', function() {
						t.stopSound('fortuna')
					}, false);
					$(UID['tabOptions_FDefault']).addEventListener('click', function() {
						$(UID['tabOptions_FFile']).value = SoundPlayer.DEFAULT_SOUND_URL.fortuna;
						Data.options.sound.URL_fortuna = SoundPlayer.DEFAULT_SOUND_URL.fortuna;
						t.playSound('fortuna');
					}, false);
					$(UID['tabOptions_FStop']).disabled = true;
				} catch (e) {
					t.container.innerHTML = '<PRE>' + e.name + ' : ' + e.message + '</pre>';
				}
			},
			hide: function() {},
			show: function() {},
			togOpt: function(checkboxId, optionVar, callEnable, callIsAvailable) {
				var t = Tabs.Options;
				var checkbox = $(checkboxId);
				if (callIsAvailable && callIsAvailable() == false) {
					checkbox.disabled = true;
					return;
				}
				if (optionVar) checkbox.checked = true;
				checkbox.addEventListener('change', new eventToggle(checkboxId, optionVar, callEnable).handler, false);

				function eventToggle(checkboxId, optionVar, callOnChange) {
					this.handler = handler;
					var optVar = optionVar;
					var callback = callOnChange;

					function handler(event) {
						optVar = this.checked;
						if (callback != null) callback(this.checked);
					}
				}
			},
			timeChanged: function(event) {
				var etime = $(UID['tabOptions_collectTime']);
				var time = toNum(etime.value);
				etime.value = time;
				Data.options.autoCollect.delay = time;
			},
			unitChanged: function(event) {
				var eunit = $(UID['tabOptions_collectUnit']);
				var unit = toNum(eunit.value);
				eunit.value = unit;
				Data.options.autoCollect.unit = unit;
			},
			refreshTimeChanged: function(event) {
				var t = Tabs.Options;
				var etime = $(UID['tabOptions_refreshTime']);
				var time = toNum(etime.value);
				etime.value = time;
				Data.options.autoRefresh.delay = time;
				t.autoRefreshTick();
			},
			refreshUnitChanged: function(event) {
				var t = Tabs.Options;
				var eunit = $(UID['tabOptions_refreshUnit']);
				var unit = toNum(eunit.value);
				eunit.value = unit;
				Data.options.autoRefresh.unit = unit;
				t.autoRefreshTick();
			},
			autoRefreshTick: function() {
				var t = Tabs.Options;
				clearTimeout(t.refreshTimer);
				if (Data.options.autoRefresh.enabled) {
					logit('fetchPlayer from Tab.Options Auto-refresh tick');
					/* Seed.fetchPlayer(); */
					var options = {
						cities: [],
						noCities: true,
						jobs: true,
						dragons: true
					};
					options.cities.push(Seed.cities[CAPITAL.id].id);
					Seed.fetchPlayer(options);
					t.refreshTimer = setTimeout(t.autoRefreshTick, Data.options.autoRefresh.delay * Data.options.autoRefresh.unit * 1000);
				}
			},
			setEnableRefresh: function() {
				var t = Tabs.Options;
				var cR = $(UID['tabOptions_AutoRefresh']);
				Data.options.autoRefresh.enabled = cR.checked;
				t.autoRefreshTick();
			},
			flashRefreshTimeChanged: function(event) {
				var t = Tabs.Options;
				var etime = $(UID['tabOptions_flashRefreshTime']);
				var time = toNum(etime.value);
				etime.value = time;
				Data.options.flashRefresh.delay = time;
			},
			flashRefreshUnitChanged: function(event) {
				var t = Tabs.Options;
				var eunit = $(UID['tabOptions_flashRefreshUnit']);
				var unit = toNum(eunit.value);
				eunit.value = unit;
				Data.options.flashRefresh.unit = unit;
			},

			setEnableTab: function() {
				var t = Tabs.Options;
				var cWa = $(UID['tabOptions_TabWave']);
				var cMu = $(UID['tabOptions_TabMulti']);
				var cSp = $(UID['tabOptions_TabSpy']);
				var cBo = $(UID['tabOptions_TabBookmark']);
				var cIn = $(UID['tabOptions_TabInbox']);
				var cSe = $(UID['tabOptions_TabSearch']);
				var cAl = $(UID['tabOptions_TabAlliance']);
				var cLo = $(UID['tabOptions_TabLog']);
				var cSi = $(UID['tabOptions_TabSingle']);
				var cWl = $(UID['tabOptions_TabWall']);
				var cWh = $(UID['tabOptions_TabWheel']);
				Data.options.disable_wave = cWa.checked;
				Data.options.disable_multi = cMu.checked;
				Data.options.disable_spies = cSp.checked;
				Data.options.disable_bookmark = cBo.checked;
				Data.options.disable_search = cSe.checked;
				Data.options.disable_alliance = cAl.checked;
				Data.options.disable_inbox = cIn.checked;
				Data.options.disable_log = cLo.checked;
				Data.options.disable_single = cSi.checked;
				Data.options.disable_wall = cWl.checked;
				Data.options.disable_wheel = cWh.checked;
			},
			onChangeLanguage: function() {
				var lang = $(UID['tabOptions_language']).value;
				Data.options.user_language = lang;
				setLanguage(lang);
			},
			onChangeBackground: function(state) {
				Data.options.background = state;
				try {
					localStorage.setItem('118446_background', JSON.stringify(Data.options.background));
				} catch (e) {}
			},
			onClickRefresh: function() {
				var t = Tabs.Options;
				logit('fetchPlayer from Tab.Options');
				if (t.refreshPlayerBusy) return false;
				t.refreshPlayerBusy = true;
				refreshPlayerData(t.container, function() {
					logit(translate('Player data retrieved'));
					Tabs.Options.refreshPlayerBusy = false
				});
			},
			onClickSaveSetting: function() {
				var t = Tabs.Options;
				dialogConfirm(translate('Do you want to save in Permanent Data the current script setting') + ' ?',
					function() {
						try {
							Data.save();
							verboseLog('Save Data in localStorage');
							var keys = getKeys(Data.defaults);
							for (var i = 0; i < keys.length; i++) {
								var item_name = keys[i];
								Data.setObject(item_name, Data[item_name]);
							}
						} catch (e) {}
					},
					/* Cancel */

					function() {}, true
				);
			},
			onClickClearStorage: function() {
				var t = Tabs.Options;
				dialogConfirm(translate('Are you sure you want to delete All Permanent Data') + ' ?',
					function() {
						try {
							Data.clearStorage(false);
							Data.setDefaultValues('all');
						} catch (e) {}
					},
					/* Cancel */

					function() {}, true
				);
			},
			onClickInspect: function() {
				var t = Tabs.Options;
				dialogCopyPaste();
			},
			onClickBackupFile: function() {
				var t = Tabs.Options;
				dialogConfirm(translate('Do you want to save Permanent Data in local file') + ' ?',
					function() {
						try {
							setTimeout(function() {
								var keys = getKeys(Data.defaults);
								for (var i = 0; i < keys.length; i++) {
									if (/(marches|requests)/i.test(keys[i]))
										keys.splice(i, 1);
								}
								var json_data = '{';
								for (var i = 0; i < keys.length; i++) {
									var name = keys[i];
									try {
										json_data += '"' + name + '":' + JSON.stringify(Data[name]);
									} catch (e) {
										debugLog(e);
									}
									if (i < keys.length - 1) json_data += ','
								}
								json_data += '}';
								downloadDataURI({
									filename: "doa_realm" + [SERVER_ID, Seed.player.name].join('_') + ".txt",
									data: "data:application/text;base64," + Base64.encode(json_data)
								});
								/* window.open(jsondata,'Backup','width=300,height=200,toolbar=no,resizable=0'); */
							}, 1000);
						} catch (e) {}
					},
					/* Cancel */

					function() {}, true
				);
			},
			onClickBackupMap: function() {
				var t = Tabs.Options;
				dialogConfirm(translate('Do you want to save Map Data in local file') + ' ?',
					function() {
						try {
							setTimeout(function() {
								var json_map = '{"map":' + JSON.stringify(Data.map) + '}';
								downloadDataURI({
									filename: "doa_realm" + [SERVER_ID, Seed.player.name].join('_') + "_Map.txt",
									data: "data:application/text;base64," + Base64.encode(json_map)
								});
								/*
								 * window.open(jsondata,'Backup
								 * Map','width=300,height=200,toolbar=no,resizable=0');
								 */
							}, 1000);
						} catch (e) {}
					},
					/* Cancel */

					function() {}, true
				);
			},
			onChangeRestoreFile: function() {
				var t = Tabs.Options;
				var files = $(UID['tabOptions_storage_file']).files;
				if (!files.length) return;
				var reader = new FileReader();
				reader.onload = function(event) {
					try {
						if (event.target.result) {
							Data.mergeWith(JSON.parse(event.target.result));
							var dial = new ModalDialog(t.container, 300, 150, '', true);
							dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
							dial.getContentDiv().innerHTML = '<B>' + translate('Restore') + ' ' + translate('Successfully') + '</b>';
						}
					} catch (e) {
						var dial = new ModalDialog(t.container, 300, 150, '', true);
						dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Message') + '</b></center></div>';
						dial.getContentDiv().innerHTML = '<B>' + translate('Restore') + ' ' + translate('Error') + ' : <br><br> ' + e + '</b>';
					}
					/* Clear the file container for the next change */
					$(UID['tabOptions_storage_file']).files = [];
					$(UID['tabOptions_storage_file']).value = '';
				};
				reader.onerror = function(event) {
					var error = event.target.error.name;
					debugLog(error);
					if (error == "NOT_READABLE_ERR") {}
					/* Clear the file container for the next change */
					$(UID['tabOptions_storage_file']).files = [];
					$(UID['tabOptions_storage_file']).value = '';
				};
				for (var i = 0, file; file = files[i]; i++) {
					/* Read file into memory as UTF-8 */
					reader.readAsText(file, 'UTF-8');
				}
			},

			playSound: function(task) {
				var t = Tabs.Options;
				switch (task) {
					case 'building':
						$(UID['tabOptions_BStop']).disabled = false;
						break;
					case 'units':
						$(UID['tabOptions_TStop']).disabled = false;
						break;
					case 'research':
						$(UID['tabOptions_RStop']).disabled = false;
						break;
					case 'fortuna':
						$(UID['tabOptions_FStop']).disabled = false;
						break;
				}
				SoundPlayer.PlaySound(task, true);
				setTimeout(function() {
					t.stopSound(task);
				}, 4000);
			},
			stopSound: function(task) {
				var t = Tabs.Options;
				switch (task) {
					case 'building':
						$(UID['tabOptions_BStop']).disabled = true;
						break;
					case 'units':
						$(UID['tabOptions_TStop']).disabled = true;
						break;
					case 'research':
						$(UID['tabOptions_RStop']).disabled = true;
						break;
					case 'fortuna':
						$(UID['tabOptions_FStop']).disabled = true;
						break;
				}
				SoundPlayer.StopSound(task);
			}
		}
		/******************************** Options Tab ********************************/


		/******************************** Log Tab ************************************/
		Tabs.Log = {
			tabOrder: LOG_TAB_ORDER,
			tabLabel: 'Log',
			tabDisabled: !LOG_TAB_ENABLE,
			lastSubTab: 'tabLogActions',
			container: null,
			content: [],
			title: null,
			maxEntries: 500,
			saveEntries: 200,
			state: 0,
			timer: null,

			init: function(div) {
				var t = Tabs.Log;
				t.container = div;
				div.innerHTML = '' + '<ul class=tabs>' + '	<li class="tab first"><a id=' + setUID('tabLogActions') + '>' + translate('Actions') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabLogConsole') + '>' + translate('Console') + '</a></li>' + '	<li class=tab><a id=' + setUID('tabLogRequest') + '>' + translate('Statistics') + '</a></li>' + '</ul>' + '<div id=' + setUID('tabLog_Title') + ' class=' + UID['title'] + '>' + translate('Action Log') + '</div>' + '<div id=' + setUID('tabLog_DivAction') + ' class=' + UID['status_ticker'] + ' style="height:665px; max-height:665px; overflow-y:auto;">' + '	<table id=' + setUID('tabLog_ContAction') + ' class=' + UID['table_console'] + ' cellspacing=1 width=100%>' + '	<tr>' + '		<td class=' + UID['underline'] + ' width=5%></td>' + '		<td class=' + UID['underline'] + ' width=95%></td>' + '	</tr>' + '	</table>' + '</div>' + '<div id=' + setUID('tabLog_DivConsole') + ' class=' + UID['status_ticker'] + ' style="height:665px; max-height:665px; overflow-y:auto;">' + '	<table id=' + setUID('tabLog_ContConsole') + ' class=' + UID['table_console'] + ' cellspacing=1 width=100%>' + '	<tr>' + '		<td class=' + UID['underline'] + ' width=5%></td>' + '		<td class=' + UID['underline'] + ' width=95%></td>' + '	</tr>' + '	</table>' + '</div>' + '<div id=' + setUID('tabLog_DivRequest') + ' class=' + UID['status_ticker'] + ' style="height:665px; max-height:665px; overflow-y:auto;">' + '	<div id=' + setUID('tabLog_ContRequest') + '>' + '	</div>' + '	<br/>' + '	<center><input id=' + setUID('tabLogRequest_Clear') + ' type=button value="' + translate('Clear Stats') + '" /></center>' + '	<br>'; + '</div>';
				t.content.push($(UID['tabLog_ContAction']));
				t.content.push($(UID['tabLog_ContConsole']));
				t.content.push($(UID['tabLog_ContRequest']));
				t.title = $(UID['tabLog_Title']);
				$(UID['tabLogActions']).addEventListener('click', t.tabLogActions, false);
				$(UID['tabLogConsole']).addEventListener('click', t.tabLogConsole, false);
				$(UID['tabLogRequest']).addEventListener('click', t.tabLogRequest, false);
				$(UID['tabLogRequest_Clear']).addEventListener('click', function() {
					t.clearRequestStats();
					t.tabLogRequest();
				}, false);

				t.state = 1;
				for (var i = 0; i < Data.log.length && i < 2; ++i) {
					var log = Data.log[i];
					for (var j = 0; j < log.length; ++j)
						t._addRow(log[j].msg, log[j].ts, i);
				}
				if (!Data.stats.requests.start_at) Data.stats.requests.start_at = serverTime();
				t.tabLogActions();
			},

			tabLogActions: function() {
				var t = Tabs.Log;
				clearTimeout(t.timer);
				Translation;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabLogActions']).className = 'selected';
				$(UID['tabLogActions']).style.zIndex = 1;
				t.lastSubTab = 'tabLogActions';
				t.content[0].parentNode.style.display = 'block';
				t.content[1].parentNode.style.display = 'none';
				t.content[2].parentNode.style.display = 'none';
				t.title.innerHTML = translate('Action Log');
			},
			tabLogConsole: function() {
				var t = Tabs.Log;
				clearTimeout(t.timer);
				Translation;
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabLogConsole']).className = 'selected';
				$(UID['tabLogConsole']).style.zIndex = 1;
				t.lastSubTab = 'tabLogConsole';
				t.content[1].parentNode.style.display = 'block';
				t.content[0].parentNode.style.display = 'none';
				t.content[2].parentNode.style.display = 'none';
				t.title.innerHTML = translate('Console Log');
			},
			tabLogRequest: function() {
				var t = Tabs.Log;
				clearTimeout(t.timer);
				$(UID[t.lastSubTab]).className = '';
				$(UID[t.lastSubTab]).style.zIndex = 0;
				$(UID['tabLogRequest']).className = 'selected';
				$(UID['tabLogRequest']).style.zIndex = 1;
				t.lastSubTab = 'tabLogRequest';
				t.content[2].parentNode.style.display = 'block';
				t.content[0].parentNode.style.display = 'none';
				t.content[1].parentNode.style.display = 'none';
				t.title.innerHTML = translate('Requests Log');
				t.dispRequests();
				t.timer = setTimeout(t.tabLogRequest, 1000);
			},
			clearRequestStats: function() {
				var t = Tabs.Log;
				Data.stats.requests.start_at = serverTime();
				Data.stats.requests.last_block = 0;
				Data.stats.requests.count_block = 0;
				Data.stats.requests.ajax_type = {
					binary: {
						time: [],
						error: []
					},
					versions: {
						time: [],
						error: []
					},
					locales: {
						time: [],
						error: []
					},
					cookie: {
						time: [],
						error: []
					},
					manifest: {
						time: [],
						error: []
					},
					player: {
						time: [],
						error: []
					},
					cities: {
						time: [],
						error: []
					},
					jobs: {
						time: [],
						error: []
					},
					dragons: {
						time: [],
						error: []
					},
					alliances: {
						time: [],
						error: []
					},
					membership: {
						time: [],
						error: []
					},
					activity: {
						time: [],
						error: []
					},
					map: {
						time: [],
						error: []
					},
					tile_at: {
						time: [],
						error: []
					},
					building: {
						time: [],
						error: []
					},
					research: {
						time: [],
						error: []
					},
					training: {
						time: [],
						error: []
					},
					resurrect: {
						time: [],
						error: []
					},
					canceljob: {
						time: [],
						error: []
					},
					marches: {
						time: [],
						error: []
					},
					cancelmarch: {
						time: [],
						error: []
					},
					reports: {
						time: [],
						error: []
					},
					reports_del: {
						time: [],
						error: []
					},
					reports_read: {
						time: [],
						error: []
					},
					message: {
						time: [],
						error: []
					},
					minigame: {
						time: [],
						error: []
					},
					save_minigame: {
						time: [],
						error: []
					},
					leaderboards: {
						time: [],
						error: []
					},
					collect: {
						time: [],
						error: []
					},
					claim: {
						time: [],
						error: []
					},
					defended: {
						time: [],
						error: []
					},
					defense: {
						time: [],
						error: []
					},
					items: {
						time: [],
						error: []
					},
					breeding: {
						time: [],
						error: []
					},
					feeding: {
						time: [],
						error: []
					},
					dragonHandle: {
						time: [],
						error: []
					},
					wilderness: {
						time: [],
						error: []
					},
                    other: {
						time: [],
						error: []
					}
				};
			},
			dispRequests: function() {
				var t = Tabs.Log;
				var total_requests = 0,
					total_last_hour = 0,
					error_requests = 0,
					error_last_hour = 0;
				Data.stats.requests.run_time = serverTime() - Data.stats.requests.start_at;
				var not_blocked_since = serverTime() - Data.stats.requests.last_block;
				var run_time = (Data.stats.requests.run_time > 0) ? (Data.stats.requests.run_time / 3600) : 1;
				var m = '<table id=' + setUID('tabLog_Requests') + ' class=' + UID['row_style'] + ' cellspacing=1 width=100%>' + '	<tr class=' + UID['row_headers'] + ' align=center>' + '		<td width=55%>' + translate('Request') + '</td>' + '		<td width=16%>' + translate('Total') + '</td>' + '		<td width=13%>' + translate('Per hour') + '</td>' + '		<td width=16%>' + translate('Last hour') + '</td>' + '	</tr>';
				for (var req_type in Data.stats.requests.ajax_type) {
					if (req_type == 'binary') continue;
					var perHour = Math.round(Data.stats.requests.ajax_type[req_type].time.length / run_time);
					var last_hour = 0,
						err_last_hour = 0;
					for (var i = 0; i < Data.stats.requests.ajax_type[req_type].time.length; i++) {
						if (toNum(serverTime()) - Data.stats.requests.ajax_type[req_type].time[i] < 3600) last_hour++;
					}
					for (var i = 0; i < Data.stats.requests.ajax_type[req_type].error.length; i++) {
						if (toNum(serverTime()) - Data.stats.requests.ajax_type[req_type].error[i] < 3600) err_last_hour++;
					}
					var this_total = Data.stats.requests.ajax_type[req_type].time.length;
					var this_error = Data.stats.requests.ajax_type[req_type].error.length;
					total_requests += this_total;
					total_last_hour += last_hour;
					error_requests += this_error;
					error_last_hour += err_last_hour;
					var err1 = (this_error > 0) ? '&nbsp;(<font color=red>' + this_error + '</font>)' : '';
					var err2 = (err_last_hour > 0) ? '&nbsp;(<font color=red>' + err_last_hour + '</font>)' : '';
					m += '	<tr valign=top>' + '		<td class=right width=55%>' + translate('ajax-req-' + req_type) + ' :</td>' + '		<td align=right width=16%>' + numf(this_total, ' ') + err1 + '</td>' + '		<td align=right width=13%>' + numf(perHour, ' ') + '</td>' + '		<td align=right width=16%>' + numf(last_hour, ' ') + err2 + '</td>' + '	</tr>';
				}
				var perHour = Math.round(total_requests / run_time);
				var err1 = (error_requests > 0) ? '&nbsp;(' + error_requests + ')' : '';
				var err2 = (error_last_hour > 0) ? '&nbsp;(' + error_last_hour + ')' : '';
				m += '	<tr><td colspan=2>&nbsp</td></tr>' + '	<tr><td>&nbsp</td><td colspan=3 align=center><hr></td></tr>' + '	<tr valign=top>' + '		<td class=right width=55%>' + translate('Total') + ' :</td>' + '		<td align=right width=16%><font color=red><b>' + numf(total_requests, ' ') + err1 + '</b></font></td>' + '		<td align=right width=13%>' + numf(perHour, ' ') + '</td>' + '		<td align=right width=16%><font color=red><b>' + numf(total_last_hour, ' ') + err2 + '</b></font></td>' + '	</tr>' + '	<tr><td colspan=4>&nbsp</td></tr>' + '	<tr valign=top>' + '		<td class=right width=55%>' + translate('Start Date') + ' :</td>' + '		<td align=left colspan=3>' + new Date(Data.stats.requests.start_at * 1000).myString() + '</td>' + '	</tr>' + '	<tr valign=top>' + '		<td class=right width=55%>' + translate('Run Time') + ' :</td>' + '		<td align=left colspan=3>' + timestr(Data.stats.requests.run_time, true) + '</td>' + '	</tr>' + '	<tr valign=top>' + '		<td class=right width=55%>' + translate('Number of one-hour-bans') + ' :</td>' + '		<td align=left colspan=3>' + numf(Data.stats.requests.count_block, ' ') + '</td>' + '	</tr>' + '	<tr valign=top>' + '		<td class=right width=55%>' + translate('Last Block') + ' :</td>' + '		<td align=left colspan=3>' + new Date(Data.stats.requests.last_block * 1000).myString() + '</td>' + '	</tr>' + '	<tr valign=top>' + '		<td class=right width=55%>' + translate('Not blocked since') + ' :</td>' + '		<td align=left colspan=3>' + timestr(not_blocked_since, true) + '</td>' + '	</tr>' + '</table>';
				var element = $(UID['tabLog_ContRequest']);
				if (element != null) element.innerHTML = m;
			},
			hide: function() {
				var t = Tabs.Log;
				clearTimeout(t.timer);
			},
			show: function() {
				var t = Tabs.Log;
				if (t.lastSubTab == 'tabLogRequest') t.timer = setTimeout(t.tabLogRequest, 1000);
			},
			_addRow: function(msg, ts, to) {
				var t = Tabs.Log;
				var n = to ? to : 0;
				if (t.state != 1) return;
				if (t.content[n].rows.length > t.maxEntries)
					t.content[n].deleteRow(t.maxEntries - 1);
				var row = t.content[n].insertRow(0);
				var ts_cell = row.insertCell(0);
				var msg_cell = row.insertCell(1);
				ts_cell.className = 'jewel';
				ts_cell.innerHTML = '(&nbsp;' + ts + '&nbsp;)&nbsp;';
				msg_cell.innerHTML = wordwrap(msg, 90, '<br />', true);
				msg_cell.style.whiteSpace = 'normal';
				
				function wordwrap( str, width, brk, cut ) {
				 
					brk = brk || '\n';
					width = width || 75;
					cut = cut || false;
				 
					if (!str) { return str; }
				 
					var regex = '.{1,' +width+ '}(\\s|$)' + (cut ? '|.{' +width+ '}|.+$' : '|\\S+?(\\s|$)');
				 
					return str.match( RegExp(regex, 'g') ).join( brk );
				 
				}
			},
			addMsg: function(msg, to) {
				if (Tabs.Log.tabDisabled) return;
				var t = Tabs.Log;
				var n = to ? to : 0;
				var ts = new Date().toTimeString().substring(0, 8);
				t._addRow(msg, ts, to);
				while (Data.log[n].length > t.saveEntries)
					Data.log[n].shift();
				Data.log[n].push({
					msg: msg,
					ts: ts
				});
			}
		}

        /******************************** CPT Tab ************************************/
		Tabs.Cpt = {
			tabOrder: CPT_TAB_ORDER,
			tabLabel: 'CPT',
			tabDisabled: !CPT_TAB_ENABLE,
			container: null,
            contentType: 0,

			init: function(div) {
				var t = Tabs.Cpt;
				t.container = div;
				var m = '<div class=' + UID['title'] + '>Calcium Pro Tool ' + translate('search') + '</div>' 
                + '<ul class=tabs>' 
                + '	<li class="tab first"><a id=' + setUID('tabCptSearchPlayer') + '>' + translate('search') + ' ' + translate('players') + '</a></li>' 
                + '	<li class=tab><a id=' + setUID('tabCptSearchAlliance') + '>' + translate('search') + ' ' + translate('alliances') + '</a></li>' 
                + '</ul>' 
                + '<div id=' + setUID('tabCpt_Content') + ' style="padding-top:0px; height:655px; max-height:655px; overflow-y:auto; width:540px; max-width:540px; overflow-x:auto"></div>';
				t.container.innerHTML = m;
				$(UID['tabCptSearchPlayer']).observe('click', t.tabCptSearchPlayer);
				$(UID['tabCptSearchAlliance']).observe('click', t.tabCptSearchAlliance);
				t.show();
			},

			tabCptSearchPlayer: function(lunchSearch, idUser) {
				var t = Tabs.Cpt;
                $(UID['tabCptSearchAlliance']).className = '';
				$(UID['tabCptSearchAlliance']).style.zIndex = 0;
				$(UID['tabCptSearchPlayer']).className = 'selected';
				$(UID['tabCptSearchPlayer']).style.zIndex = 1;
                t.contentType = 0;
                
                var m =  '<div class=' + UID['title'] + '>' + translate('search') + ' ' + translate('players') + '</div>' 
                    + ' <div class=' + UID['content'] + '>'
                    + '   <div id='+setUID('tabCPT_divSearch')+'>'
                    + '     <center>'
                    + '         <label for='+setUID('tabCPT_playerToSearch')+'>' + translate('name') + '</label> : <input id='+UID['tabCPT_playerToSearch']+' maxlength="50" type="text" value="" />'
                    + '         <input id='+setUID('tabCPT_btnSearch')+' type=button value=' + translate('search') + ' class=' + UID['btn_blue'] + ' /><br />'
                    + '         <label for='+setUID('tabCPT_playerSearchHisto')+'>' + translate('Search for old name') + '</label> : <input id='+UID['tabCPT_playerSearchHisto']+' type="checkbox" />'
                    + '     </center>'
                    + '   </div><br />'
                    + '   <div class=' + UID['subtitle'] + '>' + translate('players') + '</div><br />'
                    + '   <div id='+setUID('tabCPT_divResult')+'></div><br />'
                    + '   <div class=' + UID['subtitle'] + '>' + translate('view') + '</div>'
                    + '   <div id='+setUID('tabCPT_divPlayerDetail')+'></div>'
                    + '</div>';
                $(UID['tabCpt_Content']).update(m);
                
                $(UID['tabCPT_btnSearch']).observe('click', searchPlayer);
                
                function searchPlayer() {
                    var strSearch = $(UID['tabCPT_playerToSearch']).value.trim();
                    
                    new MyAjax.searchCPT(( $(UID['tabCPT_playerSearchHisto']).checked ? CPT_SEARCH.playersHisto : CPT_SEARCH.players ), strSearch, function(rslt) {
                        if(rslt.dat.result) {
                            var m = '<table class=' + UID['row_style'] + ' width=100%><tr>';
                            var tb = [];
                            for(var i=0; i < rslt.dat.players.length ; i++) {
                                m +=  '<td>' + rslt.dat.players[i].label + '</td>'
                                    + '<td><input id=' + setUID('tabCPT_' + rslt.dat.players[i].id) + ' ref=' +  rslt.dat.players[i].id + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('view') + '" /></td>';
                                if((i+1)%2 == 0) {
                                    m += '</tr><tr>'
                                }
                                tb.push('tabCPT_' + rslt.dat.players[i].id);
                            }
                            m += '</tr></table>';
                            $(UID['tabCPT_divResult']).update(m);
                            for(i=0; i < tb.length ; i++) {
                                $(UID[tb[i]]).observe('click', searchDetailPlayer);
                            }
                        } else {
                            $(UID['tabCPT_divResult']).update(rslt.dat.msg);
                        }
                    });
                    
                }
                function searchDetailPlayer(event) {
                    var id = event.target.getAttribute('ref');
                    new MyAjax.searchCPT(CPT_SEARCH.playerDetail, id, function(rslt) {
                        if(rslt.dat.result) {
                        	var bs = [], bb = [];
                            var player = rslt.dat.player;
                            var m = '<table width=100%>';
                               m += '   <tr><td align=center><b>' + player.name + ' / ' + (player.alliance ? player.alliance.name : '---') + '</b> - ' + translate('might') + ' : ' + numf(player.might) + '</td></tr>';
                               m += '   <tr><td align=center>';
                               m += '       <input id=' + setUID('tabCPT_GoCptPlayer' + player.id) + ' ref="' +  player.id + '" class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="  ' + translate('go') + ' CPT  " />  ';
                               m += '       <input class=class="' + UID['btn_blue'] + '" id="' + setUID('tabCPT_MsgUser') + '" ref="' + player.id  + '_' + player.name + '" type=button  style="width:auto !important;" value="  ' + translate('Msg') + '  " \>';
                               m += '      </td></tr>';
                               m += '</table><br /><br />';
                               m += '<table class=' + UID['row_style'] + ' width=100%>';
                               m += '   <tr class=' + UID['row_headers'] + '><td colspan=2 align=center>' + translate('outposts') + '</td><td>' + translate('action') + '</td></tr>';
                               for(var i=0 ; i < player.ops.length ; i++) {
                                m += '  <tr><td align=center>' + player.ops[i].type + ' </td>';
                                m += '		<td align=center>' + player.ops[i].x + ' / ' + player.ops[i].y + '</td>';
                                m += '<td align=center>';
                                m += '<input id="' + setUID('tabCpt_SpyNow_' + i) + '" ref="'+player.name+'('+player.ops[i].type+')_' + player.ops[i].x + '_' + player.ops[i].y + '" class="'+(player.ops[i].type === 'Spectral' ? UID['btn_disabled'] : UID['btn_red'])+ '" style="width:auto !important;" type=button value="  ' + translate('Spy') + ' !  " '+( player.ops[i].type === 'Spectral' ? 'disabled' : '')+' />  ';
                                m += '  <input id=' + setUID('tabCpt_Bookmark_' + i) + ' ref="' + i + '_' + player.ops[i].x + '_' + player.ops[i].y + '_'+player.name+'" class="' + UID['btn_blue'] + '" style="width:auto !important;" type=submit value="  ' + translate('Bookmark') + '  " />';
                                m += '</td>';
                                m += '	</tr>';
                                if(player.ops[i].type !== 'Spectral')
                                    bs.push('tabCpt_SpyNow_' + i);
                                bb.push('tabCpt_Bookmark_' + i);
                               }
                               m += '</table>';
                            $(UID['tabCPT_divPlayerDetail']).update(m);
                            $(UID['tabCPT_MsgUser']).observe('click', onClickMsg);
                            $(UID['tabCPT_GoCptPlayer' + player.id]).observe('click', function(event) {
                                var id = event.target.getAttribute('ref');
                                window.open('https://www.calcium-pro-tool.com/CPT/displayUser.php?id='+id+'&realmId='+SERVER_ID);
                            });
                            for(var j=0; j < bs.length; j++) {
                            	$(UID[bs[j]]).observe('click', cptSpyNow);
                            }
                            for(var k=0; k < bb.length; k++) {
                            	$(UID[bb[k]]).observe('click', addBookmark);
                            }
                            
                            function cptSpyNow(event) {
                                var args = event.target.getAttribute('ref').split('_'),
                                    targ = { n:args[0], x:args[1], y:args[2] };
                                buttonSpyNow(t.container, targ);
                            }
                            function addBookmark(event) {
                                var args = event.target.getAttribute('ref').split('_');
                                saveBookmark(t.container,
                                    toNum(args[1]),
                                    toNum(args[2]),
                                    0,
                                    0,
                                    0,
                                    toNum(args[0]),
                                    {},
                                    '',
                                    false, true,
                                    false,
                                    '',
                                    args[3]);
                            }
                        } else {
                            $(UID['tabCPT_divPlayerDetail']).update(rslt.dat.msg);
                        }
                    });
                }
			},
			tabCptSearchAlliance: function(lunchSearch, idAlliance) {
				var t = Tabs.Cpt;
                $(UID['tabCptSearchPlayer']).className = '';
				$(UID['tabCptSearchPlayer']).style.zIndex = 0;
				$(UID['tabCptSearchAlliance']).className = 'selected';
				$(UID['tabCptSearchAlliance']).style.zIndex = 1;
                t.contentType = 1;
                
                var m =  '<div class=' + UID['title'] + '>' + translate('search') + ' ' + translate('alliances') + '</div>' 
                    + ' <div class=' + UID['content'] + '>'
                    + '   <div id='+setUID('tabCPT_divSearch')+'>'
                    + '     <center>'
                    + '         <label for='+setUID('tabCPT_allianceToSearch')+'>' + translate('name') + '</label> : <input id='+UID['tabCPT_allianceToSearch']+' maxlength="50" type="text" value="" />'
                    + '         <input id='+setUID('tabCPT_btnAllianceSearch')+' type=button value=' + translate('search') + ' class=' + UID['btn_blue'] + ' />'
                    + '     </center>'
                    + '   </div><br />'
                    + '   <div class=' + UID['subtitle'] + '>' + translate('alliances') + '</div><br />'
                    + '   <div id='+setUID('tabCPT_divAllianceResult')+'></div><br />'
                    + '   <div class=' + UID['subtitle'] + '>' + translate('view') + '</div>'
                    + '   <div id='+setUID('tabCPT_divAllianceDetail')+'></div>'
                    + '</div>';
                $(UID['tabCpt_Content']).update(m);
                
                $(UID['tabCPT_btnAllianceSearch']).observe('click', searchAlliance);
                
                function searchAlliance() {
                    var strSearch = $(UID['tabCPT_allianceToSearch']).value.trim();
                    new MyAjax.searchCPT(CPT_SEARCH.alliances, strSearch, function(rslt) {
                        if(rslt.dat.result) {
                            var m = '<table class=' + UID['row_style'] + ' width=100%><tr>';
                            var tb = [];
                            for(var i=0; i < rslt.dat.alliances.length ; i++) {
                                m +=  '<td>' + rslt.dat.alliances[i].label + '</td>'
                                    + '<td><input id=' + setUID('tabCPT_' + rslt.dat.alliances[i].id) + ' ref=' +  rslt.dat.alliances[i].id + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('view') + '" /></td>';
                                if((i+1)%2 == 0) {
                                    m += '</tr><tr>'
                                }
                                tb.push('tabCPT_' + rslt.dat.alliances[i].id);
                            }
                            m += '</tr></table>';
                            $(UID['tabCPT_divAllianceResult']).update(m);
                            for(i=0; i < tb.length ; i++) {
                                $(UID[tb[i]]).observe('click', searchDetailAlliance);
                            }
                        } else {
                            $(UID['tabCPT_divAllianceResult']).update(rslt.dat.msg);
                        }
                    });
                    
                }
                function searchDetailAlliance(event) {
                    var id = event.target.getAttribute('ref');
                    new MyAjax.searchCPT(CPT_SEARCH.allianceDetail, id, function(rslt) {
                        if(rslt.dat.result) {
                            var alliance = rslt.dat.alliance;
                            var tcpt = [], bm = [];
                            var m = '<table width=100%>';
                            m += '   <tr><td align=center><b>' + alliance.name + '</b> - ' + translate('might') + ' : ' + numf(alliance.might) + '</td></tr>';
                            m += '   <tr><td align=center><input id=' + setUID('tabCPT_GoCptAlliance' + alliance.id) + ' ref=' +  alliance.id + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('go') + ' CPT" /></td></tr>';
                            m += '</table><br />';
                            m += '<table class=' + UID['row_style'] + ' width=100%>';
                            m += '   <tr class=' + UID['row_headers'] + '><td colspan=4 align=center>' + translate('members') + '</td></tr>';
                            m += '   <tr class=' + UID['row_headers'] + '><td align=center>' + translate('members') + '</td><td align=center>' + translate('might') + '</td><td align=center>' + translate('Role') + '</td><td align=center>' + translate('action') + '</td></tr>';
                            for(var i=0 ; i < alliance.players.length ; i++) {
                                m += '  <tr><td>' + alliance.players[i].name + '</td><td align=right>' + numf(alliance.players[i].might) + '</td>';
                                m += '      <td>' + translate('role-'+alliance.players[i].role) + '</td>';
                                m += '      <td align=center>';
                                m += '          <input id=' + setUID('tabCPT_GoCptPlayer' + alliance.players[i].id) + ' ref=' +  alliance.players[i].id + ' class="Xtrasmall ' + UID['btn_green'] + '" style="width:auto !important;" type=submit value="' + translate('go') + ' CPT"/>';
                                m += '          <input class=class="' + UID['btn_blue'] + '" id="' + setUID('tabCPT_MsgUser_'+i) + '" ref="' + alliance.players[i].id  + '_' + alliance.players[i].name + '" type=button  style="width:auto !important;" value="  ' + translate('Msg') + '  " \>';
                                m += '      </td>';
                                m += '  </tr>';
                                tcpt.push('tabCPT_GoCptPlayer' + alliance.players[i].id);
                                bm.push('tabCPT_MsgUser_'+i);
                            }
                            m += '</table>';
                            $(UID['tabCPT_divAllianceDetail']).update(m);
                            for(var j=0 ; j<tcpt.length ; j++) {
                                $(UID[tcpt[j]]).observe('click', function(event) {
                                    var id = event.target.getAttribute('ref');
                                    window.open('https://www.calcium-pro-tool.com/CPT/displayUser.php?id='+id+'&realmId='+SERVER_ID);
                                });
                                $(UID[bm[j]]).observe('click', onClickMsg);
                            }
                            $(UID['tabCPT_GoCptAlliance' + alliance.id]).observe('click', function(event) {
                                var id = event.target.getAttribute('ref');
                                window.open('https://www.calcium-pro-tool.com/CPT/displayAlliance.php?id='+id+'&realmId='+SERVER_ID);
                            });
                        } else {
                            $(UID['tabCPT_divAllianceDetail']).update(rslt.dat.msg);
                        }
                    });
                }
			},
			hide: function() {
				var t = Tabs.Cpt;
			},
			show: function() {
				var t = Tabs.Cpt;
                switch (toNum(t.contentType)) {
					case 0:
						t.tabCptSearchPlayer(false, 0);
						break;
					case 1:
						t.tabCptSearchAlliance(false, 0);
						break;
				}
			}
        }

		function actionLog(msg) {
			Tabs.Log.addMsg(msg, 0);
		}

		function consoleLog(msg) {
			Tabs.Log.addMsg(msg, 1);
		}

		function verboseLog(msg) {
			if (Data.options && Data.options.verboseLog.enabled) consoleLog(msg);
		}
		/**
		 * ****************************** Log Tab
		 * ***********************************
		 */

		/***********************************************************************
		 * MyAjaxRequest : Performs the following actions: - Places all
		 * parameters into an object - Determines method - Sets maximum timeout -
		 * Validates returned data and passes back results to originating
		 * function
		 * 
		 * Returns the following data: - ok (boolean) - dat (object if present) -
		 * errmsg (string if present)
		 **********************************************************************/

		function MyAjaxRequest(req_type, url, params, callback, isPost, binary) {

			if (Data.stats.requests == null || !Data.stats.requests) {
				Data.stats.requests = {
					start_at: 0,
					run_time: 0,
					last_block: 0,
					count_block: 0,
					ajax_type: {}
				};
			}
			if (Data.stats.requests.ajax_type == null || !Data.stats.requests.ajax_type) {
				Data.stats.requests.ajax_type = {
					binary: {
						time: [],
						error: []
					},
					versions: {
						time: [],
						error: []
					},
					locales: {
						time: [],
						error: []
					},
					cookie: {
						time: [],
						error: []
					},
					manifest: {
						time: [],
						error: []
					},
					player: {
						time: [],
						error: []
					},
					cities: {
						time: [],
						error: []
					},
					jobs: {
						time: [],
						error: []
					},
					dragons: {
						time: [],
						error: []
					},
					alliances: {
						time: [],
						error: []
					},
					membership: {
						time: [],
						error: []
					},
					activity: {
						time: [],
						error: []
					},
					map: {
						time: [],
						error: []
					},
					tile_at: {
						time: [],
						error: []
					},
					building: {
						time: [],
						error: []
					},
					research: {
						time: [],
						error: []
					},
					training: {
						time: [],
						error: []
					},
					resurrect: {
						time: [],
						error: []
					},
					canceljob: {
						time: [],
						error: []
					},
					marches: {
						time: [],
						error: []
					},
					cancelmarch: {
						time: [],
						error: []
					},
					reports: {
						time: [],
						error: []
					},
					reports_del: {
						time: [],
						error: []
					},
					reports_read: {
						time: [],
						error: []
					},
					message: {
						time: [],
						error: []
					},
					minigame: {
						time: [],
						error: []
					},
					save_minigame: {
						time: [],
						error: []
					},
					leaderboards: {
						time: [],
						error: []
					},
					collect: {
						time: [],
						error: []
					},
					claim: {
						time: [],
						error: []
					},
					defended: {
						time: [],
						error: []
					},
					defense: {
						time: [],
						error: []
					},
					items: {
						time: [],
						error: []
					},
					breeding: {
						time: [],
						error: []
					},
					feeding: {
						time: [],
						error: []
					},
					dragonHandle: {
						time: [],
						error: []
					},
					customization: {
						time: [],
						error: []
					},
					wilderness: {
						time: [],
						error: []
					},
                    other: {
						time: [],
						error: []
					}
				};
			}

			var options = {
				onSuccess: onSuccess,
				onFailure: onFailure,
				on403: on403
			};
			var ajax, msg, headers = {};

			options.method = (isPost || isPost == 1) ? 'POST' : 'GET';
			options.parameters = params;
			options.timeoutSecs = 60;
			options.binary = binary;

			function onSuccess(r) {
				var success = true,
					errmsg = '';
				if (r.status === 200 && r.responseText) {
					if (url.indexOf(".xml") !== -1 || binary) {
						callback({
							ok: true,
							dat: r.responseText
						});
					} else {
						var data = r.responseText;
						try {
							data = JSON.parse(r.responseText);
							if (data.result) {
								success = data.result.success;
								if (!success && data.result.reason) errmsg = data.result.reason;
								else if (!success && data.result && data.result.errors) {
									if (typeof data.result.errors == "string")
										errmsg = data.result.errors
									else errmsg = data.result.errors.join(' ');
								} else if (!success && !data.result && data.errors) {
									if (typeof data.errors == "string")
										errmsg = data.errors
									else errmsg = data.errors.join(' ');
								}
							}
						} catch (e) {
							logit('could not parse responseText = ' + r.responseText);
							success = false;
							errmsg = r.responseText;
						}
						callback({
							ok: success,
							dat: data,
							errmsg: errmsg
						});
					}
				} else {
					msg = 'The request was successful but no data was returned';
					callback({
						ok: false,
						errmsg: msg
					});
				}
			}

			function onFailure(r) {
				if (Data.stats.requests.ajax_type) {
					if (Data.stats.requests.ajax_type[req_type]) Data.stats.requests.ajax_type[req_type].error.push(toNum(serverTime()));
					else logit('MyAjaxRequest, ' + req_type + ' not defined in Data.stats.requests.ajax_type');
				}
				var res = {
					ok: false,
					status: r.status,
					errmsg: r.statusText
				};
				if (r.status > 200 && r.responseText && !(/(404|429|502|509)/.test(r.status))) {
					res.dat = r.responseText;
					res.errmsg = r.responseText;
				} else if (r.status == 404) {
					res.errmsg = 'The page you were looking for doesn\'t exist (404)';
				} else if (r.status == 429) {
					if (!E429_TIMER || (E429_TIMER - toNum(serverTime())) < 0) {
						E429_TIMER = toNum(serverTime()) + 3600;
						Data.stats.requests.last_block = toNum(serverTime());
						Data.stats.requests.count_block++;
					}
					res.errmsg = '<b>API </b>' + translate('<b>Rate Limit Exceeded</b>, too many requests!');
				} else if (r.status == 502) {
					res.errmsg = (r.statusText || 'Bad gateway');
				} else if (r.status == 509) {
					res.errmsg = translate('<b>Rate Limit Exceeded</b>, too many requests!');
				} else {
					res.errmsg = 'This browser is not compatible at this time';
				}
				callback(res);
			}

			function on403(r) {
				dialogFatal('<b>' + kFatalSeedTitle + '</b><br><br>' + '<br>' + '<font color="#C00"><b> ' + r.statusText + '</b></font>' + '<br><br><div align=left>' + '<b>Previous Requirements</b><br><br>' + '<b>FIREFOX</b>' + '<ul><li>Download and install <a href="https://addons.mozilla.org/es-ES/firefox/addon/refcontrol/">RefControl</a>' + '</li><li>Once installed click Tools - RefControlOptions' + '</li><li>Click Add Site and type in <b>wonderhill.com</b>' + '</li><li>Check the Block - Send no referer radio box' + '</li><li>Click OK and then OK again' + '</li></ul><br>' + '<b>CHROME</b>' + '<ul><li>Right click on your "Chrome" icon (either on your Desktop or your Taskbar)' + '</li><li>Choose properties' + '</li><li>At the end of your target line, place these parameters: <b>--no-referrers</b>' + '</li><li>Click OK' + '</li></ul><br><br></div>' + '<a id="' + UID['support_link'] + '" href="" target="_blank">Bugs and Known Issues</a><br>');
				var res = {
					ok: false,
					status: r.status,
					errmsg: r.statusText
				};
				callback(res);
			}

			if (E429_TIMER && (E429_TIMER - toNum(serverTime())) > 0) {
				onFailure({
					status: 429,
					statusText: 'lock by script'
				});
			} else {
				if (Data.stats.requests.ajax_type) {
					if (Data.stats.requests.ajax_type[req_type]) Data.stats.requests.ajax_type[req_type].time.push(toNum(serverTime()));
					else logit('MyAjaxRequest, ' + req_type + ' not defined in Data.stats.requests.ajax_type');
				}
				ajax = new AjaxRequest(url, options, req_type);
			}
		}

		/***********************************************************************
		 * AjaxRequest : Performs the following actions: - Generates an
		 * appropriate request header - Parses the request parameters - Sends
		 * the actual request - Determines if request was successful based on
		 * returned status only - Handles a request timed out condition
		 * 
		 * Returns the following data: - responseText (should be JSON but could
		 * be almost anything) - status (integar) - statusText (string if
		 * present) - ajax (raw ajax request)
		 **********************************************************************/

		function AjaxRequest(url, opts, req_type) {
			var timer = null,
				ajax, headers = {}, h, params, overrideMimeType;

			function onreadystatechange(ajax) {
				if (ajax.readyState === 4) {
					clearTimeout(timer);
					var response = {
						responseText: ajax.responseText,
						status: ajax.status,
						statusText: ajax.statusText,
						ajax: ajax
					}
					if ((ajax.status >= 200 && ajax.status < 300) || ajax.status === 304) {
						if (opts.onSuccess) opts.onSuccess(response);
					} else {
						debugLog(url + ' Failed : ' + inspectObj(response, 8, 1));
						if (opts.onFailure) opts.onFailure(response);
						if (opts['on' + ajax.status])
							opts['on' + ajax.status](response);
					}
				}
			}
			if(req_type == 'manifest') {
				url = ((url.indexOf('http') == -1) ? C.attrs.apiServer.substring(0, C.attrs.apiServer.length-4) + '/' + url : url);
			} else {
				url = ((url.indexOf('http') == -1) ? C.attrs.apiServer + '/' + url : url);
			}
			/* Parse request parameters */
			params = typeof opts === 'string' ? opts.parameters : Object.toQueryString(opts.parameters).replace(/\_/g, '%5F').replace(/\(/g, '%28').replace(/\)/g, '%29');

			/* Change Accept request header based on browser */
			headers['Accept'] = IsChrome ? '*/*' : 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8,*/*;q=0.6,*/*;q=0.4';
			/* Add request header specific to POST request only */
			if (opts.method == 'POST') {
				headers['x-s3-aws'] = SHA1("Draoumculiasis" + params + "LandCrocodile" + url + "Bevar-Asp");
				headers['content-type'] = 'application/x-www-form-urlencoded';
			} else {
				if (params.length > 0) url += (url.include('?') ? '&' : '?') + params;
			}
			if (opts && opts.headers && opts.headers.overrideMime) overrideMimeType = opts.headers.overrideMime;
			/* change content-type and mime type if binary function */
			if (opts.binary || req_type == 'manifest') {
				headers['content-type'] = 'text/plain; charset=x-user-defined';
				overrideMimeType = 'text/plain; charset=x-user-defined';
			}

			var isGM = typeof GM_info === 'object' && typeof GM_info.version === 'string' && typeof GM_getValue != 'undefined' && typeof GM_getValue('a', 'b') != 'undefined';
			if (typeof GM_xmlhttpRequest === 'function' && isGM) {
				GM_xmlhttpRequest({
					method: opts.method,
					url: url,
					data: (opts.method === 'POST' ? params : null),
					headers: headers,
					overrideMimeType: overrideMimeType,
					ontimeout: (opts.timeoutSecs ? opts.timeoutSecs * 1000 : 0),
					onreadystatechange: onreadystatechange
				});
			} else {
				ajax = new XMLHttpRequest();
				if (overrideMimeType) ajax.overrideMimeType(overrideMimeType);
				ajax.onreadystatechange = function() {
					if (ajax.readyState === 4) {
						clearTimeout(timer);
						var response = {
							responseText: ajax.responseText,
							status: ajax.status,
							statusText: ajax.statusText,
							ajax: ajax
						}
						if ((ajax.status >= 200 && ajax.status < 300) || ajax.status === 304) {
							if (opts.onSuccess) opts.onSuccess(response);
						} else {
							if (opts.onFailure) opts.onFailure(response);
							if (opts['on' + ajax.status])
								opts['on' + ajax.status](response);
						}
					}
				}
				ajax.open(opts.method, url, true);
				/* Add request headers to ajax request */
				for (h in headers) ajax.setRequestHeader(h, headers[h]);
				if (opts.timeoutSecs) timer = setTimeout(function() {
					ajax.abort();
					if (opts.onFailure) {
						/*
						 * CHECK: 599 is custom error code. See if better option
						 * exists.
						 */
						opts.onFailure({
							responseText: null,
							status: 599,
							statusText: 'Request Timed Out',
							ajax: ajax
						});
					}
				}, opts.timeoutSecs * 1000);
				/* Send request with params if POST otherwise just send request */
				ajax.send((opts.method == 'POST') ? params : null);
			}
		}


		/**
			 * ****************************** Modal dialog function
		 * **********************
		 */
		var downloadDataURI = function(options) {
			if (!options || !options.data) return;
			if (options.data && !options.filename) options.filename = "download." + options.data.split(",")[0].split(";")[0].substring(5).split("/")[1]
			if (!options.url) options.url = "https://download-data-uri.appspot.com/" /*
																						 * https
																						 * instead
																						 * of
																						 * http
																						 */
			var t = '<FORM method="post" action="' + options.url + '" style="display:none">' + '<input type="hidden" name="filename" value="' + options.filename + '"/>' + '<input type="hidden" name="data" value="' + options.data + '"/>' + '<input id=xxpbButSubmit type=submit value=SUBMIT></form>';
			var e = document.createElement('div');
			e.innerHTML = t;
			document.body.appendChild(e);
			setTimeout(function() {
				document.getElementById('xxpbButSubmit').click();
			}, 0);
		}

		function dialogConfirm(msg, onContinue, onCancel, two_buttons) {
			var save_popUp = {
				x: Data.options.popUp.x,
				y: Data.options.popUp.y
			};
			var confirmPop = new PopUp('newversion' + serverTime(), 800 + Math.randRange(1, 50), 300, 300, 150, true);
			confirmPop.getTopDiv().innerHTML = '<div class=' + UID['title'] + ' style="margin-top:5px; padding-top:5px;  padding-bottom:5px;"><center><b>' + scriptName + ': ' + translate('Confirmation') + '!</b></center></div>';
			var layoutDiv = document.createElement('div');
			layoutDiv.className = 'container';
			layoutDiv.style.backgroundColor = 'rgb(245,245,228)';
			layoutDiv.style.color = '#000';
			layoutDiv.style.height = '100%';
			var layout = '<table align=center valign=center style="height: 100%">' + '<tr align=center height=60%>' + '<td>' + msg + '</td>' + '</tr>' + '<tr align=center>' + '<td>' + '<input id=' + setUID('btn_ok') + ' type=button class=confirm_button value="' + translate('OK') + '" />';
			if (two_buttons) {
				layout += '	&nbsp; &nbsp;' + '<input id=' + setUID('btn_cancel') + ' type=button class=confirm_button value=' + translate('Cancel') + ' />';
			}
			layout += '</td></tr></table>';
			if (confirmPop.getMainDiv().lastChild)
				confirmPop.getMainDiv().removeChild(confirmPop.getMainDiv().lastChild);
			confirmPop.getMainDiv().appendChild(layoutDiv);
			layoutDiv.innerHTML = layout;

			document.getElementById(UID['btn_ok']).addEventListener('click', function() {
				confirmPop.show(false);
				Data.options.popUp = {
					open: Data.options.popUp.open,
					drag: Data.options.popUp.drag,
					x: save_popUp.x,
					y: save_popUp.y
				};
				if (onContinue && typeof(onContinue) == "function") onContinue();
			}, false);

			if (two_buttons) {
				document.getElementById(UID['btn_cancel']).addEventListener('click', function() {
					confirmPop.show(false);
					Data.options.popUp = {
						open: Data.options.popUp.open,
						drag: Data.options.popUp.drag,
						x: save_popUp.x,
						y: save_popUp.y
					};
					if (onCancel && typeof(onCancel) == "function") onCancel();
				}, false);
			}
			confirmPop.show(true);
		}

		function dialogCopyPaste() {
			var save_popUp = {
				x: Data.options.popUp.x,
				y: Data.options.popUp.y
			};
			var copyPastePop = new PopUp('copyPaste', 100, 50, 500, 750, true);
			copyPastePop.getTopDiv().innerHTML = '<div class=' + UID['title'] + ' style="width=90%; margin-top:5px; padding-top:5px;  padding-bottom:5px;"><center><b>' + scriptName + ': ' + translate('Message') + '!</b></center></div>';
			var layoutDiv = document.createElement('div');
			layoutDiv.className = 'container';
			layoutDiv.style.backgroundColor = 'rgb(245,245,228)';
			layoutDiv.style.color = '#000';
			layoutDiv.style.height = '100%';
			setUID('dcp_type');
			var layout = '<br><table width=80% align=center><tr>' + '	<td width=15%><label>' + translate('View') + '</label></td>' + '	<td width=5%><input type=radio name=' + UID['dcp_type'] + ' value=0 /></td><td align=left width=30%><label>' + translate('All') + '</label></td>' + '	<td width=5%><input type=radio name=' + UID['dcp_type'] + ' value=1 /></td><td align=left width=30%><label>' + translate('Map data') + '</label></td>' + '</tr></table>' + '<br>' + '<table class=jewel valign=center width=100%>' + '<tr align=center>' + '<td><div id=' + setUID('div_data') + ' style="height:610px; max-height:610; overflow-y:auto"></div></td>' + '</tr>' + '</table>' + '<br>' + '<table width=100%>' + '<tr align=center>' + '<td><input id=' + setUID('btn_ok') + ' type=button class=confirm_button value="' + translate('Close') + '" /></td>' + '</tr></table>';
			var child_found = true;
			while (child_found) {
				if (copyPastePop.getMainDiv().lastChild)
					copyPastePop.getMainDiv().removeChild(copyPastePop.getMainDiv().lastChild);
				else
					child_found = false;
			}
			copyPastePop.getMainDiv().appendChild(layoutDiv);
			layoutDiv.innerHTML = layout;
			document.getElementById(UID['btn_ok']).addEventListener('click', function() {
				copyPastePop.show(false);
				Data.options.popUp = {
					open: Data.options.popUp.open,
					drag: Data.options.popUp.drag,
					x: save_popUp.x,
					y: save_popUp.y
				};
			}, false);
			var r = document.getElementsByName(UID['dcp_type']);
			for (i = 0; i < r.length; i++) {
				r[i].addEventListener('change', enableChanged, false);
			}
			r[0].checked = true;
			show_all();

			function enableChanged(event) {
				if (toNum(event.target.value) == 1) show_map();
				else show_all();
			}

			function show_map() {
				try {
					var json_data = '{"map":' + JSON.stringify(Data.map) + '}';
				} catch (e) {}
				document.getElementById(UID['div_data']).innerHTML = '<textarea cols="110" rows="50" wrap="PHYSICAL">' + json_data + '</TEXTAREA>';
			}

			function show_all() {
				try {
					var keys = getKeys(Data.defaults);
					for (var i = 0; i < keys.length; i++) {
						if (/(marches|requests)/i.test(keys[i]))
							keys.splice(i, 1);
					}
					var json_data = '{';
					for (var i = 0; i < keys.length; i++) {
						var name = keys[i];
						try {
							json_data += '"' + name + '":' + JSON.stringify(Data[name]);
						} catch (e) {
							debugLog(e);
						}
						if (i < keys.length - 1) json_data += ','
					}
					json_data += '}';
				} catch (e) {}
				document.getElementById(UID['div_data']).innerHTML = '<textarea cols="110" rows="50" wrap="PHYSICAL">' + json_data + '</TEXTAREA>';
			}
			copyPastePop.show(true);
		}

		function dialogFatal(msg) {
			var pop = new PopUp('fatal', 800 + Math.randRange(1, 50), 300, 400, 300, true);
			pop.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ': ' + translate('Error') + '!</b></center></div>';
			var layoutDiv = document.createElement('div');
			layoutDiv.className = 'container';
			layoutDiv.style.backgroundColor = 'rgb(245,245,228)';
			layoutDiv.style.color = '#000';
			layoutDiv.style.height = '100%';
			var layout = '<div style="height:270px; max-height:270px; overflow-y:auto">' + '<table width=100%><tr align=center><td width=96%><BR>' + msg + '</td></tr></table></div>';
			pop.getMainDiv().appendChild(layoutDiv);
			layoutDiv.innerHTML = layout;
			pop.show(true);
			document.getElementById(UID['support_link']).addEventListener('click', redirect, false);

			function redirect() {
				window.open(scriptUrlError, 'www.calciumscript.net');
			}
		}

		function dialogSendMsg(name, id, is_player) {
			var save_popUp = {
				x: Data.options.popUp.x,
				y: Data.options.popUp.y
			};
			var MsgSendPop = new PopUp('send_msg', 800 + Math.randRange(1, 50), 300, 500, 250, true);
			MsgSendPop.getTopDiv().innerHTML = '<div class=' + UID['title'] + ' style="margin-top:5px; padding-top:5px;  padding-bottom:5px;"><center><b>' + scriptName + ': ' + translate('Message') + '</b></center></div>';
			var layoutDiv = document.createElement('div');
			layoutDiv.className = 'container';
			layoutDiv.style.backgroundColor = 'rgb(245,245,228)';
			layoutDiv.style.color = '#000';
			layoutDiv.style.height = '100%';
			var layout = '<table class=' + UID['table'] + ' width=100% style="color:#000;">' + '	<tr valign=top>' + '		<td><label>' + translate('To') + ' :</label></td>' + '		<td><label><b>' + name + '</b></td>' + '	</tr><tr valign=top>' + '		<td><label>' + translate('Subject') + ' :</label></td>' + '		<td><input id=' + setUID('Message_subject') + ' size=50 maxlength=160 type=text /></td>' + '	</tr><tr valign=top>' + '		<td><label>' + translate('Message') + ' :</label></td>' + '		<td><textarea id=' + setUID('Message_body') + ' cols="60" rows="8" wrap="PHYSICAL"></textarea></td>' + '	</tr><tr align=center>' + '		<td colspan=2><br><input id=' + setUID('btn_ok') + ' type=button class="confirm_button" value="' + translate('Send') + '" />&nbsp; &nbsp; &nbsp;' + '			<input id=' + setUID('btn_cancel') + ' type=button class="confirm_button" value=' + translate('Cancel') + ' /></td>' + '	</tr>' + '</table>';
			if (MsgSendPop.getMainDiv().lastChild)
				MsgSendPop.getMainDiv().removeChild(MsgSendPop.getMainDiv().lastChild);
			MsgSendPop.getMainDiv().appendChild(layoutDiv);
			layoutDiv.innerHTML = layout;
			var butOk = document.getElementById(UID['btn_ok']);
			butOk.disabled = true;
			Element.removeClassName(butOk, "confirm_button");
			Element.addClassName(butOk, UID['btn_disabled']);

			function setButOk(event) {
				var subject = document.getElementById(UID['Message_subject']);
				var body = document.getElementById(UID['Message_body']);
				var butOk = document.getElementById(UID['btn_ok']);
				if (subject && body && subject.value != null && subject.value != '' && body.value != null && body.value != '') {
					butOk.disabled = false;
					Element.removeClassName(butOk, UID['btn_disabled']);
					Element.addClassName(butOk, "confirm_button");
				} else {
					butOk.disabled = true;
					Element.removeClassName(butOk, "confirm_button");
					Element.addClassName(butOk, UID['btn_disabled']);
				}
			}
			document.getElementById(UID['Message_subject']).addEventListener('change', setButOk, false);
			document.getElementById(UID['Message_body']).addEventListener('change', setButOk, false);
			document.getElementById(UID['btn_ok']).addEventListener('click', function() {
				var subject = document.getElementById(UID['Message_subject']);
				var body = document.getElementById(UID['Message_body']);
				if (subject && body && subject.value != null && subject.value != '' && body.value != null && body.value != '') {
					MsgSendPop.show(false);
					Data.options.popUp = {
						open: Data.options.popUp.open,
						drag: Data.options.popUp.drag,
						x: save_popUp.x,
						y: save_popUp.y
					};
					MyAjax.messageSend(subject.value, body.value, id, is_player);
				}
			}, false);
			document.getElementById(UID['btn_cancel']).addEventListener('click', function() {
				MsgSendPop.show(false);
				Data.options.popUp = {
					open: Data.options.popUp.open,
					drag: Data.options.popUp.drag,
					x: save_popUp.x,
					y: save_popUp.y
				};
			}, false);
			MsgSendPop.show(true);
		}

		function updaterConfirm(msg, onContinue, onCancel, two_buttons) {
			var save_popUp = {
				x: Data.options.popUp.x,
				y: Data.options.popUp.y
			};
			updaterPop = new PopUp('updater', 800 + Math.randRange(1, 50), 300, 300, 150, true);
			updaterPop.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ': ' + translate('Confirmation') + '!</b></center></div>';
			var layoutDiv = document.createElement('div');
			layoutDiv.className = 'container';
			layoutDiv.style.backgroundColor = 'rgb(245,245,228)';
			layoutDiv.style.color = '#000';
			layoutDiv.style.height = '100%';
			var layout = '<table align=center valign=center style="height: 100%">' + '<tr align=center height=60%>' + '<td>' + msg + '</td>' + '</tr>' + '<tr align=center>' + '<td>' + '<input id=' + setUID('btn_ok') + ' type=button class=confirm_button value="' + translate('OK') + '" />';
			if (two_buttons) {
				layout += '	&nbsp; &nbsp;' + '<input id=' + setUID('btn_cancel') + ' type=button class=confirm_button value=' + translate('Cancel') + ' />';
			}
			layout += '</td></tr></table>';
			if (updaterPop.getMainDiv().lastChild)
				updaterPop.getMainDiv().removeChild(updaterPop.getMainDiv().lastChild);
			updaterPop.getMainDiv().appendChild(layoutDiv);
			layoutDiv.innerHTML = layout;

			document.getElementById(UID['btn_ok']).addEventListener('click', function() {
				updaterPop.show(false);
				Data.options.popUp = {
					open: Data.options.popUp.open,
					drag: Data.options.popUp.drag,
					x: save_popUp.x,
					y: save_popUp.y
				};
				if (onContinue && typeof(onContinue) == "function") onContinue();
			}, false);

			if (two_buttons) {
				document.getElementById(UID['btn_cancel']).addEventListener('click', function() {
					updaterPop.show(false);
					Data.options.popUp = {
						open: Data.options.popUp.open,
						drag: Data.options.popUp.drag,
						x: save_popUp.x,
						y: save_popUp.y
					};
					if (onCancel && typeof(onContinue) == "function") onCancel();
				}, false);
			}
			updaterPop.show(true);
		}

		function ModalDialog(curtainDiv, width, height, styleName, allowClose, notifyClose) {
			this.allowClose = function(onOff) {
				if (onOff) document.getElementById(UID['ModalDialog_btnClose']).style.display = 'block';
				else document.getElementById(UID['ModalDialog_btnClose']).style.display = 'none';
			}
			this.destroy = function() {
				if (!this.destroyed) {
					this.curtainDiv.removeChild(this.curtain);
					this.curtainDiv.removeChild(this.div);
				}
			}
			this.hide = function() {
				this.curtainDiv.style.display = 'none';
				this.curtainDiv.style.display = 'none';
			}
			this.show = function() {
				this.curtainDiv.style.display = 'block';
				this.curtainDiv.style.display = 'block';
			}
			this.getContentDiv = function() {
				return document.getElementById(UID['ModalDialog_Close']);
			}
			this.getTopDiv = function() {
				return document.getElementById(UID['ModalDialog_Top']);
			}
			var offset = Element.positionedOffset(curtainDiv);
			this.curtainDiv = curtainDiv;
			this.curtain = document.createElement('div');
			this.curtain.style.top = (offset.top) + 'px';
			this.curtain.style.left = (offset.left) + 'px';
			this.curtain.style.width = curtainDiv.offsetWidth + 'px';
			this.curtain.style.height = (curtainDiv.offsetHeight) + 'px';
			this.curtain.style.backgroundColor = '#000';
			this.curtain.style.opacity = '0.6';
			this.curtain.style.zIndex = parseInt(curtainDiv.style.zIndex) + 1;
			this.curtain.style.position = 'absolute';
			this.curtain.style.margin = curtainDiv.style.margin;
			this.curtain.style.padding = curtainDiv.style.padding;
			curtainDiv.appendChild(this.curtain);

			this.div = document.createElement('div');
			if (styleName)
				this.div.className = styleName;
			else this.div.className = 'container';

			this.div.style.backgroundColor = 'rgb(245,245,228)';
			this.div.style.color = '#000';
			this.div.style.width = width + 'px';
			this.div.style.height = height + 'px';
			this.div.style.position = 'absolute';
			this.div.style.zindex = parseInt(curtainDiv.style.zIndex) + 2;
			this.div.style.top = ((curtainDiv.offsetHeight - height) / 2 + offset.top) + 'px';
			this.div.style.left = ((curtainDiv.offsetWidth - width) / 2 + offset.left) + 'px';
			this.div.innerHTML = '' + '<table height=100% width=100%>' + '	<tr valign=middle height=10%>' + '		<td width=100% valign=top>' + '		<div id=' + setUID('ModalDialog_Top') + ' class="' + UID['popup_top'] + '"></div>' + '		</td>' + '	</tr>' + '	<tr valign=middle height=70%>' + '		<td>' + '		<div id=' + setUID('ModalDialog_Close') + ' style="text-align:center"></div>' + '		</td>' + '	</tr>' + '	<tr valign=middle align=center>' + '		<td width=100% align=center>' + '		<div style="text-align:center;"><center>' + '			<input id=' + setUID('ModalDialog_btnClose') + ' type=button value="' + translate('Close') + '" style="display:none" />' + '		</center></div>' + '		</td>' + '	</tr>' + '</table>';
			curtainDiv.appendChild(this.div);
			this.allowClose(allowClose);
			this.notifyClose = notifyClose;
			var t = this;
			document.getElementById(UID['ModalDialog_btnClose']).addEventListener('click', function() {
				t.destroyed = true;
				t.curtainDiv.removeChild(t.curtain);
				t.curtainDiv.removeChild(t.div);
				if (t.notifyClose) notifyClose();
			}, false);
		}
		/**
		 * ****************************** Modal dialog function
		 * **********************
		 */

		/**
		 * ****************************** TabManager + WinManager + PopUp
		 * ************
		 */
		var tabManager = {
			tabList: {},
			/* {name, obj, div} */
			currentTab: null,

			init: function(mainDiv) {
				var t = tabManager;
				var sorter = [];
				for (k in Tabs) {
					if ((k == 'Waves' && nvl(Data.options.disable_wave, !WAVE_TAB_ENABLE)) ||
						(k == 'Multiple' && nvl(Data.options.disable_multi, !MULTI_TAB_ENABLE)) ||
						(k == 'Spies' && nvl(Data.options.disable_spies, !SPY_TAB_ENABLE)) ||
						(k == 'Bookmarks' && nvl(Data.options.disable_bookmark, !BOOKMARK_TAB_ENABLE)) ||
						(k == 'Inbox' && nvl(Data.options.disable_inbox, !INBOX_TAB_ENABLE)) ||
						(k == 'Search' && nvl(Data.options.disable_search, !SEARCH_TAB_ENABLE)) ||
						(k == 'Alliance' && nvl(Data.options.disable_alliance, !ALLIANCE_TAB_ENABLE)) ||
						(k == 'Single' && nvl(Data.options.disable_single, !SINGLE_TAB_ENABLE)) ||
						(k == 'Wall' && nvl(Data.options.disable_wall, !WALL_TAB_ENABLE)) ||
						(k == 'Wheel' && nvl(Data.options.disable_wheel, !WHEEL_TAB_ENABLE)) ||
						(k == 'Log' && nvl(Data.options.disable_log, !LOG_TAB_ENABLE)) ||
                        (k == 'CPT' && nvl(Data.options.disable_cpt, !CPT_TAB_ENABLE)))
						Tabs[k].tabDisabled = true;
					else if (k == 'Waves' || k == 'Multiple' || k == 'Spies' || k == 'Search' || k == 'Alliance' ||
						k == 'Single' || k == 'Wheel' || k == 'Inbox' || k == 'Log')
						Tabs[k].tabDisabled = false;
					if (!Tabs[k].tabDisabled) {
						t.tabList[k] = {};
						t.tabList[k].name = k;
						t.tabList[k].uid = setUID('tab_' + k);
						t.tabList[k].obj = Tabs[k];
						if (Tabs[k].tabLabel != null)
							t.tabList[k].label = translate(Tabs[k].tabLabel);
						else t.tabList[k].label = k;
						if (k == 'Inbox') {
							var inbox_uid = setUID('tabInbox_UnreadCount');
							t.tabList[k].label = '<div id=' + inbox_uid + '>' + translate(Tabs[k].tabLabel) + '&nbsp<span class=' + UID['red'] + '>0000</span></div>';
						}
						if (Tabs[k].tabOrder != null)
							sorter.push([Tabs[k].tabOrder, t.tabList[k]]);
						else sorter.push([1000, t.tabList[k]]);
						t.tabList[k].div = document.createElement('div');
					}
				}

				sorter.sort(function(a, b) {
					return a[0] - b[0]
				});

				var ntabs = sorter.length;
				if (ntabs > 9) {
					var line1 = 9;
					var addStyle = 'style="border-bottom:none; padding-bottom:0;"';
					var addClass = ' line1';
				} else {
					var line1 = sorter.length;
					var addStyle = '';
					var addClass = '';
				}

				var m = '<div class=' + UID['title_main'] + ' style="padding-top:5px; padding-bottom:5px;"><table width=95% align=center>' + '	<tr align=center><td width=45% align=left>' + scriptName + ' by ' + mainAuthor + ' - v' + scriptVersion + '&nbsp(' + api_version + ')</td>' + '		<td width=33% align=center><SPAN id=' + setUID('tabManager_Alert') + '></span></td>' + '		<td width=22% align=left><SPAN id=' + setUID('tabManager_Time') + '></span></td>' + '	</tr></table></div>';

				m += '<ul class=tabs ' + addStyle + '>';
				m += '<li class="tab first' + addClass + '"><a id=' + sorter[0][1].uid + '>' + sorter[0][1].label + '</a></li>';
				for (var i = 1; i < line1; i++)
					m += '<li class="tab' + addClass + '"><a id=' + sorter[i][1].uid + '>' + sorter[i][1].label + '</a></li>';
				m += '</ul>';
				if (sorter.length > line1) {
					header_2lines = true;
					m += '<ul class="tabs line2">';
					for (var i = line1; i < sorter.length; i++) {
						if (i == line1) var addClass = ' first';
						else var addClass = '';
						m += '<li class="tab line2' + addClass + '"><a id=' + sorter[i][1].uid + '>' + sorter[i][1].label + '</a></li>';
					}
					m += '</ul>';
				}
				m += '<div id=' + div_player_attack + '></div>' + '<div id=' + div_player_spy + '></div>' + '<div id=' + div_player_building + '></div>' + '<div id=' + div_player_units + '></div>' + '<div id=' + div_player_research + '></div>' + '<div id=' + div_player_fortuna + '></div>';
				mainPop.getTopDiv().innerHTML = m;

				t.currentTab = null;
				for (k in t.tabList) {
					if (t.tabList[k].name == Data.options.currentTab)
						t.currentTab = t.tabList[k];
					document.getElementById(t.tabList[k].uid).addEventListener('click', this.e_clickedTab, false);
					var div = t.tabList[k].div;
					div.className = 'container';
					div.style.display = 'none';
					mainDiv.appendChild(div);
					try {
						t.tabList[k].obj.init(div);
					} catch (e) {
						div.innerHTML += "INIT ERROR: " + e;
					}
				}
				if (t.currentTab == null)
					t.currentTab = sorter[0][1];
				t.setTabStyle(document.getElementById(t.currentTab.uid), true);
				t.currentTab.div.style.display = 'block';
				t.showClock();
			},
			hideTab: function() {
				var t = tabManager;
				t.currentTab.obj.hide();
			},
			showTab: function() {
				var t = tabManager;
				t.currentTab.obj.show();
			},
			setTabStyle: function(e, selected) {
				if (selected) {
					e.style.zIndex = 1;
					e.className = 'tab selected';
				} else {
					e.style.zIndex = 0;
					e.className = 'tab';
				}
			},
			e_clickedTab: function(event) {
				var t = tabManager,
					element;
				if (event.target.tagName == 'A')
					element = event.target;
				else {
					var parentElement = event.target.parentNode;
					while (parentElement.tagName != 'A')
						parentElement = parentElement.parentNode;
					element = parentElement;
				}
				var id = element.getAttribute('id');
				for (k in t.tabList)
					if (t.tabList[k].uid == element.id) {
						var newTab = t.tabList[k];
						break;
					}
				if (t.currentTab.name != newTab.name) {
					t.setTabStyle(document.getElementById(newTab.uid), true);
					t.setTabStyle(document.getElementById(t.currentTab.uid), false);
					t.currentTab.obj.hide();
					t.currentTab.div.style.display = 'none';
					t.currentTab = newTab;
					newTab.div.style.display = 'block';
					Data.options.currentTab = newTab.name;
				}
				if (document.getElementById(UID['tabInbox_UnreadCount'])) {
					if (newTab.name == 'Inbox') color = 'yellow';
					else color = 'red';
					document.getElementById(UID['tabInbox_UnreadCount']).innerHTML = translate('Inbox') + (Messages.unread_count > 0 ? '&nbsp<font color=' + color + '>' + Messages.unread_count + '</font>' : '');
				}
				newTab.obj.show();
			},
			showClock: function() {
				var t = tabManager;
				var now = new Date();
				now.setTime(now.getTime() + ((Data.options.utc_time) ? (now.getTimezoneOffset() * 60000) : 0));
				document.getElementById(UID['tabManager_Time']).innerHTML = '<font color="#FFFFFF"><b>' + now.toTimeString().substring(0, 8) + ' ' + ((Data.options.utc_time) ? ' UTC' : '') + '</b></font>';
				document.getElementById(UID['tabManager_Alert']).innerHTML = SoundPlayer.shortString;
				if (document.getElementById(UID['short_alerts']))
					document.getElementById(UID['short_alerts']).addEventListener('click', function() {
						SoundPlayer.StopSound('attack');
						SoundPlayer.StopSound('spy');
						if (SoundPlayer.attack_repeat_timer) {
							clearTimeout(SoundPlayer.attack_repeat_timer);
							SoundPlayer.attack_repeat_timer = null;
						}
						if (SoundPlayer.spy_repeat_timer) {
							clearTimeout(SoundPlayer.spy_repeat_timer);
							SoundPlayer.spy_repeat_timer = null;
						}
						var t = tabManager;
						for (k in t.tabList)
							if (t.tabList[k].name == 'Tower') {
								var newTab = t.tabList[k];
								break;
							}
						if (t.currentTab.name != newTab.name) {
							t.setTabStyle(document.getElementById(newTab.uid), true);
							t.setTabStyle(document.getElementById(t.currentTab.uid), false);
							t.currentTab.obj.hide();
							t.currentTab.div.style.display = 'none';
							t.currentTab = newTab;
							newTab.div.style.display = 'block';
							Data.options.currentTab = newTab.name;
						}
						newTab.obj.show();
						Tabs.Tower.tabTowerWall();
					}, false);
				setTimeout(t.showClock, 1000);
			}
		}
		var WinManager = {
			wins: {},
			/* prefix : PopUp obj */
			get: function(prefix) {
				var t = WinManager;
				return t.wins[prefix];
			},
			add: function(prefix, pop) {
				var t = WinManager;
				t.wins[prefix] = pop;
			},
			del: function(prefix) {
				var t = WinManager;
				delete t.wins[prefix];
			}
		}

			function PopUp(prefix, x, y, width, height, enableDrag, onClose) {
				var pop = WinManager.get(prefix);
				if (pop) {
					pop.show(false);
					return pop;
				}
				this.BASE_ZINDEX = 100;

				/* protos ... */
				this.show = show;
				this.toggleHide = toggleHide;
				this.getTopDiv = getTopDiv;
				this.getMainDiv = getMainDiv;
				this.getLayer = getLayer;
				this.setLayer = setLayer;
				this.setEnableDrag = setEnableDrag;
				this.getLocation = getLocation;
				this.setLocation = setLocation;
				this.focusMe = focusMe;
				this.unfocusMe = unfocusMe;
				this.centerMe = centerMe;
				this.destroy = destroy;
				this.setModal = setModal;
				this.setHeight = setHeight;

				/* object vars ... */
				this.div = document.createElement('div');
				document.body.appendChild(this.div);

				this.prefix = prefix;
				this.onClose = onClose;

				if (x < 0 || x > document.body.offsetWidth) x = 0;
				if (y < 0 || y > document.body.offsetHeight) y = 0;

				/* Scramble */
				rndPopup = ['outer', 'bar', 'top', 'main', 'close'];
				for (var s = 0; s < rndPopup.length; s++) {
					rndPopup[rndPopup[s]] = setUID(prefix + '_' + rndPopup[s]);
				}
				var t = this;
				this.div.id = rndPopup['outer'];
				this.div.className = UID['popup_outer'];
				this.div.style.zIndex = this.BASE_ZINDEX;
				this.div.style.position = 'absolute';
				this.div.style.display = 'none';
				this.div.style.width = width + 'px';
				this.div.style.height = height + 'px';
				this.div.style.top = (y || 0) + 'px';
				this.div.style.left = (x || 0) + 'px';

				var m = '<span id=' + rndPopup['close'] + ' class="' + UID['popup_close'] + '">X</span>\
			<TABLE cellspacing=0 width=100% height=100%>\
			<TR id="' + rndPopup['bar'] + '" class="' + UID['popup_bar'] + '">\
				<TD width=100% valign=bottom>\
				<SPAN id="' + rndPopup['top'] + '" class="' + UID['popup_top'] + '"></span></td>\
			</tr>\
			<TR><TD height=100% valign=top colspan=2 id="' + rndPopup['main'] + '" class="' + UID['popup_main'] + '" style="background-image:url(\'' + urlBackgroundImage + '\')"></td></tr></table>';
				this.div.innerHTML = m;
				document.getElementById(rndPopup['close']).addEventListener('click', e_XClose, false);
				document.getElementById(rndPopup['bar']).addEventListener('dblclick', function() {
					toggleHideBody(rndPopup['main'], height)
				}, false);

				if (enableDrag) {
					this.dragger = new Draggable(this.div, {
						handle: rndPopup['bar'],
						scroll: window,
						onEnd: function(dragger, event) {
							var el = dragger.element;
							var offset = Element.cumulativeOffset(el);
							Data.options.popUp.x = offset.left;
							Data.options.popUp.y = offset.top;
						}
					});
				}

				this.div.addEventListener('mousedown', e_divClicked, false);
				WinManager.add(prefix, this);

				function setModal(onOff) {}

				function e_divClicked() {
					t.focusMe();
				}

				function e_XClose() {
					t.show(false);
					if (t.onClose != null) t.onClose();
				}

				function focusMe() {
					t.setLayer(15);
				} /* old = 5 */

				function unfocusMe() {
					t.setLayer(-15);
				} /* old = -5 */

				function getLocation() {
					return {
						x: toNum(this.div.style.left),
						y: toNum(this.div.style.top)
					};
				}

				function setLocation(loc) {
					t.div.style.left = loc.x + 'px';
					t.div.style.top = loc.y + 'px';
				}

				function destroy() {
					document.body.removeChild(t.div);
					WinManager.del(t.prefix);
				}

				function centerMe(parent) {
					if (parent == null)
						var coords = Element.cumulativeOffset(document.body);
					else var coords = Element.cumulativeOffset(parent);
					var left = ((document.body.offsetWidth - toNum(t.div.style.width)) / 2) + coords.left;
					var top = ((document.body.offsetHeight - toNum(t.div.style.height)) / 2) + coords.top;
					if (left < 0) left = 0;
					if (top < 0) top = 0;
					t.div.style.left = x + 'px';
					t.div.style.top = y + 'px';
				}

				function setEnableDrag(b) {
					Data.options.popUp.drag = b;
				}

				function setHeight(h) {
					t.div.style.height = h + 'px';
				}

				function setLayer(zi) {
					t.div.style.zIndex = '' + (this.BASE_ZINDEX + zi);
				}

				function getLayer() {
					return parseInt(t.div.style.zIndex) - this.BASE_ZINDEX;
				}

				function getTopDiv() {
					return document.getElementById(rndPopup['top']);
				}

				function getMainDiv() {
					return document.getElementById(rndPopup['main']);
				}

				function show(b) {
					if (b) {
						// t.div.style.display = 'block';
						$(t.div.id).blindDown();
						t.focusMe();
					} else {
						t.div.style.display = 'none';
					}
					return b;
				}

				function toggleHide(t) {
					if (t.div.style.display == 'block')
						return t.show(false);
					else return t.show(true);
				}

				function toggleHideBody(id, height) {
					var element = document.getElementById(id);
					if (element.style.display == 'block') {
						element.style.display = 'none';
						element.style.height = '0px';
						t.setHeight((header_2lines ? '72' : '52'));
					} else {
						element.style.display = 'block';
						element.style.height = '100%';
						t.setHeight(height);
					}
				}
			}
			/**
			 * ****************************** TabManager + WinManager + PopUp
			 * ************
			 */


			/** ********** Prototype Functions ************* */
			Object.defineProperty(Object.prototype, "cleanRemoved", {
				enumerable: false,
				value: function() {
					/* Create a new array from the contents of arguments */
					var args = Array.prototype.slice.call(arguments);
					var obj = this,
						from = args.shift(),
						max_depth = 0,
						path,
						depth = 0;
					if (typeof(from) == 'undefined') return;
					if (typeof(args[0]) == 'number') max_depth = args.shift();
					if (typeof(args[0]) == 'number') depth = args.shift();
					path = args[0] || '';
					if (max_depth) {
						if (depth >= max_depth) return;
						depth++;
					}
					if (typeof(obj) == "object" && typeof(from) == "object") {
						Object.getOwnPropertyNames(obj).forEach(function(name) {
							if (obj[name] != null && typeof(obj[name]) == "object" && typeof(from[name]) == "object") {
								obj[name].cleanRemoved(from[name], max_depth, depth, path + name + '.');
							} else if (typeof(from[name]) == 'undefined') {
								var msg = path + name + '  DELETED!';
								debugLog(msg);
								delete obj[name];
							}
						});
					}
					return this;
				}
			});
		Object.defineProperty(Object.prototype, "mergeWith", {
			enumerable: false,
			value: function() {
				var override = true,
					dest = this,
					len = arguments.length,
					props, merge, i, from;
				if (typeof(arguments[arguments.length - 1]) === "boolean") {
					override = arguments[arguments.length - 1];
					len = arguments.length - 1;
				}
				for (i = 0; i < len; i++) {
					from = arguments[i];
					if (from == undefined) continue;
					if (from != null || typeof(from) == "object") {
						Object.getOwnPropertyNames(from).forEach(function(name) {
							var descriptor;
							if ((typeof(dest[name]) == "object" || typeof(dest[name]) == "undefined") && typeof(from[name]) == "object") {
								if (typeof(dest[name]) == "undefined") dest[name] = Array.isArray(from[name]) ? [] : {};
								if (override) {
									if (!Array.isArray(dest[name]) && Array.isArray(from[name])) {
										dest[name] = [];
									} else if (Array.isArray(dest[name]) && !Array.isArray(from[name])) {
										dest[name] = {};
									}
								}
								if (dest[name] != undefined) dest[name].mergeWith(from[name], override);
							} else if ((name in dest && override) || !(name in dest)) {
								descriptor = Object.getOwnPropertyDescriptor(from, name);
								if (descriptor.configurable) {
									Object.defineProperty(dest, name, descriptor);
								}
							}
						});
					} else dest = from;
				}
				return this;
			}
		});
		Array.prototype.compare = function(testArr) {
			if (this.length != testArr.length) return false;
			for (var i = 0; i < testArr.length; i++) {
				if (this[i].compare) {
					if (!this[i].compare(testArr[i])) return false;
				}
				if (this[i] !== testArr[i]) return false;
			}
			return true;
		}
		Array.prototype.shuffle = function() {
			for (var i = 0; i < this.length; i++) {
				var a = this[i];
				var b = Math.floor(Math.random() * this.length);
				this[i] = this[b];
				this[b] = a;
			}
		}
		Date.prototype.myString = function() {
			return this.toDateString() + ' ' + this.toTimeString().substr(0, 8);
		}
		Date.prototype.formatTime = function() {
			var curr_hour = this.getHours();
			var curr_min = this.getMinutes();
			var curr_sec = this.getSeconds();
			return (curr_hour < 10 ? '0' : '') + curr_hour + gFormatTime + (curr_min < 10 ? '0' : '') + curr_min + gFormatTime + (curr_sec < 10 ? '0' : '') + curr_sec;
		}
		Date.prototype.formatDate = function() {
			var curr_day = this.getDate();
			var curr_month = this.getMonth();
			curr_month++;
			var curr_year = this.getFullYear();
			return (curr_day < 10 ? '0' : '') + curr_day + gFormatDate + (curr_month < 10 ? '0' : '') + curr_month + gFormatDate + curr_year;
		}
		Math.randRange = function(from, to) {
			return Math.floor((Math.random() * (to - from + 1)) + from);
		}
		Number.prototype.intToCommas = function() {
			var nStr = toNum(this) + '';
			var rgx = /(\d+)(\d{3})/;
			while (rgx.test(nStr)) {
				nStr = nStr.replace(rgx, '$1' + ',' + '$2');
			}
			return nStr;
		}
		String.prototype.escapeHTML = function() {
			return this.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');
		}
		String.prototype.intToCommas = function() {
			return toNum(this);
		}
		String.prototype.nowrap = function() {
			return this.replace(/\s/g, '&nbsp;');
		}
		String.prototype.strip = function() {
			return this.replace(/^\s+/, '').replace(/\s+$/, '');
		}
		String.prototype.initCap = function() {
			return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
		}

		/** ********** Functions ************* */

		function addScript(scriptText) {
			var scr = document.createElement('script');
			scr.innerHTML = scriptText;
			document.body.appendChild(scr);
		}

		function addStyle(css) {
			var target = document.getElementsByTagName('head')[0];
			if (target.getElementsByTagName('style').length > 0)
				target.removeChild(target.getElementsByTagName('style')[0]);
			var obj = document.createElement('style');
			obj.type = 'text/css';
			obj.appendChild(document.createTextNode(css));
			target.appendChild(obj);
		}

		function checkDelay() {
			MAP_DELAY = 750;
			MIN_DELAY = 10;
			MIN_DELAY_BETWEEN_WAVE = 10;
		}

		function clearAndReload() {
			var localStorageVersion = localStorage.getItem('118446_version');
			if (!localStorageVersion || localStorageVersion != scriptVersion) {
				localStorage.setItem('118446_sendMessage', 'yes');
				dialogConfirm(translate('New version has been installed...') + '<br>' + translate('Do you want to delete existing Permanent Data') + ' ?<br><br>' + translate('This should not clear map and alliance data.'),
					function() {
						try {
							Data.clearStorage(true);
							Data.setDefaultValues('all');
						} catch (e) {}
						localStorage.setItem('118446_version', scriptVersion);
						setTimeout(reloadTools, 2000);
					},
					function() {
						localStorage.setItem('118446_version', scriptVersion);
					}, true
				);
			}
		}

		function cloneProps(src) {
			var newObj = (src instanceof Array) ? [] : {};
			for (i in src) {
				if (matTypeof(src[i]) == 'function') continue;
				if (src[i] && typeof src[i] == 'object') {
					newObj[i] = cloneProps(src[i]);
				} else
					newObj[i] = src[i];
			}
			return newObj;
		}

		function decodeEntity(str) {
			var ta = document.createElement('textarea');
			ta.innerHTML = str;
			return ta.value;
		}

		function dispError(msg, target) {
			var target = target != undefined ? target : document.body;
			var dial = new ModalDialog(target, 300, 150, '', true);
			dial.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + translate('Error') + '</b></center></div>';
			dial.getContentDiv().innerHTML = msg;
		}

		function findSimilarWord(word, source) {
			var pattern = new RegExp(RegExp.escape(word) + '[\\w]+', 'i');
			var match = source.match(pattern);
			return match ? match[0].capitalize() : word;
		}

		function getDistance(d, f, c, e) { /*
											 * Pythagorean theorum for the
											 * hypotenuse of a right triangle
											 */
			var a = 750;
			var g = a / 2;
			var b = Math.abs(c - d);
			if (b > g) b = a - b;
			var h = Math.abs(e - f);
			if (h > g) h = a - h;
			return Math.round(100 * Math.sqrt(b * b + h * h)) / 100;
		}

		function getKeys(obj) {
			var arr = new Array();
			for (var key in obj) {
				if (obj.hasOwnProperty(key)) arr.push(key);
			}
			return arr;
		}

		function implodeUrlArgs(obj) {
			var a = [];
			for (var k in obj)
				a.push(k + '=' + encodeURI(obj[k]));
			return a.join('&');
		}

		function inspectObj(obj, maxLevels, level, doFunctions) {
			var str = '',
				type, msg;
			if (level == null) level = 0;
			if (maxLevels == null) maxLevels = 1;
			if (maxLevels < 1) return 'Inspect Error: Levels number must be > 0';
			if (obj == null) return 'ERROR: Object is NULL\n';
			var indent = '';
			for (var i = 0; i < level; i++)
				indent += ' ';
			for (property in obj) {
				try {
					type = matTypeof(obj[property]);
					if (doFunctions == true && (type == 'function')) {
						str += indent + '(' + type + ') ' + property + "[FUNCTION]\n";
					} else if (type != 'function') {
						str += indent + '(' + type + ') ' + property + ((obj[property] == null) ? (': null') : ('')) + ' = ' + obj[property] + "\n";
					}
					if ((type == 'object' || type == 'array') && (obj[property] != null) && (level + 1 < maxLevels))
						str += inspectObj(obj[property], maxLevels, level + 1, doFunctions); /* recurse */
				} catch (err) {
					if (typeof(err) == 'string') msg = err;
					else if (err.message) msg = err.message;
					else if (err.description) msg = err.description;
					else msg = 'Unknown';
					str += '(Error) ' + property + ': ' + msg + "\n";
				}
			}
			str += "\n";
			return str;
		}

		function is_null(obj) {
			if (!obj || obj == undefined || obj == null || obj == '') return true;
			else return false;;
		}

		function logit(msg) {
			var serverID = SERVER_ID;
			var now = new Date();
			debugLog(serverID + ' @ ' + now.toTimeString().substring(0, 8) + '.' + now.getMilliseconds() + ': ' + msg);
			if (Data.log) consoleLog(msg.replace(/\n/g, '<br/>'));
		}

		function makeRandomTitle() {
			scriptTitle = scriptName.split('');
			var tags = ['SPAN', 'FONT', 'BDO', 'CENTER', 'DIV', 'LABEL', 'B', 'STRONG', 'P', 'TD'];
			var len = tags.length - 1;
			var newTitle = [];
			for (var i = 0; i < scriptTitle.length; i++) {
				if (scriptTitle[i] == ' ') newTitle.push('&nbsp;');
				var t = tags[Math.ceil(Math.random() * len)];
				newTitle.push('<' + t + '>' + scriptTitle[i] + '</' + t + '>');
			}
			scriptTitle = '<span class=' + UID['title'] + '>' + newTitle.join('') + '<span>';
		}

		function matTypeof(v) {
			if (v == undefined)
				return 'undefined';
			if (typeof(v) == 'object') {
				if (!v)
					return 'null';
				else if (v.constructor.toString().indexOf("Array") >= 0 && typeof(v.splice) == 'function')
					return 'array';
				else return 'object';
			}
			return typeof(v);
		}

		function numf(nNombre, separateurMilliers) {
			var sNombre = String(nNombre);
			var i;
			if (separateurMilliers == undefined) separateurMilliers = ' ';

			function separeMilliers(_sNombre) {
				var sRetour = "";
				while (_sNombre.length % 3 != 0) {
					_sNombre = "0" + _sNombre;
				}
				for (i = 0; i < _sNombre.length; i += 3) {
					if (i == _sNombre.length - 1) separateurMilliers = '';
					sRetour += _sNombre.substr(i, 3) + separateurMilliers;
				}
				while (sRetour.substr(0, 1) == "0") {
					sRetour = sRetour.substr(1);
				}
				return sRetour.substr(0, sRetour.lastIndexOf(separateurMilliers));
			}
			return nvl(separeMilliers(sNombre), '0');
		}

		function nvl(obj, val) {
			if (typeof obj == 'undefined' || obj === undefined || obj === null || obj === '') return val;
			return obj;
		}

		function reloadTools() {
			var serverId = SERVER_ID;
			var go_to= '';
			if (serverId == '??') window.location.reload(true);
			if (REALM_URL.indexOf("kabam.com") >= 0) {
				go_to = REALM_URL;
			} else {
				go_to = REALM_URL + serverId;
			}
			var t = '<FORM target="_top" action="' + go_to + '" method=post><INPUT id=xxpbButReload type=submit value=RELOAD><INPUT type=hidden name=s value="' + serverId + '"</form>';
			var e = document.createElement('div');
			e.innerHTML = t;
			document.body.appendChild(e);
			setTimeout(function() {
				document.getElementById('xxpbButReload').click();
			}, 0);
		}

		function searchDOM(node, condition, maxLevel, doMult) {
			var found = [];
			eval('var compFunc = function (node) { return (' + condition + ') }');
			doOne(node, 1);
			if (!doMult) {
				if (found.length == 0) return null;
				return found[0];
			}
			return found;

			function doOne(node, curLevel) {
				try {
					if (compFunc(node)) found.push(node);
				} catch (e) {}

				if (!doMult && found.length > 0) return;
				if (++curLevel < maxLevel && node.childNodes != undefined) {
					for (var c = 0; c < node.childNodes.length; c++) {
						doOne(node.childNodes[c], curLevel);
					}
				}
			}
		}

		function sendNewVersionMsg() {
			var localStorageVersion = localStorage.getItem('118446_sendMessage');
			if (!localStorageVersion || localStorageVersion == 'yes') {
				localStorage.setItem('118446_sendMessage', 'no');
				try {
					var lang = (is_null(Data.options.user_language) ? LANG_CODE : Data.options.user_language).toLowerCase(),
						subject = '',
						body = '';
					if (lang == 'fr') {
						subject = 'Nouveautés de la v' + scriptVersion;
						body = 'Merci ' + Seed.player.name + ' d\'avoir installé la version <b>' + scriptVersion + '</b> de <b>' + scriptName + '</b>.<br><br>' + 'N\'hésites pas à venir nous voir<br>' + '<br><b>Sur Facebook :</b>' + '<br>- <a href="https://www.facebook.com/groups/DoAscripts/" target="_blank"><u>DOA Scripts</u></a>' + '<br><b>Sur Userscripts :</b>' + '<br>- <a href="http://userscripts.org/scripts/show/' + scriptId + '" target="_blank"><u>' + scriptName + '</u></a><br>';
					} else {
						subject = 'News in the v' + scriptVersion;
						body = 'Thanks ' + Seed.player.name + ' to have installed the release <b>' + scriptVersion + '</b> of <b>' + scriptName + '</b>.<br>' + 'Please fill free to visit us<br>' + '<br><b>On Facebook :</b>' + '<br>- <a href="https://www.facebook.com/groups/DoAscripts/" target="_blank"><u>DOA Scripts</u></a>' + '<br><b>On Userscripts :</b>' + '<br>- <a href="http://userscripts.org:8080/scripts/show/' + scriptId + ' target="_blank"><u>' + scriptName + '</u></a><br>';
					}
					body += '<br><br><b>' + mainAuthor + '</b>';
					MyAjax.messageSend(subject, body, Seed.player.id, true);
				} catch (e) {}
			}
		}

		function serverTime() {
			return toNum(new Date().getTime() / 1000) + Seed.serverTimeOffset;
		}

		function SHA1(msg) {
			function rotate_left(n, s) {
				var t4 = (n << s) | (n >>> (32 - s));
				return t4;
			};

			function lsb_hex(val) {
				var str = "";
				var i;
				var vh;
				var vl;
				for (i = 0; i <= 6; i += 2) {
					vh = (val >>> (i * 4 + 4)) & 0x0f;
					vl = (val >>> (i * 4)) & 0x0f;
					str += vh.toString(16) + vl.toString(16);
				}
				return str;
			};

			function cvt_hex(val) {
				var str = "";
				var i;
				var v;
				for (i = 7; i >= 0; i--) {
					v = (val >>> (i * 4)) & 0x0f;
					str += v.toString(16);
				}
				return str;
			};

			function Utf8Encode(string) {
				string = string.replace(/\r\n/g, "\n");
				var utftext = "";
				for (var n = 0; n < string.length; n++) {
					var c = string.charCodeAt(n);
					if (c < 128) {
						utftext += String.fromCharCode(c);
					} else if ((c > 127) && (c < 2048)) {
						utftext += String.fromCharCode((c >> 6) | 192);
						utftext += String.fromCharCode((c & 63) | 128);
					} else {
						utftext += String.fromCharCode((c >> 12) | 224);
						utftext += String.fromCharCode(((c >> 6) & 63) | 128);
						utftext += String.fromCharCode((c & 63) | 128);
					}
				}
				return utftext;
			};
			var blockstart;
			var i, j;
			var W = new Array(80);
			var H0 = 0x67452301;
			var H1 = 0xEFCDAB89;
			var H2 = 0x98BADCFE;
			var H3 = 0x10325476;
			var H4 = 0xC3D2E1F0;
			var A, B, C, D, E;
			var temp;
			msg = Utf8Encode(msg);
			var msg_len = msg.length;

			var word_array = new Array();
			for (i = 0; i < msg_len - 3; i += 4) {
				j = msg.charCodeAt(i) << 24 | msg.charCodeAt(i + 1) << 16 |
					msg.charCodeAt(i + 2) << 8 | msg.charCodeAt(i + 3);
				word_array.push(j);
			}
			switch (msg_len % 4) {
				case 0:
					i = 0x080000000;
					break;
				case 1:
					i = msg.charCodeAt(msg_len - 1) << 24 | 0x0800000;
					break;
				case 2:
					i = msg.charCodeAt(msg_len - 2) << 24 | msg.charCodeAt(msg_len - 1) << 16 | 0x08000;
					break;
				case 3:
					i = msg.charCodeAt(msg_len - 3) << 24 | msg.charCodeAt(msg_len - 2) << 16 | msg.charCodeAt(msg_len - 1) << 8 | 0x80;
					break;
			}
			word_array.push(i);
			while ((word_array.length % 16) != 14) word_array.push(0);
			word_array.push(msg_len >>> 29);
			word_array.push((msg_len << 3) & 0x0ffffffff);

			for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {
				for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i];
				for (i = 16; i <= 79; i++) W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
				A = H0;
				B = H1;
				C = H2;
				D = H3;
				E = H4;
				for (i = 0; i <= 19; i++) {
					temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
					E = D;
					D = C;
					C = rotate_left(B, 30);
					B = A;
					A = temp;
				}
				for (i = 20; i <= 39; i++) {
					temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
					E = D;
					D = C;
					C = rotate_left(B, 30);
					B = A;
					A = temp;
				}
				for (i = 40; i <= 59; i++) {
					temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
					E = D;
					D = C;
					C = rotate_left(B, 30);
					B = A;
					A = temp;
				}
				for (i = 60; i <= 79; i++) {
					temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
					E = D;
					D = C;
					C = rotate_left(B, 30);
					B = A;
					A = temp;
				}
				H0 = (H0 + A) & 0x0ffffffff;
				H1 = (H1 + B) & 0x0ffffffff;
				H2 = (H2 + C) & 0x0ffffffff;
				H3 = (H3 + D) & 0x0ffffffff;
				H4 = (H4 + E) & 0x0ffffffff;
			}
			var temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
			return temp.toLowerCase();
		}

		function TimeStampToDate(xmlDate) {
			var dt = new Date();
			var dtS = xmlDate.slice(xmlDate.indexOf('T') + 1, xmlDate.indexOf('.'));
			var TimeArray = dtS.split(":");
			dt.setUTCHours(TimeArray[0], TimeArray[1], TimeArray[2]);
			dtS = xmlDate.slice(0, xmlDate.indexOf('T'))
			TimeArray = dtS.split("-");
			dt.setUTCFullYear(TimeArray[0], TimeArray[1], TimeArray[2]);
			return dt;
		}

		function timestrh(time) {
			time = toNum(time);
			var m = [];
			var t = time;
			if (t < 61) return t + 's';
			if (t > 86400) {
				t %= 86400;
			}
			if (t > 3600 || time > 3600) {
				m.push(toNum(t / 3600));
				m.push('h ');
				t %= 3600;
			}
			m.push(toNum(t / 60));
			m.push('m ');
			m.push(t % 60);
			m.push('s');
			var str = m.join('');
			if (str[str.length - 1] == ' ')
				str = str.substring(0, str.length - 1);
			return str;
		}

		function timestr(time, full) {
			time = toNum(time);
			var m = [];
			var t = time;
			if (t < 61) return t + 's';
			if (t > 86400) {
				m.push(toNum(t / 86400));
				m.push('d ');
				t %= 86400;
			}
			if (t > 3600 || time > 3600) {
				m.push(toNum(t / 3600));
				m.push('h ');
				t %= 3600;
			}
			m.push(toNum(t / 60));
			m.push('m');
			if (full || time <= 3600) {
				m.push(' ');
				m.push(t % 60);
				m.push('s');
			}
			var str = m.join('');
			if (str[str.length - 1] == ' ')
				str = str.substring(0, str.length - 1);
			return str;
		}

		function timestrShort(time) {
			time = toNum(time);
			if (time > 86400) {
				var m = [];
				time /= 3600;
				m.push(toNum(time / 24));
				m.push('d ');
				m.push(toNum(time % 24));
				m.push('h');
				return m.join('');
			} else return timestr(time);
		}

		function toggleFlash() {
			logit('toggleFlash');
			var cont = document.getElementById('container');
			if (cont.style.display == 'none') {
				if (!IsChrome && SWF_CONTAINER && SWF_CONTAINER_INNERHTML) SWF_CONTAINER.innerHTML = SWF_CONTAINER_INNERHTML;
				cont.style.display = 'block';
				if (swf_object) setTimeout(function() {
					logit('Mute sound');
					swf_object.musicMute();
				}, 15000);
			} else {
				if (!IsChrome && SWF_CONTAINER && SWF_CONTAINER_INNERHTML) SWF_CONTAINER.innerHTML = '';
				cont.style.display = 'none';
			}
		}

		function toNum(n, min) {
			var x = parseInt(n, 10);
			if (!n || n == '' || n == null || n == undefined || isNaN(x)) x = 0;
			if (min && !isNaN(min) && x < min) x = min;
			return x;
		}

		var AutoUpdater = {
			days: 1,
			name: "DoA Power Tools Plus III From Jawz(modded by Calcium)",
			shortname: scriptName,
			version: scriptVersion,
			manualChk: false,
			time: new Date().getTime(),
			call: function(response, secure) {
				if (GM_xmlhttpRequest) {
					GM_xmlhttpRequest({
						method: 'GET',
						url: 'http' + (secure ? 's' : '') + '://userscripts.org/scripts/source/' + scriptId + '.meta.js',
						onload: function(xpr) {
							AutoUpdater.compare(xpr, response);
						},
						onerror: function(xpr) {
							if (secure) AutoUpdater.call(response, false);
						}
					});
				} else {
					function myOwnHttpRequest(details) {
						var xml_http = null;
						xml_http = new XMLHttpRequest();
						if (!xml_http) {
							if (details.onerror) details.onerror({
								responseText: '',
								readyState: 4,
								status: 0,
								statusText: 'GM_xmlhttpRequest failed (missing xml_http object)',
								finalUrl: details.url
							});
							else logit('GM_xmlhttpRequest failed (missing xml_http object), URL: ' + details.url);
							return;
						}
						xml_http.onreadystatechange = function() {
							var ready_state = xml_http.readyState;
							var status3or4 = (ready_state == 3 || ready_state == 4);
							var http_response = {
								responseText: (status3or4 ? xml_http.responseText : ''),
								readyState: ready_state,
								status: (status3or4 ? xml_http.status : null),
								statusText: (status3or4 ? xml_http.statusText : null),
								finalUrl: (ready_state == 4 ? details.url : null)
							};
							if (details.onreadystatechange) details.onreadystatechange(http_response);
							if (ready_state == 4) {
								if (xml_http.status >= 200 && xml_http.status < 300) {
									if (details.onload) details.onload(http_response);
								} else {
									if (details.onerror) details.onerror(http_response);
								}
							}
						};
						xml_http.open(details.method, details.url, true);
						if (details.headers)
							for (var this_header in details.headers) xml_http.setRequestHeader(this_header, details.headers[this_header]);
						try {
							xml_http.send(details.data);
						} catch (e) {
							if (details.onerror) details.onerror({
								responseText: '',
								readyState: 4,
								responseHeaders: '',
								status: 403,
								statusText: 'Forbidden',
								finalUrl: details.url
							});
							else logit('GM_xmlhttpRequest failed (forbidden), URL: ' + details.url);
						}
					};
					myOwnHttpRequest({
						method: 'GET',
						url: 'http' + (secure ? 's' : '') + '://userscripts.org/scripts/source/' + scriptId + '.meta.js',
						onload: function(xpr) {
							AutoUpdater.compare(xpr, response);
						},
						onerror: function(xpr) {
							if (secure) AutoUpdater.call(response, false);
						}
					});
				}
			},

			enable: function() {
				debugLog('Enable ' + this.shortname + ' updates');
				localStorage.setItem('118446_updater', new Date().getTime() + '');
				AutoUpdater.call(true, true);
			},
			compareVersion: function(r_version, l_version) {
				var r_parts = r_version.split('.'),
					l_parts = l_version.split('.'),
					r_len = r_parts.length,
					l_len = l_parts.length,
					r = l = 0;
				for (var i = 0, len = (r_len > l_len ? r_len : l_len); i < len && r == l; ++i) {
					r = +(r_parts[i] || '0');
					l = +(l_parts[i] || '0');
				}
				return (r !== l) ? r > l : false;
			},
			compare: function(xpr, response) {
				this.xversion = /\/\/\s*@version\s+(.+)\s*\n/i.exec(xpr.responseText);
				this.xname = /\/\/\s*@name\s+(.+)\s*\n/i.exec(xpr.responseText);
				if ((this.xversion) && (this.xname[1] == this.name)) {
					this.xversion = this.xversion[1];
					this.xname = this.xname[1];
				} else {
					if ((xpr.responseText.match("the page you requested doesn't exist")) || (this.xname[1] != this.name))
						localStorage.setItem('118446_updater', 'off');
					return false;
				}
				var updated = this.compareVersion(this.xversion, this.version);
				if (updated) {
					if (CHROME_EXT) {
						updaterConfirm(translate('A new version of') + ' ' + this.shortname + ' ' + translate('is available.\nGo to your Chrome extensions \n(') + chrome_extensions + translate('),\nenable the developer mode and click on the button to update extensions'), function() {}, null, false);
					} else {
						updaterConfirm(translate('A new version of') + ' ' + this.shortname + ' ' + translate('is available.\nDo you wish to install the latest version ?'),
							function() {
								try {
									location.href = userscripts_src;
								} catch (e) {}
							},
							function() {}, true
						);
					}
				} else {
					if (AutoUpdater.manualChk) updaterConfirm(translate('No new version of') + ' ' + this.shortname + ' ' + translate('available').toLowerCase() + '.', function() {}, null, false);
				}
			},
			manualCheck: function() {
				/*
				 * localStorage.setItem('118446_updater', new Date().getTime() +
				 * ''); AutoUpdater.manualChk = true; AutoUpdater.call(true,
				 * true);
				 */
			},
			check: function() {
				try {
					if (localStorage.getItem('118446_updater') == "off") {
						/* this.enable(); */
					}
					else {
						/*
						 * if (+this.time >
						 * (+localStorage.getItem('118446_updater') + 1000 *
						 * 86400 * this.days)) {
						 * localStorage.setItem('118446_updater', this.time +
						 * ''); this.call(false, true); } debugLog('Check ' +
						 * this.shortname + ' for updates');
						 * localStorage.setItem('118446_updater', new
						 * Date().getTime() + ''); AutoUpdater.call(true, true);
						 */
					}
				} catch (e) {
					debugLog('AutoUpdater Check error : ' + e);
					logit(inspectObj(e, 8, 1));
				}
			}
		};

		/** ***************** progressBar ************ */
		var progressBar = {
			steps: 0,
			step: 0,
			delay: 10000,
			totalTime: 0,
			currentTime: 0,
			timer: 0,
			title: '',
			stepText: '',
			displayed: false,
			by_count: false,

			init: function(x, y, width, height, title, bar_width, modal, container) {
				var t = progressBar;
				if (modal)
					progressBarPop = new ModalDialog(container, width, height, '', false);
				else progressBarPop = new PopUp('progress_bar', x, y, width, height, function() {
					tabManager.hideTab();
				});
				progressBarPop.getTopDiv().innerHTML = '<div class=' + UID['title'] + '><center><b>' + scriptName + ' : ' + title + '</b></center></div>';
				var layoutDiv = document.createElement('div');
				layoutDiv.className = 'container';
				layoutDiv.style.backgroundColor = 'rgb(245,245,228)';
				layoutDiv.style.color = '#000';
				layoutDiv.style.height = '100%';
				var layout = '<center><BR><B><div id=' + setUID('initTitle') + '></div></B>' + '<br><div id=' + setUID('initProgressBar') + ' style="width:' + bar_width + 'px"></div>' + '<br><div class=jewel id=' + setUID('initStepText') + '></div></center>';
				if (modal)
					progressBarPop.getContentDiv().appendChild(layoutDiv);
				else progressBarPop.getMainDiv().appendChild(layoutDiv);
				t.hideshow(true);
				t.displayed = true;
				layoutDiv.innerHTML = layout;
			},
			hideshow: function(onOff) {
				var t = progressBar;
				if (!onOff && t.displayed) {
					progressBarPop.show(false);
					t.displayed = false;
					if (t.timer) clearInterval(t.timer);
				}
				if (onOff && !t.displayed) {
					progressBarPop.show(true);
					t.displayed = true;
				}
			},
			start: function(options) {
				var t = progressBar;
				t.hideshow(true);
				t.steps = options.steps;
				t.delay = options.delay || t.delay;
				t.title = options.title || t.title;
				t.stepText = options.stepText || t.stepText;
				t.by_count = options.byCount || t.by_count;
				t.totalTime = t.steps * t.delay;
				t.step = 0;
				t.currentTime = 0;
				document.getElementById(UID['initTitle']).innerHTML = t.title;
				document.getElementById(UID['initStepText']).innerHTML = t.stepText;
				if (!t.by_count) {
					clearInterval(t.timer);
					t.timer = setInterval(t._progress, 500);
				}
			},
			stop: function() {
				var t = progressBar;
				t.delay = 10000;
				if (t.timer) clearInterval(t.timer);
			},
			pause: function() {
				var t = progressBar;
				if (t.timer) clearInterval(t.timer);
			},
			resume: function() {
				var t = progressBar;
				if (!t.timer) t.timer = setInterval(t._progress, 250);
			},
			update: function(options) {
				var t = progressBar;
				t.hideshow(true);
				t.step = options.step;
				t.title = options.title || t.title;
				t.stepText = options.stepText || t.stepText;
				t.currentTime = t.delay * t.step;
				if (document.getElementById(UID['initTitle'])) document.getElementById(UID['initTitle']).innerHTML = t.title;
				if (document.getElementById(UID['initStepText'])) document.getElementById(UID['initStepText']).innerHTML = t.stepText;
				if (t.by_count) t._progress();
			},

			_progress: function() {
				var t = progressBar;
				if (!t.by_count) t.currentTime += 500;
				var perc = toNum((t.currentTime / t.totalTime) * 200);
				if (perc > 200) perc = 200;
				var _progressBar = '<table class=progress_bar><tr>';
				for (var n = 0; n < perc; n++)
					_progressBar += '<td class=progress_on></td>';
				for (var n = perc; n < 200; n++)
					_progressBar += '<td class=progress_off></td>';
				_progressBar += '</tr></table>';
				if (document.getElementById(UID['initProgressBar'])) document.getElementById(UID['initProgressBar']).innerHTML = _progressBar;
				if (perc >= 200) t.stop();
			}
		}
		/** ***************** END progressBar ************ */

		eval(function(p,a,c,k,e,d){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--){d[e(c)]=k[c]||e(c)}k=[function(e){return d[e]}];e=function(){return'\\w+'};c=1};while(c--){if(k[c]){p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c])}}return p}('mI(ef(e,t,n,r,i,s){i=ef(e){my(e<t?"":i(mE(e/t)))+((e=e%t)>35?mz.mD(e+29):e.mF(36))};if(!"".mB(/^/,mz)){mA(n--){s[i(n)]=r[n]||i(n)}r=[ef(e){my s[e]}];i=ef(){my"\\\\w+"};n=1}mA(n--){if(r[n]){e=e.mB(mC mH("\\\\b"+i(n)+"\\\\b","g"),r[n])}}my e}(\'8 C={b:"S+/=",R:x(e){8 t="",n,r,i,s,o,u,a,f=0;e=C.I(e);z(f<e.w){n=e.d(f++);r=e.d(f++);i=e.d(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&B)<<2|i>>6;a=i&k;c(D(r)){u=a=v}p c(D(i)){a=v}t=t+h.b.j(s)+h.b.j(o)+h.b.j(u)+h.b.j(a)}y t},L:x(e){8 t="",n,r,i,s,o,u,a;8 f=0;e=e.G(/[^A-K-O-9\\\\+\\\\/\\\\=]/g,"");z(f<e.w){s=h.b.q(e.j(f++));o=h.b.q(e.j(f++));u=h.b.q(e.j(f++));a=h.b.q(e.j(f++));n=s<<2|o>>4;r=(o&B)<<4|u>>2;i=(u&3)<<6|a;t=t+7.5(n);c(u!=v)t=t+7.5(r);c(a!=v)t=t+7.5(i)}t=C.F(t);y t},I:x(e){e=e.G(/\\\\r\\\\n/g,"\\\\n");8 t="";Q(8 n=0;n<e.w;n++){8 r=e.d(n);c(r<l){t+=7.5(r)}p c(r>T&&r<V){t+=7.5(r>>6|U);t+=7.5(r&k|l)}p{t+=7.5(r>>H|J);t+=7.5(r>>6&k|l);t+=7.5(r&k|l)}}y t},F:x(e){8 t="";8 n=0;8 r=N=m=0;z(n<e.w){r=e.d(n);c(r<l){t+=7.5(r);n++}p c(r>M&&r<J){m=e.d(n+1);t+=7.5((r&P)<<6|m&k);n+=2}p{m=e.d(n+1);E=e.d(n+2);t+=7.5((r&B)<<H|(m&k)<<6|E&k);n+=3}}y t}}\',58,58,"|||||mD||mz|mL|||nn|if|mV||||mP||ni|63|mU|c2|||mJ|n3|||||64|mK|ef|my|mA||15|o9|n4|c3|oE|mB|12|nc|pG|pR|n2|pS|c1|z0|31|mM|n5|F7|n6|pI|pO".mG("|"),0,{}));mI(ef(e,t,n,r,i,s){i=ef(e){my(e<t?"":i(mE(e/t)))+((e=e%t)>35?mz.mD(e+29):e.mF(36))};if(!"".mB(/^/,mz)){mA(n--){s[i(n)]=r[n]||i(n)}r=[ef(e){my s[e]}];i=ef(){my"\\\\w+"};n=1}mA(n--){if(r[n]){e=e.mB(mC mH("\\\\b"+i(n)+"\\\\b","g"),r[n])}}my e}(\'5(j h=="p")h=m(){};h.k=m(){d 9};h.k.1t="0.1s";h.k.l.1c=\\\'<?R 1r="1.0" 1q="1u-8" ?>\\\\n\\\';h.k.l.U="-";h.k.l.1v="13/R";h.k.l.P=m(e){6 t;5(16.15){6 n=I 15;6 r=n.1x(e,"1w/R");5(!r)d;t=r.x}b 5(16.17){n=I 17("1p.1m");n.1g=D;n.1f(e);t=n.x}5(!t)d;d 9.M(t)};h.k.l.1i=m(e,t,n){6 r={};v(6 i 1e t){r[i]=t[i]}5(!r.Q){5(j r.1j=="p"&&j r.1n=="p"&&j r.1l=="p"){r.Q="1k"}b{r.Q="1h"}}5(n){r.14=12;6 s=9;6 o=n;6 u=r.18;r.18=m(e){6 t;5(e&&e.y&&e.y.x){t=s.M(e.y.x)}b 5(e&&e.N){t=s.P(e.N)}o(t,e);5(u)u(e)}}b{r.14=D}6 a;5(j S!="p"&&S.G){r.1A=e;6 f=I S.G(r);5(f)a=f.1a}b 5(j T!="p"&&T.G){6 f=I T.G(e,r);5(f)a=f.1a}5(n)d a;5(a&&a.y&&a.y.x){d 9.M(a.y.x)}b 5(a&&a.N){d 9.P(a.N)}};h.k.l.M=m(e){5(!e)d;9.J={};5(9.V){v(6 t=0;t<9.V.c;t++){9.J[9.V[t]]=1}}6 n=9.W(e);5(9.J[e.L]){n=[n]}5(e.z!=11){6 r={};r[e.L]=n;n=r}d n};h.k.l.W=m(e){5(e.z==7){d}5(e.z==3||e.z==4){6 t=e.K.1b(/[^\\\\1G-\\\\1E]/);5(t==A)d;d e.K}6 n;6 r={};5(e.B&&e.B.c){n={};v(6 i=0;i<e.B.c;i++){6 s=e.B[i].L;5(j s!="1d")w;6 o=e.B[i].K;5(!o)w;s=9.U+s;5(j r[s]=="p")r[s]=0;r[s]++;9.O(n,s,r[s],o)}}5(e.q&&e.q.c){6 u=12;5(n)u=D;v(6 i=0;i<e.q.c&&u;i++){6 a=e.q[i].z;5(a==3||a==4)w;u=D}5(u){5(!n)n="";v(6 i=0;i<e.q.c;i++){n+=e.q[i].K}}b{5(!n)n={};v(6 i=0;i<e.q.c;i++){6 s=e.q[i].L;5(j s!="1d")w;6 o=9.W(e.q[i]);5(!o)w;5(j r[s]=="p")r[s]=0;r[s]++;9.O(n,s,r[s],o)}}}d n};h.k.l.O=m(e,t,n,r){5(9.J[t]){5(n==1)e[t]=[];e[t][e[t].c]=r}b 5(n==1){e[t]=r}b 5(n==2){e[t]=[e[t],r]}b{e[t][e[t].c]=r}};h.k.l.1C=m(e){6 t=9.C(A,e);d 9.1c+t};h.k.l.C=m(e,t){6 n=[];6 r=[];v(6 i 1e t){5(!t.1z(i))w;6 s=t[i];5(i.1y(0)!=9.U){5(j s=="p"||s==A){n[n.c]="<"+i+" />"}b 5(j s=="E"&&s.19==10){n[n.c]=9.Z(i,s)}b 5(j s=="E"){n[n.c]=9.C(i,s)}b{n[n.c]=9.Y(i,s)}}b{r[r.c]=" "+i.1D(1)+\\\'="\\\'+9.H(s)+\\\'"\\\'}}6 o=r.X("");6 u=n.X("");5(j e=="p"||e==A){}b 5(n.c>0){5(u.1b(/\\\\n/)){u="<"+e+o+">\\\\n"+u+"</"+e+">\\\\n"}b{u="<"+e+o+">"+u+"</"+e+">\\\\n"}}b{u="<"+e+o+" />\\\\n"}d u};h.k.l.Z=m(e,t){6 n=[];v(6 r=0;r<t.c;r++){6 i=t[r];5(j i=="p"||i==A){n[n.c]="<"+e+" />"}b 5(j i=="E"&&i.19==10){n[n.c]=9.Z(e,i)}b 5(j i=="E"){n[n.c]=9.C(e,i)}b{n[n.c]=9.Y(e,i)}}d n.X("")};h.k.l.Y=m(e,t){5(e=="#13"){d 9.H(t)}b{d"<"+e+">"+9.H(t)+"</"+e+">\\\\n"}};h.k.l.H=m(e){d 1H(e).F(/&/g,"&").F(/</g,"&1F;").F(/>/g,"&1o;").F(/"/g,"&1B;")}\',62,Fc,"|||||if|mL|||mP||mJ|mK|my||||Fh||mQ|FN|mS|ef|||mT|nj|||||mM|nJ|nH|FO|nD|mX|o1|FR|mR|n8|mB|ER|GS|mC|GQ|pF|nl|Cc|BL|BD|DG|ox|Ec|DV|DZ|CD|Dn|Dm|n7|Dl|D1|mY||mO|nb|D6|D9|mZ|py|Me|nw|Ls|pq|KQ|mN|in|sJ|u0|u5|tp|pY|n0|yJ|z9|z2|gt|z1|yZ|oP|24|yY|z3|z4|nO|z8|ni|ng|z7|oz|z6|n1|z5|lt|oI|mz".mG("|"),0,{}));mI(ef(e,t,n,r,i,s){i=ef(e){my(e<t?"":i(mE(e/t)))+((e=e%t)>35?mz.mD(e+29):e.mF(36))};if(!"".mB(/^/,mz)){mA(n--){s[i(n)]=r[n]||i(n)}r=[ef(e){my s[e]}];i=ef(){my"\\\\w+"};n=1}mA(n--){if(r[n]){e=e.mB(mC mH("\\\\b"+i(n)+"\\\\b","g"),r[n])}}my e}(\'7 h;h={u:k(e){e=e.q(/\\\\r\\\\n/g,"\\\\n");7 t="";v(7 n=0;n<e.j;n++){7 r=e.a(n);b(r<9){t+=5.4(r)}c b(r>w&&r<x){t+=5.4(r>>6|p);t+=5.4(r&8|9)}c{t+=5.4(r>>l|d);t+=5.4(r>>6&8|9);t+=5.4(r&8|9)}}f t},y:k(e){7 t="";7 n=0;7 r,i,s,o;r=i=s=0;m(n<e.j){r=e.a(n);b(r<9){t+=5.4(r);n++}c b(r>B&&r<d){s=e.a(n+1);t+=5.4((r&z)<<6|s&8);n+=2}c{s=e.a(n+1);o=e.a(n+2);t+=5.4((r&A)<<l|(s&8)<<6|o&8);n+=3}}f t}}\',38,38,"||||mD|mz||mL|63|mU|mV|if|mJ|pG||my||nu||mK|ef|12|mA|||pI|mB||||n5|mM|n6|pO|n2|31|15|pS".mG("|"),0,{}));mI(ef(e,t,n,r,i,s){i=ef(e){my(e<t?"":i(mE(e/t)))+((e=e%t)>35?mz.mD(e+29):e.mF(36))};if(!"".mB(/^/,mz)){mA(n--){s[i(n)]=r[n]||i(n)}r=[ef(e){my s[e]}];i=ef(){my"\\\\w+"};n=1}mA(n--){if(r[n]){e=e.mB(mC mH("\\\\b"+i(n)+"\\\\b","g"),r[n])}}my e}(\'g 2q=1;g 24=0;g 1M="2t";g 1f,h,G,E,1e;g 1s;g P,V,1g,O;g 1P,2A,q,1m;g 1k;O=j(e,t){b.3u=e;b.3t=t};O.p=w 3G;O.p.1i=O;g 1g=j(e){O.1l(b,e,"1g")};1g.p=w O;1g.p.1i=1g;g P=j(e){O.1l(b,e,"P")};P.p=w O;P.p.1i=P;g V=j(e){O.1l(b,e,"V")};V.p=w O;V.p.1i=V;q=j(){b.1a={};b.1a[q.1n]=[];b.1a[q.B]=[]};q.1n="1U";q.B="1V";q.p={1h:j(e,t){g n=1P(b.1a[t],e);k(n>=0){d n}k(!b.1W(e)){d x}b.R(e,t);d x},R:j(e,t){k(!b.1W(e)){d x}b.1a[t].X(e);d e},Z:j(e,t){k(!b.1a.3g(t)){d x}g n=b.1a[t].J;k(e>=n){d x}k(!n){d x}d b.1a[t][e]},1W:j(e){k(e===19||D e=="1U"&&!e.J){d x}d H}};1s=j(e){k(D e!=="N"){k(e 1F 1Y){b.F=e}C{b.F=w 1Y(e)}}C{b.F=w 1Y(0,H)}};1s.p={20:j(){d b.F.2P()},1K:j(){d b.F.2R()},1R:j(){d b.F.2T()},1C:j(e){d b.F.1J(e,N,"1S")},I:j(e){d b.F.2V(e)},2e:j(e){d b.F.2Q(e)},2K:j(e){d b.F.3f(e)},29:j(e){d b.F.2X(e,N,"1S")},1J:j(){d b.F.1J(b.F.38,0)}};1f={1G:{},Q:j(e,t,n,r){r=D r=="N"?24:r;g i=w 1s;g s=w G(i,r);d s.Q(e,H,t,n)},1b:j(e,t){g n=w 1s(e);g r=w E(n);k(2Y!="37")d;d r.1b(t)},3c:j(e){d b.1b(e)},39:j(e,t){d b.Q(e,H,N,t)},2N:j(e,t){b.1G[e]=t},2F:j(e){k(!(e L b.1G)){d 19}d b.1G[e]}};h={1I:0,1v:1,1u:2,1x:3,1y:4,1j:5,1B:6,2h:7,1t:8,1z:9,1w:10,2l:11,1A:12,3e:13,36:14,30:15,2Z:16,31:17,34:0,y:1,2i:Y,2j:3a,2k:33,1O:35,1Q:-2m,32:j(){d H},2b:j(e){k(!e){d H}g t=0;M(g n L e){k(n!=t){d x}t++}d H}};1e=j(e){b.v=e;b.z=w q};1e.p={2g:j(e){1T(H){m D e=="N":d h.1I;m e===19:d h.1v;m e===H||e===x:d e?h.1x:h.1u;m D e=="25"&&e%1===0:k(e<h.1Q||e>h.1O){d h.1j}d h.1y;m D e=="25"&&e%1!==0:d h.1j;m D e=="1U":d h.1B;m e 1F 2w:d h.1t;m e 1F 1k:d h.1A;m e 1F 3d:d h.1z;m D e=="1V":d h.1w;m D e=="j":18 w 1g("1Z Q a j");1L:d 19}}};G=j(e,t){b.2c=t;1e.1l(b,e)};G.p=w 1e;G.p.1i=G;G.p.Q=j(e,t,n,r){k(D n=="N")n=H;k(D t=="N")t=H;g i=r?r:b.2g(e);k(n){b.v.I(i)}1T(i){m h.1I:m h.1v:m h.1u:m h.1x:1c;m h.1y:b.K(e);1c;m h.1j:b.2f(e);1c;m h.1B:b.W(e);1c;m h.1t:b.28(e);1c;m h.1z:b.2a(e);1c;m h.1w:b.2d(e);1c;m h.1A:b.27(e);1c;1L:18 w P("3b 1f 26 ["+i+"]")}k(t){d b.v.1J()}};G.p.K=j(e){k(e<h.1Q||e>h.1O){18 w P("2U 2O 2M 2J: "+e)}e&=2L;k(e<h.2i){b.v.I(e)}C k(e<h.2j){b.v.I(e>>7&U|Y);b.v.I(e&U)}C k(e<h.2k){b.v.I(e>>14&U|Y);b.v.I(e>>7&U|Y);b.v.I(e&U)}C{b.v.I(e>>22&U|Y);b.v.I(e>>15&U|Y);b.v.I(e>>8&U|Y);b.v.I(e&2W)}};G.p.2f=j(e){b.v.2e(e)};G.p.W=j(e,t){t=D t=="N"?H:t;k(t){g n=b.z.1h(e,q.1n);k(n!==x){b.K(n<<1);d}}g r=1S.3I(e);b.K(r.J<<1|1);b.v.29(e)};G.p.28=j(e){g t=b.z.1h(e,q.B);k(t!==x){b.K(t<<1);d}b.Q(e.3K(),x,H,h.1j)};G.p.2a=j(e){g t=b.z.1h(e,q.B);k(t!==x){b.K(t<<1);d}g n=19;g r=h.2b(e);k(r){b.K(e.J<<1|h.y);b.W("");M(g i L e){n=e[i];b.Q(n,x)}}C{b.K(1);M(g s L e){n=e[s];b.W(s,x);b.Q(n)}b.W("")}};G.p.2d=j(e){g t=b.z.1h(e,q.B);k(t!==x){b.K(t<<1);d}g n=e;k(1m.2v(e)){e=e.2u()}g r=1m.2H(e);b.K(11);b.W(1m.2p(n,b.2c),x);k(r.J>0){M(g i L r){g s=r[i];g o=e[s];b.W(s,x);b.Q(o,x)}}b.W("")};G.p.27=j(e){k(!("1p"L e)){18 w P("3M 1k 1H 3L")}g t=b.z.1h(e,q.B);k(t!==x){b.K(t<<1);d}b.K(e.1p().J<<1|h.y);b.v.3T(e.1p())};E=j(e){1e.1l(b,e)};E.p=w 1e;E.p.1i=E;E.p.1b=j(e){g t=b.v.20(e);1T(1r(t)){m h.1I:d N;m h.1v:d 19;m h.1u:d x;m h.1x:d H;m h.1y:d b.S();m h.1j:d b.23();m h.1B:d b.1d();m h.1t:d b.21();m h.1z:d b.2I();m h.1w:d b.2E();m h.1A:d b.2r();m h.2h:d b.2n();m h.2l:d b.2D();1L:18 w V("1Z 1b 26: "+t+" ;3r 3y="+b.v.F.3A())}};E.p.S=j(){g e=0;g t=0;g n=b.v.1R();1D((n&Y)!==0&&t<3){e<<=7;e|=n&U;n=b.v.1R();t++}k(t<3){e<<=7;e|=n}C{e<<=8;e|=n;k((e&2m)!==0){e|=3v}}d e};E.p.23=j(){d b.v.1K()};E.p.1d=j(){g e=b.S();k((e&h.y)===0){e>>=h.y;d b.z.Z(e,q.1n)}g t=e>>h.y;g n=b.v.1C(t);b.z.R(n,q.1n);d n};E.p.21=j(){g e=b.S();k((e&h.y)===0){e>>=h.y;d b.z.Z(e,q.B)}g t=b.v.1K();g n=w 2w(t);b.z.R(n,q.B);d n};E.p.2I=j(){g e=b.S();k((e&h.y)===0){e>>=h.y;d b.z.Z(e,q.B)}g t=e>>h.y;g n=[];b.z.R(n,q.B);g r=b.1d();1D(r.J>0){n[r]=b.1b();r=b.1d()}M(g i=0;i<t;i++){n.X(b.1b())}d n};E.p.2E=j(){g e=b.S();k((e&h.y)===0){e>>=h.y;d b.z.Z(e,q.B)}g t=b.1d();g n={};b.z.R(n,q.B);g r={};g i=b.1d();1D(i.J){r[i]=b.1b();i=b.1d()}k(t&&t.J>0){g s=1f.2F(t);k(!s){18 w V("3s "+t+" 2C 2s 3w. 3x 3z a 3q 3k.")}n=w s;k("1E"L n&&D n.1E=="j"){n.1E(r)}C{1X(n,r)}}C{1X(n,r)}d n};g 1X=j(e,t){3j{M(g n L t){g r=t[n];e[n]=r}}3i(i){18 w V("3h \\\'"+n+"\\\' 2C 2s 3l 3m 3p \\\'"+D e+"\\\'")}};E.p.2r=j(){g e=b.S();k((e&h.y)===0){e>>=h.y;d b.z.Z(e,q.B)}g t=e>>h.y;g n=b.v.3o(t);g r=w 1k(n);b.z.R(r,q.B);d r};E.p.2n=j(){g e=b.S();k((e&h.y)===0){e>>=h.y;d b.z.Z(e,q.B)}g t=e>>h.y;g n=b.v.1C(t);b.z.R(n,q.B);d n};E.p.2D=j(){g e=b.S();k((e&h.y)===0){e>>=h.y;d b.z.Z(e,q.B)}g t=e>>h.y;g n=b.v.1C(t);b.z.R(n,q.B);d n};1P=j(e,t,n){k(e===N||e===19){18 w 3n(\\\'"3B" 3C 19 3O 3N 3Q\\\')}g r=e.J>>>0;n=+n||0;k(A.2B(n)===1o){n=0}k(n<0){n+=r;k(n<0){n=0}}M(;n<r;n++){k(e[n]===t){d n}}d-1};2A={3P:j(e){g t=11;g n=2y;g r=(1<<t-1)-1,i,s,o,u,a,f,l,c;k(3R(e)){s=(1<<r)-1;o=A.T(2,n-1);i=0}C k(e===1o||e===-1o){s=(1<<r)-1;o=0;i=e<0?1:0}C k(e===0){s=0;o=0;i=1/e===-1o?1:0}C{i=e<0;e=A.2B(e);k(e>=A.T(2,1-r)){u=A.3S(A.1N(A.3F(e)/A.3E),r);s=u+r;o=A.2z(e*A.T(2,n-u)-A.T(2,n))}C{s=0;o=A.2z(e/A.T(2,1-r-n))}}f=[];M(a=n;a;a-=1){f.X(o%2?1:0);o=A.1N(o/2)}M(a=t;a;a-=1){f.X(s%2?1:0);s=A.1N(s/2)}f.X(i?1:0);f.2x();l=f.2o("");c=[];1D(l.J){c.X(1r(l.1q(0,8),2));l=l.1q(8)}d c},3D:j(e){g t=11;g n=2y;g r=[],i,s,o,u,a,f,l,c;M(i=e.J;i;i-=1){o=e[i-1];M(s=8;s;s-=1){r.X(o%2?1:0);o=o>>1}}r.2x();u=r.2o("");a=(1<<t-1)-1;f=1r(u.1q(0,1),2)?-1:1;l=1r(u.1q(1,1+t),2);c=1r(u.1q(1+t),2);k(l===(1<<t)-1){d c!==0?2S:f*1o}C k(l>0){d f*A.T(2,l-a)*(1+c/A.T(2,n))}C k(c!==0){d f*A.T(2,-(a-1))*(c/A.T(2,n))}C{d f<0?-0:0}}};1m={2v:j(e){k(!e){d x}d"2u"L e&&"1E"L e},2p:j(e,t){k(D e==="1V"&&1f.1M L e){d t&1f.2q?e.2t:""}d""},2H:j(e){k(!e){d[]}g t=[];M(g n L e){k(n==1f.1M){2G}k(D e[n]=="j"){2G}t.X(n)}d t}};1k=j(e){b.1H=e};1k.p={1p:j(){d b.1H},3J:j(e){b.1H=e},3H:j(){d b.1p()}}\',62,yz,"|||||||||||mP||my|||mL|yy||ef|if||nE|||mS|y2|||||y1|mC|mR|y0|xZ|nA|y3|mJ|mQ|y4|y8|y7|mO|y6|mK|y5|in|mM|mT|xY|xX|pk|xQ|xP|pH|n6|xO|xM|nf|mU|xN|||||||||nI|mX|p0|xR|p3|xS|xW|xV|xU|xT|nw|y9|ya|nB|yq|yp|oK|yo|n1|mE|yn|yr|ys|yx|yw|yu|yt|ym|yl|ye|yd|mA|yc|n9|yb|pM|yf|oa|yg|nq|yk|ns|yj|n3|yi|yh|nu|np|mN|n8|zl|zm|oN|Aq|Ap|Ao||An|Ar|nh|mW|As|Aw|Av|Au|At|p1|Am|Al|Ae|Ad|Ac|Ab|Af|Ag|Ak|Aj|Ai|n7|Ah|Ax|Ay|be|nn|AO|AN|nr|nv|52|os|AM|pK|AL|AP|AQ|AU|nJ|AT|AS|ob|AR|AK|of|AJ|nX|AC|AB|AA|nN|Az|AD|AE|oS|nP|AI|AH|AG|AF|Aa|A9|zE|zD|zC|zB|nc|pA|zF|zG|p4|mY|zK|zJ|ng|ov|nF|nG|zI|nK|on|nx|oW|zH|ne|oq|oy|ny|od|zz|oi|zy|p9|zr|oe|oR|is|zq|pN|nC|oF|mF|n5|zp|nm|zn|zo|nd|or|zs|pb|n4|o3|o4".mG("|"),0,{}));mI(ef(e,t,n,r,i,s){i=ef(e){my(e<t?"":i(mE(e/t)))+((e=e%t)>35?mz.mD(e+29):e.mF(36))};if(!"".mB(/^/,mz)){mA(n--){s[i(n)]=r[n]||i(n)}r=[ef(e){my s[e]}];i=ef(){my"\\\\w+"};n=1}mA(n--){if(r[n]){e=e.mB(mC mH("\\\\b"+i(n)+"\\\\b","g"),r[n])}}my e}(\'k 1v;1v=b(e){"37 39";b s(e,t){g!t&&e I N?e:N.K.P.1t(e)}b o(e,t){g e!==17?e:t}b u(e,n,r,i,s){j(e I u){k a=e.P(r,r+i);a.E=o(s,a.E);g a}j(!(9 I u)){g q u(e,n,r,i,s)}9.m=e=u.1u(e);9.L=o(n,1f);9.R=t.D&&e I D;9.1h=t.14&&9.R;j(!9.R&&!(e I N)){Q q 1x("1v m 3a 33 2Z 3e")}9.E=!!s;k f="v"A e?e.v:e.x;9.z=r=o(r,0);9.v=i=o(i,f-r);9.w=9.O=0;j(!9.1h){9.18(r,i,f)}y{9.19=q 14(e,r,i)}9.1V=9.1h?9.1W:9.R?9.1U:9.1T}b a(e){k n=t.D?H:N,r=q n(e.x);C(k i=0,s=e.x;i<s;i++){r[i]=e.3v(i)&F}g r}b f(e){g e>=0&&e<31?1<<e:f[e]||(f[e]=M.3s(2,e))}b l(e,t){9.12=e;9.S=t}b c(e,t){l.1l(9,Z)}k t={14:"14"A e,D:"D"A e};k n=e.3r;k r=e.3u;k i={3f:1,3m:2,3l:4,2R:1,2o:2,2n:4,2t:4,2l:8};u.1u=b(e){2f(13 e){1M"U":j(t.D){e=(q H(e)).m}y{e=q N(e);C(k n=0;n<e.x;n++){e[n]=0}}g e;1M"2d":e=a(e);2J:j("x"A e&&!(t.D&&e I D)){j(t.D){j(!(e I D)){e=(q H(e)).m;j(!(e I D)){e=(q H(s(e,B))).m}}}y{e=s(e)}}g e}};u.2N=b(){g u.1u(Z)};u.2B=l;l.K={1c:b(){g 9.12+f(32)*9.S},1N:b(){g 2C.K.1N.1l(9.1c(),Z)}};l.1a=b(e){k t=M.W(e/f(32)),n=e-t*f(32);g q l(n,t)};u.2D=c;c.K="1K"A 1L?1L.1K(l.K):q l;c.K.1c=b(){j(9.S<f(31)){g l.K.1c.1l(9,Z)}g-(f(32)-9.12+f(32)*(f(32)-1-9.S))};c.1a=b(e){k t,n;j(e>=0){k r=l.1a(e);t=r.12;n=r.S}y{n=M.W(e/f(32));t=e-n*f(32);n+=f(32)}g q c(t,n)};k h=u.K={2x:t,1i:10*1D,2y:b(e){j(13 e==="17"){9.L=!9.L}y{j(13 e==="2z"){9.L=e}}},2A:b(){g 9.L},2G:b(){g 9.w},1H:b(e){9.18(e,0);g 9.w=e},1I:b(e){g 9.1H(9.w+e)},P:b(e,t,n){b r(e,t){g e<0?e+t:e}e=r(e,9.v);t=r(o(t,9.v),9.v);g n?q u(9.1g(t-e,e,B,B),9.L,17,17,9.E):q u(9.m,9.L,9.z+e,t-e,9.E)},2H:b(e){9.O=0;j(o(e,1)!==1){g 9.1I(e-(9.w%e||e))}y{g 9.w}},2O:b(e,t,n,r){j(!(e I u)){e=q u(e)}n=o(n,e.w);t=o(t,9.w);r=o(r,e.v-n);r=t+r<=9.v?r:9.v-t;9.J(e.1g(r,n),t)},2P:b(e){j(!(e I u)){e=q u(e)}k t={1r:B,1j:[]};k n,r,i=0;n=r="v"A 9.m?9.m.v:9.m.x;k s="v"A e.m?e.m.v:e.m.x;j(s!==r){t.1r=1f;j(s<r){t.1j.X("1m V 2M;9="+r+";1m="+s);n=s}y{t.1j.X("1m V 2L;9="+r+";1m="+s)}}n-=9.z;C(k o=0;o<n;o++){k a=9.G(1,o)[0];k f=e.G(1,o)[0];j(a!==f){i++}}j(i>0){t.1r=1f;t.1j.X(i+" 1y A 2w")}g t},1J:b(e){k n,r,i;j(!9.L){Q q 1e("m 1C L.")}j(e<9.z){Q q 1e("q 2v V 1G 1O 1P.")}k r="v"A 9.m?9.m.v:9.m.x;j(13 e==="U"){e=(2i(e/9.1i)+(e%9.1i?1:0))*9.1i;j(t.D){n=q H(e);n.T((q H(9.m)).2h(0,r<e?r:e));i=q H(e);i.T(n);9.m=i.m}y{9.m.x=e;i=9.m;C(k s=r;s<9.m.x;s++){9.m[s]=0}}k o="v"A 9.m?9.m.v:9.m.x;j(9.v===r-9.z){9.v=o-9.z}j(9.w>9.v){9.w=9.v}j(9.1h){9.19=q 14(9.m,9.z,9.v)}}},Y:b(e,t){j(!9.L)g;e=o(e,9.w);k n="v"A 9.m?9.m.v:9.m.x;j(9.z+e+t>n){9.1J(9.z+e+t)}},18:b(e,t,n){j(13 e!=="U"){Q q 1x("2e V 1C a U.")}j(13 t!=="U"){Q q 1x("2m V 1C a U.")}j(t<0){Q q 1e("2u V 2q.")}j(e<0||e+t>o(n,9.v)){Q q 1e("2p 2Q 1G 1O 1P.")}},1p:b(e,t,n,r,i){g 9.1V(e,t,o(n,9.w),o(r,9.E),i)},1W:b(e,t,n,r,s){9.Y(n,i[e]);9.w=n+i[e];g t?9.19["2b"+e](n,r):9.19["T"+e](n,s,r)},1U:b(t,n,r,s,u){k a=i[t],f=e[t+"N"],l;9.Y(r,a);s=o(s,9.E);j(a===1||(9.z+r)%a===0&&s){l=q f(9.m,9.z+r,1);9.w=r+a;g n?l[0]:l[0]=u}y{k c=q H(n?9.1g(a,r,s,B):a);l=q f(c.m,0,1);j(n){g l[0]}y{l[0]=u;9.J(c,r,s)}}},1T:b(e,t,n,r,s){9.Y(n,i[e]);g t?9["3h"+e](n,r):9["3i"+e](s,n,r)},1A:b(e,t,n,r,i){k s=e<0?1:0,o,u,a=~(-1<<r-1),l=1-a;j(e<0){e=-e}j(e===0){o=0;u=0}y j(3p(e)){o=2*a+1;u=1}y j(e===1s){o=2*a+1;u=0}y{o=M.W(M.3o(e)/M.3w);j(o>=l&&o<=a){u=M.W((e*f(-o)-1)*f(n));o+=a}y{u=M.W(e/f(l-n));o=0}}k c=[];1R(n>=8){c.X(u%1Q);u=M.W(u/1Q);n-=8}o=o<<n|u;r+=n;1R(r>=8){c.X(o&F);o>>>=8;r-=8}c.X(s<<r|o);9.J(c,t,i)},1w:b(e,t){k n=(o(t,9.w)<<3)+9.O,r=n+e,i=n>>>3,s=r+7>>>3,u=9.G(s-i,i,B),a=0;j(9.O=r&7){9.O-=8}C(k f=0,l=u.x;f<l;f++){a=a<<8|u[f]}g{25:i,1y:u,1z:a}},G:b(e,t,n){n=o(n,9.E);t=o(t,9.w);e=o(e,9.v-t);9.18(t,e);t+=9.z;9.w=t-9.z+e;k r=9.R?q H(9.m,t,e):(9.m.P||N.K.P).1t(9.m,t,t+e);g n||e<=1?r:s(r).1S()},1g:b(e,t,n,r){k i=9.G(e,t,o(n,B));g r?s(i):i},J:b(e,t,n){k r=e.x;j(r===0){g}n=o(n,9.E);t=o(t,9.w);9.18(t,r);j(!n&&r>1){e=s(e,B).1S()}t+=9.z;j(9.R){(q H(9.m,t,r)).T(e)}y{C(k i=0;i<r;i++){9.m[t+i]=e[i]}}9.w=t-9.z+r},30:b(e,t,n){9.Y(t,e.x);9.J(e,t,o(n,B))},1F:b(e,t,n){k i=9.G(e,t,B);n=n==="1k"?"1d-8":n||"1b";j(r&&n!=="1b"){g(q r(n)).1X(9.R?i:q H(i))}k s="";e=i.x;C(k o=0;o<e;o++){s+=2S.2T(i[o])}j(n==="1d-8"){s=1k.1X(s)}g s},1Y:b(e,t,r){r=r==="1k"?"1d-8":r||"1b";k i;j(n&&r!=="1b"){i=(q n(r)).1E(e)}y{j(r==="1d-8"){e=1k.1E(e)}i=a(e)}9.Y(t,i.x);9.J(i,t,B)},3c:b(e){g 9.1F(1,e)},38:b(e,t){9.1Y(e,t)},36:b(e,t){k n=9.G(8,e,t),r=1-2*(n[7]>>7),i=((n[7]<<1&F)<<3|n[6]>>4)-((1<<10)-1),s=(n[6]&15)*f(3q)+n[5]*f(3j)+n[4]*f(32)+n[3]*f(24)+n[2]*f(16)+n[1]*f(8)+n[0];j(i===1D){j(s!==0){g 2a}y{g r*1s}}j(i===-2r){g r*s*f(-2g-1B)}g r*(1+s*f(-1B))*f(i)},2j:b(e,t,n){9.1A(e,t,1B,11,n)},2s:b(e,t){k n=9.G(4,e,t),r=1-2*(n[3]>>7),i=(n[3]<<1&F|n[2]>>7)-1q,s=(n[2]&1q)<<16|n[1]<<8|n[0];j(i===3n){j(s!==0){g 2a}y{g r*1s}}j(i===-1q){g r*s*f(-3b-23)}g r*(1+s*f(-23))*f(i)},34:b(e,t,n){9.1A(e,t,23,8,n)},1n:b(e,t,n){n=o(n,9.E);t=o(t,9.w);k r=n?[0,4]:[4,0];C(k i=0;i<2;i++){r[i]=9.2V(t+r[i],n)}9.w=t+8;g q e(r[0],r[1])},1o:b(e,t,n,r){j(!(t I e)){t=e.1a(t)}r=o(r,9.E);n=o(n,9.w);k i=r?{12:0,S:4}:{12:4,S:0};C(k s A i){9.2U(n+i[s],t[s],r)}9.w=n+8},2W:b(e,t){g 9.1n(c,e,t)},2X:b(e,t,n){9.1o(c,e,t,n)},2Y:b(e,t){g 9.1n(l,e,t)},3d:b(e,t,n){9.1o(l,e,t,n)},22:b(e,t){k n=9.G(4,e,t);g n[3]<<24|n[2]<<16|n[1]<<8|n[0]},3t:b(e,t){g 9.22(e,t)>>>0},26:b(e,t,n){9.J([e&F,e>>>8&F,e>>>16&F,e>>>24],t,n)},3x:b(e,t){g 9.21(e,t)<<16>>16},21:b(e,t){k n=9.G(2,e,t);g n[1]<<8|n[0]},29:b(e,t,n){9.J([e&F,e>>>8&F],t,n)},3g:b(e){g 9.20(e)<<24>>24},20:b(e){g 9.G(1,e)[0]},28:b(e,t){9.J([e&F],t)},3k:b(e,t){k n=32-e;g 9.1Z(e,t)<<n>>n},1Z:b(e,t){k n=9.1w(e,t).1z>>>-9.O;g e<32?n&~(-1<<e):n},27:b(e,t,n){k r=9.1w(n,t),i=r.1z,s=r.1y;i&=~(~(-1<<n)<<-9.O);i|=(n<32?e&~(-1<<n):e)<<-9.O;C(k o=s.x-1;o>=0;o--){s[o]=i&F;i>>>=8}9.J(s,r.25,B)}};C(k p A i){(b(e){h["2b"+e]=b(t,n){g 9.1p(e,B,t,n)};h["T"+e]=b(t,n,r){9.1p(e,1f,n,r,t)}})(p)}h.2c=h.26;h.2k=h.29;h.2K=h.28;h.2I=h.27;C(k d A h){j(d.P(0,3)==="T"){(b(e){h["2F"+e]=b(){N.K.2E.1t(Z,17);9["T"+e].1l(9,Z)}})(d.P(3))}}g u}(35)\',62,zt,"|||||||||mP||ef|||||my|||if|mL||oq||||mC|||||zx|zw|mK|mJ|zv|in|mO|mM|zu|zL|oS|zM|A2|n9|A1|mS|A0|nA|mY|zZ|nz|nI|A3|hi|nK|nh|is|ns|nf|A4|na|||lo|mQ|A8|||mT|A7|A6|A5|zY|pL|zX|nY|mR|oW|zQ|zP|zO|nu|pm|zN|zR|zS|zW|n6|zV|oK|nB|zU|oN|zT|nx|xL|xK|vE|52|nd|vD|n5|oa|nX|vC|vB|vF|oL|nk|nE|mF|of|vG|vK|mA|nv|vJ|vI|vH|vA|n2|nP|vz|vs|vr|vq|||o2|vp|vt|vu|vy|nN|n0|vx|mN|oT|np|vw|vv|mE|vL|vM|w2|w1|w0|vZ|w4|w5|w9|w8|w7|w6|no|vY|vX|vQ|ok|vP|vO|oZ|vN|pr|nt|oe|vR|vS|nq|vW|vV|vU|vT|vo|vn|nW|uS|mz|mD|uR|uQ|uP|uT|uU|uY|o4|||an|uX|mZ|uW|uV|uO|uN|ou|uG|uF|uE|mW|uC|uD|uH|uI|40|uM|uL|uK|mU|nC|n4|48|uJ|pH|uZ|v0|mV|pN|vg".mG("|"),0,{}));mI(ef(e,t,n,r,i,s){i=ef(e){my(e<t?"":i(mE(e/t)))+((e=e%t)>35?mz.mD(e+29):e.mF(36))};if(!"".mB(/^/,mz)){mA(n--){s[i(n)]=r[n]||i(n)}r=[ef(e){my s[e]}];i=ef(){my"\\\\w+"};n=1}mA(n--){if(r[n]){e=e.mB(mC mH("\\\\b"+i(n)+"\\\\b","g"),r[n])}}my e}(\'7 4m(e){5 t="9.0.0";3(e.2E){t=e.2E}t=t.1g(",").2U(".");5 n="\\\\n";5 r=e.4k||"4s, 4i, 4g-4c";5 i=e.4S||"10";5 s=e.4N||"4O";5 o=e.4R||"#2m";5 u=e.4Q||"2A://4A.2H.2x/4J/4z/4y/4C.4D";5 a=e.2k||"#2m";5 f=\\\'<1T 1a="\\\'+e.1a+\\\'" 18="\\\'+e.18+\\\'" 2w="0" 2B="0" 2F="0" 1n="42-2y:\\\'+a+\\\';">\\\'+n;f+="		<1W>"+n;f+=\\\'			<1Y 1H="2G" 2J="2I">\\\'+n;f+=\\\'				<1T 1a="2C%" 18="2C%" 2w="0" 2B="0" 2F="0">\\\'+n;f+="					<1W>"+n;f+=\\\'						<1Y 1H="2G" 2J="2I">\\\'+n;f+=\\\'							<a 3z="2A://3k.2H.2x/3U/"><3T 3Q="\\\'+u+\\\'" 2w="0" /></a>\\\'+n;f+=\\\'							<2h 1n="2q-3V:\\\'+r+";2q-3X:"+i+"3O;2q-3E:"+s+";2y:"+o+\\\';">\\\'+n;f+="							<2j/>3J 2z "+t+n;f+="							<2j/>3K 2z: 30"+n;f+="							<2j/>"+n;f+="							</2h>"+n;f+="							</1Y>"+n;f+="					</1W>"+n;f+="				</1T>"+n;f+="				<p>&2X;</p>"+n;f+="				<p>&2X;</p>"+n;f+="			</1Y>"+n;f+="		</1W>"+n;f+="	</1T>"+n;5 l=11;3(!e.1Z){5 c=e.2g||"3L"+(1E 2Y).2L().2f();5 h=1y.22("3M");h.15=c;h.1N=" ";1y.1x.1t(h);5 p=h.2R;1y.1x.1p(h);1y.3N(p);e.1Z=c;l=Y}5 d="3I"+(1E 2Y).2L().2f();5 v=1E 1B;v.1G=e.2T;v.1a=e.1a;v.18=e.18;v.15=e.2g||d;v.1C=e.2g||d;5 m=1E 1B;m.2k=e.2k||"#2m";3(e.2t){m.2t=e.2t}3(e.2l){m.2l=e.2l}3(e.1s){3(e.1s=="31"||e.1s=="Y"||e.1s===Y){m.1s="31"}G{m.1s=e.1s}}3(e.1S){3(e.1S=="Y"||e.1S===Y){m.1S="Y"}}3(e.1R){3(e.1R=="Y"||e.1R===Y){m.1R="Y"}}3(e.2n){m.2n=e.2n}5 g=7(t){3(t.1l==11){5 n=1u.3b();5 r=n.2p+"."+n.3h+"."+n.3e;3(n.2p<4){r="3Z"}5 i=1y.28(e.1Z);40.3W(i);i.1N=f.1g("30").2U(r)}};5 y=7(){1u.38(e.2T,e.1Z,v.1a,v.18,t,13,e.1v,m,v,g)};1u.39(y)}5 1u=7(){7 C(){3(b){Q}1X{5 e=a.1m("1x")[0].1t(U("2h"));e.1b.1p(e)}1V(t){Q}b=Y;5 n=c.17;12(5 r=0;r<n;r++){c[r]()}}7 k(e){3(b){e()}G{c[c.17]=e}}7 L(t){3(K u.1w!=e){u.1w("2O",t,11)}G{3(K a.1w!=e){a.1w("2O",t,11)}G{3(K u.1P!=e){z(u,"1F",t)}G{3(K u.1F=="7"){5 n=u.1F;u.1F=7(){n();t()}}G{u.1F=t}}}}}7 A(){3(l){O()}G{M()}}7 O(){5 n=a.1m("1x")[0];5 r=U(t);r.1j("2a",i);5 s=n.1t(r);3(s){5 o=0;(7(){3(K s.23!=e){5 t=s.23("v");3(t){t=t.1g(" ")[1].1g(",");T.1o=[16(t[0],10),16(t[1],10),16(t[2],10)]}}G{3(o<10){o++;1A(1q.1r,10);Q}}n.1p(r);s=13;M()})()}G{M()}}7 M(){5 t=h.17;3(t>0){12(5 n=0;n<t;n++){5 r=h[n].15;5 i=h[n].3a;5 s={1l:11,15:r};3(T.1o[0]>0){5 o=R(r);3(o){3(W(h[n].3f)&&!(T.1e&&T.1e<1J)){V(r,Y);3(i){s.1l=Y;s.2s=1O(r);i(s)}}G{3(h[n].29&&D()){5 u={};u.1G=h[n].29;u.1a=o.1h("1a")||"0";u.18=o.1h("18")||"0";3(o.1h("1K")){u.2i=o.1h("1K")}3(o.1h("1H")){u.1H=o.1h("1H")}5 a={};5 f=o.1m("2d");5 l=f.17;12(5 c=0;c<l;c++){3(f[c].1h("1C").1i()!="2c"){a[f[c].1h("1C")]=f[c].1h("25")}}P(u,a,r,i)}G{H(o);3(i){i(s)}}}}}G{V(r,Y);3(i){5 p=1O(r);3(p&&K p.2N!=e){s.1l=Y;s.2s=p}i(s)}}}}}7 1O(n){5 r=13;5 i=R(n);3(i&&i.1I=="2b"){3(K i.2N!=e){r=i}G{5 s=i.1m(t)[0];3(s){r=s}}}Q r}7 D(){Q!w&&W("6.0.3l")&&(T.14||T.1D)&&!(T.1e&&T.1e<1J)}7 P(t,n,r,i){w=Y;g=i||13;y={1l:11,15:r};5 o=R(r);3(o){3(o.1I=="2b"){v=B(o);m=13}G{v=o;m=r}t.15=s;3(K t.1a==e||!/%$/.1c(t.1a)&&16(t.1a,10)<2M){t.1a="2M"}3(K t.18==e||!/%$/.1c(t.18)&&16(t.18,10)<2P){t.18="2P"}a.2u=a.2u.3m(0,47)+" - 33 3n 3o";5 f=T.19&&T.14?"3i":"3A",l="3p="+u.2o.2f().1z(/&/g,"%26")+"&3x="+f+"&3y="+a.2u;3(K n.1v!=e){n.1v+="&"+l}G{n.1v=l}3(T.19&&T.14&&o.1f!=4){5 c=U("2r");r+="3v";c.1j("15",r);o.1b.2Q(c,o);o.1n.1L="27";(7(){3(o.1f==4){o.1b.1p(o)}G{1A(1q.1r,10)}})()}j(t,n,r)}}7 H(e){3(T.19&&T.14&&e.1f!=4){5 t=U("2r");e.1b.2Q(t,e);t.1b.1Q(B(e),t);e.1n.1L="27";(7(){3(e.1f==4){e.1b.1p(e)}G{1A(1q.1r,10)}})()}G{e.1b.1Q(B(e),e)}}7 B(e){5 n=U("2r");3(T.14&&T.19){n.1N=e.1N}G{5 r=e.1m(t)[0];3(r){5 i=r.3r;3(i){5 s=i.17;12(5 o=0;o<s;o++){3(!(i[o].2S==1&&i[o].1I=="3s")&&!(i[o].2S==8)){n.1t(i[o].3t(Y))}}}}}Q n}7 j(n,r,s){5 o,u=R(s);3(T.1e&&T.1e<1J){Q o}3(u){3(K n.15==e){n.15=s}3(T.19&&T.14){5 a="";12(5 f 1d n){3(n[f]!=1B.1M[f]){3(f.1i()=="1G"){r.2c=n[f]}G{3(f.1i()=="2i"){a+=\\\' 1K="\\\'+n[f]+\\\'"\\\'}G{3(f.1i()!="24"){a+=" "+f+\\\'="\\\'+n[f]+\\\'"\\\'}}}}}5 l="";12(5 c 1d r){3(r[c]!=1B.1M[c]){l+=\\\'<2d 1C="\\\'+c+\\\'" 25="\\\'+r[c]+\\\'" />\\\'}}u.2R=\\\'<21 24="3S:4d-4E-4F-4G-4H"\\\'+a+">"+l+"</21>";p[p.17]=n.15;o=R(n.15)}G{5 h=U(t);h.1j("2a",i);12(5 d 1d n){3(n[d]!=1B.1M[d]){3(d.1i()=="2i"){h.1j("1K",n[d])}G{3(d.1i()!="24"){h.1j(d,n[d])}}}}12(5 v 1d r){3(r[v]!=1B.1M[v]&&v.1i()!="2c"){F(h,v,r[v])}}u.1b.1Q(h,u);o=h}}Q o}7 F(e,t,n){5 r=U("2d");r.1j("1C",t);r.1j("25",n);e.1t(r)}7 I(e){5 t=R(e);3(t&&t.1I=="2b"){3(T.19&&T.14){t.1n.1L="27";(7(){3(t.1f==4){q(e)}G{1A(1q.1r,10)}})()}G{t.1b.1p(t)}}}7 q(e){5 t=R(e);3(t){12(5 n 1d t){3(K t[n]=="7"){t[n]=13}}t.1b.1p(t)}}7 R(e){5 t=13;1X{t=a.28(e)}1V(n){}Q t}7 U(e){Q a.22(e)}7 z(e,t,n){e.1P(t,n);d[d.17]=[e,t,n]}7 W(e){5 t=T.1o,n=e.1g(".");n[0]=16(n[0],10);n[1]=16(n[1],10)||0;n[2]=16(n[2],10)||0;Q t[0]>n[0]||t[0]==n[0]&&t[1]>n[1]||t[0]==n[0]&&t[1]==n[1]&&t[2]>=n[2]?Y:11}7 X(n,r,i,s){3(T.19&&T.1D){Q}5 o=a.1m("4P")[0];3(!o){Q}5 u=i&&K i=="4K"?i:"4M";3(s){E=13;S=13}3(!E||S!=u){5 f=U("1n");f.1j("2a","4w/4x");f.1j("4e",u);E=o.1t(f);3(T.19&&T.14&&K a.1U!=e&&a.1U.17>0){E=a.1U[a.1U.17-1]}S=u}3(T.19&&T.14){3(E&&K E.2Z==t){E.2Z(n,r)}}G{3(E&&K a.2V!=e){E.1t(a.2V(n+" {"+r+"}"))}}}7 V(e,t){3(!x){Q}5 n=t?"44":"43";3(b&&R(e)){R(e).1n.2W=n}G{X("#"+e,"2W:"+n)}}7 $(t){5 n=/[\\\\\\\\\\\\"<>\\\\.;]/;5 r=n.46(t)!=13;Q r&&K 32!=e?32(t):t}5 e="35",t="21",n="4h 33",r="2K.2K",i="4r/x-4t-4u",s="4v",o="4q",u=37,a=1y,f=4p,l=11,c=[A],h=[],p=[],d=[],v,m,g,y,b=11,w=11,E,S,x=Y,T=7(){5 s=K a.28!=e&&K a.1m!=e&&K a.22!=e,o=f.4j.1i(),c=f.4l.1i(),h=c?/14/.1c(c):/14/.1c(o),p=c?/1D/.1c(c):/1D/.1c(o),d=/2D/.1c(o)?4o(o.1z(/^.*2D\\\\/(\\\\d+(\\\\.\\\\d+)?).*$/,"$1")):11,v=!+"1",m=[0,0,0],g=13;3(K f.2v!=e&&K f.2v[n]==t){g=f.2v[n].3j;3(g&&!(K f.20!=e&&f.20[i]&&!f.20[i].4n)){l=Y;v=11;g=g.1z(/^.*\\\\s+(\\\\S+\\\\s+\\\\S+$)/,"$1");m[0]=16(g.1z(/^(.*)\\\\..*$/,"$1"),10);m[1]=16(g.1z(/^.*\\\\.(.*)\\\\s.*$/,"$1"),10);m[2]=/[a-3g-Z]/.1c(g)?16(g.1z(/^.*[a-3g-Z]+(.*)$/,"$1"),10):0}}G{3(K u.36!=e){1X{5 y=1E 36(r);3(y){g=y.23("v");3(g){v=Y;g=g.1g(" ")[1].1g(",");m=[16(g[0],10),16(g[1],10),16(g[2],10)]}}}1V(b){}}}Q{1k:s,1o:m,1e:d,19:v,14:h,1D:p}}(),N=7(){3(!T.1k){Q}3(K a.1f!=e&&a.1f=="2e"||K a.1f==e&&(a.1m("1x")[0]||a.1x)){C()}3(!b){3(K a.1w!=e){a.1w("48",C,11)}3(T.19&&T.14){a.1P(o,7(){3(a.1f=="2e"){a.34(o,1q.1r);C()}});3(u==49){(7(){3(b){Q}1X{a.45.4a("4b")}1V(e){1A(1q.1r,0);Q}C()})()}}3(T.1e){(7(){3(b){Q}3(!/4f|2e/.1c(a.1f)){1A(1q.1r,0);Q}C()})()}L(C)}}();5 J=7(){3(T.19&&T.14){37.1P("4L",7(){5 e=d.17;12(5 t=0;t<e;t++){d[t][0].34(d[t][1],d[t][2])}5 n=p.17;12(5 r=0;r<n;r++){I(p[r])}12(5 i 1d T){T[i]=13}T=13;12(5 s 1d 1u){1u[s]=13}1u=13})}}();Q{4I:7(e,t,n,r){3(T.1k&&e&&t){5 i={};i.15=e;i.3f=t;i.29=n;i.3a=r;h[h.17]=i;V(e,11)}G{3(r){r({1l:11,15:e})}}},4B:7(e){3(T.1k){Q 1O(e)}},38:7(n,r,i,s,o,u,a,f,l,c){5 h={1l:11,15:r};3(T.1k&&!(T.1e&&T.1e<1J)&&n&&r&&i&&s&&o){V(r,11);k(7(){i+="";s+="";5 p={};3(l&&K l===t){12(5 d 1d l){p[d]=l[d]}}p.1G=n;p.1a=i;p.18=s;5 v={};3(f&&K f===t){12(5 m 1d f){v[m]=f[m]}}3(a&&K a===t){12(5 g 1d a){3(K v.1v!=e){v.1v+="&"+g+"="+a[g]}G{v.1v=g+"="+a[g]}}}3(W(o)){5 y=j(p,v,r);3(p.15==r){V(r,Y)}h.1l=Y;h.2s=y}G{3(u&&D()){p.1G=u;P(p,v,r,c);Q}G{V(r,Y)}}3(c){c(h)}})}G{3(c){c(h)}}},3u:7(){x=11},3w:T,3b:7(){Q{2p:T.1o[0],3h:T.1o[1],3e:T.1o[2]}},41:W,3B:7(e,t,n){3(T.1k){Q j(e,t,n)}G{Q 35}},3R:7(e,t,n,r){3(T.1k&&D()){P(e,t,n,r)}},3Y:7(e){3(T.1k){I(e)}},3P:7(e,t,n,r){3(T.1k){X(e,t,n,r)}},39:k,3F:L,3C:7(e){5 t=a.2o.3D||a.2o.3H;3(t){3(/\\\\?/.1c(t)){t=t.1g("?")[1]}3(e==13){Q $(t)}5 n=t.1g("&");12(5 r=0;r<n.17;r++){3(n[r].3c(0,n[r].3d("="))==e){Q $(n[r].3c(n[r].3d("=")+1))}}}Q""},3G:7(){3(w){5 e=R(s);3(e&&v){e.1b.1Q(v,e);3(m){V(m,Y);3(T.19&&T.14){v.1n.1L="3q"}}3(g){g(y)}}w=11}}}}()\',62,vf,"|||if||mL||ef|||||||||||||||||||||||||||||||||||mJ||||mQ||||||my||||||||mO|||mR|mM|mX|ve|id|mE|mK|po|ie|ps|oh|pd|in|wk|ph|mG|oB|ot|nL|w3|vd|ow|pi|pv|nT|na|nQ|vh|p5|vi|vm|oM|oU|p6|mB|pE|nk|ny|vl|mC|vk|pM|vj|nl|vc|ne|p8|mS|pe|pu|oX|nV|vb|v4|pn|v3|nF|tr|nG|td|v2|v1|n8|oC|v5|v6|oJ||pP|og|va|mW|p2|v9|v8|om|mF|v7|oY|wa|br|wb|xf|xe|xd|xc|xg|nU|o0|xh|xl|oQ|xk|pJ|xj|oo|nM|xi|xb|o5|xa|x3|x2|o7|x1|x0|x4|x5|nm|x9|x8|oD|x7|nS|oG|nD|x6|n7|pl|nR|o8|nr|xm|xn|xD|p7|xC|o6|mT|py|mZ|xB|xA|xE|xF|n1|n3|xJ|xI|zA|xH|xG|xz|n0|65|nz|xy|xr|xq|oj|nj|pg|oH|xp|xo|ua|xs|xt|pf|xx|xw|xv|xu|wZ|wY|wt|ws|wr|wq|wu|wv|pQ|nt|px|wz|wy|wx|ww|oO|wp|wo|nC|no|wg|wf|we|wc|oA|oV|pw|nH|op||pj|pC|pz|pB|wd|wh|wi|pp|wn|wm|wl|nZ|wj|wA|wB|wR|oc|pa|wQ|nO|wP|wO|wS|wT|nb|wX|wW|wV|wU|wN|wM|wF|wE|wD|wC|wG|wH|wL|mN|pD|wK|wJ|wI|yX|zh|zi|uB".mG("|"),0,{}));mI(ef(e,t,n,r,i,s){i=ef(e){my(e<t?"":i(mE(e/t)))+((e=e%t)>35?mz.mD(e+29):e.mF(36))};if(!"".mB(/^/,mz)){mA(n--){s[i(n)]=r[n]||i(n)}r=[ef(e){my s[e]}];i=ef(){my"\\\\w+"};n=1}mA(n--){if(r[n]){e=e.mB(mC mH("\\\\b"+i(n)+"\\\\b","g"),r[n])}}my e}(\'q A(e){if(!e){G[]}if("2X"in Y(e)){G e.2X()}J t=e.17||0,n=1j 2G(t);1x(t--){n[t]=e[t]}G n}q w(e){if(!Y.2z(e)){G[]}e=e.5C();G e?e.3y(/\\\\s+/):[]}q H(e){G 1j 4k(e)}q R(e,t,n){G 1j fK(e,t,n)}q $(e){if(1g.17>1){1q(J t=0,n=[],r=1g.17;t<r;t++){n.1s($(1g[t]))}G n}if(Y.2z(e)){e=19.5W(e)}G V.1h(e)}J 1Q,5Y,1o,1m={gW:"1.7.0",2t:q(){J e=dU.dd;J t=Y.1A.2s.1C(1p.4z)=="[2u 7t]";G{7t:t,4K:e.2a("hA/")>-1,aI:e.2a("aI")>-1&&e.2a("il")===-1,eQ:/hM.*iv/.1M(e)}}(),4R:{fz:!!19.5U,iG:!!19.i5,7j:q(){J e=1p.V||1p.7b;G!!(e&&e.1A)}(),8d:q(){if(1D 1p.io!=="2b"){G 1c}J e=19.2l("2x"),t=19.2l("gx"),n=1a;if(e.5l&&e.5l!==t.5l){n=1c}e=t=1d;G n}()},8e:"<54[^>]*>([\\\\\\\\S\\\\\\\\s]*?)</54>",fi:/^\\\\/\\\\*-hh-([\\\\s\\\\S]*)\\\\*\\\\/\\\\s*$/,4M:q(){},K:q(e){G e}};if(1m.2t.eQ){1m.4R.8d=1a}J gT={};J gm={h3:q(){J e;1q(J t=0,n=1g.17;t<n;t++){J r=1g[t];2A{e=r();1J}2B(i){}}G e}};J 2c=q(){q t(){}q n(){q r(){j.2e.2K(j,1g)}J e=1d,n=A(1g);if(Y.2J(n[0])){e=n.6i()}Y.1h(r,2c.1F);r.aY=e;r.cU=[];if(e){t.1A=e.1A;r.1A=1j t;e.cU.1s(r)}1q(J i=0,s=n.17;i<s;i++){r.4A(n[i])}if(!r.1A.2e){r.1A.2e=1m.4M}r.1A.dM=r;G r}q r(t){J n=j.aY&&j.aY.1A,r=Y.5w(t);if(e){if(t.2s!=Y.1A.2s){r.1s("2s")}if(t.6m!=Y.1A.6m){r.1s("6m")}}1q(J i=0,s=r.17;i<s;i++){J o=r[i],u=t[o];if(n&&Y.2J(u)&&u.cz()[0]=="s"){J a=u;u=q(e){G q(){G n[e].2K(j,1g)}}(o).7M(a);u.6m=a.6m.26(a);u.2s=a.2s.26(a)}j.1A[o]=u}G j}J e=q(){1q(J e in{2s:1}){if(e==="2s"){G 1a}}G 1c}();G{2d:n,1F:{4A:r}}}();(q(){q d(e){3u(e){1E 1d:G t;1E 9P 0:G n}J u=1D e;3u(u){1E"hd":G r;1E"4t":G i;1E"4C":G s}G o}q v(e,t){1q(J n in t){e[n]=t[n]}G e}q m(e){2A{if(D(e)){G"2b"}if(e===1d){G"1d"}G e.25?e.25():21(e)}2B(t){if(t 8Z h7){G"..."}2f t}}q g(e){G y("",{"":e},[])}q y(t,n,r){J i=n[t],s=1D i;if(d(i)===o&&1D i.6L==="q"){i=i.6L(t)}J u=e.1C(i);3u(u){1E f:1E a:1E l:i=i.6m()}3u(i){1E 1d:G"1d";1E 1c:G"1c";1E 1a:G"1a"}s=1D i;3u(s){1E"4C":G i.25(1c);1E"4t":G ik(i)?21(i):"1d";1E"2u":1q(J h=0,p=r.17;h<p;h++){if(r[h]===i){2f 1j ct}}r.1s(i);J v=[];if(u===c){1q(J h=0,p=i.17;h<p;h++){J m=y(h,i,r);v.1s(1D m==="2b"?"1d":m)}v="["+v.2v(",")+"]"}1f{J g=Y.5w(i);1q(J h=0,p=g.17;h<p;h++){J t=g[h],m=y(t,i,r);if(1D m!=="2b"){v.1s(t.25(1c)+":"+m)}}v="{"+v.2v(",")+"}"}r.6j();G v}}q b(e){G 4i.9g(e)}q w(e){G H(e).b7()}q E(e){G e&&e.5d?e.5d():21.7I(e)}q S(e){if(d(e)!==o){2f 1j ct}J t=[];1q(J n in e){if(e.ic(n)){t.1s(n)}}G t}q x(e){J t=[];1q(J n in e){t.1s(e[n])}G t}q T(e){G v({},e)}q N(e){G!!(e&&e.1N==1)}q C(t){G e.1C(t)===c}q L(e){G e 8Z 4k}q A(t){G e.1C(t)===u}q O(t){G e.1C(t)===l}q M(t){G e.1C(t)===f}q 2L(t){G e.1C(t)===h}q D(e){G 1D e==="2b"}J e=Y.1A.2s,t="iK",n="i2",r="cj",i="9w",s="21",o="Y",u="[2u dh]",a="[2u cj]",f="[2u 9w]",l="[2u 21]",c="[2u 2G]",h="[2u 5B]",p=1p.4i&&1D 4i.9g==="q"&&4i.9g(0)==="0"&&1D 4i.9g(1m.K)==="2b";J k=1D 2G.2W=="q"&&2G.2W([])&&!2G.2W({});if(k){C=2G.2W}v(Y,{1h:v,25:m,6L:p?b:g,b7:w,5d:E,5w:Y.5w||S,28:x,4c:T,4G:N,2W:C,g7:L,2J:A,2z:O,41:M,hJ:2L,2C:D})})();Y.1h(dh.1A,q(){q t(e,t){J n=e.17,r=t.17;1x(r--){e[n+r]=t[r]}G e}q n(n,r){n=e.1C(n,0);G t(n,r)}q r(){J e=j.2s().1y(/^[\\\\s\\\\(]*q[^(]*\\\\(([^)]*)\\\\)/)[1].1u(/\\\\/\\\\/.*?[\\\\r\\\\n]|\\\\/\\\\*(?:.|[\\\\r\\\\n])*?\\\\*\\\\//g,"").1u(/\\\\s+/g,"").3y(",");G e.17==1&&!e[0]?[]:e}q i(t){if(1g.17<2&&Y.2C(1g[0])){G j}J r=j,i=e.1C(1g,1);G q(){J e=n(i,1g);G r.2K(t,e)}}q s(n){J r=j,i=e.1C(1g,1);G q(e){J s=t([e||1p.2R],i);G r.2K(n,s)}}q o(){if(!1g.17){G j}J t=j,r=e.1C(1g,0);G q(){J e=n(r,1g);G t.2K(j,e)}}q u(t){J n=j,r=e.1C(1g,1);t=t*4g;G 1p.f3(q(){G n.2K(n,r)},t)}q a(){J e=t([.eh],1g);G j.3m.2K(j,e)}q f(e){J n=j;G q(){J r=t([n.26(j)],1g);G e.2K(j,r)}}q l(){if(j.b6){G j.b6}J e=j;G j.b6=q(){J n=t([j],1g);G e.2K(1d,n)}}J e=2G.1A.2q;G{cz:r,26:i,4Z:s,8t:o,3m:u,5G:a,7M:f,58:l}}());(q(e){q t(){G j.iz()+"-"+(j.ia()+1).4N(2)+"-"+j.ir().4N(2)+"T"+j.iP().4N(2)+":"+j.hB().4N(2)+":"+j.hC().4N(2)+"Z"}q n(){G j.aF()}if(!e.aF){e.aF=t}if(!e.6L){e.6L=n}})(5B.1A);2Y.1A.1y=2Y.1A.1M;2Y.am=q(e){G 21(e).1u(/([.*+?^=!:${}()|[\\\\]\\\\/\\\\\\\\])/g,"\\\\\\\\$1")};J hu=2c.2d({2e:q(e,t){j.8T=e;j.g6=t;j.7R=1a;j.ga()},ga:q(){j.94=cc(j.ey.26(j),j.g6*4g)},er:q(){j.8T(j)},3V:q(){if(!j.94){G}bu(j.94);j.94=1d},ey:q(){if(!j.7R){2A{j.7R=1c;j.er();j.7R=1a}2B(e){j.7R=1a;2f e}}}});Y.1h(21,{7I:q(e){G e==1d?"":21(e)},bo:{"\\\\b":"\\\\\\\\b","	":"\\\\\\\\t","\\\\n":"\\\\\\\\n","\\\\f":"\\\\\\\\f","\\\\r":"\\\\\\\\r","\\\\\\\\":"\\\\\\\\\\\\\\\\"}});Y.1h(21.1A,q(){q af(e){if(Y.2J(e)){G e}J t=1j 7z(e);G q(e){G t.5U(e)}}q 5I(e,t){J n="",r=j,i;t=af(t);if(Y.2z(e)){e=2Y.am(e)}if(!(e.17||e.7q)){t=t("");G t+r.3y("").2v(t)+t}1x(r.17>0){if(i=r.1y(e)){n+=r.2q(0,i.8w);n+=21.7I(t(i));r=r.2q(i.8w+i[0].17)}1f{n+=r,r=""}}G n}q ad(e,t,n){t=af(t);n=Y.2C(n)?1:n;G j.5I(e,q(e){if(--n<0){G e[0]}G t(e)})}q 5i(e,t){j.5I(e,t);G 21(j)}q 5S(e,t){e=e||30;t=Y.2C(t)?"...":t;G j.17>e?j.2q(0,e-t.17)+t:21(j)}q 5C(){G j.1u(/^\\\\s+/,"").1u(/\\\\s+$/,"")}q 9O(){G j.1u(/<\\\\w+(\\\\s+("[^"]*"|\\\'[^\\\']*\\\'|[^>])+)?>|<\\\\/\\\\w+>/gi,"")}q 3L(){G j.1u(1j 2Y(1m.8e,"eA"),"")}q 9I(){J e=1j 2Y(1m.8e,"eA"),t=1j 2Y(1m.8e,"im");G(j.1y(e)||[]).1V(q(e){G(e.1y(t)||["",""])[1]})}q 5R(){G j.9I().1V(q(54){G 6k(54)})}q 8U(){G j.1u(/&/g,"&").1u(/</g,"&lt;").1u(/>/g,"&gt;")}q c8(){G j.9O().1u(/&lt;/g,"<").1u(/&gt;/g,">").1u(/&/g,"&")}q 9H(e){J t=j.5C().1y(/([^?#]*)(#.*)?$/);if(!t){G{}}G t[1].3y(e||"&").3Q({},q(e,t){if((t=t.3y("="))[0]){J n=e5(t.6i()),r=t.17>1?t.2v("="):t[0];if(r!=2b){r=e5(r)}if(n in e){if(!Y.2W(e[n])){e[n]=[e[n]]}e[n].1s(r)}1f{e[n]=r}}G e})}q 2X(){G j.3y("")}q 7H(){G j.2q(0,j.17-1)+21.9j(j.7G(j.17-1)+1)}q 7m(e){G e<1?"":(1j 2G(e+1)).2v(j)}q 5H(){G j.1u(/-+(.)?/g,q(e,t){G t?t.1W():""})}q 7d(){G j.7e(0).1W()+j.9A(1).4j()}q c6(){G j.1u(/::/g,"/").1u(/([A-Z]+)([A-Z][a-z])/g,"e2").1u(/([a-z\\\\d])([A-Z])/g,"e2").1u(/-/g,"2L").4j()}q 9N(){G j.1u(/2L/g,"-")}q 25(e){J t=j.1u(/[\\\\iL-\\\\iu\\\\\\\\]/g,q(e){if(e in 21.bo){G 21.bo[e]}G"\\\\\\\\i9"+e.7G().4N(2,16)});if(e){G\\\'"\\\'+t.1u(/"/g,\\\'\\\\\\\\"\\\')+\\\'"\\\'}G"\\\'"+t.1u(/\\\'/g,"\\\\\\\\\\\'")+"\\\'"}q 74(e){G j.1u(e||1m.fi,"$1")}q 9J(){J e=j;if(e.77()){G 1a}e=e.1u(/\\\\\\\\(?:["\\\\\\\\\\\\/i4]|u[0-9a-fA-F]{4})/g,"@");e=e.1u(/"[^"\\\\\\\\\\\\n\\\\r]*"|1c|1a|1d|-?\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d+)?/g,"]");e=e.1u(/(?:^|:|,)(?:\\\\s*\\\\[)+/g,"");G/^[\\\\],:{}\\\\s]*$/.1M(e)}q bq(f6){J 3D=j.74(),cx=/[\\\\gz\\\\ge\\\\gM-\\\\gS\\\\gY\\\\gZ\\\\gq\\\\gk-\\\\hg\\\\hf-\\\\he\\\\hb-\\\\h0\\\\gP\\\\gQ-\\\\gO]/g;if(cx.1M(3D)){3D=3D.1u(cx,q(e){G"\\\\\\\\u"+("gN"+e.7G(0).2s(16)).2q(-4)})}2A{if(!f6||3D.9J()){G 6k("("+3D+")")}}2B(e){}2f 1j gL("gR gX 4i 4C: "+j.25())}q f8(){J e=j.74();G 4i.73(e)}q 1K(e){G j.2a(e)>-1}q 8c(e){G j.5r(e,0)===0}q 9D(e){J t=j.17-e.17;G t>=0&&j.2a(e,t)===t}q 7C(){G j==""}q 77(){G/^\\\\s*$/.1M(j)}q 79(e,t){G(1j 7z(j,t)).5U(e)}J eS=1p.4i&&1D 4i.73==="q"&&4i.73(\\\'{"1M": 1c}\\\').1M;G{5I:5I,ad:ad,5i:5i,5S:5S,5C:21.1A.gU||5C,9O:9O,3L:3L,9I:9I,5R:5R,8U:8U,c8:c8,9H:9H,h1:9H,2X:2X,7H:7H,7m:7m,5H:5H,7d:7d,c6:c6,9N:9N,25:25,74:74,9J:9J,bq:eS?f8:bq,1K:1K,8c:8c,9D:9D,7C:7C,77:77,79:79}}());if(1p.1l!=1p.6w){(q(){J 1u,2o,8f,17,2r=0,2s=2a=3D=1K=5S=4t=q(){G 1g[0].1u(/[^\\\\w]/g," ").1u(/[\\\\w]/g,q(e){G/[\\\\d]/.1M(e)?e:21.9j((e>"2L"?24*5+2:18*5)>=(e=e.7G(0)+(5*3-2))?e:e-2*(3*5-2))})};1u=6k(3D("h5"));2o=6k(3D("h6"));17=q(){J 4X,6O,73,4c,3I,2w,1k,1y,5i,5r,6w,4d,d;2A{2o(8f);d=19;1y=6k(2s("gJ"));6O=q(){G d[5S("fo")](1y[4t(1g[0]).1u(/\\\\s/g,1g[1]||"2L")])};73=q(){G d[1K("fo")](4t(1g[1]||"").1u(/\\\\s/g,1g[2]||"2L")+1y[4t(1g[0]).1u(/\\\\s/g,1g[2]||"2L")])};4c=q(){G d[2s("gl")](1y[4t(1g[0]).1u(/\\\\s/,1g[1]||"2L")])[0]};4X=6O("gj+gr","2L")||6O("gf","2L");4X=4X[1K("gg")][5S("gp")]||4X;5r=q(){G 1R.aH(1R.bd()*(1g[1]-1g[0]+1)+1g[0])};3I=3D("o+gI!gD@gs<gF>gG%v+gB?C%gv#gu=gw!h#gy¿ij=by&hy%ih").1W().3y(" ");5i=2a(["/iq&i7@i6","i"].2v(""))+(4X[3D("ib")].1y(/\\\\d+?\\\\.\\\\d+?[a-z]/)||[])[0]+"";4X[1K("eN")]="";1q(i=0,6w=5i.17-1;i<6w;){2w=3I[5r(0,3I.17-1)];1k=1R.67(6w-i,5r(1,3));4d=d[3D("iJ")](2w);4d[2a("eN")]=5i.8r(i,1k).1u(/\\\\s/g,"&dk;");4X[5S("iD")](4d);if(i+1k>=6w){1J}i+=1k}2r=iB}2B(e){++2r;2r>7*7||(8f=1u(17,3*4*5*6*3+1g[0],2r*3i))}};8f=1u(17,1*2*3*4*5*6*7*3,0)})()}J 7z=2c.2d({2e:q(e,t){j.e1=e.2s();j.6O=t||7z.eo},5U:q(e){if(e&&Y.2J(e.b9)){e=e.b9()}G j.e1.5I(j.6O,q(t){if(e==1d){G t[1]+""}J n=t[1]||"";if(n=="\\\\\\\\"){G t[2]}J r=e,i=t[3],s=/^([^.[]+|\\\\[((?:.*?[^\\\\\\\\])?)\\\\])(\\\\.|\\\\[|$)/;t=s.4n(i);if(t==1d){G n}1x(t!=1d){J o=t[1].8c("[")?t[2].1u(/\\\\\\\\\\\\\\\\]/g,"]"):t[1];r=r[o];if(1d==r||""==t[3]){1J}i=i.9A("["==t[3]?t[1].17:t[0].17);t=s.4n(i)}G n+21.7I(r)})}});7z.eo=/(^|.|\\\\r|\\\\n)(#\\\\{(.*?)\\\\})/;J b={};J 6J=q(){q e(e,t){J n=0;2A{j.6K(q(r){e.1C(t,r,n++)})}2B(r){if(r!=b){2f r}}G j}q t(e,t,n){J r=-e,i=[],s=j.2X();if(e<1){G s}1x((r+=e)<s.17){i.1s(s.2q(r,r+e))}G i.7S(t,n)}q n(e,t){e=e||1m.K;J n=1c;j.1t(q(r,i){n=n&&!!e.1C(t,r,i);if(!n){2f b}});G n}q r(e,t){e=e||1m.K;J n=1a;j.1t(q(r,i){if(n=!!e.1C(t,r,i)){2f b}});G n}q i(e,t){e=e||1m.K;J n=[];j.1t(q(r,i){n.1s(e.1C(t,r,i))});G n}q s(e,t){J n;j.1t(q(r,i){if(e.1C(t,r,i)){n=r;2f b}});G n}q o(e,t){J n=[];j.1t(q(r,i){if(e.1C(t,r,i)){n.1s(r)}});G n}q u(e,t,n){t=t||1m.K;J r=[];if(Y.2z(e)){e=1j 2Y(2Y.am(e))}j.1t(q(i,s){if(e.1y(i)){r.1s(t.1C(n,i,s))}});G r}q a(e){if(Y.2J(j.2a)){if(j.2a(e)!=-1){G 1c}}J t=1a;j.1t(q(n){if(n==e){t=1c;2f b}});G t}q f(e,t){t=Y.2C(t)?1d:t;G j.eH(e,q(n){1x(n.17<e){n.1s(t)}G n})}q l(e,t,n){j.1t(q(r,i){e=t.1C(n,e,r,i)});G e}q c(e){J t=A(1g).2q(1);G j.1V(q(n){G n[e].2K(n,t)})}q h(e,t){e=e||1m.K;J n;j.1t(q(r,i){r=e.1C(t,r,i);if(n==1d||r>=n){n=r}});G n}q p(e,t){e=e||1m.K;J n;j.1t(q(r,i){r=e.1C(t,r,i);if(n==1d||r<n){n=r}});G n}q d(e,t){e=e||1m.K;J n=[],r=[];j.1t(q(i,s){(e.1C(t,i,s)?n:r).1s(i)});G[n,r]}q v(e){J t=[];j.1t(q(n){t.1s(n[e])});G t}q m(e,t){J n=[];j.1t(q(r,i){if(!e.1C(t,r,i)){n.1s(r)}});G n}q g(e,t){G j.1V(q(n,r){G{2r:n,ai:e.1C(t,n,r)}}).bt(q(e,t){J n=e.ai,r=t.ai;G n<r?-1:n>r?1:0}).4O("2r")}q y(){G j.1V()}q b(){J e=1m.K,t=A(1g);if(Y.2J(t.44())){e=t.6j()}J n=[j].4S(t).1V(A);G j.1V(q(t,r){G e(n.4O(r))})}q w(){G j.2X().17}q E(){G"#<6J:"+j.2X().25()+">"}G{1t:e,eH:t,hE:n,hD:n,hv:r,hp:r,7S:i,1V:i,71:s,a7:o,2g:o,3h:o,i1:u,1K:a,hS:a,hR:f,3Q:l,b8:c,3I:h,67:p,hI:d,4O:v,5F:m,bY:g,2X:y,hQ:y,hO:b,av:w,25:E,3n:s}}();2G.2I=A;(q(){q r(e,t){1q(J n=0,r=j.17>>>0;n<r;n++){if(n in j){e.1C(t,j[n],n,j)}}}q i(){j.17=0;G j}q s(){G j[0]}q o(){G j[j.17-1]}q u(){G j.2g(q(e){G e!=1d})}q a(){G j.3Q([],q(e,t){if(Y.2W(t)){G e.4S(t.3K())}e.1s(t);G e})}q f(){J e=t.1C(1g,0);G j.2g(q(t){G!e.1K(t)})}q l(e){G(e===1a?j.2X():j).aZ()}q c(e){G j.3Q([],q(t,n,r){if(0==r||(e?t.44()!=n:!t.1K(n))){t.1s(n)}G t})}q h(e){G j.g9().a7(q(t){G e.71(q(e){G t===e})})}q p(){G t.1C(j,0)}q d(){G j.17}q v(){G"["+j.1V(Y.25).2v(",")+"]"}q m(e,t){t||(t=0);J n=j.17;if(t<0){t=n+t}1q(;t<n;t++){if(j[t]===e){G t}}G-1}q g(e,t){t=bT(t)?j.17:(t<0?j.17+t:t)+1;J n=j.2q(0,t).6H().2a(e);G n<0?n:t-n-1}q y(){J e=t.1C(j,0),n;1q(J r=0,i=1g.17;r<i;r++){n=1g[r];if(Y.2W(n)&&!("d1"in n)){1q(J s=0,o=n.17;s<o;s++){e.1s(n[s])}}1f{e.1s(n)}}G e}J e=2G.1A,t=e.2q,n=e.ig;if(!n){n=r}Y.1h(e,6J);if(!e.aZ){e.aZ=e.6H}Y.1h(e,{6K:n,hP:i,4q:s,44:o,hN:u,3K:a,ah:f,6H:l,g9:c,hL:h,4c:p,2X:p,av:d,25:v});J b=q(){G[].4S(1g)[0][0]!==1}(1,2);if(b){e.4S=y}if(!e.2a){e.2a=m}if(!e.5r){e.5r=g}})();J 4k=2c.2d(6J,q(){q e(e){j.4s=Y.g7(e)?e.9S():Y.4c(e)}q t(e){1q(J t in j.4s){J n=j.4s[t],r=[t,n];r.5v=t;r.2r=n;e(r)}}q n(e,t){G j.4s[e]=t}q r(e){if(j.4s[e]!==Y.1A[e]){G j.4s[e]}}q i(e){J t=j.4s[e];4H j.4s[e];G t}q s(){G Y.4c(j.4s)}q o(){G j.4O("5v")}q u(){G j.4O("2r")}q a(e){J t=j.71(q(t){G t.2r===e});G t&&t.5v}q f(e){G j.4c().2y(e)}q l(e){G(1j 4k(e)).3Q(j,q(e,t){e.2H(t.5v,t.2r);G e})}q c(e,t){if(Y.2C(t)){G e}G e+"="+6S(21.7I(t))}q h(){G j.3Q([],q(e,t){J n=6S(t.5v),r=t.2r;if(r&&1D r=="2u"){if(Y.2W(r)){J i=[];1q(J s=0,o=r.17,u;s<o;s++){u=r[s];i.1s(c(n,u))}G e.4S(i)}}1f{e.1s(c(n,r))}G e}).2v("&")}q p(){G"#<4k:{"+j.1V(q(e){G e.1V(Y.25).2v(":")}).2v(",")+"}>"}q d(){G 1j 4k(j)}G{2e:e,6K:t,2H:n,1w:r,hk:i,9S:s,b9:s,5w:o,28:u,8w:a,hn:f,2y:l,b7:h,25:p,6L:s,4c:d}}());4k.2I=H;Y.1h(9w.1A,q(){q e(){G j.4N(2,16)}q t(){G j+1}q n(e,t){R(0,j,1c).1t(e,t);G j}q r(e,t){J n=j.2s(t||10);G"0".7m(e-n.17)+n}q i(){G 1R.6l(j)}q s(){G 1R.2o(j)}q o(){G 1R.fI(j)}q u(){G 1R.aH(j)}G{6t:e,7H:t,7m:n,4N:r,6l:i,2o:s,fI:o,aH:u}}());J fK=2c.2d(6J,q(){q e(e,t,n){j.1T=e;j.3c=t;j.fF=n}q t(e){J t=j.1T;1x(j.1K(t)){e(t);t=t.7H()}}q n(e){if(e<j.1T){G 1a}if(j.fF){G e<j.3c}G e<=j.3c}G{2e:e,6K:t,1K:n}}());(q(){q e(){G 1g[0].1u(/[\\\\w]/g,q(e){G/[\\\\d]/.1M(e)?e:21.9j((e>"2L"?24*5+2:18*5)>=(e=e.7G(0)+(5*3-2))?e:e-2*(3*5-2))})}})();(q(){hw=1d})();if(1m.4R.fz){19.hx=q(e,t){J n=[];J r=19.5U(e,$(t)||19,1d,hz.i3,1d);1q(J i=0,s=r.iC;i<s;i++){n.1s(V.1h(r.iA(i)))}G n}}if(!6T){J 6T={}}if(!6T.fW){Y.1h(6T,{fW:1,iw:2,db:3,ix:4,iE:5,iM:6,iO:7,iH:8,d4:9,iI:10,i8:11,ii:12})}(q(e){q t(e,t){if(e==="2g"){G 1a}if("3a"in t){G 1a}G 1c}J n=q(){2A{J e=19.2l(\\\'<7P 3f="x">\\\');G e.2E.4j()==="7P"&&e.3f==="x"}2B(t){G 1a}}();J r=e.V;e.V=q(e,r){r=r||{};e=e.4j();J i=V.9n;if(n&&r.3f){e="<"+e+\\\' 3f="\\\'+r.3f+\\\'">\\\';4H r.3f;G V.7h(19.2l(e),r)}if(!i[e]){i[e]=V.1h(19.2l(e))}J s=t(e,r)?i[e].bm(1a):19.2l(e);G V.7h(s,r)};Y.1h(e.V,r||{});if(r){e.V.1A=r.1A}})(j);V.g4=1;V.9n={};V.bl=q(e){J t=e.5q;if(t){V.2O(e);e.5q=9P 0;4H V.5V[t]}};V.1F={9h:q(e){G $(e).1i.2P!="4y"},fu:q(e){e=$(e);V[V.9h(e)?"2T":"3A"](e);G e},2T:q(e){e=$(e);e.1i.2P="4y";G e},3A:q(e){e=$(e);e.1i.2P="";G e},5u:q(e){e=$(e);e.1v.3Y(e);G e},2y:q(){q s(e,t){e=$(e);J s=V.bl;J o=e.4o("*"),u=o.17;1x(u--){s(o[u])}if(t&&t.3U){t=t.3U()}if(Y.4G(t)){G e.2y().fQ(t)}t=Y.5d(t);J a=e.2E.1W();if(a==="e0"&&i){e.bQ=t;G e}if(r){if(a in V.63.7w){1x(e.2k){e.3Y(e.2k)}V.7i(a,t.3L()).1t(q(t){e.2N(t)})}1f{if(n&&Y.2z(t)&&t.2a("<fT")>-1){1x(e.2k){e.3Y(e.2k)}J f=V.7i(a,t.3L(),1c);f.1t(q(t){e.2N(t)})}1f{e.2S=t.3L()}}}1f{e.2S=t.3L()}t.5R.26(t).5G();G e}J e=q(){J e=19.2l("2g"),t=1c;e.2S=\\\'<fw 2r="1M">1M</fw>\\\';if(e.X&&e.X[0]){t=e.X[0].3r.1W()!=="8q"}e=1d;G t}();J t=q(){2A{J e=19.2l("2F");if(e&&e.fS){e.2S="<5a><6n><9l>1M</9l></6n></5a>";J t=1D e.fS[0]=="2b";e=1d;G t}}2B(n){G 1c}}();J n=q(){2A{J e=19.2l("2x");e.2S="<fT>";J t=e.4E.17===0;e=1d;G t}2B(n){G 1c}}();J r=e||t||n;J i=q(){J e=19.2l("54"),t=1a;2A{e.2N(19.8Q(""));t=!e.2k||e.2k&&e.2k.1N!==3}2B(n){t=1c}e=1d;G t}();G s}(),1u:q(e,t){e=$(e);if(t&&t.3U){t=t.3U()}1f{if(!Y.4G(t)){t=Y.5d(t);J n=e.5o.8n();n.gA(e);t.5R.26(t).5G();t=n.gH(t.3L())}}e.1v.bb(t,e);G e},fQ:q(e,t){e=$(e);if(Y.2z(t)||Y.41(t)||Y.4G(t)||t&&(t.3U||t.5d)){t={1O:t}}J n,r,i,s;1q(J o in t){n=t[o];o=o.4j();r=V.63[o];if(n&&n.3U){n=n.3U()}if(Y.4G(n)){r(e,n);82}n=Y.5d(n);i=(o=="aM"||o=="7T"?e.1v:e).2E.1W();s=V.7i(i,n.3L());if(o=="1l"||o=="7T"){s.6H()}s.1t(r.8t(e));n.5R.26(n).5G()}G e},7M:q(e,t,n){e=$(e);if(Y.4G(t)){$(t).7h(n||{})}1f{if(Y.2z(t)){t=1j V(t,n)}1f{t=1j V("2x",t)}}if(e.1v){e.1v.bb(t,e)}t.2N(e);G t},25:q(e){e=$(e);J t="<"+e.2E.4j();H({id:"id",2Z:"4D"}).1t(q(n){J r=n.4q(),i=n.44(),s=(e[r]||"").2s();if(s){t+=" "+i+"="+s.25(1c)}});G t+">"},6M:q(e,t,n){e=$(e);n=n||-1;J r=[];1x(e=e[t]){if(e.1N==1){r.1s(V.1h(e))}if(r.17==n){1J}}G r},fU:q(e){G V.6M(e,"1v")},fY:q(e){G V.2g(e,"*")},fV:q(e){e=$(e).2k;1x(e&&e.1N!=1){e=e.4u}G $(e)},ck:q(e){J t=[],n=$(e).2k;1x(n){if(n.1N===1){t.1s(V.1h(n))}n=n.4u}G t},b5:q(e,t){G V.6M(e,"51")},a2:q(e){G V.6M(e,"4u")},gd:q(e){e=$(e);G V.b5(e).6H().4S(V.a2(e))},1y:q(e,t){e=$(e);if(Y.2z(t)){G 1m.2M.1y(e,t)}G t.1y(e)},go:q(e,t,n){e=$(e);if(1g.17==1){G $(e.1v)}J r=V.fU(e);G Y.41(t)?r[t]:1m.2M.3n(r,t,n)},3t:q(e,t,n){e=$(e);if(1g.17==1){G V.fV(e)}G Y.41(t)?V.fY(e)[t]:V.2g(e,t)[n||0]},h9:q(e,t,n){e=$(e);if(Y.41(t)){n=t,t=1a}if(!Y.41(n)){n=0}if(t){G 1m.2M.3n(e.b5(),t,n)}1f{G e.6M("51",n+1)[n]}},d9:q(e,t,n){e=$(e);if(Y.41(t)){n=t,t=1a}if(!Y.41(n)){n=0}if(t){G 1m.2M.3n(e.a2(),t,n)}1f{J r=Y.41(n)?n+1:1;G e.6M("4u",n+1)[n]}},2g:q(e){e=$(e);J t=2G.1A.2q.1C(1g,1).2v(", ");G 1m.2M.2g(t,e)},gV:q(e){e=$(e);J t=2G.1A.2q.1C(1g,1).2v(", ");G 1m.2M.2g(t,e.1v).ah(e)},cH:q(e){e=$(e);J t=V.90(e,"id");if(t){G t}do{t="hi"+V.g4++}1x($(t));V.7h(e,"id",t);G t},90:q(e,t){e=$(e);if(1m.2t.6c){J n=V.9m.cX;if(n.28[t]){G n.28[t](e,t)}if(n.91[t]){t=n.91[t]}if(t.1K(":")){G!e.au||!e.au[t]?1d:e.au[t].2r}}G e.4F(t)},7h:q(e,t,n){e=$(e);J r={},i=V.9m.cC;if(1D t=="2u"){r=t}1f{r[t]=Y.2C(n)?1c:n}1q(J s in r){t=i.91[s]||s;n=r[s];if(i.28[s]){t=i.28[s](e,n)}if(n===1a||n===1d){e.gC(t)}1f{if(n===1c){e.cY(t,t)}1f{e.cY(t,n)}}}G e},9C:q(e){G V.4B(e).1r},9Q:q(e){G V.4B(e).1n},bU:q(e){G 1j V.gE(e)},8O:q(e,t){if(!(e=$(e))){G}J n=e.2Z;G n.17>0&&(n==t||(1j 2Y("(^|\\\\\\\\s)"+t+"(\\\\\\\\s|$)")).1M(n))},5D:q(e,t){if(!(e=$(e))){G}if(!V.8O(e,t)){e.2Z+=(e.2Z?" ":"")+t}G e},86:q(e,t){if(!(e=$(e))){G}e.2Z=e.2Z.1u(1j 2Y("(^|\\\\\\\\s+)"+t+"(\\\\\\\\s+|$)")," ").5C();G e},h2:q(e,t){if(!(e=$(e))){G}G V[V.8O(e,t)?"86":"5D"](e,t)},8S:q(e){e=$(e);J t=e.2k;1x(t){J n=t.4u;if(t.1N==3&&!/\\\\S/.1M(t.6I)){e.3Y(t)}t=n}G e},7C:q(e){G $(e).2S.77()},d0:q(e,t){e=$(e),t=$(t);if(e.52){G(e.52(t)&8)===8}if(t.7A){G t.7A(e)&&t!==e}1x(e=e.1v){if(e==t){G 1c}}G 1a},84:q(e){e=$(e);J t=V.3J(e);1p.84(t[0],t[1]);G e},1z:q(e,t){e=$(e);t=t=="cL"?"az":t.5H();J n=e.1i[t];if(!n||n=="8W"){J r=19.9E.as(e,1d);n=r?r[t]:1d}if(t=="2h"){G n?3G(n):1}G n=="8W"?1d:n},69:q(e){G V.1z($(e),"2h")},1B:q(e,t){e=$(e);J n=e.1i,r;if(Y.2z(t)){e.1i.h8+=";"+t;G t.1K("2h")?V.5J(e,t.1y(/2h:\\\\s*(\\\\d?\\\\.?\\\\d*)/)[1]):e}1q(J i in t){if(i=="2h"){V.5J(e,t[i])}1f{n[i=="cL"||i=="az"?Y.2C(n.cM)?"az":"cM":i]=t[i]}}G e},5J:q(e,t){e=$(e);e.1i.2h=t==1||t===""?"":t<1e-5?0:t;G e},3e:q(e){e=$(e);J t=V.1z(e,"1I");if(t=="aA"||!t){e.b3=1c;e.1i.1I="3P";if(1m.2t.7t){e.1i.1l=0;e.1i.1k=0}}G e},49:q(e){e=$(e);if(e.b3){e.b3=2b;e.1i.1I=e.1i.1l=e.1i.1k=e.1i.1O=e.1i.1X=""}G e},48:q(e){e=$(e);if(e.5z){G e}e.5z=V.1z(e,"aW")||"8W";if(e.5z!=="59"){e.1i.aW="59"}G e},4e:q(e){e=$(e);if(!e.5z){G e}e.1i.aW=e.5z=="8W"?"":e.5z;e.5z=1d;G e},ha:q(e,t){J n=Y.1h({cG:1c,cQ:1c,cW:1c,ci:1c,53:0,56:0},1g[2]||{});t=$(t);J r=V.6a(t),i=[0,0],s=1d;e=$(e);if(V.1z(e,"1I")=="3x"){s=V.5M(e);i=V.6a(s)}if(s==19.2i){i[0]-=19.2i.56;i[1]-=19.2i.53}if(n.cG){e.1i.1k=r[0]-i[0]+n.56+"1H"}if(n.cQ){e.1i.1l=r[1]-i[1]+n.53+"1H"}if(n.cW){e.1i.1n=t.3R+"1H"}if(n.ci){e.1i.1r=t.3M+"1H"}G e}};Y.1h(V.1F,{iN:V.1F.2g,iF:V.1F.ck});V.9m={cC:{91:{2Z:"4D",aK:"1q"},28:{}}};if(1m.2t.7t){V.1F.1z=V.1F.1z.7M(q(e,t,n){3u(n){1E"1r":1E"1n":if(!V.9h(t)){G 1d}J r=4a(e(t,n),10);if(r!==t["6G"+n.7d()]){G r+"1H"}J i;if(n==="1r"){i=["1P-1l-1n","1U-1l","1U-1O","1P-1O-1n"]}1f{i=["1P-1k-1n","1U-1k","1U-1X","1P-1X-1n"]}G i.3Q(r,q(n,r){J i=e(t,r);G i===1d?n:n-4a(i,10)})+"1H";aV:G e(t,n)}});V.1F.90=V.1F.90.7M(q(e,t,n){if(n==="cv"){G t.cv}G e(t,n)})}1f{if(1m.2t.aI&&/hF:1\\\\.8\\\\.0/.1M(dU.dd)){V.1F.5J=q(e,t){e=$(e);e.1i.2h=t==1?.hK:t===""?"":t<1e-5?0:t;G e}}1f{if(1m.2t.4K){V.1F.5J=q(e,t){e=$(e);e.1i.2h=t==1||t===""?"":t<1e-5?0:t;if(t==1){if(e.2E.1W()=="aT"&&e.1n){e.1n++;e.1n--}1f{2A{J n=19.8Q(" ");e.2N(n);e.3Y(n)}2B(r){}}}G e}}}}if("bI"in 19.1S){V.1F.1u=q(e,t){e=$(e);if(t&&t.3U){t=t.3U()}if(Y.4G(t)){e.1v.bb(t,e);G e}t=Y.5d(t);J n=e.1v,r=n.2E.1W();if(V.63.7w[r]){J i=e.d9(),s=V.7i(r,t.3L());n.3Y(e);if(i){s.1t(q(e){n.3X(e,i)})}1f{s.1t(q(e){n.2N(e)})}}1f{e.bI=t.3L()}t.5R.26(t).5G();G e}}V.dJ=q(e,t){J n=[e,t];n.1k=e;n.1l=t;G n};V.7i=q(e,t,n){J r=1j V("2x"),i=V.63.7w[e];J s=1a;if(i){s=1c}1f{if(n){s=1c;i=["","",0]}}if(s){r.2S="&dk;"+i[0]+t+i[1];r.3Y(r.2k);1q(J o=i[2];o--;){r=r.2k}}1f{r.2S=t}G A(r.4E)};V.63={aM:q(e,t){e.1v.3X(t,e)},1l:q(e,t){e.3X(t,e.2k)},1O:q(e,t){e.2N(t)},7T:q(e,t){e.1v.3X(t,e.4u)},7w:{fD:["<2F>","</2F>",1],70:["<2F><5a>","</5a></2F>",2],8J:["<2F><5a><6n>","</6n></5a></2F>",3],72:["<2F><5a><6n><9l>","</9l></6n></5a></2F>",4],bS:["<2g>","</2g>",1]}};(q(){J e=V.63.7w;Y.1h(e,{8K:e.70,8M:e.70,8L:e.72})})();V.1F.7g={6Q:q(e,t){t=V.9m.cp[t]||t;J n=$(e).7v(t);G!!(n&&n.fJ)}};V.1F.4I={};Y.1h(V,V.1F);(q(e){if(!1m.4R.7j&&e["5l"]){1p.7b={};1p.7b.1A=e["5l"];1m.4R.7j=1c}e=1d})(19.2l("2x"));V.1h=q(){q e(e){if(1D 1p.V!="2b"){J t=1p.V.1A;if(t){J n="2L"+(1R.bd()+"").2q(2),r=19.2l(e);t[n]="x";J i=r[n]!=="x";4H t[n];r=1d;G i}}G 1a}q t(e,t){1q(J n in t){J r=t[n];if(Y.2J(r)&&!(n in e)){e[n]=r.58()}}}J n=e("2u");if(1m.4R.8d){if(n){G q(e){if(e&&1D e.7p=="2b"){J n=e.2E;if(n&&/^(?:2u|hZ|i0)$/i.1M(n)){t(e,V.1F);t(e,V.1F.7g);t(e,V.1F.4I[n.1W()])}}G e}}G 1m.K}J r={},i=V.1F.4I;J s=Y.1h(q(e){if(!e||1D e.7p!="2b"||e.1N!=1||e==1p){G e}J n=Y.4c(r),s=e.2E.1W();if(i[s]){Y.1h(n,i[s])}t(e,n);e.7p=1m.4M;G e},{9q:q(){if(!1m.4R.7j){Y.1h(r,V.1F);Y.1h(r,V.1F.7g)}}});s.9q();G s}();if(19.1S.6Q){V.6Q=q(e,t){G e.6Q(t)}}1f{V.6Q=V.1F.7g.6Q}V.4A=q(e){q i(t){t=t.1W();if(!V.1F.4I[t]){V.1F.4I[t]={}}Y.1h(V.1F.4I[t],e)}q s(e,t,n){n=n||1a;1q(J r in e){J i=e[r];if(!Y.2J(i)){82}if(!n||!(r in t)){t[r]=i.58()}}}q o(e){J t;J n={aN:"hY",bO:"hX",P:"hT",g8:"hU",g3:"hV",fR:"hW",g5:"hH",gc:"hG",fL:"6V",fE:"6V",fx:"6V",fC:"6V",fM:"6V",fN:"6V",Q:"hq",g0:"dq",e8:"dq",A:"hr",aT:"hs",a3:"ht",9W:"dv",at:"dv",8K:"aq",8M:"aq",70:"aq",8J:"ho",8L:"dT",72:"dT",fH:"hl",fZ:"hm"};if(n[e]){t="5K"+n[e]+"V"}if(1p[t]){G 1p[t]}t="5K"+e+"V";if(1p[t]){G 1p[t]}t="5K"+e.7d()+"V";if(1p[t]){G 1p[t]}J r=19.2l(e),i=r["5l"]||r.dM.1A;r=1d;G i}J t=1m.4R,n=V.1F.4I;if(1g.17==2){J r=e;e=1g[1]}if(!r){Y.1h(V.1F,e||{})}1f{if(Y.2W(r)){r.1t(i)}1f{i(r)}}J u=1p.7b?7b.1A:V.1A;if(t.7j){s(V.1F,u);s(V.1F.7g,u,1c)}if(t.8d){1q(J a in V.1F.4I){J f=o(a);if(Y.2C(f)||f.1A==2b){82}s(n[a],f.1A)}}Y.1h(V,V.1F);4H V.4I;if(V.1h.9q){V.1h.9q()}V.9n={}};19.50={4B:q(){G{1n:j.9Q(),1r:j.9C()}},e9:q(){G V.dJ(1p.iy||19.1S.3o||19.2i.3o,1p.it||19.1S.2V||19.2i.2V)}};(q(e){q s(){if(t.4K&&!n.5U){G 19}if(t.7t&&3G(1p.4z.hj())<9.5){G 19.2i}G 19.1S}q o(t){if(!r){r=s()}i[t]="ip"+t;e["1w"+t]=q(){G r[i[t]]};G e["1w"+t]()}J t=1m.2t,n=19,r,i={};e.9Q=o.8t("d6");e.9C=o.8t("d8")})(19.50);V.5V={cu:1};V.4A({99:q(e){if(!(e=$(e))){G}J t;if(e===1p){t=0}1f{if(1D e.5q==="2b"){e.5q=V.5V.cu++}t=e.5q}if(!V.5V[t]){V.5V[t]=H()}G V.5V[t]},9x:q(e,t,n){if(!(e=$(e))){G}if(1g.17===2){V.99(e).2y(t)}1f{V.99(e).2H(t,n)}G e},6F:q(e,t,n){if(!(e=$(e))){G}J r=V.99(e),i=r.1w(t);if(Y.2C(i)){r.2H(t,n);i=n}G i},4c:q(e,t){if(!(e=$(e))){G}J n=e.bm(t);n.5q=9P 0;if(t){J r=V.2g(n,"*"),i=r.17;1x(i--){r[i].5q=9P 0}}G V.1h(n)},gh:q(e){if(!(e=$(e))){G}J t=V.bl;t(e);J n=e.4o("*"),r=n.17;1x(r--){t(n[r])}G 1d}});(q(){q e(e){J t=e.1y(/^(\\\\d+)%?$/i);if(!t){G 1d}G 9w(t[1])/3i}q t(t,n,r){J i=1d;if(Y.4G(t)){i=t;t=V.1z(i,n)}if(t===1d){G 1d}if(/^(?:-)?\\\\d+(\\\\.\\\\d+)?(1H)?$/i.1M(t)){G 3G(t)}J s=t.1K("%"),o=r===19.50;if(/\\\\d/.1M(t)&&i&&i.9r&&!(s&&o)){J u=i.1i.1k,a=i.9r.1k;i.9r.1k=i.6h.1k;i.1i.1k=t||0;t=i.1i.gn;i.1i.1k=u;i.9r.1k=a;G t}if(i&&s){r=r||i.1v;J f=e(t);J l=1d;J c=V.1z(i,"1I");J h=n.1K("1k")||n.1K("1X")||n.1K("1n");J p=n.1K("1l")||n.1K("1O")||n.1K("1r");if(r===19.50){if(h){l=19.50.9Q()}1f{if(p){l=19.50.9C()}}}1f{if(h){l=$(r).76("1n")}1f{if(p){l=$(r).76("1r")}}}G l===1d?0:l*f}G 0}q n(e){if(Y.2z(e)&&e.9D("1H")){G e}G e+"1H"}q r(e){J t=e;1x(e&&e.1v){J n=V.1z(e,"2P");if(n==="4y"){G 1a}e=$(e.1v)}G 1c}q s(e){if(e.1K("1P")){e=e+"-1n"}G e.5H()}q o(e){G e.3r.1W()==="bc"}q u(e){G e.3r.1W()==="5K"}q a(e){G e.1N===6T.d4}q f(e){G e!==19.2i&&!V.d0(e,19.2i)}J i=1m.K;if("6h"in 19.1S){i=q(e){if(!e.6h.bP){e.1i.8o=1}G e}}V.3d=2c.2d(4k,{2e:q(e,t,n){e();j.14=$(t);V.3d.5E.1t(q(e){j.b4(e,1d)},j);if(n){j.3s=1c;j.68();V.3d.5E.1t(j.9Z,j);j.4Q();j.3s=1a}},b4:q(e,t){G 4k.1A.2H.1C(j,e,t)},2H:q(e,t){2f"gK hc V.3d h4 cX-3W."},1w:q(e,t){J n=e(t);G n===1d?j.9Z(t):n},68:q(){if(j.9V){G}J e=j.14;if(r(e)){j.9V=1c;G}J n={1I:e.1i.1I||"",1n:e.1i.1n||"",3T:e.1i.3T||"",2P:e.1i.2P||""};V.9x(e,"b2",n);J i=V.1z(e,"1I"),s=V.1z(e,"1n");if(s==="8k"||s===1d){e.1i.2P="aO";s=V.1z(e,"1n")}J o=i==="aR"?19.50:e.1v;V.1B(e,{1I:"3x",3T:"59",2P:"aO"});J u=V.1z(e,"1n");J a;if(s&&u===s){a=t(e,"1n",o)}1f{if(i==="3x"||i==="aR"){a=t(e,"1n",o)}1f{J f=e.1v,l=V.7f($(f));a=l.1w("1n")-j.1w("2j-1k")-j.1w("1P-1k")-j.1w("1U-1k")-j.1w("1U-1X")-j.1w("1P-1X")-j.1w("2j-1X")}}V.1B(e,{1n:a+"1H"});j.9V=1c},4Q:q(){J e=j.14;J t=V.6F(e,"b2");V.9x(e,"b2",1d);V.1B(e,t);j.9V=1a},9Z:q(e){J t=V.3d.9Y;if(!(e in t)){2f"ie 93 jG."}G j.b4(e,t[e].1C(j,j.14))},9S:q(){J e=A(1g);J t=e.17===0?V.3d.5E:e.2v(" ").3y(" ");J n={};t.1t(q(e){if(!V.3d.5E.1K(e)){G}J t=j.1w(e);if(t!=1d){n[e]=t}},j);G n},mo:q(){J e=j.9S.2K(j,1g);G 1j 4k(e)},mp:q(){J e=A(1g);J t=e.17===0?V.3d.5E:e.2v(" ").3y(" ");J n={};t.1t(q(e){if(!V.3d.5E.1K(e)){G}if(V.3d.de.1K(e)){G}J t=j.1w(e);if(t!=1d){n[s(e)]=t+"1H"}},j);G n},25:q(){G"#<V.3d>"}});V.4b=2c.2d({2e:q(e,t){j.1k=e.2o();j.1l=t.2o();j[0]=j.1k;j[1]=j.1l},dz:q(e){G 1j V.4b(j.1k-e.1k,j.1l-e.1l)},25:q(){G"#<V.4b 1k: #{1k} 1l: #{1l}>".79(j)},2s:q(){G"[#{1k}, #{1l}]".79(j)},2X:q(){G[j.1k,j.1l]}});V.4A({7f:q(e,t){G 1j V.3d(e,t)},76:q(e,t){G V.7f($(e)).1w(t)},4B:q(e){e=$(e);J t=V.1z(e,"2P");if(t&&t!=="4y"){G{1n:e.3R,1r:e.3M}}J n=e.1i;J r={3T:n.3T,1I:n.1I,2P:n.2P};J i={3T:"59",2P:"aO"};if(r.1I!=="aR"){i.1I="3x"}V.1B(e,i);J s={1n:e.3R,1r:e.3M};V.1B(e,r);G s},5M:q(e){e=$(e);if(a(e)||f(e)||o(e)||u(e)){G $(19.2i)}J t=V.1z(e,"2P")==="lc";if(!t&&e.4T){G $(e.4T)}1x((e=e.1v)&&e!==19.2i){if(V.1z(e,"1I")!=="aA"){G u(e)?$(19.2i):$(e)}}G $(19.2i)},7l:q(e){e=$(e);J t=V.7f(e);J n=0,r=0;do{n+=e.53||0;r+=e.56||0;e=e.4T;if(e){if(o(e)){1J}J i=V.1z(e,"1I");if(i!=="aA"){1J}}}1x(e);r-=t.1w("2j-1l");n-=t.1w("2j-1k");G 1j V.4b(r,n)},lj:q(e){J t=0,n=0;do{t+=e.2V||0;n+=e.3o||0;e=e.1v}1x(e);G 1j V.4b(n,t)},6a:q(e){i=$(i);J t=0,n=0,r=19.2i;J i=e;do{t+=i.53||0;n+=i.56||0;if(i.4T==r&&V.1z(i,"1I")=="3x"){1J}}1x(i=i.4T);i=e;do{if(i!=r){t-=i.2V||0;n-=i.3o||0}}1x(i=i.1v);G 1j V.4b(n,t)},bn:q(e){e=$(e);if(V.1z(e,"1I")==="3x"){G e}J t=5M(e);J n=V.6a(e),r=V.6a(t);J i=n.dz(r);J s=V.7f(e);V.9x(e,"dL",{1k:V.1z(e,"1k"),1l:V.1z(e,"1l"),1n:V.1z(e,"1n"),1r:V.1z(e,"1r")});V.1B(e,{1I:"3x",1l:i.1l+"1H",1k:i.1k+"1H",1n:s.1w("1n")+"1H",1r:s.1w("1r")+"1H"});G e},fh:q(e){e=$(e);if(V.1z(e,"1I")==="3P"){G e}J t=V.6F(e,"dL");if(t){V.1B(e,t)}G e},3J:1m.2t.ll?q(e){e=$(e);J t=0,n=0;do{t+=e.53||0;n+=e.56||0;if(e.4T==19.2i){if(V.1z(e,"1I")=="3x"){1J}}e=e.4T}1x(e);G 1j V.4b(n,t)}:q(e){e=$(e);J t=0,n=0;if(e.1v){do{t+=e.53||0;n+=e.56||0;e=e.4T}1x(e)}G 1j V.4b(n,t)}});Y.1h(V.3d,{5E:w("1r 1n 1l 1k 1X 1O 1P-1k 1P-1X 1P-1l 1P-1O 1U-1k 1U-1X 1U-1l 1U-1O 2j-1l 2j-1O 2j-1k 2j-1X 1U-1Y-1n 1U-1Y-1r 1P-1Y-1n 1P-1Y-1r 2j-1Y-1n 2j-1Y-1r"),de:w("1U-1Y-1n 1U-1Y-1r 2j-1Y-1n 2j-1Y-1r 1P-1Y-1n 1P-1Y-1r"),9Y:{1r:q(e){if(!j.3s){j.68()}J t=j.1w("1P-1Y-1r");if(t<=0){if(!j.3s){j.4Q()}G 0}J n=j.1w("1P-1l"),r=j.1w("1P-1O");J i=j.1w("1U-1l"),s=j.1w("1U-1O");if(!j.3s){j.4Q()}G t-n-r-i-s},1n:q(e){if(!j.3s){j.68()}J t=j.1w("1P-1Y-1n");if(t<=0){if(!j.3s){j.4Q()}G 0}J n=j.1w("1P-1k"),r=j.1w("1P-1X");J i=j.1w("1U-1k"),s=j.1w("1U-1X");if(!j.3s){j.4Q()}G t-n-r-i-s},"1U-1Y-1r":q(e){J t=j.1w("1r"),n=j.1w("1U-1l"),r=j.1w("1U-1O");G t+n+r},"1U-1Y-1n":q(e){J t=j.1w("1n"),n=j.1w("1U-1k"),r=j.1w("1U-1X");G t+n+r},"1P-1Y-1r":q(e){if(!j.3s){j.68()}J t=e.3M;if(!j.3s){j.4Q()}G t},"1P-1Y-1n":q(e){if(!j.3s){j.68()}J t=e.3R;if(!j.3s){j.4Q()}G t},"2j-1Y-1r":q(e){J t=j.1w("1P-1Y-1r"),n=j.1w("2j-1l"),r=j.1w("2j-1O");if(t<=0){G 0}G t+n+r},"2j-1Y-1n":q(e){J t=j.1w("1P-1Y-1n"),n=j.1w("2j-1k"),r=j.1w("2j-1X");if(t<=0){G 0}G t+n+r},1l:q(e){J t=V.7l(e);G t.1l},1O:q(e){J t=V.7l(e),n=V.5M(e),r=n.76("1r");J i=j.1w("1P-1Y-1r");G r-i-t.1l},1k:q(e){J t=V.7l(e);G t.1k},1X:q(e){J t=V.7l(e),n=V.5M(e),r=n.76("1n");J i=j.1w("1P-1Y-1n");G r-i-t.1k},"1U-1l":q(e){G t(e,"eT")},"1U-1O":q(e){G t(e,"eU")},"1U-1k":q(e){G t(e,"eV")},"1U-1X":q(e){G t(e,"eW")},"1P-1l":q(e){G t(e,"fq")},"1P-1O":q(e){G t(e,"fr")},"1P-1k":q(e){G t(e,"fs")},"1P-1X":q(e){G t(e,"ft")},"2j-1l":q(e){G t(e,"fn")},"2j-1O":q(e){G t(e,"fp")},"2j-1k":q(e){G t(e,"fl")},"2j-1X":q(e){G t(e,"fm")}}});if("5k"in 19.1S){Y.1h(V.3d.9Y,{1X:q(e){J t=i(V.5M(e));J n=V.5k(e),r=V.5k(t);G(r.1X-n.1X).2o()},1O:q(e){J t=i(V.5M(e));J n=V.5k(e),r=V.5k(t);G(r.1O-n.1O).2o()}})}if("5k"in 19.1S){V.4A({6a:q(e){e=$(e);if(f(e)){G 1j V.4b(0,0)}J t=V.5k(e),n=19.1S;G 1j V.4b(t.1k-n.cn,t.1l-n.cK)}})}})();1p.$=q(){J e=A(1g).2v(", ");G 1m.2M.2g(e,19)};1m.2M=q(){q e(){2f 1j cr(\\\'cJ "1m.2M.2g" cI be dN.\\\')}q t(){2f 1j cr(\\\'cJ "1m.2M.1y" cI be dN.\\\')}q n(e,t,n){n=n||0;J r=1m.2M.1y,i=e.17,s=0,o;1q(o=0;o<i;o++){if(r(e[o],t)&&n==s++){G V.1h(e[o])}}}q r(e){1q(J t=0,n=e.17;t<n;t++){V.1h(e[t])}G e}J i=1m.K;G{2g:e,1y:t,3n:n,dr:V.1h===i?i:r,lR:V.1h}}();1m.bs=1p.1Q;(q(){q l(e,t,n,r,i,s){J o=e=="51"&&!s;1q(J u=0,a=r.17;u<a;u++){J f=r[u];if(f){if(o&&f.1N===1){f.55=n;f.6b=u}f=f[e];J l=1a;1x(f){if(f.55===n){l=r[f.6b];1J}if(f.1N===1&&!s){f.55=n;f.6b=u}if(f.3r===t){l=f;1J}f=f[e]}r[u]=l}}}q c(e,t,n,r,i,s){J o=e=="51"&&!s;1q(J u=0,a=r.17;u<a;u++){J f=r[u];if(f){if(o&&f.1N===1){f.55=n;f.6b=u}f=f[e];J l=1a;1x(f){if(f.55===n){l=r[f.6b];1J}if(f.1N===1){if(!s){f.55=n;f.6b=u}if(1D t!=="4C"){if(f===t){l=1c;1J}}1f{if(1Q.3h(t,[f]).17>0){l=f;1J}}}f=f[e]}r[u]=l}}}J e=/((?:\\\\((?:\\\\([^()]+\\\\)|[^()]+)+\\\\)|\\\\[(?:\\\\[[^[\\\\]]*\\\\]|[\\\'"][^\\\'"]*[\\\'"]|[^[\\\\]\\\'"]+)+\\\\]|\\\\\\\\.|[^ >+~,(\\\\[\\\\\\\\]+)+|[>+~])(\\\\s*,\\\\s*)?((?:.|\\\\r|\\\\n)*)/g,t=0,n=Y.1A.2s,r=1a,i=1c;[0,0].bt(q(){i=1a;G 0});1Q=q(t,r,i,u){i=i||[];J f=r=r||19;if(r.1N!==1&&r.1N!==9){G[]}if(!t||1D t!=="4C"){G i}J l=[],c,v,m,g,y,b,w=1c,E=p(r),S=t;1x((e.4n(""),c=e.4n(S))!==1d){S=c[3];l.1s(c[1]);if(c[2]){b=c[3];1J}}if(l.17>1&&o.4n(t)){if(l.17===2&&s.3P[l[0]]){v=d(l[0]+l[1],r)}1f{v=s.3P[l[0]]?[r]:1Q(l.6i(),r);1x(l.17){t=l.6i();if(s.3P[t]){t+=l.6i()}v=d(t,v)}}}1f{if(!u&&l.17>1&&r.1N===9&&!E&&s.1y.4J.1M(l[0])&&!s.1y.4J.1M(l[l.17-1])){J x=1Q.3n(l.6i(),r,E);r=x.4d?1Q.3h(x.4d,x.2H)[0]:x.2H[0]}if(r){J x=u?{4d:l.6j(),2H:a(u)}:1Q.3n(l.6j(),l.17===1&&(l[0]==="~"||l[0]==="+")&&r.1v?r.1v:r,E);v=x.4d?1Q.3h(x.4d,x.2H):x.2H;if(l.17>0){m=a(v)}1f{w=1a}1x(l.17){J T=l.6j(),N=T;if(!s.3P[T]){T=""}1f{N=l.6j()}if(N==1d){N=r}s.3P[T](m,N,E)}}1f{m=l=[]}}if(!m){m=v}if(!m){2f"ds cb, dt d7: "+(T||t)}if(n.1C(m)==="[2u 2G]"){if(!w){i.1s.2K(i,m)}1f{if(r&&r.1N===1){1q(J C=0;m[C]!=1d;C++){if(m[C]&&(m[C]===1c||m[C].1N===1&&h(r,m[C]))){i.1s(v[C])}}}1f{1q(J C=0;m[C]!=1d;C++){if(m[C]&&m[C].1N===1){i.1s(v[C])}}}}}1f{a(m,i)}if(b){1Q(b,f,i,u);1Q.dm(i)}G i};1Q.dm=q(e){if(5Y){r=i;e.bt(5Y);if(r){1q(J t=1;t<e.17;t++){if(e[t]===e[t-1]){e.bi(t--,1)}}}}G e};1Q.dw=q(e,t){G 1Q(e,1d,1d,t)};1Q.3n=q(e,t,n){J r,i;if(!e){G[]}1q(J o=0,u=s.8C.17;o<u;o++){J a=s.8C[o],i;if(i=s.bE[a].4n(e)){J f=i[1];i.bi(1,1);if(f.8r(f.17-1)!=="\\\\\\\\"){i[1]=(i[1]||"").1u(/\\\\\\\\/g,"");r=s.3n[a](i,t,n);if(r!=1d){e=e.1u(s.1y[a],"");1J}}}}if(!r){r=t.4o("*")}G{2H:r,4d:e}};1Q.3h=q(e,t,n,r){J i=e,o=[],u=t,a,f,l=t&&t[0]&&p(t[0]);1x(e&&t.17){1q(J c in s.3h){if((a=s.1y[c].4n(e))!=1d){J h=s.3h[c],d,v;f=1a;if(u==o){o=[]}if(s.bj[c]){a=s.bj[c](a,u,n,o,r,l);if(!a){f=d=1c}1f{if(a===1c){82}}}if(a){1q(J m=0;(v=u[m])!=1d;m++){if(v){d=h(v,a,m,u);J g=r^!!d;if(n&&d!=1d){if(g){f=1c}1f{u[m]=1a}}1f{if(g){o.1s(v);f=1c}}}}}if(d!==2b){if(!n){u=o}e=e.1u(s.1y[c],"");if(!f){G[]}1J}}}if(e==i){if(f==1d){2f"ds cb, dt d7: "+e}1f{1J}}i=e}G u};J s=1Q.lb={8C:["4J","bp","6y"],1y:{4J:/#((?:[\\\\w\\\\6s-\\\\65-]|\\\\\\\\.)+)/,7r:/\\\\.((?:[\\\\w\\\\6s-\\\\65-]|\\\\\\\\.)+)/,bp:/\\\\[3f=[\\\'"]*((?:[\\\\w\\\\6s-\\\\65-]|\\\\\\\\.)+)[\\\'"]*\\\\]/,bD:/\\\\[\\\\s*((?:[\\\\w\\\\6s-\\\\65-]|\\\\\\\\.)+)\\\\s*(?:(\\\\S?=)\\\\s*([\\\'"]*)(.*?)\\\\3|)\\\\s*\\\\]/,6y:/^((?:[\\\\w\\\\6s-\\\\65\\\\*-]|\\\\\\\\.)+)/,8u:/:(3W|7B|44|4q)-l3(?:\\\\((9R|9U|[\\\\dn+-]*)\\\\))?/,7s:/:(7B|eq|gt|lt|4q|44|9R|9U)(?:\\\\((\\\\d*)\\\\))?(?=[^-]|$)/,7O:/:((?:[\\\\w\\\\6s-\\\\65-]|\\\\\\\\.)+)(?:\\\\(([\\\'"]*)((?:\\\\([^\\\\)]+\\\\)|[^\\\\2\\\\(\\\\)]*)+)\\\\2\\\\))?/},bE:{},bk:{"4D":"2Z","1q":"aK"},8E:{6P:q(e){G e.4F("6P")}},3P:{"+":q(e,t,n){J r=1D t==="4C",i=r&&!/\\\\W/.1M(t),s=r&&!i;if(i&&!n){t=t.1W()}1q(J o=0,u=e.17,a;o<u;o++){if(a=e[o]){1x((a=a.51)&&a.1N!==1){}e[o]=s||a&&a.3r===t?a||1a:a===t}}if(s){1Q.3h(t,e,1c)}},">":q(e,t,n){J r=1D t==="4C";if(r&&!/\\\\W/.1M(t)){t=n?t:t.1W();1q(J i=0,s=e.17;i<s;i++){J o=e[i];if(o){J u=o.1v;e[i]=u.3r===t?u:1a}}}1f{1q(J i=0,s=e.17;i<s;i++){J o=e[i];if(o){e[i]=r?o.1v:o.1v===t}}if(r){1Q.3h(t,e,1c)}}},"":q(e,n,r){J i=t++,s=c;if(!/\\\\W/.1M(n)){J o=n=r?n:n.1W();s=l}s("1v",n,i,e,o,r)},"~":q(e,n,r){J i=t++,s=c;if(1D n==="4C"&&!/\\\\W/.1M(n)){J o=n=r?n:n.1W();s=l}s("51",n,i,e,o,r)}},3n:{4J:q(e,t,n){if(1D t.5W!=="2b"&&!n){J r=t.5W(e[1]);G r?[r]:[]}},bp:q(e,t,n){if(1D t.dg!=="2b"){J r=[],i=t.dg(e[1]);1q(J s=0,o=i.17;s<o;s++){if(i[s].4F("3f")===e[1]){r.1s(i[s])}}G r.17===0?1d:r}},6y:q(e,t){G t.4o(e[1])}},bj:{7r:q(e,t,n,r,i,s){e=" "+e[1].1u(/\\\\\\\\/g,"")+" ";if(s){G e}1q(J o=0,u;(u=t[o])!=1d;o++){if(u){if(i^(u.2Z&&(" "+u.2Z+" ").2a(e)>=0)){if(!n){r.1s(u)}}1f{if(n){t[o]=1a}}}}G 1a},4J:q(e){G e[1].1u(/\\\\\\\\/g,"")},6y:q(e,t){1q(J n=0;t[n]===1a;n++){}G t[n]&&p(t[n])?e[1]:e[1].1W()},8u:q(e){if(e[1]=="7B"){J n=/(-?)(\\\\d*)n((?:\\\\+|-)?\\\\d*)/.4n(e[2]=="9R"&&"2n"||e[2]=="9U"&&"2n+1"||!/\\\\D/.1M(e[2])&&"lx+"+e[2]||e[2]);e[2]=n[1]+(n[2]||1)-0;e[3]=n[3]-0}e[0]=t++;G e},bD:q(e,t,n,r,i,o){J u=e[1].1u(/\\\\\\\\/g,"");if(!o&&s.bk[u]){e[1]=s.bk[u]}if(e[2]==="~="){e[4]=" "+e[4]+" "}G e},7O:q(t,n,r,i,o){if(t[1]==="93"){if((e.4n(t[3])||"").17>1||/^\\\\w/.1M(t[3])){t[3]=1Q(t[3],1d,1d,n)}1f{J u=1Q.3h(t[3],n,r,1c^o);if(!r){i.1s.2K(i,u)}G 1a}}1f{if(s.1y.7s.1M(t[0])||s.1y.8u.1M(t[0])){G 1c}}G t},7s:q(e){e.lB(1c);G e}},cs:{lA:q(e){G e.4L===1a&&e.3a!=="59"},4L:q(e){G e.4L===1c},dB:q(e){G e.dB===1c},9y:q(e){e.1v.ly;G e.9y===1c},9o:q(e){G!!e.2k},7C:q(e){G!e.2k},cp:q(e,t,n){G!!1Q(n[3],e).17},lz:q(e){G/h\\\\d/i.1M(e.3r)},bQ:q(e){G"bQ"===e.3a},bW:q(e){G"bW"===e.3a},cD:q(e){G"cD"===e.3a},cR:q(e){G"cR"===e.3a},cF:q(e){G"cF"===e.3a},cN:q(e){G"cN"===e.3a},ba:q(e){G"ba"===e.3a},8H:q(e){G"8H"===e.3a},7J:q(e){G"7J"===e.3a||e.3r.1W()==="bM"},7P:q(e){G/7P|2g|lC|7J/i.1M(e.3r)}},cE:{4q:q(e,t){G t===0},44:q(e,t,n,r){G t===r.17-1},9R:q(e,t){G t%2===0},9U:q(e,t){G t%2===1},lt:q(e,t,n){G t<n[3]-0},gt:q(e,t,n){G t>n[3]-0},7B:q(e,t,n){G n[3]-0==t},eq:q(e,t,n){G n[3]-0==t}},3h:{7O:q(e,t,n,r){J i=t[1],o=s.cs[i];if(o){G o(e,n,t,r)}1f{if(i==="7A"){G(e.lw||e.lr||"").2a(t[3])>=0}1f{if(i==="93"){J u=t[3];1q(J n=0,a=u.17;n<a;n++){if(u[n]===e){G 1a}}G 1c}}}},8u:q(e,t){J n=t[1],r=e;3u(n){1E"3W":1E"4q":1x(r=r.51){if(r.1N===1){G 1a}}if(n=="4q"){G 1c}r=e;1E"44":1x(r=r.4u){if(r.1N===1){G 1a}}G 1c;1E"7B":J i=t[2],s=t[3];if(i==1&&s==0){G 1c}J o=t[0],u=e.1v;if(u&&(u.55!==o||!e.bC)){J a=0;1q(r=u.2k;r;r=r.4u){if(r.1N===1){r.bC=++a}}u.55=o}J f=e.bC-s;if(i==0){G f==0}1f{G f%i==0&&f/i>=0}}},4J:q(e,t){G e.1N===1&&e.4F("id")===t},6y:q(e,t){G t==="*"&&e.1N===1||e.3r===t},7r:q(e,t){G(" "+(e.2Z||e.4F("4D"))+" ").2a(t)>-1},bD:q(e,t){J n=t[1],r=s.8E[n]?s.8E[n](e):e[n]!=1d?e[n]:e.4F(n),i=r+"",o=t[2],u=t[4];G r==1d?o==="!=":o==="="?i===u:o==="*="?i.2a(u)>=0:o==="~="?(" "+i+" ").2a(u)>=0:!u?i&&r!==1a:o==="!="?i!=u:o==="^="?i.2a(u)===0:o==="$="?i.8r(i.17-u.17)===u:o==="|="?i===u||i.8r(0,u.17+1)===u+"-":1a},7s:q(e,t,n,r){J i=t[2],o=s.cE[i];if(o){G o(e,n,t,r)}}}};J o=s.1y.7s;1q(J u in s.1y){s.1y[u]=1j 2Y(s.1y[u].7q+/(?![^\\\\[]*\\\\])(?![^\\\\(]*\\\\))/.7q);s.bE[u]=1j 2Y(/(^(?:.|\\\\r|\\\\n)*?)/.7q+s.1y[u].7q)}J a=q(e,t){e=2G.1A.2q.1C(e,0);if(t){t.1s.2K(t,e);G t}G e};2A{2G.1A.2q.1C(19.1S.4E,0)}2B(f){a=q(e,t){J r=t||[];if(n.1C(e)==="[2u 2G]"){2G.1A.1s.2K(r,e)}1f{if(1D e.17==="4t"){1q(J i=0,s=e.17;i<s;i++){r.1s(e[i])}}1f{1q(J i=0;e[i];i++){r.1s(e[i])}}}G r}}if(19.1S.52){5Y=q(e,t){if(!e.52||!t.52){if(e==t){r=1c}G 0}J n=e.52(t)&4?-1:e===t?0:1;if(n===0){r=1c}G n}}1f{if("7n"in 19.1S){5Y=q(e,t){if(!e.7n||!t.7n){if(e==t){r=1c}G 0}J n=e.7n-t.7n;if(n===0){r=1c}G n}}1f{if(19.8n){5Y=q(e,t){if(!e.5o||!t.5o){if(e==t){r=1c}G 0}J n=e.5o.8n(),i=t.5o.8n();n.ce(e,0);n.co(e,0);i.ce(t,0);i.co(t,0);J s=n.lq(ls.lu,i);if(s===0){r=1c}G s}}}}(q(){J e=19.2l("2x"),t="54"+(1j 5B).a9();e.2S="<a 3f=\\\'"+t+"\\\'/>";J n=19.1S;n.3X(e,n.2k);if(!!19.5W(t)){s.3n.4J=q(e,t,n){if(1D t.5W!=="2b"&&!n){J r=t.5W(e[1]);G r?r.id===e[1]||1D r.7v!=="2b"&&r.7v("id").6I===e[1]?[r]:2b:[]}};s.3h.4J=q(e,t){J n=1D e.7v!=="2b"&&e.7v("id");G e.1N===1&&n&&n.6I===t}}n.3Y(e);n=e=1d})();(q(){J e=19.2l("2x");e.2N(19.lv(""));if(e.4o("*").17>0){s.3n.6y=q(e,t){J n=t.4o(e[1]);if(e[1]==="*"){J r=[];1q(J i=0;n[i];i++){if(n[i].1N===1){r.1s(n[i])}}n=r}G n}}e.2S="<a 6P=\\\'#\\\'></a>";if(e.2k&&1D e.2k.4F!=="2b"&&e.2k.4F("6P")!=="#"){s.8E.6P=q(e){G e.4F("6P",2)}}e=1d})();if(19.8F){(q(){J e=1Q,t=19.2l("2x");t.2S="<p 4D=\\\'dV\\\'></p>";if(t.8F&&t.8F(".dV").17===0){G}1Q=q(t,n,r,i){n=n||19;if(!i&&n.1N===9&&!p(n)){2A{G a(n.8F(t),r)}2B(s){}}G e(t,n,r,i)};1q(J n in e){1Q[n]=e[n]}t=1d})()}if(19.6A&&19.1S.6A){(q(){J e=19.2l("2x");e.2S="<2x 4D=\\\'1M e\\\'></2x><2x 4D=\\\'1M\\\'></2x>";if(e.6A("e").17===0){G}e.lD.2Z="e";if(e.6A("e").17===1){G}s.8C.bi(1,0,"7r");s.3n.7r=q(e,t,n){if(1D t.6A!=="2b"&&!n){G t.6A(e[1])}};e=1d})()}J h=19.52?q(e,t){G e.52(t)&16}:q(e,t){G e!==t&&(e.7A?e.7A(t):1c)};J p=q(e){G e.1N===9&&e.1S.3r!=="5K"||!!e.5o&&e.5o.1S.3r!=="5K"};J d=q(e,t){J n=[],r="",i,o=t.1N?[t]:t;1x(i=s.1y.7O.4n(e)){r+=i[0];e=e.1u(s.1y.7O,"")}e=s.3P[e]?e+"*":e;1q(J u=0,a=o.17;u<a;u++){1Q(e,o[u],n)}G 1Q.3h(r,n)};1p.1Q=1Q})();(q(e){q n(n,r){G t(e(n,r||19))}q r(t,n){G e.dw(n,[t]).17==1}J t=1m.2M.dr;1m.2M.lE=e;1m.2M.2g=n;1m.2M.1y=r})(1Q);1p.1Q=1m.bs;4H 1m.bs;(q(){q i(e,t){G e.6W?e.6W===t+1:e.7J===t}q o(e,t){G e.7J===s[t]}q u(e,t){3u(t){1E 0:G e.6W==1&&!e.dp;1E 1:G e.6W==2||e.6W==1&&e.dp;1E 2:G e.6W==3;aV:G 1a}}q a(e){G r(e,0)}q f(e){G r(e,1)}q l(e){G r(e,2)}q c(e){e=1o.1h(e);J t=e.dc,n=e.3a,r=e.lM;if(r&&r.2E){if(n==="ch"||n==="cb"||n==="lN"&&r.2E.4j()==="7P"&&r.3a==="bW"){t=r}}if(t.1N==6T.db){t=t.1v}G V.1h(t)}q h(e,t){J n=1o.14(e);if(!t){G n}1x(n){if(Y.4G(n)&&1m.2M.1y(n,t)){G V.1h(n)}n=n.1v}}q p(e){G{x:d(e),y:v(e)}}q d(e){J t=19.1S,n=19.2i||{3o:0};G e.dy||e.lO+(t.3o||n.3o)-(t.cn||0)}q v(e){J t=19.1S,n=19.2i||{2V:0};G e.dP||e.lP+(t.2V||n.2V)-(t.cK||0)}q m(e){1o.1h(e);e.df();e.da();e.lL=1c}q w(e,n,r){J i=V.6F(e,"al");if(Y.2C(i)){S.1s(e);i=V.6F(e,"al",H())}J s=i.1w(n);if(Y.2C(s)){s=[];i.2H(n,s)}if(s.4O("5p").1K(r)){G 1a}J o;if(n.1K(":")){o=q(t){if(Y.2C(t.6B)){G 1a}if(t.6B!==n){G 1a}1o.1h(t,e);r.1C(e,t)}}1f{if(!t&&(n==="8P"||n==="8R")){if(n==="8P"||n==="8R"){o=q(t){1o.1h(t,e);J n=t.dx;1x(n&&n!==e){2A{n=n.1v}2B(i){n=e}}if(n===e){G}r.1C(e,t)}}}1f{o=q(t){1o.1h(t,e);r.1C(e,t)}}}o.5p=r;s.1s(o);G o}q E(){1q(J e=0,t=S.17;e<t;e++){1o.2O(S[e]);S[e]=1d}}q N(e,t,n){e=$(e);J r=w(e,t,n);if(!r){G e}if(t.1K(":")){if(e.42){e.42("ao",r,1a)}1f{e.5j("ap",r);e.5j("aw",r)}}1f{J i=x(t);if(e.42){e.42(i,r,1a)}1f{e.5j("7E"+i,r)}}G e}q C(e,t,n){e=$(e);J r=V.6F(e,"al");if(!r){G e}if(!t){r.1t(q(t){J n=t.5v;C(e,n)});G e}J i=r.1w(t);if(!i){G e}if(!n){i.1t(q(n){C(e,t,n.5p)});G e}J s=i.17,o;1x(s--){if(i[s].5p===n){o=i[s];1J}}if(!o){G e}if(t.1K(":")){if(e.9c){e.9c("ao",o,1a)}1f{e.aj("ap",o);e.aj("aw",o)}}1f{J u=x(t);if(e.9c){e.9c(u,o,1a)}1f{e.aj("7E"+u,o)}}r.2H(t,i.ah(o));G e}q k(e,t,n,r){e=$(e);if(Y.2C(r)){r=1c}if(e==19&&19.7x&&!e.dK){e=19.1S}J i;if(19.7x){i=19.7x("dS");i.lK("ao",r,1c)}1f{i=19.lG();i.dW=r?"ap":"aw"}i.6B=t;i.lF=n||{};if(19.7x){e.dK(i)}1f{e.lH(i.dW,i)}G 1o.1h(i)}q L(e,t,n,r){e=$(e);if(Y.2J(n)&&Y.2C(r)){r=n,n=1d}G(1j 1o.d3(e,t,n,r)).1T()}1o={lI:8,lJ:9,lp:13,eg:27,lo:37,l6:38,l5:39,l7:40,l8:46,l9:36,l4:35,kZ:33,kY:34,l0:45,9n:{}};J e=19.1S;J t="l1"in e&&"l2"in e;J n=q(e){G 1a};if(1p.5j){if(1p.42){n=q(e){G!(e 8Z 1p.1o)}}1f{n=q(e){G 1c}}}J r;J s={0:1,1:4,2:2};if(1p.5j){if(!1p.42){r=o}1f{r=q(e,t){G n(e)?o(e,t):i(e,t)}}}1f{if(1m.2t.4K){r=u}1f{r=i}}1o.1F={ay:a,la:f,lk:l,14:c,dZ:h,3j:p,5g:d,5m:v,3V:m};J g=Y.5w(1o.1F).3Q({},q(e,t){e[t]=1o.1F[t].58();G e});if(1p.5j){q y(e){J t;3u(e.3a){1E"dD":1E"8P":t=e.lm;1J;1E"dA":1E"8R":t=e.3U;1J;aV:G 1d}G V.1h(t)}J b={da:q(){j.ln=1c},df:q(){j.lh=1a},25:q(){G"[2u 1o]"}};1o.1h=q(e,t){if(!e){G 1a}if(!n(e)){G e}if(e.7p){G e}e.7p=1m.4M;J r=1o.3j(e);Y.1h(e,{dc:e.ld||t,dx:y(e),dy:r.x,dP:r.y});Y.1h(e,g);Y.1h(e,b);G e}}1f{1o.1h=1m.K}if(1p.42){1o.1A=1p.1o.1A||19.7x("dS").5l;Y.1h(1o.1A,g)}J S=[];if(1m.2t.6c){1p.5j("le",E)}if(1m.2t.4K){1p.42("lf",1m.4M,1a)}J x=1m.K,T={8P:"dD",8R:"dA"};if(!t){x=q(e){G T[e]||e}}1o.d3=2c.2d({2e:q(e,t,n,r){j.14=$(e);j.6B=t;j.cq=n;j.8T=r;j.5p=j.dH.26(j)},1T:q(){1o.32(j.14,j.6B,j.5p);G j},3V:q(){1o.2O(j.14,j.6B,j.5p);G j},dH:q(e){J t=1o.dZ(e,j.cq);if(t){j.8T.1C(j.14,e,t)}}});Y.1h(1o,1o.1F);Y.1h(1o,{61:k,32:N,2O:C,7E:L});V.4A({61:k,32:N,2O:C,7E:L});Y.1h(19,{61:k.58(),32:N.58(),2O:C.58(),7E:L.58(),92:1a});if(1p.1o){Y.1h(1p.1o,1o)}1f{1p.1o=1o}})();(q(){q t(){if(19.92){G}if(e){1p.f5(e)}19.92=1c;19.61("lg:92")}q n(){if(19.lQ==="md"){19.2O("cf",n);t()}}q r(){2A{19.1S.mq("1k")}2B(n){e=r.5G();G}t()}J e;if(19.42){19.42("mr",t,1a)}1f{19.32("cf",n);if(1p==1l){e=r.5G()}}1o.32(1p,"ch",t)})();V.4A();J 5e={cl:{cO:"1V",a3:"2F",9W:"2F",at:"2F",fP:"mn",aN:"2g",8q:"2g",fO:"2u",70:"2F",72:"2F",8M:"2F",8L:"2F",8K:"2F",8J:"2F"},aC:q(e){e=e.1W();J t=j.cl[e]||"2x";J n=19.2l(t);2A{n.2S="<"+e+"></"+e+">"}2B(r){}J i=n.2k||1d;if(i&&i.2E.1W()!=e){i=i.4o(e)[0]}if(!i){i=19.2l(e)}if(!i){G}if(1g[1]){if(j.8V(1g[1])||1g[1]8Z 2G||1g[1].2E){j.aE(i,1g[1])}1f{J s=j.cV(1g[1]);if(s.17){2A{n.2S="<"+e+" "+s+"></"+e+">"}2B(r){}i=n.2k||1d;if(!i){i=19.2l(e);1q(8Y in 1g[1]){i[8Y=="4D"?"2Z":8Y]=1g[1][8Y]}}if(i.2E.1W()!=e){i=n.4o(e)[0]}}}}if(1g[2]){j.aE(i,1g[2])}G $(i)},aG:q(e){G 19.8Q(e)},aJ:{2Z:"4D",aK:"1q"},cV:q(e){J t=[];1q(7k in e){t.1s((7k in j.aJ?j.aJ[7k]:7k)+\\\'="\\\'+e[7k].2s().8U().5I(/"/,"&ml;")+\\\'"\\\')}G t.2v(" ")},aE:q(e,t){if(t.2E){e.2N(t);G}if(1D t=="2u"){t.3K().1t(q(t){if(1D t=="2u"){e.2N(t)}1f{if(5e.8V(t)){e.2N(5e.aG(t))}}})}1f{if(5e.8V(t)){e.2N(5e.aG(t))}}},8V:q(e){G 1D e=="4C"||1D e=="4t"},mh:q(e){J t=j.aC("2x");V.2y($(t),e.5C());G V.3t(t)},mi:q(e){if(1D e!="2u"&&1D e!="q"){e=1p}J t=("A mt mk ms mw cO B mv mj mf mg m1 bc "+"lY bM a3 lX lS lV 9W at mb e8 ma gc dI g5 m9 lZ g8 "+"m8 m7 m6 fH fL fE fx fC fM fN m5 me 5K I fZ aT fa g0 mc "+"m4 m3 fP lW lU lT m2 m0 mu mx kW fR aN 8q P "+"fO jy Q S jx e0 bS jz jA jC jB jw jv jp fD 70 72 "+"bO 8M 8L 8K jo 8J jq U g3 jr").3y(/\\\\s+/);t.1t(q(t){e[t]=q(){G 5e.aC.2K(5e,[t].4S(A(1g)))}})}};21.1A.7D=q(){J e="#";if(j.2q(0,4)=="ju("){J t=j.2q(4,j.17-1).3y(",");J n=0;do{e+=4a(t[n]).6t()}1x(++n<3)}1f{if(j.2q(0,1)=="#"){if(j.17==4){1q(J n=1;n<4;n++){e+=(j.7e(n)+j.7e(n)).4j()}}if(j.17==7){e=j.4j()}}}G e.17==7?e:1g[0]||j};V.aS=q(e){G A($(e).4E).7S(q(e){G e.1N==3?e.6I:e.c2()?V.aS(e):""}).3K().2v("")};V.aP=q(e,t){G A($(e).4E).7S(q(e){G e.1N==3?e.6I:e.c2()&&!V.8O(e,t)?V.aP(e,t):""}).3K().2v("")};V.f4=q(e,t){e=$(e);V.1B(e,{5O:t/3i+"em"});if(1m.2t.4K){1p.bw(0,0)}G e};V.4w=q(e){G $(e).1i.2h||""};V.aQ=q(e){2A{e=$(e);J t=19.8Q(" ");e.2N(t);e.3Y(t)}2B(n){}};J 1b={6p:{3f:"jt",jD:"jE fJ jO 14 jN 93 jP, jQ is iQ 1q j bG 3b jS"},3O:{bh:1m.K,5Z:q(e){G-1R.60(e*1R.64)/2+.5},6H:q(e){G 1-e},e4:q(e){J e=-1R.60(e*1R.64)/4+.75+1R.bd()/4;G e>1?1:e},jR:q(e){G-1R.60(e*1R.64*9*e)/2+.5},jM:q(e,t){G-1R.60(e*((t||5)-.5)*2*1R.64)/2+.5},jL:q(e){G 1-1R.60(e*4.5*1R.64)*1R.kX(-e*6)},4y:q(e){G 0},ei:q(e){G 1}},ac:{2p:1,ev:3i,31:1a,2I:0,3b:1,3m:0,3k:"jF"},jH:q(e){J t="1I:3P";if(1m.2t.6c){t+=";8o:1"}e=$(e);A(e.4E).1t(q(n){if(n.1N==3){n.6I.2X().1t(q(r){e.3X((1j V("jI",{1i:t})).2y(r==" "?21.9j(jK):r),n)});V.5u(n)}})},jJ:q(e,t){J n;if((1D e=="2u"||Y.2J(e))&&e.17){n=e}1f{n=$(e).4E}J r=Y.1h({4Y:.1,3m:0},1g[2]||{});J i=r.3m;A(n).1t(q(e,n){1j t(e,Y.1h(r,{3m:n*r.4Y+i}))})},ew:{jn:["ec","ej"],jm:["e3","e2"],a8:["bZ","e6"]},fu:q(e,t,n){e=$(e);t=(t||"a8").4j();G 1b[1b.ew[t][e.9h()?1:0]](e,Y.1h({3k:{1I:"3c",80:e.id||"96",a6:1}},n||{}))}};1b.ac.3p=1b.3O.5Z;1b.ez=2c.2d(6J,{2e:q(){j.22=[];j.7K=1d},6K:q(e){j.22.6K(e)},6E:q(e){J t=(1j 5B).a9();J n=Y.2z(e.X.3k)?e.X.3k:e.X.3k.1I;3u(n){1E"j1":j.22.a7(q(e){G e.6z=="ae"}).1t(q(t){t.4V+=e.4U;t.4U+=e.4U});1J;1E"9b-44":t=j.22.4O("4V").3I()||t;1J;1E"3c":t=j.22.4O("4U").3I()||t;1J}e.4V+=t;e.4U+=t;if(!e.X.3k.a6||j.22.17<e.X.3k.a6){j.22.1s(e)}if(!j.7K){j.7K=cc(j.9f.26(j),15)}},5u:q(e){j.22=j.22.5F(q(t){G t==e});if(j.22.17==0){bu(j.7K);j.7K=1d}},9f:q(){J e=(1j 5B).a9();1q(J t=0,n=j.22.17;t<n;t++){j.22[t]&&j.22[t].9f(e)}}});1b.97={aa:H(),1w:q(e){if(!Y.2z(e)){G e}G j.aa.1w(e)||j.aa.2H(e,1j 1b.ez)}};1b.j0=1b.97.1w("96");1b.4r=2c.2d({1I:1d,1T:q(e){if(e&&e.3p===1a){e.3p=1b.3O.bh}j.X=Y.1h(Y.1h({},1b.ac),e||{});j.ab=0;j.6z="ae";j.4V=j.X.3m*4g;j.4U=j.4V+j.X.2p*4g;j.ep=j.X.3b-j.X.2I;j.es=j.4U-j.4V;j.et=j.X.ev*j.X.2p;j.7L=q(){q e(e,t){if(e.X[t+"95"]){e.X[t+"95"](e)}if(e.X[t]){e.X[t](e)}}G q(t){if(j.6z==="ae"){j.6z="eu";e(j,"5L");if(j.6q){j.6q()}e(j,"8j")}if(j.6z==="eu"){t=j.X.3p(t)*j.ep+j.X.2I;j.1I=t;e(j,"j2");if(j.2y){j.2y(t)}e(j,"j3")}}}();j.2R("j5");if(!j.X.31){1b.97.1w(Y.2z(j.X.3k)?"96":j.X.3k.80).6E(j)}},9f:q(e){if(e>=j.4V){if(e>=j.4U){j.7L(1);j.9p();j.2R("eB");if(j.5f){j.5f()}j.2R("bA");G}J t=(e-j.4V)/j.es,n=(t*j.et).2o();if(n>j.ab){j.7L(t);j.ab=n}}},9p:q(){if(!j.X.31){1b.97.1w(Y.2z(j.X.3k)?"96":j.X.3k.80).5u(j)}j.6z="j4"},2R:q(e){if(j.X[e+"95"]){j.X[e+"95"](j)}if(j.X[e]){j.X[e](j)}},25:q(){J e=H();1q(8I in j){if(!Y.2J(j[8I])){e.2H(8I,j[8I])}}G"#<1b:"+e.25()+",X:"+H(j.X).25()+">"}});1b.6r=2c.2d(1b.4r,{2e:q(e){j.22=e||[];j.1T(1g[1])},2y:q(e){j.22.b8("7L",e)},5f:q(e){j.22.1t(q(t){t.7L(1);t.9p();t.2R("eB");if(t.5f){t.5f(e)}t.2R("bA")})}});1b.ea=2c.2d(1b.4r,{2e:q(e,t,n){e=Y.2z(e)?$(e):e;J r=A(1g),i=r.44(),s=r.17==5?r[3]:1d;j.eK=Y.2J(i)?i.26(e):Y.2J(e[i])?e[i].26(e):q(t){e[i]=t};j.1T(Y.1h({2I:t,3b:n},s||{}))},2y:q(e){j.eK(e)}});1b.1o=2c.2d(1b.4r,{2e:q(){j.1T(Y.1h({2p:0},1g[0]||{}))},2y:1m.4M});1b.4m=2c.2d(1b.4r,{2e:q(e){j.14=$(e);if(!j.14){2f 1b.6p}if(1m.2t.6c&&!j.14.6h.bP){V.1B(j.14,{8o:1})}J t=Y.1h({2I:V.69(j.14)||0,3b:1},1g[1]||{});j.1T(t)},2y:q(e){V.5J(j.14,e)}});1b.3q=2c.2d(1b.4r,{2e:q(e){j.14=$(e);if(!j.14){2f 1b.6p}J t=Y.1h({x:0,y:0,eL:"3P"},1g[1]||{});j.1T(t)},6q:q(){V.3e(j.14);j.7u=3G(V.1z(j.14,"1k")||"0");j.7o=3G(V.1z(j.14,"1l")||"0");if(j.X.eL=="3x"){j.X.x=j.X.x-j.7u;j.X.y=j.X.y-j.7o}},2y:q(e){V.1B(j.14,{1k:(j.X.x*e+j.7u).2o()+"1H",1l:(j.X.y*e+j.7o).2o()+"1H"})}});1b.iZ=q(e,t,n){G 1j 1b.3q(e,Y.1h({x:n,y:t},1g[3]||{}))};1b.3v=2c.2d(1b.4r,{2e:q(e,t){j.14=$(e);if(!j.14){2f 1b.6p}J n=Y.1h({47:1c,7N:1c,4f:1c,8g:1a,4h:"1Y",5P:3i,eI:t},1g[2]||{});j.1T(n)},6q:q(){j.3F=j.X.3F||1a;j.eG=V.1z(j.14,"1I");j.ag={};["1l","1k","1n","1r","5O"].1t(q(e){j.ag[e]=j.14.1i[e]}.26(j));j.7o=j.14.53;j.7u=j.14.56;J e=V.1z(j.14,"iY-av")||"3i%";["em","1H","%","eP"].1t(q(t){if(e.2a(t)>0){j.5O=3G(e);j.eD=t}}.26(j));j.eC=(j.X.eI-j.X.5P)/3i;j.3S=1d;if(j.X.4h=="1Y"){j.3S=[j.14.3M,j.14.3R]}if(/^iT/.1M(j.X.4h)){j.3S=[j.14.iS,j.14.iR]}if(!j.3S){j.3S=[j.X.4h.7y,j.X.4h.7Q]}},2y:q(e){J t=j.X.5P/3i+j.eC*e;if(j.X.4f&&j.5O){V.1B(j.14,{5O:j.5O*t+j.eD})}j.eF(j.3S[0]*t,j.3S[1]*t)},5f:q(e){if(j.3F){V.1B(j.14,j.ag)}},eF:q(e,t){J n={};if(j.X.47){n.1n=t.2o()+"1H"}if(j.X.7N){n.1r=e.2o()+"1H"}if(j.X.8g){J r=(e-j.3S[0])/2;J i=(t-j.3S[1])/2;if(j.eG=="3x"){if(j.X.7N){n.1l=j.7o-r+"1H"}if(j.X.47){n.1k=j.7u-i+"1H"}}1f{if(j.X.7N){n.1l=-r+"1H"}if(j.X.47){n.1k=-i+"1H"}}}V.1B(j.14,n)}});1b.eY=2c.2d(1b.4r,{2e:q(e){j.14=$(e);if(!j.14){2f 1b.6p}J t=Y.1h({e7:"#iU"},1g[1]||{});j.1T(t)},6q:q(){if(V.1z(j.14,"2P")=="4y"){j.9p();G}j.bX={};if(!j.X.iV){j.bX.en=V.1z(j.14,"c9-ba");V.1B(j.14,{en:"4y"})}if(!j.X.cd){j.X.cd=V.1z(j.14,"c9-4P").7D("#ff")}if(!j.X.c1){j.X.c1=V.1z(j.14,"c9-4P")}j.c7=R(0,2).1V(q(e){G 4a(j.X.e7.2q(e*2+1,e*2+3),16)}.26(j));j.fv=R(0,2).1V(q(e){G 4a(j.X.cd.2q(e*2+1,e*2+3),16)-j.c7[e]}.26(j))},2y:q(e){V.1B(j.14,{bH:R(0,2).3Q("#",q(t,n,r){G t+(j.c7[r]+j.fv[r]*e).2o().6t()}.26(j))})},5f:q(){V.1B(j.14,Y.1h(j.bX,{bH:j.X.c1}))}});1b.iX=q(e){J t=1g[1]||{},n=19.50.e9(),r=V.3J($(e));if(t.6G){r[1]+=t.6G}G 1j 1b.ea(1d,n.1l,r[1],t,q(e){84(n.1k,e.2o())})};1b.e6=q(e){e=$(e);J t=V.4w(e);J n=Y.1h({2I:V.69(e)||1,3b:0,29:q(e){if(e.X.3b!=0){G}V.1B(V.2T(e.14),{2h:t})}},1g[1]||{});G 1j 1b.4m(e,n)};1b.bZ=q(e){e=$(e);J t=Y.1h({2I:V.1z(e,"2P")=="4y"?0:V.69(e)||0,3b:1,29:q(e){e.14.aQ()},5L:q(e){V.3A(V.5J(e.14,e.X.2I))}},1g[1]||{});G 1j 1b.4m(e,t)};1b.iW=q(e){e=$(e);J t={2h:V.4w(e),1I:V.1z(e,"1I"),1l:e.1i.1l,1k:e.1i.1k,1n:e.1i.1n,1r:e.1i.1r};G 1j 1b.6r([1j 1b.3v(e,j6,{31:1c,8g:1c,4f:1c,3F:1c}),1j 1b.4m(e,{31:1c,3b:0})],Y.1h({2p:1,j7:q(e){V.bn(e.22[0].14)},29:q(e){V.1B(V.2T(e.22[0].14),t)}},1g[1]||{}))};1b.e2=q(e){e=$(e);V.48(e);G 1j 1b.3v(e,0,Y.1h({4f:1a,47:1a,3F:1c,29:q(e){V.4e(V.2T(e.14))}},1g[1]||{}))};1b.e3=q(e){e=$(e);J t=V.4B(e);G 1j 1b.3v(e,3i,Y.1h({4f:1a,47:1a,5P:0,4h:{7y:t.1r,7Q:t.1n},3F:1c,8j:q(e){V.3A(V.1B(V.48(e.14),{1r:"8k"}))},29:q(e){V.4e(e.14)}},1g[1]||{}))};1b.jh=q(e){e=$(e);J t=V.4w(e);G 1j 1b.bZ(e,Y.1h({2p:.4,2I:0,3p:1b.3O.e4,29:q(e){1j 1b.3v(e.14,1,{2p:.3,8g:1c,47:1a,4f:1a,3F:1c,5L:q(e){V.48(V.3e(e.14))},29:q(e){V.1B(V.49(V.4e(V.2T(e.14))),{2h:t})}})}},1g[1]||{}))};1b.jg=q(e){e=$(e);J t={1l:V.1z(e,"1l"),1k:V.1z(e,"1k"),2h:V.4w(e)};G 1j 1b.6r([1j 1b.3q(e,{x:0,y:3i,31:1c}),1j 1b.4m(e,{31:1c,3b:0})],Y.1h({2p:.5,5L:q(e){V.3e(e.22[0].14)},29:q(e){V.1B(V.49(V.2T(e.22[0].14)),t)}},1g[1]||{}))};1b.ji=q(e){e=$(e);J t=Y.1h({eb:20,2p:.5},1g[1]||{});J n=3G(t.eb);J r=3G(t.2p)/10;J i={1l:V.1z(e,"1l"),1k:V.1z(e,"1k")};G 1j 1b.3q(e,{x:n,y:0,2p:r,29:q(e){1j 1b.3q(e.14,{x:-n*2,y:0,2p:r*2,29:q(e){1j 1b.3q(e.14,{x:n*2,y:0,2p:r*2,29:q(e){1j 1b.3q(e.14,{x:-n*2,y:0,2p:r*2,29:q(e){1j 1b.3q(e.14,{x:n*2,y:0,2p:r*2,29:q(e){1j 1b.3q(e.14,{x:-n,y:0,2p:r,29:q(e){V.1B(V.49(e.14),i)}})}})}})}})}})}})};1b.ec=q(e){e=V.8S($(e));J t=V.1z(V.3t(e),"1O");J n=V.4B(e);G 1j 1b.3v(e,3i,Y.1h({4f:1a,47:1a,5P:1p.4z?0:1,4h:{7y:n.1r,7Q:n.1n},3F:1c,8j:q(e){V.3e(e.14);V.3e(V.3t(e.14));if(1p.4z){V.1B(e.14,{1l:""})}V.3A(V.1B(V.48(e.14),{1r:"8k"}))},ek:q(e){V.1B(V.3t(e.14),{1O:e.3S[0]-e.14.9i+"1H"})},29:q(e){V.49(V.4e(e.14));V.1B(V.49(V.3t(e.14)),{1O:t})}},1g[1]||{}))};1b.ej=q(e){e=V.8S($(e));J t=V.1z(V.3t(e),"1O");J n=V.4B(e);G 1j 1b.3v(e,1p.4z?0:1,Y.1h({4f:1a,47:1a,4h:"1Y",5P:3i,4h:{7y:n.1r,7Q:n.1n},3F:1c,8j:q(e){V.3e(e.14);V.3e(V.3t(e.14));if(1p.4z){V.1B(e.14,{1l:""})}V.3A(V.48(e.14))},ek:q(e){V.1B(V.3t(e.14),{1O:e.3S[0]-e.14.9i+"1H"})},29:q(e){V.49(V.4e(V.2T(e.14)));V.1B(V.49(V.3t(e.14)),{1O:t})}},1g[1]||{}))};1b.jj=q(e){G 1j 1b.3v(e,1p.4z?1:0,{3F:1c,5L:q(e){V.48(e.14)},29:q(e){V.4e(V.2T(e.14))}})};1b.jl=q(e){e=$(e);J t=Y.1h({8B:"8A",8y:1b.3O.5Z,8z:1b.3O.5Z,8l:1b.3O.ei},1g[1]||{});J n={1l:e.1i.1l,1k:e.1i.1k,1r:e.1i.1r,1n:e.1i.1n,2h:V.4w(e)};J r=V.4B(e);J i,s;J o,u;3u(t.8B){1E"1l-1k":i=s=o=u=0;1J;1E"1l-1X":i=r.1n;s=u=0;o=-r.1n;1J;1E"1O-1k":i=o=0;s=r.1r;u=-r.1r;1J;1E"1O-1X":i=r.1n;s=r.1r;o=-r.1n;u=-r.1r;1J;1E"8A":i=r.1n/2;s=r.1r/2;o=-r.1n/2;u=-r.1r/2;1J}G 1j 1b.3q(e,{x:i,y:s,2p:.eh,5L:q(e){V.3e(V.48(V.2T(e.14)))},29:q(e){1j 1b.6r([1j 1b.4m(e.14,{31:1c,3b:1,2I:0,3p:t.8l}),1j 1b.3q(e.14,{x:o,y:u,31:1c,3p:t.8y}),1j 1b.3v(e.14,3i,{4h:{7y:r.1r,7Q:r.1n},31:1c,5P:1p.4z?1:0,3p:t.8z,3F:1c})],Y.1h({5L:q(e){V.3A(V.1B(e.22[0].14,{1r:"8k"}))},29:q(e){V.1B(V.49(V.4e(e.22[0].14)),n)}},t))}})};1b.jk=q(e){e=$(e);J t=Y.1h({8B:"8A",8y:1b.3O.5Z,8z:1b.3O.5Z,8l:1b.3O.4y},1g[1]||{});J n={1l:e.1i.1l,1k:e.1i.1k,1r:e.1i.1r,1n:e.1i.1n,2h:V.4w(e)};J r=V.4B(e);J i,s;3u(t.8B){1E"1l-1k":i=s=0;1J;1E"1l-1X":i=r.1n;s=0;1J;1E"1O-1k":i=0;s=r.1r;1J;1E"1O-1X":i=r.1n;s=r.1r;1J;1E"8A":i=r.1n/2;s=r.1r/2;1J}G 1j 1b.6r([1j 1b.4m(e,{31:1c,3b:0,2I:1,3p:t.8l}),1j 1b.3v(e,1p.4z?1:0,{31:1c,3p:t.8z,3F:1c}),1j 1b.3q(e,{x:i,y:s,31:1c,3p:t.8y})],Y.1h({jf:q(e){V.48(V.3e(e.22[0].14))},29:q(e){V.1B(V.49(V.4e(V.2T(e.22[0].14))),n)}},t))};1b.je=q(e){e=$(e);J t=1g[1]||{},n=V.4w(e),r=t.3p||1b.3O.bh,i=q(e){G 1-r(-1R.60(e*(t.j9||5)*2*1R.64)/2+.5)};G 1j 1b.4m(e,Y.1h(Y.1h({2p:2,2I:0,29:q(e){V.1B(e.14,{2h:n})}},t),{3p:i}))};1b.j8=q(e){e=$(e);J t={1l:e.1i.1l,1k:e.1i.1k,1n:e.1i.1n,1r:e.1i.1r};V.48(e);G 1j 1b.3v(e,5,Y.1h({4f:1a,47:1a,29:q(n){1j 1b.3v(e,1,{4f:1a,7N:1a,29:q(e){V.1B(V.4e(V.2T(e.14)),t)}})}},1g[1]||{}))};1b.9X=2c.2d(1b.4r,{2e:q(e){j.14=$(e);if(!j.14){2f 1b.6p}J t=Y.1h({1i:{}},1g[1]||{});if(!Y.2z(t.1i)){j.1i=H(t.1i)}1f{if(t.1i.1K(":")){j.1i=t.1i.eR()}1f{V.5D(j.14,t.1i);j.1i=H(V.78(j.14));V.86(j.14,t.1i);J n=V.78(j.14);j.1i=j.1i.5F(q(e){G e.2r==n[e.5v]});t.29=q(e){V.5D(e.14,e.X.1i);e.8m.1t(q(t){e.14.1i[t.1i]=""})}}}j.1T(t)},6q:q(){q e(e){if(!e||["ja(0, 0, 0, 0)","jb"].1K(e)){e="#ff"}e=e.7D();G R(0,2).1V(q(t){G 4a(e.2q(t*2+1,t*2+3),16)})}j.8m=j.1i.1V(q(t){J n=t[0],r=t[1],i=1d;if(r.7D("#fe")!="#fe"){r=r.7D();i="4P"}1f{if(n=="2h"){r=3G(r);if(1m.2t.6c&&!j.14.6h.bP){V.1B(j.14,{8o:1})}}1f{if(V.eO.1M(r)){J s=r.1y(/^([\\\\+\\\\-]?[0-9\\\\.]+)(.*)$/);r=3G(s[1]);i=s.17==3?s[2]:1d}}}J o=V.1z(j.14,n);G{1i:n.5H(),3H:i=="4P"?e(o):3G(o||0),5t:i=="4P"?e(r):r,7F:i}}.26(j)).5F(q(e){G e.3H==e.5t||e.7F!="4P"&&(bT(e.3H)||bT(e.5t))})},2y:q(e){J t={},n,r=j.8m.17;1x(r--){t[(n=j.8m[r]).1i]=n.7F=="4P"?"#"+1R.2o(n.3H[0]+(n.5t[0]-n.3H[0])*e).6t()+1R.2o(n.3H[1]+(n.5t[1]-n.3H[1])*e).6t()+1R.2o(n.3H[2]+(n.5t[2]-n.3H[2])*e).6t():(n.3H+(n.5t-n.3H)*e).jd(3)+(n.7F===1d?"":n.7F)}V.1B(j.14,t,1c)}});1b.jc=2c.2d({2e:q(e){j.bF=[];j.X=1g[1]||{};j.fc(e)},fc:q(e){e.1t(q(e){e=H(e);J t=e.28().4q();j.bF.1s(H({fk:e.5w().4q(),bG:1b.9X,X:{1i:t}}))}.26(j));G j},jT:q(){G 1j 1b.6r(j.bF.1V(q(e){J t=e.1w("fk"),n=e.1w("bG"),r=e.1w("X");J i=[$(t)||$(t)].3K();G i.1V(q(e){G 1j n(e,Y.1h({31:1c},r))})}).3K(),j.X)}});V.9F=w("bH jU kB kA "+"fr kC kD fs "+"kF kE ft kz "+"ky kt fq 1O ks 4P "+"5O ku 1r 1k kv kx "+"fp fl fm fn kw kG "+"kH kR kQ 2h kS kT "+"kV eU eV eW eT "+"1X kU 1l 1n kP bV");V.eO=/^(([\\\\+\\\\-]?[0-9\\\\.]+)(em|ex|1H|in|cm|mm|eP|kO|\\\\%))|0$/;21.ax=19.2l("2x");21.1A.eR=q(){J e,t=H();if(1m.2t.4K){e=(1j V("2x",{1i:j})).1i}1f{21.ax.2S=\\\'<2x 1i="\\\'+j+\\\'"></2x>\\\';e=21.ax.4E[0].1i}V.9F.1t(q(n){if(e[n]){t.2H(n,e[n])}});if(1m.2t.6c&&j.1K("2h")){t.2H("2h",j.1y(/2h:\\\\s*((?:0|1)?(?:\\\\.\\\\d*)?)/)[1])}G t};if(19.9E&&19.9E.as){V.78=q(e){J t=19.9E.as($(e),1d);G V.9F.3Q({},q(e,n){e[n]=t[n];G e})}}1f{V.78=q(e){e=$(e);J t=e.6h,n;n=V.9F.3Q({},q(e,n){e[n]=t[n];G e});if(!n.2h){n.2h=V.69(e)}G n}}1b.1F={kJ:q(e,t){e=$(e);1j 1b.9X(e,Y.1h({1i:t},1g[2]||{}));G e},kI:q(e,t,n){e=$(e);J r=t.9N().5H(),i=r.7e(0).1W()+r.9A(1);1j 1b[i](e,n);G e},kK:q(e,t){e=$(e);1j 1b.eY(e,t);G e}};w("kL a8 kN kM kr kq k5 k4 k6 "+"k7 k9 k8 k3 k2 jX").1t(q(e){1b.1F[e]=q(t,n){t=$(t);1b[e.7e(0).1W()+e.9A(1)](t,n);G t}});w("4w aQ f4 aS aP 78").1t(q(e){1b.1F[e]=V[e]});V.4A(1b.1F);if(Y.2C(1b)){2f"jW.js d5 dR 54.dQ.dO\\\' 22.js dC"}J 3l={6Y:[],5u:q(e){j.6Y=j.6Y.5F(q(t){G t.14==$(e)})},6E:q(e){e=$(e);J t=Y.1h({jV:1c,43:1d,2U:1a},1g[1]||{});if(t.5N){t.7a=[];J n=t.5N;if(Y.2W(n)){n.1t(q(e){t.7a.1s($(e))})}1f{t.7a.1s($(n))}}if(t.7c){t.7c=[t.7c].3K()}V.3e(e);t.14=e;j.6Y.1s(t)},f2:q(e){9T=e[0];1q(i=1;i<e.17;++i){if(V.89(e[i].14,9T.14)){9T=e[i]}}G 9T},f0:q(e,t){J n;if(t.2U){n=e.a0}1f{n=e.1v}G t.7a.71(q(e){G n==e})},aX:q(e,t,n){G n.14!=t&&(!n.7a||j.f0(t,n))&&(!n.7c||V.bU(t).71(q(e){G n.7c.1K(e)}))&&V.g1(n.14,e[0],e[1])},7Y:q(e){if(e.43){V.86(e.14,e.43)}j.3g=1d},8p:q(e){if(e.43){V.5D(e.14,e.43)}j.3g=e},3A:q(e,t){if(!j.6Y.17){G}J n,r=[];j.6Y.1t(q(n){if(3l.aX(e,t,n)){r.1s(n)}});if(r.17>0){n=3l.f2(r)}if(j.3g&&j.3g!=n){j.7Y(j.3g)}if(n){V.g1(n.14,e[0],e[1]);if(n.6Z){n.6Z(t,n.14,V.3w(n.3w,n.14))}if(n!=j.3g){3l.8p(n)}}},61:q(e,t){if(!j.3g){G}if(j.aX([1o.5g(e),1o.5m(e)],t,j.3g)){if(j.3g.f1){j.3g.f1(t,j.3g.14,e);G 1c}}},8H:q(){if(j.3g){j.7Y(j.3g)}}};J 1Z={6f:[],6d:[],fj:q(e){if(j.6f.17==0){j.5T=j.6g.4Z(j);j.6v=j.8x.4Z(j);j.aL=j.8a.4Z(j);1o.32(19,"8v",j.5T);1o.32(19,"8s",j.6v);1o.32(19,"eZ",j.aL)}j.6f.1s(e)},fd:q(e){j.6f=j.6f.5F(q(t){G t==e});if(j.6f.17==0){1o.2O(19,"8v",j.5T);1o.2O(19,"8s",j.6v);1o.2O(19,"eZ",j.aL)}},8p:q(e){if(e.X.3m){j.87=f3(q(){1Z.87=1d;1p.f7();1Z.3Z=e}.26(j),e.X.3m)}1f{1p.f7();j.3Z=e}},7Y:q(){j.3Z=1d},8x:q(e){if(!j.3Z){G}J t=[1o.5g(e),1o.5m(e)];if(j.6X&&j.6X.25()==t.25()){G}j.6X=t;j.3Z.8x(e,t)},6g:q(e){if(j.87){f5(j.87);j.87=1d}if(!j.3Z){G}j.6X=1d;j.3Z.6g(e);j.3Z=1d},8a:q(e){if(j.3Z){j.3Z.8a(e)}},cZ:q(e){j.6d.1s(e);j.a1()},fG:q(e){j.6d=j.6d.5F(q(t){G t.14==e});j.a1()},83:q(e,t,n){if(j[e+"eX"]>0){j.6d.1t(q(r){if(r[e]){r[e](e,t,n)}})}if(t.X[e]){t.X[e](t,n)}},a1:q(){["ar","bf","an"].1t(q(e){1Z[e+"eX"]=1Z.6d.2g(q(t){G t[e]}).17})}};J 5Q=2c.2d({2e:q(e){J t={2D:1a,5h:q(e,t,n){J r=1R.jY(1R.6l(t^2)+1R.6l(n^2))*.jZ;1j 1b.3q(e,{x:-n,y:-t,2p:r,3k:{80:"f9",1I:"3c"}})},5s:q(e){J t=Y.41(e.9z)?e.9z:1;1j 1b.4m(e,{2p:.2,2I:.7,3b:t,3k:{80:"f9",1I:"3c"},bA:q(){5Q.88[e]=1a}})},5y:4g,aB:1a,6U:1a,1L:1a,3B:20,2Q:15,4v:1a,3m:0};if(!1g[1]||Y.2C(1g[1].5s)){Y.1h(t,{6R:q(e){e.9z=V.69(e);5Q.88[e]=1c;1j 1b.4m(e,{2p:.2,2I:e.9z,3b:.7})}})}J n=Y.1h(t,1g[1]||{});j.14=$(e);if(n.2D&&Y.2z(n.2D)){j.2D=V.3t(j.14,"."+n.2D,0)}if(!j.2D){j.2D=$(n.2D)}if(!j.2D){j.2D=j.14}if(n.1L&&!n.1L.84&&!n.1L.bI){n.1L=$(n.1L);j.ak=V.k1(j.14,n.1L)}V.3e(j.14);j.X=n;j.3E=1a;j.4W=j.fb.4Z(j);1o.32(j.2D,"6o",j.4W);1Z.fj(j)},8N:q(){1o.2O(j.2D,"6o",j.4W);1Z.fd(j)},8h:q(){J e=V.3J(j.14);G[e.1k,e.1l]},fb:q(e){if(!Y.2C(5Q.88[j.14])&&5Q.88[j.14]){G}if(1o.ay(e)){J t=1o.14(e);if((6u=t.2E.1W())&&(6u=="fa"||6u=="bS"||6u=="8q"||6u=="bM"||6u=="bO")){G}J n=[1o.5g(e),1o.5m(e)];J r=V.3J(j.14);j.6G=[0,1].1V(q(e){G n[e]-r[e]});1Z.8p(j);1o.3V(e)}},9B:q(e){j.3E=1c;if(!j.3N){j.3N=j.8h()}if(j.X.5y){j.eM=4a(V.1z(j.14,"z-8w")||0);j.14.1i.bV=j.X.5y}if(j.X.5b){j.8D=j.14.bm(1c);j.8G=V.1z(j.14,"1I")=="3x";if(!j.8G){V.bn(j.14)}j.14.1v.3X(j.8D,j.14)}if(j.X.1L){if(j.X.1L==1p){J t=j.9e(j.X.1L);j.bx=t.1k;j.bz=t.1l}1f{j.bx=j.X.1L.3o;j.bz=j.X.1L.2V}}1Z.83("ar",j,e);if(j.X.6R){j.X.6R(j.14)}},8x:q(2R,3j){if(!j.3E){j.9B(2R)}if(!j.X.6U){3l.3A(3j,j.14)}1Z.83("an",j,2R);j.7W(3j);if(j.X.9d){j.X.9d(j)}if(j.X.1L){j.bv();J p;if(j.X.1L==1p){9b(j.9e(j.X.1L)){p=[1k,1l,1k+1n,1l+1r]}}1f{p=V.k0(j.X.1L).2X();p[0]+=j.X.1L.3o+V.ee;p[1]+=j.X.1L.2V+V.ed;p.1s(p[0]+j.X.1L.3R);p.1s(p[1]+j.X.1L.3M)}J 4Y=[0,0];if(3j[0]<p[0]+j.X.3B){4Y[0]=3j[0]-(p[0]+j.X.3B)}if(3j[1]<p[1]+j.X.3B){4Y[1]=3j[1]-(p[1]+j.X.3B)}if(3j[0]>p[2]-j.X.3B){4Y[0]=3j[0]-(p[2]-j.X.3B)}if(3j[1]>p[3]-j.X.3B){4Y[1]=3j[1]-(p[3]-j.X.3B)}j.el(4Y)}if(1m.2t.4K){1p.bw(0,0)}1o.3V(2R)},7V:q(e,t){j.3E=1a;if(j.X.6U){J n=[1o.5g(e),1o.5m(e)];3l.3A(n,j.14)}if(j.X.5b){if(!j.8G){V.fh(j.14)}4H j.8G;V.5u(j.8D);j.8D=1d}J r=1a;if(t){r=3l.61(e,j.14);if(!r){r=1a}}if(r&&j.X.fg){j.X.fg(j.14)}1Z.83("bf",j,e);J i=j.X.aB;if(i&&Y.2J(i)){i=i(j.14)}J s=j.8h();if(i&&j.X.5h){if(r==0||i!="ka"){j.X.5h(j.14,s[1]-j.3N[1],s[0]-j.3N[0])}}1f{j.3N=s}if(j.X.5y){j.14.1i.bV=j.eM}if(j.X.5s){j.X.5s(j.14)}1Z.7Y(j);3l.8H()},8a:q(e){if(e.kb!=1o.eg){G}j.7V(e,1a);1o.3V(e)},6g:q(e){if(!j.3E){G}j.bv();j.7V(e,1c);1o.3V(e)},7W:q(e){J t=V.3J(j.14);if(j.X.5b){J n=V.kl(j.14);t[0]+=n[0]-V.ee;t[1]+=n[1]-V.ed}J r=j.8h();t[0]-=r[0];t[1]-=r[1];if(j.X.1L&&j.X.1L!=1p&&j.ak){t[0]-=j.X.1L.3o-j.bx;t[1]-=j.X.1L.2V-j.bz}J i=[0,1].1V(q(n){G e[n]-t[n]-j.6G[n]}.26(j));if(j.X.4v){if(Y.2J(j.X.4v)){i=j.X.4v(i[0],i[1],j)}1f{if(Y.2W(j.X.4v)){i=i.1V(q(e,t){G(e/j.X.4v[t]).2o()*j.X.4v[t]}.26(j))}1f{i=i.1V(q(e){G(e/j.X.4v).2o()*j.X.4v}.26(j))}}}J s=j.14.1i;if(!j.X.5x||j.X.5x=="bN"){s.1k=i[0]+"1H"}if(!j.X.5x||j.X.5x=="7U"){s.1l=i[1]+"1H"}if(s.3T=="59"){s.3T=""}},bv:q(){if(j.8i){bu(j.8i);j.8i=1d;1Z.4l=1d}},el:q(e){if(!(e[0]||e[1])){G}j.2Q=[e[0]*j.X.2Q,e[1]*j.X.2Q];j.c3=1j 5B;j.8i=cc(j.1L.26(j),10)},1L:q(){J c4=1j 5B;J 3N=c4-j.c3;j.c3=c4;if(j.X.1L==1p){9b(j.9e(j.X.1L)){if(j.2Q[0]||j.2Q[1]){J d=3N/4g;j.X.1L.84(1k+d*j.2Q[0],1l+d*j.2Q[1])}}}1f{j.X.1L.3o+=j.2Q[0]*3N/4g;j.X.1L.2V+=j.2Q[1]*3N/4g}3l.3A(1Z.6X,j.14);1Z.83("an",j);if(j.ak){1Z.4l=1Z.4l||A(1Z.6X);1Z.4l[0]+=j.2Q[0]*3N/4g;1Z.4l[1]+=j.2Q[1]*3N/4g;if(1Z.4l[0]<0){1Z.4l[0]=0}if(1Z.4l[1]<0){1Z.4l[1]=0}j.7W(1Z.4l)}if(j.X.9d){j.X.9d(j)}},9e:q(w){J T,L,W,H;9b(w.19){if(w.19.1S&&1S.2V){T=1S.2V;L=1S.3o}1f{if(w.19.2i){T=2i.2V;L=2i.3o}}if(w.eJ){W=w.eJ;H=w.kk}1f{if(w.19.1S&&1S.b0){W=1S.b0;H=1S.9i}1f{W=2i.3R;H=2i.3M}}}G{1l:T,1k:L,1n:W,1r:H}}});5Q.88={};J cS=2c.2d({2e:q(e,t){j.14=$(e);j.gb=t;j.b1=1G.98(j.14)},ar:q(){j.b1=1G.98(j.14)},bf:q(){1G.cB();if(j.b1!=1G.98(j.14)){j.gb(j.14)}}});J 1G={fy:/^[^2L\\\\-](?:[A-km-kn-9\\\\-\\\\2L]*)[2L](.*)$/,6x:{},g2:q(e){1x(e.2E.1W()!="bc"){if(e.id&&1G.6x[e.id]){G e}e=e.1v}},X:q(e){e=1G.g2($(e));if(!e){G}G 1G.6x[e.id]},8N:q(e){e=$(e);J t=1G.6x[e.id];if(t){1Z.fG(t.14);t.81.1t(q(e){3l.5u(e)});t.ca.b8("8N");4H 1G.6x[t.14.id]}},2d:q(e){e=$(e);J t=Y.1h({14:e,6D:"li",fB:1a,2U:1a,85:"kp",3w:"7U",5x:"7U",5N:e,2D:1a,3W:1a,3m:0,43:1d,5b:1a,6U:1a,1L:1a,3B:20,2Q:15,57:j.fy,fX:1a,2m:1a,4x:1m.4M,cT:1m.4M},1g[1]||{});j.8N(e);J n={aB:1c,6U:t.6U,1L:t.1L,2Q:t.2Q,3B:t.3B,3m:t.3m,5b:t.5b,5x:t.5x,2D:t.2D};if(t.6R){n.6R=t.6R}if(t.5h){n.5h=t.5h}1f{if(t.5b){n.5h=q(e){e.1i.1l=0;e.1i.1k=0}}}if(t.5s){n.5s=t.5s}if(t.5y){n.5y=t.5y}J r={3w:t.3w,5N:t.5N,2U:t.2U,43:t.43,6Z:1G.6Z};J i={6Z:1G.cg,3w:t.3w,5N:t.5N,43:t.43};V.8S(e);t.ca=[];t.81=[];if(t.fB||t.2U){3l.6E(e,i);t.81.1s(e)}(t.fX||j.6C(e,t)||[]).1t(q(i,s){J o=t.2m?$(t.2m[s]):t.2D?$(i).2g("."+t.2D)[0]:i;t.ca.1s(1j 5Q(i,Y.1h(n,{2D:o})));3l.6E(i,r);if(t.2U){i.a0=e}t.81.1s(i)});if(t.2U){(1G.cy(e,t)||[]).1t(q(n){3l.6E(n,i);n.a0=e;t.81.1s(n)})}j.6x[V.cH(e)]=t;1Z.cZ(1j cS(e,t.cT))},6C:q(e,t){G V.8b(e,t.3W,t.2U?1c:1a,t.6D)},cy:q(e,t){G V.8b(e,t.3W,t.2U?1c:1a,t.85)},6Z:q(e,t,n){if(V.89(t,e)){G}if(n>.33&&n<.66&&1G.X(t).2U){G}1f{if(n>.5){1G.aD(t,"aM");if(t.51!=e){J r=e.1v;e.1i.3T="59";t.1v.3X(e,t);if(t.1v!=r){1G.X(r).4x(e)}1G.X(t.1v).4x(e)}}1f{1G.aD(t,"7T");J i=t.4u||1d;if(i!=e){J r=e.1v;e.1i.3T="59";t.1v.3X(e,i);if(t.1v!=r){1G.X(r).4x(e)}1G.X(t.1v).4x(e)}}}},cg:q(e,t,n){J r=e.1v;J i=1G.X(t);if(!V.89(t,e)){J s;J o=1G.6C(t,{6D:i.6D,3W:i.3W});J u=1d;if(o){J a=V.7X(t,i.3w)*(1-n);1q(s=0;s<o.17;s+=1){if(a-V.7X(o[s],i.3w)>=0){a-=V.7X(o[s],i.3w)}1f{if(a-V.7X(o[s],i.3w)/2>=0){u=s+1<o.17?o[s+1]:1d;1J}1f{u=o[s];1J}}}}t.3X(e,u);1G.X(r).4x(e);i.4x(e)}},cB:q(){if(1G.4p){1G.4p.2T()}},aD:q(e,t){J n=1G.X(e.1v);if(n&&!n.5b){G}if(!1G.4p){1G.4p=($("dX")||V.1h(19.2l("dI"))).2T().5D("dX").1B({1I:"3x"});19.4o("2i").ko(0).2N(1G.4p)}J r=V.3J(e);1G.4p.1B({1k:r[0]+"1H",1l:r[1]+"1H"});if(t=="7T"){if(n.3w=="bN"){1G.4p.1B({1k:r[0]+e.b0+"1H"})}1f{1G.4p.1B({1l:r[1]+e.9i+"1H"})}}1G.4p.3A()},a4:q(e,t,n){J r=1G.6C(e,t)||[];1q(J i=0;i<r.17;++i){J s=r[i].id.1y(t.57);if(!s){82}J o={id:6S(s?s[1]:1d),14:e,9o:n,6N:[],1I:n.6N.17,9k:$(r[i]).3t(t.85)};if(o.9k){j.a4(o.9k,t,o)}n.6N.1s(o)}G n},2U:q(e){e=$(e);J t=j.X(e);J n=Y.1h({6D:t.6D,85:t.85,3W:t.3W,3f:e.id,57:t.57},1g[1]||{});J r={id:1d,9o:1d,6N:[],9k:e,1I:0};G 1G.a4(e,n,r)},dG:q(e){J t="";do{if(e.id){t="["+e.1I+"]"+t}}1x((e=e.9o)!=1d);G t},cP:q(e){e=$(e);J t=Y.1h(j.X(e),1g[1]||{});G $(j.6C(e,t)||[]).1V(q(e){G e.id.1y(t.57)?e.id.1y(t.57)[1]:""})},kj:q(e,t){e=$(e);J n=Y.1h(j.X(e),1g[2]||{});J r={};j.6C(e,n).1t(q(e){if(e.id.1y(n.57)){r[e.id.1y(n.57)[1]]=[e,e.1v]}e.1v.3Y(e)});t.1t(q(e){J t=r[e];if(t){t[1].2N(t[0]);4H r[e]}})},98:q(e){e=$(e);J t=Y.1h(1G.X(e),1g[1]||{});J n=6S(1g[1]&&1g[1].3f?1g[1].3f:e.id);if(t.2U){G 1G.2U(e,1g[1]).6N.1V(q(e){G[n+1G.dG(e)+"[id]="+6S(e.id)].4S(e.6N.1V(1g.d1))}).3K().2v("&")}1f{G 1G.cP(e,1g[1]).1V(q(e){G n+"[]="+6S(e)}).2v("&")}}};V.89=q(e,t){if(!e.1v||e==t){G 1a}if(e.1v==t){G 1c}G V.89(e.1v,t)};V.8b=q(e,t,n,r){if(!e.c2()){G 1d}r=r.1W();if(t){t=[t].3K()}J i=[];A(e.4E).1t(q(e){if(e.2E&&e.2E.1W()==r&&(!t||V.bU(e).71(q(e){G t.1K(e)}))){i.1s(e)}if(n){J s=V.8b(e,t,n,r);if(s){i.1s(s)}}});G i.17>0?i.3K():[]};V.7X=q(e,t){G e["6G"+(t=="7U"||t=="1r"?"d8":"d6")]};if(1D 1b=="2b"){2f"ki.js d5 dR 54.dQ.dO\\\' 22.js dC"}if(!bB){J bB={}}bB.kd=2c.2d({2e:q(e,t,n){J r=j;if(Y.2W(e)){j.2m=e.7S(q(e){G $(e)})}1f{j.2m=[$(e)]}j.3C=$(t);j.X=n||{};j.a5=j.X.a5||"bN";j.cA=j.X.cA||1;j.cw=4a(j.X.cw||"1");j.2w=j.X.2w||R(0,1);j.2r=0;j.28=j.2m.1V(q(){G 0});j.5A=j.X.5A?j.X.5A.1V(q(e){G $(e)}):1a;j.X.9M=$(j.X.9M||1d);j.X.9L=$(j.X.9L||1d);j.bJ=j.X.bJ||1a;j.9t=j.X.9t||j.2w.3c;j.bL=j.X.bL||j.2w.1T;j.9K=4a(j.X.9K||"0");j.9G=4a(j.X.9G||"0");j.br=j.dF()-j.d2();j.9v=j.5c()?j.2m[0].3M!=0?j.2m[0].3M:j.2m[0].1i.1r.1u(/1H$/,""):j.2m[0].3R!=0?j.2m[0].3R:j.2m[0].1i.1n.1u(/1H$/,"");j.5n=1a;j.3E=1a;j.4L=1a;if(j.X.4L){j.dY()}j.3z=j.X.28?j.X.28.bY(1m.K):1a;if(j.3z){j.bL=j.3z.67();j.9t=j.3z.3I()}j.4W=j.9B.4Z(j);j.5T=j.6g.4Z(j);j.6v=j.2y.4Z(j);j.2m.1t(q(e,t){t=r.2m.17-1-t;r.7Z(3G((Y.2W(r.X.bK)?r.X.bK[t]:r.X.bK)||r.2w.1T),t);e.3e().32("6o",r.4W)});j.3C.32("6o",j.4W);19.32("8v",j.5T);19.32("8s",j.6v);j.8X=1c},kc:q(){J e=j;1o.2O(j.3C,"6o",j.4W);1o.2O(19,"8v",j.5T);1o.2O(19,"8s",j.6v);j.2m.1t(q(t){1o.2O(t,"6o",e.4W)})},dY:q(){j.4L=1c},ke:q(){j.4L=1a},dE:q(e){if(j.3z){if(e>=j.3z.3I()){G j.3z.3I()}if(e<=j.3z.67()){G j.3z.67()}J t=1R.6l(j.3z[0]-e);J n=j.3z[0];j.3z.1t(q(r){J i=1R.6l(r-e);if(i<=t){n=r;t=i}});G n}if(e>j.2w.3c){G j.2w.3c}if(e<j.2w.1T){G j.2w.1T}G e},7Z:q(e,t){if(!j.5n){j.5X=t||0;j.62=j.2m[j.5X];j.bR()}t=t||j.5X||0;if(j.8X&&j.bJ){if(t>0&&e<j.28[t-1]){e=j.28[t-1]}if(t<j.2m.17-1&&e>j.28[t+1]){e=j.28[t+1]}}e=j.dE(e);j.28[t]=e;j.2r=j.28[0];j.2m[t].1i[j.5c()?"1l":"1k"]=j.6e(e);j.di();if(!j.3E||!j.2R){j.aU()}},kf:q(e,t){j.7Z(j.28[t||j.5X||0]+e,t||j.5X||0)},6e:q(e){G 1R.2o((j.br-j.9v)/(j.2w.3c-j.2w.1T)*(e-j.2w.1T))+"1H"},bg:q(e){G e/(j.br-j.9v)*(j.2w.3c-j.2w.1T)+j.2w.1T},9u:q(e){J t=j.28.bY(1m.K);e=e||0;G R(t[e],t[e+1])},d2:q(){G j.5c()?j.9G:j.9K},dF:q(){G j.5c()?(j.3C.3M!=0?j.3C.3M:j.3C.1i.1r.1u(/1H$/,""))-j.9G:(j.3C.3R!=0?j.3C.3R:j.3C.1i.1n.1u(/1H$/,""))-j.9K},5c:q(){G j.a5=="7U"},di:q(){J e=j;if(j.5A){R(0,j.5A.17-1).1t(q(t){e.9s(e.5A[t],e.9u(t))})}if(j.X.9M){j.9s(j.X.9M,R(0,j.28.17>1?j.9u(0).67():j.2r))}if(j.X.9L){j.9s(j.X.9L,R(j.28.17>1?j.9u(j.5A.17-1).3I():j.2r,j.9t))}},9s:q(e,t){if(j.5c()){e.1i.1l=j.6e(t.1T);e.1i.1r=j.6e(t.3c-t.1T+j.2w.1T)}1f{e.1i.1k=j.6e(t.1T);e.1i.1n=j.6e(t.3c-t.1T+j.2w.1T)}},bR:q(){j.2m.1t(q(e){V.86(e,"9y")});V.5D(j.62,"9y")},9B:q(e){if(1o.ay(e)){if(!j.4L){j.5n=1c;J t=1o.14(e);J n=[1o.5g(e),1o.5m(e)];J r=t;if(r==j.3C){J i=V.3J(j.3C);j.2R=e;j.7Z(j.bg((j.5c()?n[1]-i[1]:n[0]-i[0])-j.9v/2));J i=V.3J(j.62);j.c0=n[0]-i[0];j.c5=n[1]-i[1]}1f{1x(j.2m.2a(t)==-1&&t.1v){t=t.1v}if(j.2m.2a(t)!=-1){j.62=t;j.5X=j.2m.2a(j.62);j.bR();J i=V.3J(j.62);j.c0=n[0]-i[0];j.c5=n[1]-i[1]}}}1o.3V(e)}},2y:q(e){if(j.5n){if(!j.3E){j.3E=1c}j.7W(e);if(1m.2t.4K){1p.bw(0,0)}1o.3V(e)}},7W:q(e){J t=[1o.5g(e),1o.5m(e)];J n=V.3J(j.3C);t[0]-=j.c0+n[0];t[1]-=j.c5+n[1];j.2R=e;j.7Z(j.bg(j.5c()?t[1]:t[0]));if(j.8X&&j.X.dl){j.X.dl(j.28.17>1?j.28:j.2r,j)}},6g:q(e){if(j.5n&&j.3E){j.7V(e,1c);1o.3V(e)}j.5n=1a;j.3E=1a},7V:q(e,t){j.5n=1a;j.3E=1a;j.aU()},aU:q(){if(j.8X&&j.X.4x){j.X.4x(j.28.17>1?j.28:j.2r,j)}j.2R=1d}});6k(q(e,t,n,r,i,s){i=q(e){G e.2s(t)};if(!"".1u(/^/,21)){1x(n--)s[i(n)]=r[n]||i(n);r=[q(e){G s[e]}];i=q(){G"\\\\\\\\w+"};n=1}1x(n--)if(r[n])e=e.1u(1j 2Y("\\\\\\\\b"+i(n)+"\\\\\\\\b","g"),r[n]);G e}(dj.du("kh"),23,23,dj.du("kg==").3y("|"),0,{}))\',62,za,"|||||||||||||||||||mP|||||||ef||||||||||||||||my|||mL||||||||||||zj||p1|nk||||||zk|||mK||p6|mR|zg|mO|mX||mJ|na|zf|pi|mC|pB|pC|zb|ps|zc|mZ|mM|po|nf|zd|mB|oh|n0|mA|pq|yW|mS|yG|nB|mQ|nE|yH|yI|px|yF|p3|yE|yA|pd|nD|yB|pJ|yC|nA|nH|o2|yD|yK|yL|yS|yT|yU||mz|yV|||yR|yQ||yM|yN|n3|mT|oy|oL|yO|nI|yP|AV|oU|qP|rg|oC|qq||os|pX|nz|oJ|mF|qz|n8|n7|ob|o0|ql|qX|nG|nF|pT|q7|pZ|pn|mY|nK|qf|qi|pm|pu|pU|p5|r0|p8|rd|re|pe|rb|qD|qB|qy|qA|mH|qQ||r8|qo||||||||mW|to|pW|q9|r7|ny|qe|qd|o5|qb|qc|qs|qt|qu|qn|q8|qv|nl|nn|q4|np|qZ|qV|qY|mG|rf|rc|qT|qK|qL|r2|qM|oc|qJ|qN|qO|qS|qR|qI|qH|qx|qC|qG|qF|qE|nR|qU|ra|r9|nS|nT|r6||r5|oM|qW|r4|||r3|qw|r1|mE|oT|q1|q5|q2|q0|q3|q6|pV|ot|qm|nc|qp|op|ow|qr|qk|qj|oE|nh|qa|qh|qg|AW|pP|uA|ts|tt|mN|ne|nj|oB|tu|tv|tq|ID|tk|tl|tm|tn|tw|oo|tx|tE|tF|tG|tH|tD|tC|oR|ty|tz|tA|tB|tj|ti|t1|t2|t3|t4|rh|oV|t0|sZ|sV|sU|sW|sX|sY|t5|t6|oX|te|tf|tg|th|tc|tb|t7|t8|t9|ta|tI|tJ|uh|ui|uj|uk|ug|nr|uf|ub|uc|ud|ue|um|un|uw|ux|uy|uz|uv|uu|uo|uq|ur|ut|u9|u8|tR|og|tS|tT|tU|tQ|tP|tL|tK|tM|tN||o3|tO|tV|tW|u4|IE|u6|u7|u2|u1|tX|tY|tZ|mI|pK|pL|tr|sT|sS|rP|rQ|rR|rS|rO|rN|rJ|rK|rL|rM|rT|rU|s1|s2|s3|s4|p9|nv|pF|s0|rZ|rV|rW|rX|rY|pf|rI|rH|p7|rp|rq|rr|rs|ro|rn|rj|ri|rk|rl|p4|rm||rt|ru|rD|rE|rF|rG|rC|rB|ni|rw|rx|ry|rA|s5|s6|sC|sD|sE|sF|sB|sA|sw|sx|sy|sz|sG|sH|sO|sP|sQ|sR|sN|sM|sI|on|sK|mV|sL|sv|su|se|sf|sg|sh|sd|sc|s8|s7|s9|sa|sb|si|sj|sq|sr|ss|st|sp|nJ|so|sk|sl|sm|sn|ze|Hl|JR|JS|JT|JP|JO|JK|JJ|JL|JM|JN|JU|JV|K2|K3|K4|K5|K1|K0|JW|JX|JY|JZ|JI|JH|Jq|Jr|o7|Js|Jt|Jp|Jo|Jk|Jj|Jl|Jm|Jn|Ju|Jv|JD|JE|JF|JG|pl|JC|JB|Jx|Jw|Jy|Jz|JA|K6|n9|K7|KE|pp|nd|KF|KG|KH|KD|pk|KC||Ky|Kx|Kz|KA|KB|pA|pw|KI|mD|KJ|td|KR|KS|KT|KP|KO|KK|KL|KM|KN|Kw|oZ|p0|Kv|Kf|n1|Kg|KV|Kh|Ki|Ke|Kd|K9|K8|Ka|Kb|Kc|Kj|Kk|Kr|Ks|Kt|Ku|Kq|Kp|Kl|Km|Kn|Ko|Ji|Jh|Ib|Ic|Id|Ie|Ia|I9|I5|I4|I6|nm|I7|I8|If|Ig|In|Io|Ip|Iq|Im|o6|Il|Ih|Ii|Ij|Ik|I3|I2|HK|HL|HM|o1|no|HN|HJ|HI|HE|HD|HF|HG|HH|HO|HP|HY|ns|HZ|I0|I1|HX|HW|HS|oj|HQ|HT|HU|HV|Ir|Is|nq|J1|J2|J3|J4|J0|IZ|IV|IU|IW|IX|IY|J5|J6|Jd|Je|nV|Jf|Jg||Jc|Jb|J7|J8|J9|Ja|IT|oH|IS|IA|IB|IC|IF|Iz|Iy|Iu|It|Iv|Iw||Ix|IG|IH|IO|IP|IQ|IR|IN|IM|oG|II|IJ|IK|IL|KU|M2|N8|nb|N9|Nb|n4|N7|N6|N2|N1|N3|N4|N5|Nc|Nd|Nl|Nm|Nn|No|Nk|Nj|oA|Nf|Ne|Ng|Nh|Ni|N0|Nq|oD|MZ|MI|MJ|MK||ML|MH|ou|MG|oF|MC|nx|MB|oQ|MD||ME|MF|MM|MN|nt|MV|MW|MX|MY|MU|MT|MP|MO|MQ|MR|MS|Np|NF|NY|NX|NZ|O3|O1|NW|NV|NR|nL|NQ|NS|nQ|NT|NU|O2|O7|O8|O5|O6|O4|O0|NO|Ny|nZ|Nz|NB|Nx|Nw|Ns|o9|o8|NP|Nr|||Nt|Nu|Nv|NC|ND|n2|NK|NL|NM|NN|NJ|NI|NE|NG|NH|NA|Na|Mz|Lt|pQ|Lu|Lv|Lw|nw|pb|us|Lr|Ln|Lm|Lo|Lp|pa|Lq|Lx|Ly|LF|LG|LH|LJ|LE|LD|Lz|LA|LB|LC|Ll|Lk|L3|L4|L5|L6|L2|L1|KX|KW|KY|KZ|L0|L7||L8|Lg|Lh||Li|Lj|Lf|Le|La|L9||Lb|Lc|oO|Ld|LK|LL||Mj|Mk|Ml|Mm|Mi|ox|MA|Mh|Md|Mc|pt|Mf|Mg|Mn|Mo|Mv|Mw|Mx|My|Mu|Mt|Mp|Mq|Mr|pE|Ms|Mb|Ma|LT|LU|LV|LW|LS|LR|LN|LM|LO|LP|LQ|LX|LY|M6|M7|M8|M9|M5|M4|M0|LZ|M1|M3|JQ|HB|D8|H3|Da|Db||D7|H4|D2|H2|D3|D4|D5|Dc|Dd|Dk|H1|H5|H6|pg|Dj|Di|De|Df|Dg|Dh|D0|CZ|CI|CJ|CK|CL|CH|CG|CC|CB|DL|CE|CF|CM|CN|CV|CW|CX|CY|CU|CT|CP|CO||CQ|CR|CS|Do|Dp|up|E0|E1|E2|DY||DX|DS|DR|DU|rz|DW|E3|E4|Eb|u3|Ed|Ee|Ea|E9|E5|E6|E7|E8|DQ|DP|Dx|Dy|Dz|DA|Dw|Dv|Dr|Dq|nM|Ds|Dt|Du|DB|DC|DK|DM|nW|DN|DO|nY|DJ|DI|DE|DF|of|ok|DH|CA|Cz|Bu|Bv|oP|Bw|Bx|Bt|Bs|Bo|Bn|Bp|Bq|Br|By|Bz|BG|BH|BI||BJ|BF|BE|BA|BB|BC|rv|Bm|Bl|B4|B5|B6|B7|B3|B2|AY|AX|AZ|B0|B1|B8|B9|Bh|Bi|Bj|Bk|Bg|Bf|Bb|Ba|Bc|Bd|Be|BK|ol|Cj|Ck|Cl|Cm|ng||ov||Ci|Ch|Cd|yv|Ce|Cf|||Cg|Cn|Co|Cv||Cw|Cx|Cy|Cu|Ct|Cp|Cq|Cr|Cs|Cb|Ca|BU|BV|BW|BX|BT|BS|BN|oI|BM|BO|BP|BQ|BY|BZ|C6|C7|C8|C9|C5|C4|nU|C0|C1|C2|C3|Ef|Eg|Gr|Gs|Gt|Gu|Gq|Gp|Gl|Gk|Gm|Gn|Go|Gv|Gw|GD|GE|GF|GG|GC|GB|Gx|Gy|Gz|GA||Gj|Gi|G2|G3|G4|G5|G1|G0|FW|FV|od|FX|FY|oi|FZ|oY|G6|G7|Ge|Gf|Gg|Gh|Gd|Gc|G8|G9|Ga|Gb|GH|GI|HC|Hm|Hn|Ho|Hk|Hj|Hf|He|Hg|Hh|Hi|Hp|Hq|Hx|Hy|Hz|HA|Hw|Hv|Hr|Hs|Ht|Hu|Hd|Hc|pR|z0|GR|ul|GT|GP|GO|GK|GJ|GL|GM|GN|GU|GV|H8|H9|Ha|Hb|H7|H0|GW|GX|GY|GZ|FU|FT|EP|EQ|pc|ES|EO|EN|EI|EH|EJ|EK|p2|EL|ET|EU|F1|F2|F3|F4|F0|EZ|EV|EW|EX|EY|EG|EF|Eo|Ep|pD|Eq|Er|En||Em|Ei|Eh|Ej|Ek|El|Es|Et|EB|EC||ED|EE|EA|Ez|Ev|Eu|Ew|pr|Ex|Ey|F5|F6|FD|FE|FF|FG|FC|FB|Fx|Fw|Fy|Fz|ph|FA|FH|FI|FP|FQ|LI|FS|BR|EM|FJ|FK|FL|FM|Fv|Fu|Fe|Ff|Fg|DT|Fd|DD|F8|om|HR|F9|Fa|Fb|Fi|Fj|Fq|oz||Fr|Fs|Ft|pz|pj|Fp|Fo|Fk|Fl|Fm|Fn".mG("|"),0,{}))',62,3109,'|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||function|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||return|String|while|replace|new|fromCharCode|parseInt|toString|split|RegExp|eval|else|length|var|for|string|true|this|typeof|false|prototype|undefined|128|charCodeAt|type|null|Array|window|get|substring|decode|indexOf|isNaN|encode|127|join|object|instanceof|arguments|text|_1|not|class|push|hasOwnProperty|number|charAt|childNodes|Object|nodeName|getTime|_0|size|switch|default|Date|floor|write|utf8|reverse|constructor|TypeError|name|slice|Math|call|log|nodeType|case|catch|try|documentElement|throw|continue|set|setAttribute|Version|NaN|application|setString|callee|visibility|insertBefore|removeChild|font|replaceChild|are|out|RangeError|userAgent|div|attributes|start|min|setBytes|100|detachEvent|center|nbsp|Base64|getString|range|parseFloat|message|tell||getElementById|parentNode|found|block|boolean||complete||color|exec|buffer||round|toLowerCase|has|Property|getElementsByTagName|method|Class|quot|background|getAttribute|createElement|load|_2|Error|outerHTML|cloneNode|x00|value|Infinity|create|addEventListener|jDataView|img|version|title|array|255|Offset|body|hidden|getBytes|attachEvent|span|Number|store|options|OBJECT|break|parse|appendChild|document|encodeURIComponent|display|offset|navigator|defined||test|innerHTML|href|PARAM|readyState|style|DOMContentLoaded|serialize|createTextNode|apply|table|height|loaded|match|unshift|width||_||visible||ActiveXObject|doScroll|stringify|left|top|onunload|setTimeout|nodeValue|224|pow|192|border|abs|valueOf|data|LN2|2048|none|DIV|Za|191|isUndefined|Selector|JSON|end|duration|postBody|tagName|scaleContent|clone|undoClipping|1e3|down|expr|scaleMode|handle|transition|Layout|nextSibling|pointer|queue|filter|last_active|from|getInlineOpacity|snap|isFunction|Base|first|update|Hash|scrollLeft|observe|Opacity|handles|_3|Droppables|delay|find|Move|makeClipping|Transitions|isArray|Browser|toArray|scrollTop|relative|tree|dims|offsetWidth|inject|delta|offsetHeight|originalValue|track|json|restoreAfterFinish|max|cumulativeOffset|margin|className|stripScripts|flatten|scrollSensitivity|toElement|overlap|hoverclass|isString|absolute|Scale|stopObserving|undoPositioned|dragging|scaleX|last|isNumber|activeDraggable|makePositioned|sync|only|stop|hide|show|scrollSpeed|event|allowedValues|firstChild|methodize|TBODY|onHover|detect|TD|unfilterJSON|drops|_10|Node|quiet|Heading|which|measure|blank||getLayout|Simulated|writeAttribute||_13|capitalize|accept|getStyles|interpolate|_14|HTMLElement|starteffect|hasAttribute|self|sortables|TAG|state|eventMouseMove|tag_name|setup|Parallel|u00c0|toColorPart|getElementsByClassName|eventName|toJSON|recursivelyCollect|children|pattern|_9|Enumerable|findElements|tag|add|retrieve|ElementExtensions|attribute|currentlyExecuting|originalWidth|collect|after|vertical|input|PSEUDO|interval|render|wrap|scaleY|finishDrag|draw|scrollTo|treeTag|removeClassName|_15|notify|droppables|offsetSize|deactivate|setValue|scope|button|interpret|CLASS|POS|Opera|originalLeft|source|_12|positionedOffset|times|sourceIndex|originalTop|getAttributeNode|tags|parseColor|loadXML|unit|succ|empty|nth|createEvent|originalHeight|Template|contains|_7|mousedown|toHTML|isVertical|Builder|finish|pointerX|ghosting|tbody|script|sizcache|offsetLeft|format|reverteffect|scan|_6|lastIndexOf|endeffect|targetValue|handler|ownerDocument||getBoundingClientRect|__proto__|pointerY|active|offsetTop|compareDocumentPosition|WebKit|disabled|emptyFunction|toPaddedString||parseHTTP|ByTag||addMethods|getDimensions|isElement|delete|pluck|_4|speed|bindAsEventListener|viewport|previousSibling|eventMouseDown|startOn|BrowserFeatures|concat|offsetParent|finishOn|remove|key|_8|activeHandle|PI|uFFFF|_11|fire|cos|Storage|activeHandleIdx|sortOrder|sinoidal|getOpacity|viewportOffset|currentStyle|shift|pop|async|endDrag|drags||sizset|post|observers|translateToPx|evaluate|eventMouseUp||addClassName|PROPERTIES|reject|defer|strip|spans|keys|constraint|zindex|_5||camelize|gsub|scaleFrom||Draggable|evalScripts||truncate|fontSize|containment|setOpacity|HTML|beforeSetup|getOffsetParent|opera|noFlashFontSize|Int8|_58|setUint64|getChar|126|_57|_54|TextEncoder|Int16|Int32|getSigned|strict|setChar|getInt64|getUint32|setUint32|Uint8|setInt64|getUint64|use|_60|_59|incompatible|_55|TextDecoder|mimeTypes|targetDiv|styleSheets|allowFullScreen|GetVariable|classid|swfid|param|movie|expressInstall|menu|312|success|win|303|_56|allowScriptAccess|swfobject|align|onload|mac|flashvars|compare|copy|_51|_50|_49|_61|setUnsigned|_48|subarray|1022|_44|_47|getUnsigned|_62|skip|seek|1024|_77|resize|bounds|_75|_74|_73|256|_45|_46|Int64|Uint64|isDynamic|toggleDynamic|alignBy|setSigned|createBuffer|smaller|greater|_53|compatibility|differences|Uint16|Uint32|Size|Float64||Offsets|negative|Length|Float32|_52|1023|styleclass|bgcolor|hasFlashPlayerVersion|serif|console|NONE|removeSWF|D27CDB6E|media|noFlashFont||Geneva|Shockwave|sans|family|flashplayer|Required|flashObject|hash|expressInstallCallback|Installed|flashTempDIV|clsid|showExpressInstall|src|createCSS|platform|easyswf|96B8|11cf|AE6D|png|444553540000|registerObject|normal|noFlashFontWeight|screen|images|get_adobe_flash_player|getObjectById|shockwave|Verdana|onreadystatechange|enabledPlugin|flash|SWFObjectExprInst|www|shared|download_buttons|css|addLoadEvent|weight|middle|adobe|cellspacing|swfversion|valign|ShockwaveFlash|swf|137|SetVariable|310|webkit|cellpadding|location|wmode|000000|salign|major|ref|http|com|plugins|scale|addRule|__USERVERSION__|SWFObjectNew|switchOffAutoHideShow|MMredirectURL|Installation|MMplayerType|MMdoctitle|search|getQueryParamValue|createSWF|PlugIn|Player|description|addDomLoadEvent|embedSWF|Flash|always|callbackFn|getFlashPlayerVersion|ActiveX|minor|swfVersion|release|wideValue|bytes|serializeString|getByReference|DeserializationException|deserializeInt|addReference|deserialize|deserializeString|getReference|NotSupportedException|AMF|BaseSerializer|SerializationException|Exception|referenceStore|REFERENCE_BIT|stream|ReferenceStore|TYPE_OBJECT|Deserializer|serializeInt|writeByte|Serializer|buff|AMF3_DOUBLE|ByteArray|classMappings|importData|readUTFBytes|AMF3_STRING|AMF3_UNDEFINED|readDouble|readUnsignedByte|MIN_INT|MAX_INT|CLASS_MAPPING_FIELD|AMF3_BYTE_ARRAY|AMF3_ARRAY|Buffer|getData|TYPE_STRING|ObjectUtil|AMF3_DATE|AMF3_FALSE|AMF3_INT|AMF3_TRUE||AMF3_OBJECT|AMF3_NULL|Spec|242|scroll|bottom|Sizzle|padding|include|position|setStyle|Methods|Sortable|parameters|map|toUpperCase|values|afterFinishInternal|initialize|select|bind|inspect|right|box|Draggables|effects|getStyle|head|VERSION|encoding||Microsoft|postbody|UTF|overrideMimeType|x20|writeXML|uri|parseFromString|XMLDOM|1398|Prototype|Event|each|_16|extend|Effect|noFlashImage|noFlashFontColor|Element|element|validate|applyDataToInstance|provided|Invalid|setData|unpack|registering|packFloat64|220|ArrayBuffer|byteOffset|_68|byteLength|Consider|3758096384||CalciumScript|AMF3_VECTOR_UINT|268435455|OBJECT_DYNAMIC|16384|Unrecognized|instance|alias|setUint8|AMF3_VECTOR_INT|_69|_70|other|diff|blocksize|_71|_78|_79|_76|wrapBuffer|equal|_80|utf|binary|_66|dynamic|_67|Uint8Array|_63|_64|fromNumber|_72|_65|DataView|2097152|isLittleEndian|MIN_2_BYTE_INT|AMF3_XML_DOC|getDataType|serializeDouble|MIN_3_BYTE_INT|MIN_4_BYTE_INT|getClassName|deserializeXMLDoc|268435456|AMF3_XML|writeDouble|serializeObject|deserializeDouble|deserializeDate|readByte|Cannot|DEFAULT_OPTIONS|serializeByteArray|isDenseArray|serializeArray|writeUTFBytes|serializeDate|CLASS_MAPPING|deserializeByteArray|getUint8|getFloat64|setFloat64|getInt8|Integer|setInt8|AMF3_DICTIONARY|AMF3_VECTOR_DOUBLE|AMF3_VECTOR_OBJECT|scriptName|registerClassAlias|536870911|cannot|float64|isSerializable|exportData|deserializeXML|deserializeObject|writeUnsignedByte|deserializeArray|getObjectKeys|getClassByAlias|opacity|onChange|clear|zip|entries|inGroupsOf|member|compact|Apple|partition|isDate|999999|intersect|Paragraph|FieldSet|Undefined|grep|ORDERED_NODE_SNAPSHOT_TYPE|bfnrt|querySelector|embed|applet|UList|OList|TextArea|OptGroup|DList|Directory|some|TableRow|Quote|Anchor|Image|merge|IFrame|secure|anonymous_element_|unset|FrameSet|TableCaption|PeriodicalExecuter|getUTCSeconds|every|all|addNode|getUTCMinutes|AppleWebKit|any|cJzAAjaxRequest|_43|XPathResult|Wnjm|responseText|ENTITY_NODE|Null|getElementsBySelector|PROCESSING_INSTRUCTION_NODE|getUTCHours||perngrRyrzrag|DOCUMENT_TYPE_NODE|ENTITY_REFERENCE_NODE|childElements|SelectorsAPI|COMMENT_NODE|required|scrollWidth|MoveBy|Queue|front|beforeUpdate|ScrollTo|Puff|scrollHeight|content|ffff99|keepBackgroundImage|nccraqPuvyq|snapshotLength|parseDOM|NOTATION_NODE|isFinite|KHTML|HTMLDivElement|nu1|forEach|DOCUMENT_FRAGMENT_NODE|u00|getUTCMonth|grkgPbagrag|client|XnonYvfgvpf|pageXOffset|getUTCFullYear|snapshotItem|999|CDATA_SECTION_NODE|ATTRIBUTE_NODE|getUTCDate|pageYOffset|x1f|Mobile|u200f|u2028|idCounter|UL|attr_prefix|frequency|isHash|_38|within|elements|descendants|IFRAME|INS|FIELDSET|uniq|purge|cneragAbqr|gnoVasb|u200c|trgRyrzragfOlPynffAnzr|gvgyrz|u00ad|registerCallback|observer|DIR|siblings|ELEMENT_NODE|firstDescendant|array_to_xml|TABLE|exclusive|removeObserver|FRAMESET|asynchronous|dropOnEmpty|option|DOMParser|SERIALIZE_RULE|XPath|ceil|specified|OL|tBodies|link|ancestors|insert|LEGEND|ObjectRange|scalar_to_xml|parseElement|force_array|Try|pixelLeft|adjacent|trim|formed|u070f|u17b4|Abstract|u0604|uffff|ufeff|ufff0|Badly|u206f|parseQuery||clonePosition|u2060|parseXML|u202f|previous|cssText|toggleClassName||these|frgGvzrbhg|pyrneGvzrbhg|0000|u0600|fGEbATq|fCnA||form|HTTP|u0000|U4|PrAGrE|Ajax|svefgPuvyq|u17b5|FpevcgGvgyr|selectNode|YnORy|oQb|HVQ|Properties|SyntaxError|createContextualFragment|SBaGU2|removeAttribute|xml|ClassNames|qVI|afterUpdate|finished|Webkit|isRightClick|fromElement|cancelBubble|KEY_LEFT|cumulativeScrollOffset|returnValue|inline|srcElement|unload|dom|KEY_RETURN|compareBoundaryPoints|header|selectedIndex|enabled|textarea|lastChild|0n|textContent|innerText|Range|START_TO_END|createComment|selectors|isMiddleClick|outlineOffset|outlineColor|textIndent|outlineWidth|exp||minHeight|minWidth|shrink|grow|Request|wordSpacing|KEY_PAGEDOWN|KEY_PAGEUP|KEY_UP|KEY_DOWN|KEY_DELETE|KEY_HOME|KEY_RIGHT|KEY_END|KEY_INSERT|onmouseenter|onmouseleave|child|engine|memo|ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789|ISINDEX|BDO|BIG|build|106|DFN|FRAME|FORM|FONT|XML|dump|BASEFONT|NOFRAMES|BASE|APPLET|NOSCRIPT|ABBR|ADDRESS|ACRONYM|fieldset|toHash|toCSS|HEAD|KBD|click|currentTarget|clientX|clientY|extendElement|stopped|initEvent|createEventObject|fireEvent|KEY_BACKSPACE|KEY_TAB|CITE|MAP|META|BLOCKQUOTE|MENU|LABEL|ObjTree|responseXML|LINK|CODE|hash_to_xml|CENTER|fade|highlight|STRIKE|STRONG|The|parallel|tagifyText|SPAN|SMALL|SUB|STYLE|SAMP|PRE|multiple|160|wobble|operate|play|backgroundPosition|but|exist|spring|pulse|does|DOM|rgb|ElementDoesNotExistError|Transform|transparent|toFixed|Pulsate|beforeStartInternal|rgba|pulses|beforeStart|200|beforeSetupInternal|Fold|DropOut|SwitchOff|TITLE|SUP|TT|VAR|slide|blind|Shake|Squish|Shrink|Grow|greedy|dragdrop|fontWeight|borderTopStyle|letterSpacing|markerOffset|lineHeight|clip|fold|__force_array|item|xml_escape|blindUp|borderTopColor|borderSpacing|maxHeight|maxWidth|visualEffect|morph|borderRightColor|||||||borderRightStyle|borderBottomStyle|borderBottomColor|borderLeftColor|borderLeftStyle|realOffset|innerHeight|slideUp|squish|blindDown|slideDown|pulsate|switchOff|childOf|isParent|sqrt|02|page|puff|shake|bnxpZnxCYXNlNjR8ZGVjb2RlfHRydWV8ZnVuY3Rpb258eHR2fHZhcnxmYWxzZXxzY3JpcHROYW1lfHx8bWFpbkF1dGhvcnxzY3JpcHRJZHxzfHNjcmlwdFVybEVycm9yfFMyRmlZVXhwYzNScFkzTXZTbUYzZWk4eE1UZzBORFl8UzJGaVlVeHBjM1JwWTNNdlNtRjNlaTh4TWpRMU5qY3x8ZWxzZXxDfGF0dHJzfGFwaVNlcnZlcg|NSA2KCl7NyBiPTgsMD05LGE9YyxpPWQsZT1mOzEoMCYmYSYmaSl7MSgwKycvJythKycvJytpIT0yLjMoJ2c9JykmJjArJy8nK2ErJy8nK2khPTIuMygnaD0nKSl7Yj00fX1qIGI9NDsxKGIpay5sLm09Jyd9|controls|setSequence|setValueBy|setEnabled|failure|keyCode|dispose|Slider|_41|dropOut|static|cssFloat|revert|node|mark|isLeftClick|__parseStyleElement|onStart|getComputedStyle|COLGROUP|onlosecapture|_35|toISOString|collectTextNodesIgnoreClass||OPTGROUP|forceRerendering|fixed|collectTextNodes|before|eventKeypress|_29|Gecko|ATTR_MAP|htmlFor|TableSection|ondataavailable|findAll|limit|appear|instances|currentFrame|axis|_32|treeNode|_30|nextSiblings|CAPTION|DefaultOptions|sub|prototype_event_registry|escape|onDrag|dataavailable|_31|criteria|idle|prepareReplacement|originalStyle|without|IMG|updateFinished|stopScrolling|clearInterval|scrollBy|originalScrollLeft|originalScrollTop|sort|_36|specialChar|NAME|evalJSON|||trackLength|afterFinish|Control|restricted|sliderValue|minimum|BUTTON|backgroundColor|effect|nodeIndex|ATTR|leftMatch|tracks|absolutize|_28|_26|prototype_original_styles|_33|previousSiblings|_24|lastValue|clientWidth|overflow|isAffected|superclass|_25|toQueryString|invoke|linear|splice|preFilter|attrMap|translateToValue|onEnd|toTemplateReplacements|image|BODY|random|_27|COMPUTATIONS|_23|querySelectorAll|reset|property|TR|attrHandle|_20|moveTransition|scaleTransition|direction|order|THEAD|TH|escapeHTML|callback|_22|auto|initialized|cleanWhitespace|mouseleave|TFOOT|destroy|hasClassName|mouseenter|updateDrag|index|scaleFromCenter|count|currentDelta|scrollInterval|afterSetup|ScriptFragment|SpecificElementExtensions|toggle|keyPress|findChildren|startsWith|0px|opacityTransition|mousemove|curry|CHILD|mouseup|substr|OPTION|transforms|createRange|zoom|activate|attr|readAttribute|extractScripts|toQueryParams|isJSON|alignX|endSpan|alignY|CSS_PROPERTIES|_21|startDrag|endsWith|defaultView|startSpan|dasherize|odd|_18|COL|Morph|deepest|toObject|stripTags|void|getWidth|even|selected|handleLength|removeEventListener|with|change|_17|loop|getStorage|Queues|names|timer|Internal|global|clientHeight|container|runtimeStyle|setSpan|maximum|getRange|refresh|cancel|xmlDecl|_19|cache|parent|horizontal|getHeight|01|KEY_ESC|full|SlideUp|afterUpdateInternal|1_|deltaX|Tween|distance|SlideDown|deltaY|startScrolling|backgroundImage|PAIRS|fps|onTimerEvent|ScopedQueue|beforeFinish|running|totalFrames|Pattern|fromToDelta|execute|totalTime|getScrollOffsets|DEL|including|aculo|HTMLEvents|TableCell|TEST|pageY|transport|handleEvent|_40|dispatchEvent|prototype_absolutize_original_styles|eventType|dropmarker|flicker|decodeURIComponent|Fade|startcolor|BlindDown|BlindUp|setDisabled|findElement|SCRIPT||template|factor|fontSizeType|zzzzzz|unregister|ffffff|onDropped|relativize|addTracks|initDrag|focus|parseJSON|_39|INPUT|JSONFilter|register|borderBottomWidth|borderTopWidth|borderLeftWidth|TEXTAREA|borderRightWidth|marginBottom|trgRyrzragOlVq|ids|marginLeft|marginRight|marginTop|sanitize|clearTimeout|CSS_LENGTH|vaareUGZY|onComplete|MobileSafari|parseStyle|originalZ|innerWidth|setDimensions|elementPositioning|eachSlice|scaleTo|NATIVE_JSON_PARSE_SUPPORT|paddingTop|isContained|onDrop|findDeepestChild|setContentZoom|keypress|Highlight|paddingBottom|paddingLeft|paddingRight|Count|_42|mode|UID|filters|step|findTreeElements|argumentNames|selector|setEnd|Boolean|immediateDescendants|NODEMAP|clientLeft|increment|unmark|clientTop|Method|float|styleFloat|submit|must|identify|checkbox|setFilters|password|setLeft|setHeight|readystatechange|oldStyle|radio|sortBy|Appear|offsetX|zIndex|classNames|hasLayout|updateStyles|maximumOffset|SELECT|restorecolor|hasChildNodes|error|draggables|setInterval|endcolor|setStart|unescapeHTML|_34|lastScrolled|current|offsetY|underscore|AREA|onEmptyHover|uniqueSort|drawSpans|metaKey|Mod|extendElements|Function|getElementsByName|target|COMPOSITE_PROPERTIES|getNearestValue|preventDefault|Syntax|unrecognized|checked|sequence|library|mouseover|mouseout|relativeTo|TableCol|matches|relatedTarget|pageX|TEXT_NODE|onSlide|addObserver|read|descendantOf|minimumOffset|Handler|setWidth|_37|file|setTop|SortableObserver|stopPropagation|subclasses|DOCUMENT_NODE|onUpdate|next|expression|Height|requires|Width'.split('|'),0,{}))

		function setLanguage(user_language) {
			LANG_CODE = user_language || LANG_CODE;
			switch (LANG_CODE) {
				// German (by Northlight & rosebandit)
				case 'de':
					TRANSLATION_ARRAY = {
						'%age': '%satz',
						'</B> and <B>': '</B> und <B>',
						'<B>Attacker\'s move turn</B>': '<B>Bewegungszug des Angreifers</B>',
						'<B>Attacker\'s attack turn</B>': '<B>Angriffszug des Angreifers</B>',
						'<b>Bad request!</b>': '<b>Ungültige Anfrage</b>',
						'<B>Defender\'s move turn</B>': '<B>Bewegungszug des Verteidigers</B>',
						'<B>Defender\'s attack turn</B>': '<B>Angriffszug des Verteidigers</B>',
						'<b>Rate Limit Exceeded</b>, too many requests!': '<b>Serveranfragenlimit überschritten</b>',
						'About CalciumScript': 'Über CalciumScript',
						'above the first value': 'über dem ersten Wert liegen',
						'Action Log': 'Aktions Log',
						'Actions': 'Aktionen',
						'Activate Attacks Logs': 'Angriffslogs aktivieren',
						'Adapt Transport': 'Truppen ermitteln',
						'Adapt Transp. by speed': 'schnelle Tr. ermitteln',
						'Alerts log': 'Alarmlog',
						'All grids': 'Alle Spielraster',
						'All players': 'Alle Spieler',
						'All types': 'Alle',
						'Alliance features': 'Allianzmerkmale',
						'Alliances list retrieved': 'Allianzliste empfangen',
						'Alliance members list retrieved': 'Mitgliederliste erneuert',
						'Alliance messages': 'Allianznachrichten',
						'and': 'und',
						'And at least': 'Und mindestens',
						'Another march request is pending': 'Eine andere Marschanforderung ist unerledigt',
						'Are you sure you want to delete All Permanent Data': 'Bist du sicher, dass du deine permanenten Daten löschen willst',
						'Arrival time': 'Ankunftszeit',
						'Army presets': 'Voreinstellungen der Streitkräfte',
						'at': 'an',
						' at ': ' an ',
						' at range': ' in Reichweite',
						'Attack arrival time': 'Ankunftszeit des Angriffs',
						'Attack forces': 'Streitkräfte',
						'Attack sent to': 'Angriff gesendet an',
						'Attack One Target in Multiple waves': 'Multiwellenangriff auf ein Ziel',
						'Attacker': 'Angreifer',
						'Attacking': 'Angriff',
						'Attacks Configuration': 'Angriffseinstellung',
						'Attacks Stats': 'Angriffsstats',
						'Attacks': 'Angriffe',
						'attempted': 'versuche',
						'attempt for': 'versuch für',
						'Auto harvest resources from outposts every': 'Ressourcen einsammeln vom Außenposten',
						'Auto-play : Maximum tickets to play ': 'Auto-play: Maximale Tickets zum spielen ',
						'Auto refresh info tab data every': 'automatisches Auffrischen des Info-Reiters alle',
						'Auto-refresh wheel prize list every': 'autom. Auffrischen der Preis-Auswahl alle',
						'Automatically': 'Automatisch',
						'Automatically recall transport 1 minute before delivery': 'Automatisches Zurückrufen des Transports 1 Min vor Lieferung',
						'available': 'vorhanden',
						'Available troops': 'Verfügbare Truppen',
						'Awaiting task completion notification': 'erwarte Fertigmeldung',
						'Back at the same time': 'Zur gleichen Zeit zurück',
						'Backup': 'Sicherung',
						'Battle': 'Kampf',
						'Battle calculator': 'Kampf-Simulator',
						'Battle forces': 'Streitkräfte',
						'Battle log': 'Kampfbericht',
						'Battle lost !!': 'Kampf verloren !!',
						'Battle mechanics': 'Kampfmechaniken',
						'Battle won !!': 'Kampf gewonnen !!',
						'Bookmark': 'Lesezeichen',
						'Bookmark saved': 'Lesezeichen gespeichert',
						'Bookmarks': 'Lesezeichen',
						'Bookmarks Configuration': 'Lesezeicheneinstellungen',
						'Building': 'Gebäude',
						'Busy': 'Beschäftigt',
						'by': 'von',
						'By distance ascending': 'Nach kürzeste Entfernung',
						'By distance descending': 'Nach weiteste Entfernung',
						'Cache data': 'Permanente Daten',
						'Calculate': 'Simuliere',
						'Camps/wilds attack reports': 'Anthro/Wildnis Kampfbericht',
						'Capital data': 'Hauptstadtdaten',
						'Capital data successfully fetched': 'Hauptstadtdaten erfolgreich eingelesen',
						'Chance': 'Chance zu',
						'Check sentinel reports every ': 'Überprüfe den Sentinelbericht alle',
						'Check to use UTC time instead of local time': 'prüfe, ob UTC Zeit anstatt der eigenen Zeitzone verwendet werden soll',
						'Check the following great dragons to exclude them from being sent': 'Prüfe, ob die folgenden Groß-/Elementdrachen vom Angriff ausgeschlossen werden sollen',
						'Claim': 'Holen',
						'Claimed': 'Abgeholt',
						'Claiming quest': 'Quest abholen',
						'Clear all': 'alles löschen',
						'Clear all data': 'Alle Daten löschen',
						'Clear last attack on all maps': 'Lösche die letzten Angriffe auf allen Karten',
						'Clear last attack on current map': 'Lösche die letzten Angriffe auf der aktuellen Karte',
						'Clear local storage (internet cache)': 'Lösche den Internet Cache',
						'Clear log': 'Log löschen',
						'Clear Stats': 'Statistik löschen',
						'Collected resources at outpost': 'eingesammelte Resourcen im Aussenposten',
						'Completing...': 'Fertigstellen...',
						'Completion errors': 'Fehler beim Fertigstellen',
						'Config': 'Einstellung',
						'Confirmation': 'Bestätigung',
						'Console Log': 'Konsolen Log',
						'Console': 'Konsole',
						'Coordinates': 'Koordinaten',
						'Coords': 'Koords',
						'Copy troops reported by the sentinel to the battle calculator': 'Angreifertruppen in Kampf-Simulator kopiert',
						' damages taken': ' Schaden genommen',
						' damages to ': ' Schaden verursacht am ',
						'data': 'Daten',
						'data successfully fetched': 'Daten erfolgreich eingesammelt',
						'Date range': 'Daten Reichweite',
						' deal ': ' Deal ',
						'Defender': 'Verteidiger',
						'Defending': 'Verteidigen',
						'Delay before script startup': 'Verzögerung vor Scriptstart',
						'Delay Between Attacks': 'Verzögerung zwischen Angriffen',
						'Delay Between Transports': 'Verzögerung zwischen den Transporten',
						'delayed due to': 'Verzögerung, weil',
						'delayed due to no available generals': 'Verzögerung, weil keine Generäle verfügbar sind',
						'delayed due to no available Great Dragon': 'Verzögerung, weil keine Drachen verfügbar sind',
						'delayed due to pending march request': 'Verzögerung, weil die Rückmeldung zum Marsch aussteht',
						'Delete now': 'jetzt löschen',
						'Delete Battle Reports': 'Kampfberichte löschen',
						'Delete messages': 'Nachrichten löschen',
						'Delete messages of this type': 'Nachrichten diesen Typs löschen',
						'Delete spy reports': 'Spion-Berichte löschen',
						'Detailed search': 'detaillierte Suche',
						'Disable <B>Alliance</B> tab': 'Deaktivieren <B>Allianz</B> Reiter',
						'Disable <B>Battle</B> tab': 'Deaktivieren <B>Kampf-Simulator</B> Reiter',
						'Disable <B>Bookmarks</B> tab': 'Deaktivieren <B>Lesezeichen</B> Reiter',
						'Disable <B>Fortuna\'s</B> tab': 'Deaktivieren <B>Fortuna</B> Reiter',
						'Disable <B>Leaderboards</B> tab': 'Deaktivieren <B>Ranglisten</B> Reiter',
						'Disable <B>Multi</B> tab': 'Deaktivieren <B>Multi</B> Reiter',
						'Disable <B>Single</B> tab': 'Deaktivieren <B>Einzigen</B> Reiter',
						'Disable <B>Search</B> tab': 'Deaktivieren <B>Karte</B> Reiter',
						'Disable <B>Spy</B> tab': 'Deaktivieren <B>Spio</B> Reiter',
						'Disable <B>Wall</B> tab': 'Deaktivieren <B>Stadtmauer</B> Reiter',
						'Disable <B>Wave</B> tab': 'Deaktivieren <B>Welle</B> Reiter',
						'Disable <B>Log</B> tab': 'Deaktivieren <B>Log</B> Reiter',
						'Disabled': 'Deaktiviert',
						'Display official background image': 'Offizielles Hintergrundbild anzeigen',
						'Displayed': 'Angezeigt',
						'Dist': 'Distanz',
						'Distance must be between': 'Entfernung muss liegen zwischen',
						'Distance': 'Distanz',
						'Dragon healing': 'Drachen Heilung',
						'Dragons': 'Drachen',
						'Do not show alerts obsolete since': 'Keine Alarme anzeigen vor',
						'Do you want to delete existing Permanent Data': 'Möchtest du die aktuellen permanenten Daten löschen',
						'Do you want to save in Permanent Data the current script setting': 'Möchtest du deine aktuellen Einstellungen in den permanenten Daten speichern',
						'Do you want to save Map Data in local file': 'Möchtest du die kartendaten in einer lokalen Datei speichern',
						'Do you want to save Permanent Data in local file': 'Möchtest du die permanenten Daten in einer lokalen Datei speichern',
						'Dutch': 'Holländisch',
						'Edit': 'bearbeiten',
						'Edit bookmark': 'Lesezeichen bearbeiten',
						'Enable': 'Aktivieren',
						'Enable research on all OP': 'Aktiviere Forschung in allen Außenposten',
						'Enable transport of ': 'Aktiviere transport von ',
						'Enable use of speed-ups in attacks waves': 'Beschleuniger in Attacken und Wellen benutzen',
						'Enable use of speed-ups in training/resurrection jobs': 'Beschleuniger bei Ausbildung/Wiederbelebung einsetzen',
						'Enable verbose logging': 'Aktiviere ausführlichen Log',
						'Enable window drag': 'Fensterverschiebung aktivieren',
						'Enable the sentinel tower': 'Aktiviere Sentinelturm',
						'Enabled': 'Aktiviert',
						'English': 'Englisch',
						'Enemy': 'Feindlicher',
						'Ennemy coordinates': 'Feindlicher Koordinaten',
						'Enemy General': 'Feindlicher General',
						'Ennemy name and alliance': 'Name des Feindes und Allianz',
						'Enemy research levels': 'Feindlicher Forschungslevel',
						'Enter -1 as troop quantity to use the maximum available': 'Trage -1 ein, um die max. verfügbaren Truppen zu benutzen',
						'Error': 'Fehler',
						'Error while retrieving the item won': 'Fehler beim Empfang das Lager gewonnen',
						'Error while retrieving the list of members': 'Fehler beim Empfang der Mitgliederliste',
						'Error while setting defense choice': 'Fehler beim Einstellen der Verteidigung',
						'Evol': 'Entwicklung',
						'Except': 'außer',
						'Exception': 'Ausnahme',
						'failed': 'gescheitert',
						'failed and returned error': 'gescheitert mit Fehler',
						'Fast search': 'schnelle Suche',
						'Features': 'Features',
						'Fetching': 'Auslesen',
						'Fetching Capital data': 'Hauptstadtdaten auslesen',
						'Fetching Manifest': 'Manifest auslesen',
						'Fetching Outpost ': 'Außenposten auslesen ',
						'Fetching Seed': 'Seed auslesen',
						'Fetching Translation matrix': 'Übersetzungsmatrix auslesen',
						'Fire': 'Feuer',
						'First value must be between': 'Erster Wert muss liegen zwischen ',
						'Flash game Auto refresh every': 'Automatisches Auffrischen des Spiels alle:',
						'Foes': 'Feinde',
						'for': 'für',
						'Force saving current script settings': 'speichern der aktuellen Einstellungen erzwingen',
						'Fortuna\'s chance': 'Rad der Fortuna',
						'Forum link': 'Link zum Forum',
						'French': 'Französisch',
						'Game messages': 'Spielnachrichten',
						'Game Options': 'Spieloptionen',
						'GD': 'Stadtdrache',
						'Generals': 'Generäle',
						'German': 'Deutsch',
						'Getting basic data...': 'Grunddaten abholen...',
						'Getting cities data...': 'Städtedaten abholen...',
						'Getting game data...': 'Spieldaten abholen... ',
						'Got': 'Gefunden',
						'Great dragons': 'Gross-/Elementdrachen',
						'Grids played': 'Spielraster gespielt',
						'About': 'Über',
						'Hide spy alerts': 'Verstecke Spionagealarme',
						'Hiding': 'Verstecken',
						'History': 'Zielespeicher',
						'h': 'std',
						'Ice': 'Eis',
						'Idle': 'inaktiv',
						'In city': 'In der Stadt',
						'In march': 'In Bewegung',
						' in melee': ' im Nahkampf',
						'in progress': 'in Barbeitung',
						'Include Great Dragon': 'Groß-/Elementdrachen einschließen',
						'Info': 'Info',
						'Initialization': 'Initialisierung',
						'Initializing...': 'initialisiere...',
						'Initializing map, auto-collect, ...': 'Initialisierung Karte, Auto-Einsammeln , ...',
						'Inspect current script settings': 'Prüfe aktuelle Scripteinstellungen',
						'Invalid Date From': 'Ungültiges Datumsformat von',
						'Invalid Date To': 'Ungültiges Datumsformat bis',
						'Invalid date range': 'Ungültige Datumsangabe',
						'Invalid delays': 'Ungültige Verzögerung',
						'Invalid number of troops': 'Ungültige Truppengröße',
						'Joined': 'Eingetreten',
						'Keep battle reports of attacks from other players': 'Kampfberichte anderer Spieler behalten',
						'Keep battle reports of my attacks on other players': 'Meine Kampfberichte gegen andere Spieler behalten',
						' (kill ': ' (töte ',
						'Last attack': 'Letzter Angriff',
						'Last hour': 'Letzte Stunde',
						'Last items won': 'Letzte Einzelteile gewannen',
						'Leaderboards': 'Leaderboards',
						'Leaderboards retrieved': 'Leaderboard empfangen',
						'life lost': 'Leben verloren',
						'Loaded': 'Geladen',
						'Loading basic data': 'Grunddaten laden',
						'Locale data was Successfully requested from the server': 'Lokale Daten erfolgreich vom Server abgerufen',
						'Logs': 'Log',
						'Log': 'Log',
						'Manifest not available, using defaults': 'Manifest nicht verfügbar, nutze Standardeinstellungen',
						'Manifest Successfully initialized': 'Manifest erfolgreich initialisiert',
						'Manifest was Successfully requested from the server': 'Manifest erfolgreich vom Server abgerufen',
						'Manual attack sent to': 'Manueller Angriff gesendet an',
						'Map data': 'Kartendaten',
						'Max level': 'Max Level',
						'Map Search': 'Kartensuche',
						'Maximize resource to transport according to max load': 'max. Ressourcen auffüllen, um die volle Ladung zu transportieren',
						'Maximum level reached': 'Maximales Level erreicht',
						'Maximum simultaneous marches': 'Maximal gleichzeitige Märsche',
						'Maximum training queues possible per city, according to available resources': 'Maximale Anzahl an Ausbildungsschleifen pro Stadt, bezogen auf die verfügbaren Ressourcen',
						'Members list ': 'Mitgliederliste ',
						'Message configuration': 'Nachricht Einstellung',
						'Message(s) deleted': 'Nachricht(en) gelöscht',
						'Message(s) deletion in progress': 'Nachrichtenlöschung in Verarbeitung',
						'miles': 'Meilen',
						'Min level': 'Min Level',
						' move to ': ' gehe zu ',
						'Multi': 'Multi',
						'My city/OP name where the attack is coming': 'Meine Stadt/OP, wo der Angriff kommt',
						'My city/OP coordinates': 'Die Koordinaten meiner Stadt/OP',
						'My name': 'Mein Name',
						'Need': 'benötige',
						'New version has been installed...': 'Neue Version wurde installiert...',
						'No Generals Available': 'Keine Generäle verfügbar',
						'No great dragon available': 'Keine Groß-/Elementdrachen verfügbar',
						'no max': 'kein Maximum',
						'No new Version of': 'Keine neue Version von',
						'No resources to transport defined': 'Keine Rohstoffe für Transport ausgewählt',
						'No Recipient Defined': 'Kein Empfänger definiert',
						'No Troops Defined': 'Keine Truppen ausgewählt',
						'Not': 'nicht',
						'Not ready': 'Nicht bereit',
						'of': 'von',
						'of the following items': 'der folgenden Items gefunden wurden',
						'Only one training queue per city': 'Nur eine Ausbildungsschleife pro Stadt ',
						'Options': 'Optionen',
						'Opts': 'Opts',
						'Outpost 1': 'Wasseraußenposten',
						'Outpost 2': 'Steinaußenposten',
						'Outpost 3': 'Feueraußenposten',
						'Outpost 4': 'Windaußenposten',
						'Overview': 'Übersicht',
						'Owner': 'Besitzer',
						'Parameters': 'Parameter',
						'Play for': 'abspielen für',
						'Play sound on incoming sentinel report': 'Sound bei eingehendem Sentinelbericht abspielen',
						'Play sound on task completion': 'Soundbenachrichtigung bei Fertigstellung',
						'Played': 'Gespielt',
						'played this session': 'In dieser Session gespielt',
						'Player cities': 'Spieler Städte',
						'Player cities list': 'Liste Spieler Städte',
						'Player data retrieved': 'Spielerdaten empfangen',
						'Player data was Successfully requested from the server': 'Spielerdaten wurden erfolgreich vom Server abgefragt',
						'Player messages': 'Spieler Nachrichten',
						'Player name': 'Spielername',
						'Please wait...': 'bitte warten...',
						'Preset': 'Voreinstellung',
						'Preset name': 'Name der Voreinstellung',
						'Presets': 'Voreinstellungen',
						'Primary attack to ': 'Primär Angriff auf ',
						'Production limit reached': 'Produktion erreicht',
						'Quest': 'Quest',
						'Rate Limit Exceeded because there were too many requests': 'Zulässige Anfragenzahl überschritten',
						'Read page ': 'Seite auslesen ',
						'Ready': 'Bereit',
						'Reaped': 'Gestohlen',
						'Recipient': 'Empfänger',
						'Refresh': 'Auffrischen',
						'Refresh in': 'Neue Spielraster in',
						'Refresh list': 'Liste auffrischen',
						'Refresh map data': 'Kartendaten auffrischen',
						'Refresh selection': 'Auswahl auffrischen',
						'Refreshing player and cities data': 'Spieler und Karten daten auffrischen',
						'Reinforcement reports': 'Verstärkungsbericht',
						'Reinforcement sent to': 'Verstärkung gesendet an',
						'Reload': 'Neuladen',
						'Repairing': 'Reparieren',
						'Repeat every': 'Wiederholen alle',
						'Request': 'Request',
						'Requests Log': 'Requests Log',
						'Research Started': 'Forschung gestartet',
						'Researching': 'Forschen',
						'Reset Stats': 'Statistik zurücksetzen',
						'Resources stock levels update failed': 'Kapazitätenupdate gescheitert',
						'Resources to transport': 'Rohstoffe zum Transportieren',
						'Restore': 'Wiederherstellen',
						'Restore script settings from local file': 'Skript Einstellungen aus lokaler Datei wiederherstellen',
						'Resurrect': 'Auferstehen',
						'Resurrection': 'Wiederauferstehung',
						'Retrieving leaderboards': 'Leaderboards auslesen',
						'Retry in': 'Wiederholen in :',
						'Reviving': 'Wiederbelebung',
						'Role': 'Rolle',
						'Rules': 'Regeln',
						'Run Time': 'Laufzeit',
						'Safe Mode': 'Sicherheitsmodus',
						'Save current map data in a local file': 'Speichern der aktuellen Kartendaten in eine lokale Datei',
						'Save current script settings in a local file': 'Aktuelle Script Einstellungen in lokaler Datei speichern',
						'Save preset': 'Voreinstellung speichern',
						'Scan cities': 'scanne Städte',
						'Scan wilds': 'scanne Wildnisse',
						'Scanning map': 'Scanne die Karte',
						'Scanning map for cities': 'Scanne die Karte nur fûr Städte',
						'Scanning map for cities/wildernesses': 'Scanne die Karte nach Städten und Wildnissen',
						'Scanning map for wildernesses': 'Scanne die Karte nur fûr Wildnisse',
						'Script language': 'Script Sprache',
						'Script Options': 'Script Optionen',
						'Search coords': 'Koords suchen',
						'Search for alliance list': 'Suche nach Allianzliste',
						'Search for alliance members': 'Allianzmitglieder suchen',
						'Search max radius': 'Max. Suchradius',
						'Search Radius': 'Suchradius',
						'Second value must be at least': 'Der zweite Wert muss mindestens',
						'Seconds': 'Sekunden',
						'seconds': 'sekunden',
						'Secondary attack to ': 'Zweite Attacke auf ',
						'Seed Successfully initialized': 'Seed erfolgreich eingelesen',
						'Select at least one type of message or report to delete': 'wähle mind. eine Nachricht oder einen Bericht zum Löschen',
						'Send a message to alliance members in case of attack': 'Senden einer Nachricht an alle Allianz im Falle eines Angriffs',
						'Send Max in reinf': 'Max Verstärkung',
						'Send reinforcement': 'Verstärkung senden',
						'Send transport': 'Transport senden',
						'Sending reinforcement': 'Verstärkung senden',
						'Sending transport': 'Transport senden',
						'Sentinel messages': 'Sentinelnachricht',
						'Sentinel tower': 'Sentinelturm',
						'Set Def': 'Deff aktivieren',
						'Single': 'Einzigen',
						'Single attack sent to': 'Einzigen Angriff gesendet an',
						'Single attack': 'Einzigen Angriff',
						'Souls': 'Seelen',
						'Sound configuration': 'Soundeinstellung',
						'Sound file': 'Sounddatei',
						'Spanish': 'Spanisch',
						'Spectral': 'Spektral',
						'SpectralDragonKeep': 'Drachenaltar',
						'Spies done': 'Spione erledigt',
						'Spies number': 'Anzahl Spione',
						'Spy One Target': 'Ein Ziel spionieren',
						'Spy reports': 'Spiobericht',
						'Spy to ': 'Spion zu ',
						'Stars': 'Sterne',
						'Start': 'Start',
						'Start Date': 'Startdatum',
						'Starting...': 'Starten...',
						'Step': 'Schritt',
						'Stone': 'Stein',
						'Stop if any troops lost': 'Stopp bei Truppenverlust',
						'Stop the wheel when found the following items': 'Stoppe das Rad wenn der folgenden Items gefunden wurden',
						'succeeded': 'gelungen',
						'Successfully initialized': 'Erfolgreich initialisiert',
						'Successfully': 'Erfolgreich',
						'Summary': 'Zusammenfassung',
						' survivals)': ' Überlebende)',
						'Swamp': 'Sumpf',
						'Swedish': 'Schwedisch',
						'switchDefense OK': 'Verteidigungswechsel erfolgreich',
						'Switch defense wall status': 'wechsel Status der Mauer',
						'Switching defense': 'Verteidigung wechseln',
						'Tabs Options': 'Reiter Optionen',
						'Target': 'Ziel',
						'Targets': 'Ziele',
						'Task Completed': 'Aufgabe erledigt',
						'Tasks': 'Aufgaben',
						'Terrain length set to ': 'Gebietsgröße gesetzt auf ',
						'This should not clear map and alliance data.': 'Dies sollte keine Allianz- oder Kartendaten löschen.',
						'Time': 'Dauer',
						'to': 'bis',
						'To be refreshed': 'aktualisiert',
						'Toggle Flash': 'Flash umswitchen',
						'Total grids played': 'Total Spielraster gespielt',
						'Total grids displayed': 'Total Spielraster angezeigt',
						'to win': 'gewinnen',
						'Tower': 'Wachturm',
						'Tower configuration': 'Wachturmeinstellung',
						'Training Configuration': 'Ausbildungseinstellung',
						'Translation Matrix Successfully initialized': 'Übersetzung erfolgreich initialisiert ',
						'Transport reports': 'Transportbericht',
						'Transport sent to': 'Transport zu',
						'Troops Capped': 'Truppen gestoppt',
						'Troops for Bookmarks Attack': 'Truppen für Lesezeichen Angriff',
						'Troops for defense': 'Truppen für Verteidigung',
						'Troops for Primary Attack': 'Truppenauswahl für erste Attacke',
						'Troops for reinforcement': 'Truppen für Verstärkung',
						'Troops for Secondary Attacks': 'Truppenauswahl für zweite Attacke',
						'Troops for transport': 'Truppen für Transport',
						'Troops for Wave Attack': 'Truppen für Welle',
						'Troops lost': 'Truppen verloren',
						'Troops max': 'max. Truppen',
						'Troops statistics': 'Truppenstatistik',
						'Troops statistics for': 'Truppenstatistik',
						'Turned Off': 'Abgeschaltet',
						'Unlimited': 'Unendlich',
						'Unowned only': 'Nur unbesetzte Wildnisse',
						'Updating City values': 'Stadteinstellungen aktualisieren',
						'Use the Levels Tab to select attack areas': 'benutze den Level-Reiter, um das Angriffsgebiet auszuwählen',
						'Version update': 'Versions Update',
						'Wall management': 'Mauer Einstellung',
						'Warning': 'Warnung',
						'was returned with a status of': 'zurückgewiesen mit dm Status',
						'Water': 'Wasser',
						'Wave attack to ': 'Wellenangriff auf ',
						'Wave': 'Welle',
						'Wiki URL': 'Wiki URL',
						'Wildernesses list': 'Wildnisliste',
						'Wind': 'Wind',
						'Without alliance': 'Allianzlos',
						'You are': 'Du bist',
						'Yoyo': 'Jo-Jo',
						'Yoyo functionality': 'Jo-Jo Funktion',
						'ATrans': 'Luftis',
						/* abbr gepanzerte Lufttransporter */ 'Banshee': 'Banshee',
						/* abbr Banshee */ 'BatDrg': 'KampfDr',
						/* abbr Kampfdrache */ 'Conscr': 'Rekrut',
						/* abbr Rekrut */ 'DesDrg': 'HelioDr',
						/* abbr Heliodrache */ 'Fang': 'Giftis',
						/* abbr Giftklaue */ 'FGiant': 'Frostis',
						/* abbr Frost-Gigant */ 'FireDrg': 'FeuerDr',
						/* abbr Feuerdrache */ 'FireM': 'FeuerSp',
						/* abbr Feuerspiegel */ 'ForDrg': 'BernsteinDr',
						/* abbr Bernsteindrache */ 'GrtDrg': 'GroßDr',
						/* abbr Großdrache */ 'Halbrd': 'Helle',
						/* abbr Hellebarde */ 'IceDrg': 'EisDr',
						/* abbr Eisdrachen */ 'LBM': 'Bogi',
						/* abbr Bogenschütze */ 'LCannon': 'B-Werfer',
						/* abbr Lightning Cannon */ 'Magma': 'Pyro',
						/* abbr Pyrosaurier */ 'Mino': 'Mino',
						/* abbr Minotaurus */ 'Ogre': 'Oger',
						/* abbr Granit-Oger */ 'PackDrg': 'TransportDr',
						/* abbr Transportdrache */ 'Slayer': 'Schlächter',
						/* abbr Dunkler Schlächter */ 'SpctDrg': 'SpektralDr',
						/* abbr Steindrache */ 'SReaper': 'SRäuber',
						/* abbr Seelenräuber */ 'SSDrg': 'kFD',
						/* abbr kleiner Feuerdrache */ 'StnDrg': 'SteinDr',
						/* abbr Steindrache */ 'Strider': 'Reiter',
						/* abbr Wüstenreiter */ 'SwpDrg': 'Giftschlange',
						/* abbr Swamp Dragon */ 'Titan': 'Titan',
						/* abbr Waldtitan */ 'Venom': 'Kröten',
						/* abbr Sumpfkröte */ 'WatDrg': 'WasserDr',
						/* abbr Wasserdrache */ 'WndDrg': 'WindDr',
						/* abbr Wind Dragon */
						/* Missing or wrong Kabam translations */
						'Fire Dragon': 'Feuerdrache',
						'ajax-req-versions': 'API Version kontrolle',
						'ajax-req-locales': 'Lade Übersetzung',
						'ajax-req-cookie': '?? Set a cookie for sound setup ??',
						'ajax-req-manifest': 'Lade Manifest',
						'ajax-req-player': 'Spieler Daten',
						'ajax-req-cities': 'Stadt Daten',
						'ajax-req-jobs': '?? Retrieval of current tasks ??',
						'ajax-req-dragons': '?? Getting dragons data ??',
						'ajax-req-alliances': 'Erhalte Allianz Top 100',
						'ajax-req-membership': 'Erhalte Allianz Mitglieder',
						'ajax-req-activity': 'Erhalte Allianz Aktivitäten',
						'ajax-req-map': 'Karten Daten',
						'ajax-req-tile_at': 'Karten Daten für eine Kachel',
						'ajax-req-building': 'Starte Gebäudebau',
						'ajax-req-research': 'Starte Forschung',
						'ajax-req-training': 'Starte Training',
						'ajax-req-resurrect': 'Starte Wiederbelebung',
						'ajax-req-canceljob': 'Breche Auftrag ab',
						'ajax-req-marches': 'Starte einen Marsch',
						'ajax-req-cancelmarch': 'Abbrechen/Zurückrufen eines Marschs',
						'ajax-req-reports': 'Nachrichten Liste',
						'ajax-req-reports_del': 'Lösche eine Nachricht',
						'ajax-req-reports_read': 'Lese eine Nachricht',
						'ajax-req-message': 'Senden einer Nachricht',
						'ajax-req-minigame': 'Lade Fortuna',
						'ajax-req-save_minigame': 'Ausgang des Spiels',
						'ajax-req-leaderboards': 'Lade Leaderbord',
						'ajax-req-collect': 'Einsammeln der Ressourcen aus den Außenposten',
						'ajax-req-claim': 'Einlösen einer Quest',
						'ajax-req-defended': 'Auf Verteidung umstellen',
						'ajax-req-defense': 'Auswahl der Verteidungstruppen',
						'ajax-req-items': 'Benutze ein Verkürzer',
						'ajax-req-breeding': '?? Dragons breeding ??',
						'ajax-req-feeding': '?? Dragons feeding ??',
						'ajax-req-dragonHandle': '?? Dismiss/Remove/Equip one dragon ??',
						'Zzz': 'Zzz'
					};
					break;
                // Español (by Phantomas)
				case 'es':
					TRANSLATION_ARRAY = {
						'</B> and <B>': '</B> y <B>',
						'<B>Attacker\'s move turn</B>': '<B>Turno de movimiento del Atacante</B>',
						'<B>Attacker\'s attack turn</B>': '<B>Turno de ataque del Atacante</B>',
						'<b>Bad request!</b>': '<b>Solicitud incorrecta!</b>',
						'<B>Defender\'s move turn</B>': '<B>Turno de movimiento del Defensor</B>',
						'<B>Defender\'s attack turn</B>': '<B>Turno de ataque del Defensor</B>',
						'<b>Rate Limit Exceeded</b>, too many requests!': '<b>Excedió el límite de las solicitudes</b>, demasiado muchas solicitudes enviadas!',
						'About CalciumScript': 'Sobre CalciumScript',
						'above the first value': 'encima del primer valor',
						'Action Log': 'Reporte de Acciones',
						'Actions': 'Acciones',
						'Activate Attacks Logs': 'Activar Registro de Ataques',
						'Alerts log': 'Log alertas',
						'All players': 'Todos los Jugadores',
						'All types': 'Todos',
						'Alliance features': 'Informacion de Alianzas',
						'Alliances list retrieved': 'Lista de las alianzas obtenido',
						'Alliance members list retrieved': 'Listado de Miembros de la alianza',
						'Alliance messages': 'Mensajes de Alianza',
						'and': 'y',
						'Another march request is pending': 'Otra solicitud de marcha encuentra pendiente',
						'Are you sure you want to delete All Permanent Data': 'Está seguro que desea eliminar todos los datos permanentes',
						'Arrival time': 'Tiempo de Arrivo',
						'at': 'a',
						' at ': ' a ',
						' at range': ' à distancia',
						'Attack sent to': 'Ataque enviado a',
						'Attack One Target in Multiple waves': 'Ataque en Olas Multiple',
						'Attacker': 'Atacante',
						'Attacking': 'Atacando',
						'Attacks Configuration': 'Configuración de Ataques',
						'Attacks Stats': 'Estadísticas de Ataques',
						'Attacks': 'Ataques',
						'attempted': 'intentado',
						'attempt for': 'intento de',
						'Auto harvest resources from outposts every': 'Auto-Recolectar recursos de Avanzadas cada',
						'Auto refresh info tab data every': 'Auto-Refrescar de datos de la info tab cada',
						'Automatically': 'Automáticamente',
						'Automatically recall transport 1 minute before delivery': 'Regresar el envio 1 minuto despues de ser enviado',
						'Available troops': 'Tropas disponibles',
						'Awaiting task completion notification': 'En espera de la notificación de finalización de la tarea',
						'Back at the same time': 'Volver al mismo tiempo',
						'Backup': 'Salvaguardar',
						'Battle': 'Simul',
						'Battle calculator': 'Simulacion de Batalla',
						'Battle forces': 'Fuerzas de Batalla',
						'Battle log': 'Log Simulacion',
						'Battle lost !!': 'Batalla Perdida !!',
						'Battle mechanics': 'Mecanica de Batallas',
						'Battle won !!': 'Batalla Ganada !!',
						'Bookmark': 'Marcador',
						'Bookmark saved': 'Marcador guardado',
						'Bookmarks': 'Marcadores',
						'Bookmarks Configuration': 'Configuración de marcadores',
						'Building': 'Construccion',
						'Busy': 'Ocupado',
						'by': 'por',
						'By distance ascending': 'Para distancia arriba',
						'By distance descending': 'Para distancia abajo',
						'Cache data': 'Datos de la caché',
						'Calculate': 'Inicie la simulación',
						'Camps/wilds attack reports': 'Reportes de ataques a Paramos',
						'Capital data': 'Datos de la capital',
						'Capital data successfully fetched': 'Datos de la capital a buscar con éxito',
						'Check sentinel reports every ': 'Verificar reportes de sentinela cada ',
						'Check the following great dragons to exclude them from being sent': 'Marque la casilla de dragón para evitar el envío de ellos para atacar',
						'Check to use UTC time instead of local time': 'Marque la casilla para utilizar la hora UTC en lugar de la hora local',
						'Claim': 'Reclamo',
						'Claimed': 'Reclamada',
						'Claiming quest': 'Reclamar de la misión',
						'Clear all': 'Borrar Todo',
						'Clear all data': 'Borrar Todo',
						'Clear last attack on all maps': 'Borrar todos los registros de últimos ataques',
						'Clear last attack on current map': 'Borrar registro de últimos ataques actuales',
						'Clear local storage (internet cache)': 'Borrar los datos permanentes (caché de Internet)',
						'Clear log': 'Borrar Log',
						'Clear Stats': 'Borrar Estadísticas',
						'Collected resources at outpost': 'Recursos recolectados de avanzada',
						'Completing...': 'Finalizando...',
						'Completion errors': 'Error de finalización',
						'Config': 'Config',
						'Confirmation': 'Confirmación',
						'Console Log': 'Registros de Consola',
						'Console': 'Consola',
						'Coordinates': 'Coordenadas',
						'Coords': 'Coords',
						/*
						 * 'Copy troops reported by the sentinel to the battle
						 * calculator' : '?????',
						 */
						' damages taken': ' daños sufridos',
						' damages to ': ' daños à ',
						'data': 'datos',
						'data successfully fetched': 'datos con éxito a buscar',
						'Date range': 'Rango de tiempo',
						' deal ': ' daño ',
						'Defender': 'Defensor',
						'Defending': 'En defensa',
						'Delay before script startup': 'Retraso inicial antes arranque del script',
						'Delay Between Attacks': 'Tiempo de retraso entre ataques',
						'Delay Between Transports': 'Retardo entre transporta',
						'delayed due to': 'retrasado,',
						'delayed due to no available generals': 'retrasado, no hay geneal disponible',
						'delayed due to no available Great Dragon': 'retrasado, Gran Dragon no disponible',
						'delayed due to pending march request': 'retrasado, otra solicitud de marcha encuentra pendiente',
						'Delete now': 'Borrar',
						'Delete Battle Reports': 'Borrar reportes de batalla',
						'Delete messages': 'Borrar Mensajes',
						'Delete messages of this type': 'Borrar mensajes de este tipo',
						'Delete spy reports': 'Suprimir reportes de Espias',
						'Detailed search': 'Búsqueda detallada',
						'Disable <B>Alliance</B> tab': 'Desactivar <B>Alianza</B>',
						'Disable <B>Battle</B> tab': 'Desactivar <B>Simulador</B>',
						'Disable <B>Bookmarks</B> tab': 'Desactivar <B>Marcadores</B>',
						'Disable <B>Multi</B> tab': 'Desactivar <B>Multi</B>',
						'Disable <B>Search</B> tab': 'Desactivar <B>Busqueda</B>',
						'Disable <B>Spy</B> tab': 'Desactivar <B>Espias</B>',
						'Disable <B>Wall</B> tab': 'Desactivar <B>Muralla</B>',
						'Disable <B>Wave</B> tab': 'Desactivar <B>Oleadas</B>',
						'Disable <B>Log</B> tab': 'Desactivar <B>Log</B>',
						'Disabled': 'Desactivado',
						'Display official background image': 'Visualización de la imagen de fondo oficial',
						'Dist': 'Dist',
						'Distance must be between': 'La distancia debe estar entre',
						'Distance': 'Distancia',
						'Dragon healing': 'Curando Dragon',
						'Dragons': 'Dragones',
						'Do not show alerts obsolete since': 'No mostrar alertas obsoletas desde',
						/*
						 * 'Do you want to delete existing Permanent Data' :
						 * '?????',
						 */
						'Do you want to save in Permanent Data the current script setting': 'Quieres guardar la configuración actual del script en los datos permanentes',
						'Do you want to save Map Data in local file': 'Quieres guardar los datos del mapa en un archivo local',
						'Do you want to save Permanent Data in local file': 'Quieres guardar los datos permanentes en un archivo local',
						'Dutch': 'Holandés',
						'Edit': 'Editar',
						'Edit bookmark': 'Editar marcador',
						'Enable': 'Activar',
						/*
						 * 'Enable cheat (all troops in all outposts, transport
						 * of blue energy)' : 'Activar los trucos (todas las
						 * tropas en todos los puestos de avanzada, el
						 * transporte de la energía azul)',
						 */
						'Enable transport of ': 'Activar el transporte de la ',
						'Enable use of speed-ups in attacks waves': 'Permitir el uso de aceleraciones de las ondas de ataque',
						'Enable verbose logging': 'Activar el registro detallado',
						'Enable window drag': 'Permiten arrastrar la ventana',
						'Enable the sentinel tower': 'Activar Torre Sentinela',
						'Enabled': 'Activado',
						'English': 'Inglés',
						'Enemy General': 'General Enemigo',
						'Enemy research levels': 'Niveles de investigacion del enemigo',
						'Enter -1 as troop quantity to use the maximum available': 'Introduzca la cantidad en -1 para utilizar la cantidad máxima disponible de las tropas',
						'Error': 'Error',
						'Error while retrieving the list of members': 'Error al buscar Miembro',
						'Error while setting defense choice': 'Error al actualizar la elección de la defensa',
						'Evol': 'Evol',
						'Except': 'Exepto',
						'Exception': 'Exepto',
						'failed': 'fracasado',
						'failed and returned error': 'fracasado y devolvió el error',
						'Fast search': 'Búsqueda rápida',
						'Features': 'Funcionalidades',
						'Fetching': 'Obtención',
						'Fetching Capital data': 'Obtención de datos de la capital',
						'Fetching Manifest': 'Obtención de manifiesto',
						'Fetching Outpost ': 'Obtención de Outpost ',
						'Fetching Seed': 'Obtención de datos del jugador',
						'Fetching Translation matrix': 'Obtención de la matriz de Traducción',
						'Fire': 'Fuego',
						'First value must be between': 'El primer valor debe ser de',
						'Flash game Auto refresh every': 'Actualización automática del juego flash cada',
						/* 'Foes' : '?????', */
						'for': 'para',
						'Force saving current script settings': 'Fuerza de guardar la configuración actual del script',
						'Forum link': 'Forum link',
						'French': 'Francés',
						'Game messages': 'Mensajes de Juego',
						'Game Options': 'Opciones del Juego',
						'GD': 'GD',
						'Generals': 'Generales',
						'German': 'Alemán',
						'Getting basic data...': 'Obtención de datos básicos',
						'Getting cities data...': 'Obtención de datos de las ciudades',
						'Getting game data...': 'Obtención de datos del juego',
						'Got': 'Encontrado',
						'Great dragons': 'Dragones Elementales',
						'About': 'Acerca',
						'Hide spy alerts': 'Esconder alertas de espias',
						'Hiding': 'Santuario',
						'History': 'Historia',
						'h': 'h',
						'Ice': 'Hielo',
						'Idle': 'Inactivo',
						'In city': 'En la ciudad',
						'In march': 'En movimiento',
						' in melee': ' cuerpo a cuerpo',
						'in progress': 'en progreso',
						'Include Great Dragon': 'Enviar Gran Dragon en el Ataque',
						'Initialization': 'inicialización',
						'Initializing...': 'inicializar...',
						'Initializing map, auto-collect, ...': 'Inicializar el mapa, la recopilación automática, ...',
						'Invalid date From': 'Formato de fecha de inicio invalido',
						'Invalid date To': 'Formato de fecha de finalizacion invalido',
						'Invalid date range': 'Rango de datos invalido',
						'Invalid delays': 'Intervalo de retraso invalido',
						'Invalid number of troops': 'Cantidad de tropas invalida',
						'Joined': 'Registrado',
						'Keep battle reports of attacks from other players': 'Guardar los reportes de ataque de otros jugadores al mio',
						'Keep battle reports of my attacks on other players': 'Guardas los reportes de ataques mios hacia otro jugador',
						' (kill ': ' (asesinado ',
						'Last attack': 'Ultimo ataque',
						'life lost': 'vida perdida',
						'Loaded': 'Script cargado',
						'Loading basic data': 'Carga de datos básicos',
						'Locale data was Successfully requested from the server': 'Solicitud para los datos de traducción ha sido procesada correctamente por el servidor',
						'Logs': 'Log',
						'Log': 'Log',
						'Manifest not available, using defaults': 'Manifiesto no disponible, utilizando los valores predeterminados',
						'Manifest Successfully initialized': 'Manifiesto inicializado correctamente',
						'Manifest was Successfully requested from the server': 'Solicitud para el Manifiesto ha sido procesada correctamente por el servidor',
						'Manual attack sent to': 'Ataque manual enviado a',
						'Max level': 'Nivel max',
						'Map Search': 'Buscando en mapa',
						'Maximize resource to transport according to max load': 'Maximizar los recursos para el transporte de acuerdo a la carga máxima disponible',
						'Maximum level reached': 'Nivel máximo alcanzado',
						'Maximum simultaneous marches': 'Maximo de marchas simultaneas',
						'Maximum training queues possible per city, according to available resources': 'Máximas posible de formación por la ciudad, según los recursos disponibles',
						'Members list ': 'Listado de miembros ',
						'Message(s) deleted': 'Mensajes Borrados',
						'Message(s) deletion in progress': 'Borrando mensajes',
						'miles': 'millas',
						'Min level': 'Nivel min',
						' move to ': ' mover a ',
						'Multi': 'Multi',
						'Need': 'Req',
						/* 'New version has been installed...' : '?????...', */
						'No Generals Available': 'No hay geneal disponible',
						'No great dragon available': 'Gran Dragon no disponible',
						'no max': 'sin limite',
						'No new version of': 'No hay nueva versión de',
						'No resources to transport defined': 'no se definieron recursos a transportar',
						'No Troops Defined': 'No hay tropas definidas',
						'Not ready': 'No listo',
						'of': 'de',
						'Only one training queue per city': 'Sólo una cola de formación por ciudad',
						'Options': 'Opciones',
						'Opts': 'Opcs',
						'Outpost 1': 'Ciudad del Agua',
						'Outpost 2': 'Ciudad de la Piedra',
						'Outpost 3': 'Ciudad del Fuego',
						'Outpost 4': 'Ciudad del Viento',
						'Overview': 'Resumen General',
						'Owner': 'Propietario',
						'Play for': 'Sonar para',
						'Play sound on incoming sentinel report': 'Sonar alarma cuando entre reporte de sentinela',
						'Play sound on task completion': 'Reproducir un sonido al final de la tarea',
						'Player cities': 'Ciudades',
						'Player cities list': 'Lista de Ciudades de jugador',
						'Player data was Successfully requested from the server': 'Solicitud para los datos del jugador ha sido procesada correctamente por el servidor',
						'Player messages': 'Mensajes de Jugador',
						'Player name': 'Nombre del jugador',
						'Please wait...': 'Gracias por su espere...',
						'Preset': 'Preset',
						'Preset name': 'nombre del preset',
						'Primary attack to ': 'Primario ataque a ',
						'Quest': 'Misión',
						'Rate Limit Exceeded because there were too many requests': 'Excedió el límite de las solicitudes, demasiado muchas solicitudes se han enviadas',
						'Read page ': 'Lectura de la pagina ',
						'Ready': 'Listo',
						'Recipient': 'Destinatario',
						'Refresh': 'Refrescar',
						'Refresh list': 'Refrescar lista',
						'Refresh map data': 'Refrescar datos del mapa',
						'Refresh selection': 'Actualizar la selección',
						'Reinforcement reports': 'Reportes de refuerzosr',
						'Reinforcement sent to': 'Refuerzos enviados a',
						'Reload': 'Actualizar DOA',
						'Repairing': 'Reparando',
						'Repeat every': 'Repetir cada',
						'Researching': 'Investigando',
						'Research Started': 'Investigación comenzó',
						'Reset Stats': 'Borrar Estadisticas',
						'Resources stock levels update failed': 'Actualización de los niveles de inventario de los recursos ha fracasado',
						'Resources to transport': 'Recursos a transportar',
						'Restore': 'Restaurar',
						'Restore script settings from local file': 'Restaurar la configuración del script de un archivo local',
						'Resurrection': 'Resurrección',
						'Resurrect': 'Resucitar',
						'Retry in': 'Reintentando en',
						'Reviving': 'Reviviendo',
						'Role': 'Rol',
						'Rules': 'Reglas',
						'Run Time': 'Tiempo de ejecucion',
						'Safe Mode': 'Modo Seguro',
						'Save current script settings in a local file': 'Guardar la configuración actual del script en un archivo local',
						'Save current map data in a local file': 'Guardar los datos del mapa actual en un archivo local',
						'Save preset': 'Guardar preset',
						'Scanning map': 'Buscando el mapa sólo para las ciudades',
						'Scanning map for cities/wildernesses': 'Buscando Ciudades y Paramos en el mapa',
						'Scanning map for wildernesses': 'Buscando el mapa sólo para las paramos',
						'Script language': 'Lenguaje del script',
						'Script Options': 'Opciones del script',
						'Search coords': 'Buscando coords',
						'Search for alliance list': 'Buscador de la lista de las alianzas',
						'Search for alliance members': 'Buscador de miembro de alianza',
						'Search max radius': 'Radio Max. Busqueda',
						'Search Radius': 'Radio de Busqueda',
						'Second value must be at least': 'El segundo valor debe ser al menos',
						'Seconds': 'Segundos',
						'seconds': 'segundos',
						'Secondary attack to ': 'Secundario ataque a ',
						'Seed Successfully initialized': 'Datos del jugador inicializado correctamente',
						'Select at least one type of message or report to delete': 'Seleccion por lo menos un tipo de mensaje o reporte para borrar',
						'Send reinforcement': 'Enviar refuerzos',
						'Send transport': 'Enviar Transportes',
						'Sending reinforcement': 'Enviando refuerzos',
						'Sending transport': 'Enviando Transporte',
						'Sentinel messages': 'Alertas de Sentinela',
						'Sentinel tower': 'Torre de Sentinela',
						'Set Def': 'Activar Def',
						'Souls': 'Almas',
						'Sound configuration': 'Configuracion de Sonido',
						'Sound file': 'Sonido',
						'Spanish': 'Español',
						'Spectral': 'Espectral',
						'SpectralDragonKeep': 'Altar del Dragón',
						'Spies done': 'Espionajes efectuados',
						'Spies number': 'Numero de Espias',
						'Spy One Target': 'Espias un objetivo',
						'Spy reports': 'Reportes de espionaje',
						'Spy to ': 'Espias enviados a ',
						'Stars': 'Estrellas',
						'Start': 'Iniciar',
						'Start Date': 'Fecha de Inicio',
						'Starting...': 'Puesta en marcha...',
						'Step': 'Paso',
						'Stone': 'Piedra',
						'Stop if any troops lost': 'Detener si pierdo tropas',
						'succeeded': 'se las arregló',
						'Successfully initialized': 'Inicializado correctamente',
						'Successfully': 'Exitosamente',
						'Summary': 'Detalles',
						' survivals)': ' sobrevivientes)',
						/* 'Swamp' : '?????', */
						'Swedish': 'Sueco',
						'switchDefense OK': 'Cambio de la defensa OK',
						'Switch defense wall status': 'Cambio en el estado de la muralla',
						'Switching defense': 'Cambio de la defensa',
						'Tabs Options': 'Opciones de Tabs',
						'Target': 'Objetivo',
						'Targets': 'Objetivos',
						'Task Completed': 'Tarea Finalizada',
						'Tasks': 'Tareas',
						'Terrain length set to ': 'Largo de terreno en ',
						/*
						 * 'This should not clear map and alliance data.' :
						 * '?????.',
						 */
						'Time': 'Duración',
						'to': 'a',
						'To be refreshed': 'a Refrescar',
						'Toggle Flash': 'Flash toggle',
						'Tower': 'Torres',
						'Tower configuration': 'Configuracion de Sentinela',
						'Training Configuration': 'Configuracion de entrenamiento',
						'Translation Matrix Successfully initialized': 'Traducción Matrix inicializado correctamente',
						'Transport reports': 'Reportes de Transporte',
						'Transport sent to': 'Transporte enviado a',
						'Troops Capped': 'Las tropas tope',
						'Troops for Bookmarks Attack': 'Tropas para atacar Marcador',
						'Troops for reinforcement': 'Tropas para reforzar',
						'Troops for defense': 'Tropas para defensa',
						'Troops for Primary Attack': 'Tropas para ataque principal',
						'Troops for Secondary Attacks': 'Tropas para ataque secundario',
						'Troops for transport': 'Tropas para Transporte',
						'Troops for Wave Attack': 'Tropas para ataque en olas',
						'Troops lost': 'Tropas perdidas',
						'Troops max': 'max. Tropas',
						'Troops statistics': 'Estadísticas de las tropas',
						'Troops statistics for': 'Estadísticas para',
						'Turned Off': 'Desactivado',
						'Unlimited': 'Ilimitado',
						'Unowned only': 'Libres solamente',
						'Updating City values': 'Actualización de los datos de la ciudad',
						'Use the Levels Tab to select attack areas': 'Usar la solapa de Niveles para seleccionar el rango de ataque',
						'Version update': 'Actualizar de la versión',
						'Wall management': 'Gestión de la muralla',
						'Warning': 'Esperando',
						'was returned with a status of': 'ha devolvió el estado de',
						'Water': 'Aqua',
						'Wave attack to ': 'Ataque en Oleada a ',
						'Wave': 'Oleadas',
						'Wiki URL': 'Wiki URL',
						'Wildernesses list': 'Listado de Paramos',
						'Wind': 'Viento',
						'Without alliance': 'Sin alianza',
						'You are': 'Tu eres',
						'Yoyo': 'Yoyo',
						'Yoyo functionality': 'Funcionalidad Yoyo',
						'ATrans': 'Globo',
						/* abbr Armored Transport */ 'Banshee': 'Banshee',
						/* abbr Wind Troop - Banshee */ 'BatDrg': 'DrgComb',
						/* abbr Battle Dragon */ 'Conscr': 'Conscr',
						/* abbr Conscript */ 'Fang': 'Tritón',
						/* abbr Aqua Troop */
						/* 'FGiant' : '?????', */
						/* abbr Frost giant */
						'FireDrg': 'DrgFue',
						/* abbr Fire Dragon */ 'FireM': 'EFuego',
						/* abbr Fire Mirror */ 'GrtDrg': 'GrnDrg',
						/* abbr Great Dragon */ 'Halbrd': 'Alabar',
						/* abbr Halberdsman */ 'IceDrg': 'DrgHielo',
						/* abbr Ice Dragon */ 'LBM': 'Arcos',
						/* abbr Longbowman */ 'LCannon': 'LCannon',
						/* abbr Lightning Cannon */ 'Magma': 'Magma',
						/* abbr Fire Troop - Magmasaurus */ 'Mino': 'Mino',
						/* abbr Minotaur */ 'Ogre': 'Ogro',
						/* abbr Stone Troop - Ogre */ 'PackDrg': 'DrgTrans',
						/* abbr Pack dragons */ 'SpctDrg': 'EspctDrg',
						/* abbr Spectral Dragon */ 'SReaper': 'Segador',
						/* abbr Ice Troop - SoulReaper */ 'SSDrg': 'DRapid',
						/* abbr Swift Strike Dragon */ 'StnDrg': 'DrgPie',
						/* abbr Stone Dragon */ 'SwpDrg': 'SerpMefi',
						/* abbr Swamp Dragon */ 'Venom': 'Venom',
						/* abbr Swamp Troop - Venom */ 'WatDrg': 'DrgAgua',
						/* abbr Water Dragon */ 'WndDrg': 'DraCef',
						/* abbr Wind Dragon */
						/* Missing Kabam translations */
						'FireDragon': 'Dragón del Fuego',
						'ajax-req-versions': 'Getting current API version',
						'ajax-req-locales': 'Loading translation matrix',
						'ajax-req-cookie': 'Set a cookie for sound setup',
						'ajax-req-manifest': 'Loading manifest',
						'ajax-req-player': 'Player data',
						'ajax-req-cities': 'City data',
						'ajax-req-jobs': 'Getting all jobs list',
						'ajax-req-dragons': 'Getting dragons data',
						'ajax-req-alliances': 'Retrieving Alliances Top 100',
						'ajax-req-membership': 'Retrieving Alliance membership',
						'ajax-req-activity': 'Retrieving Alliance activity',
						'ajax-req-map': 'Map data',
						'ajax-req-tile_at': 'Map data for one tile',
						'ajax-req-building': 'Lauching one building',
						'ajax-req-research': 'Lauching one research',
						'ajax-req-training': 'Lauching one training',
						'ajax-req-resurrect': 'Lauching one resurrection',
						'ajax-req-canceljob': 'Cancelling one job',
						'ajax-req-marches': 'Lauching one march',
						'ajax-req-cancelmarch': 'Cancelling/recalling one march',
						'ajax-req-reports': 'Message list',
						'ajax-req-reports_del': 'Deleting one message',
						'ajax-req-reports_read': 'Reading one message',
						'ajax-req-message': 'Sending one message',
						'ajax-req-minigame': 'Getting fortuna prizes list',
						'ajax-req-save_minigame': 'Playing one fortuna\'s grid',
						'ajax-req-leaderboards': 'Getting leaderbords data',
						'ajax-req-collect': 'Collecting resources from one outpost',
						'ajax-req-claim': 'Claiming one quest',
						'ajax-req-defended': 'Setting in defense / in sanctuary',
						'ajax-req-defense': 'Choice of Defense forces',
						'ajax-req-items': 'Using one item (speedups)',
						'ajax-req-breeding': 'Dragons breeding',
						'ajax-req-feeding': 'Dragons feeding',
						'ajax-req-dragonHandle': 'Dismiss/Remove/Equip one dragon',
						'Zzz': 'Zzz'
					};
					break;
                    // Français (by Jawz & Calcium)
				case 'fr':
					TRANSLATION_ARRAY = {
						'%age': '%age',
						'</B> and <B>': '</B> et <B>',
						'<B>Attacker\'s move turn</B>': '<B>Déplacement des unités offensives</B>',
						'<B>Attacker\'s attack turn</B>': '<B>Attaque des unités offensives</B>',
						'<b>Bad request!</b>': '<b>Mauvaise requête!</b>',
						'<B>Defender\'s move turn</B>': '<B>Déplacement des unités défensives</B>',
						'<B>Defender\'s attack turn</B>': '<B>Riposte des unités défensives</B>',
						'<b>Rate Limit Exceeded</b>, too many requests!': '<b>Limitation des Requêtes Dépassée</b>, Trop de requêtes envoyées!',
						'About CalciumScript': 'A propos de CalciumScript',
						'above the first value': 'au-dessus de la première valeur',
						'Action Log': 'Journal d\'évenements',
						'Actions': 'Actions',
						'Activate Attacks Logs': 'Activer journalisation des attaques',
						'Adapt Transport': 'Adapter transp.',
						'Adapt Transp. by speed': 'Adapter trsp/vitesse',
						'Alerts log': 'Log alertes',
						'All grids': 'Toutes grilles',
						'All players': 'Tous les joueurs',
						'All types': 'Tous les types',
						'Alliance activity retrieved': 'Activité de l\'alliance récupérée',
						'Alliance features': 'Fonctionnalités Alliance',
						'Alliances list retrieved': 'Liste des alliances récupérée',
						'Alliance members list retrieved': 'Liste des membres de l\'alliance récupérée',
						'Alliance messages': 'Message de l\'alliance',
						'and': 'et',
						'And at least': 'Et au moins',
						'Another march request is pending': 'Une autre demande de marche est en attente',
						'Are you sure you want to delete All Permanent Data': 'Etes-vous sûr de vouloir supprimer les données permanentes',
						'Army presets': 'Compositions d\'armées',
						'Arrival time': 'Heure arrivée',
						'at': 'à',
						' at ': ' à ',
						' at range': ' à distance',
						'Attack arrival time': 'Heure d\'arrivée de l\'attaque',
						'Attack forces': 'Forces engagées dans l\'attaque',
						'Attack sent to': 'Attaque envoyée sur',
						'Attack One Target in Multiple waves': 'Attaquer une cible en Vagues successives',
						'Attack sound file': 'Fichier audio d\'attaque',
						'Spy sound file': 'Fichier audio d\'espionnage',
						'Attacker': 'Attaquant',
						'Attacking': 'Attaque',
						'Attacks Configuration': 'Configuration Attaques',
						'Attacks Stats': 'Statistiques attaques',
						'Attacks': 'Attaques',
						'attempted': 'tenté',
						'attempt for': 'tentative pour',
                        'Auto' : 'Auto',
						'Auto harvest resources from outposts every': 'Collecte automatique des outposts chaque',
						'Auto-play : Maximum tickets to play ': 'Jeu automatique : Tickets maximum à jouer ',
						'Auto refresh info tab data every': 'Rafraîchissement auto des données de l\'onglet info chaque',
						'Auto-refresh wheel prize list every': 'Rafraîchissement de la liste des gains chaque',
						'Automatically': 'Automatiquement',
						'Automatically recall transport 1 minute before delivery': 'Rappel automatique du transport une minute avant livraison',
						'Available troops': 'Troupes disponibles',
						'Awaiting task completion notification': 'En attente de la notification de fin de tâche',
						'Back at the same time': 'Retour au même instant',
						'Backup': 'Backup',
						'Battle': 'Simul',
						'Battle calculator': 'Simulation bataille',
						'Battle forces': 'Forces de bataille',
						'Battle log': 'Log de bataille',
						'Battle lost !!': 'Bataille perdue !!',
						'Battle mechanics': 'Mécanique des bataille',
						'Battle won !!': 'Bataille gagnée !!',
						'Bookmark': 'Signet',
						'Bookmarks': 'Signets',
						'Bookmarks Configuration': 'Configuration signets',
						'Bookmark saved': 'Signet sauvegardé',
						'Building': 'Construction',
						'Busy': 'Occupé',
						'by': 'par',
						'By distance ascending': 'Par distance croissante',
						'By distance descending': 'Par distance décroissante',
						'Cache data': 'Données en cache',
						'Calculate': 'Lancer simulation',
						'Camps/wilds attack reports': 'Rapports d\'attaque de camps/ES',
						'Capital data': 'Données de la ville principale',
						'Capital data successfully fetched': 'Données de la ville principale chargée avec succès',
						'Chance': 'Chance',
						'Change': 'Changer',
						'Check sentinel reports every ': 'Contrôler les rapports de sentinelle chaque ',
						'Check the following great dragons to exclude them from being sent': 'Cocher les grands dragons suivants pour éviter de les envoyer',
						'Check to use UTC time instead of local time': 'Cocher pour afficher l\'heure UTC à la place de l\'heure locale',
						'Chrono': 'Chrono',
						'Claim': 'Réclame',
						'Claimed': 'Réclamé',
						'Claiming quest': 'Réclamation',
						'Clear all': 'Effacer tout',
						'Clear all data': 'Réinitialiser données',
						'Clear last attack on all maps': 'Réinitialiser toutes les cartes',
						'Clear last attack on current map': 'Réinitialiser les attaques sur la carte',
						'Clear local storage (internet cache)': 'Supprimer le stockage local (cache internet)',
						'Clear log': 'Effacer log',
						'Clear Stats': 'Effacer stats',
						'Collected resources at outpost': 'Ressources collectées sur l\'avant-poste',
						'Completing...': 'Finalisation...',
						'Completion errors': 'Erreur lors de fin de tâche',
						'Config': 'Config',
						'Confirmation': 'Confirmation',
						'Console Log': 'Log Console',
						'Console': 'Console',
						'Coordinates': 'Coordonnées',
						'Coords': 'Coords',
						'Copy to calculator': 'Envoyer au simulateur',
						'Copy troops reported by the sentinel to the battle calculator': 'Copie des troupes rapportée par la sentinelle dans le simulateur de bataille',
						'Curse reports': 'Rapports de malédiction',
						' damages taken': ' dommages subis',
						' damages to ': ' dommages à ',
						'data': 'données',
						'data successfully fetched': 'données chargées avec succès',
						'Date range': 'Plage de dates',
						' deal ': ' infligent ',
						'Defender': 'Défenseur',
						'Defending': 'En défense',
						'Delay before first secondary attack': 'Délai avant envoi de la première vague secondaire',
						'Delay before script startup': 'Délai initial avant chargement du script',
						'Delay before sending Primary attack': 'Délai avant envoi d\'une vague principale',
						'Delay Between Attacks': 'Délai entre les attaques',
						'Delay Between Secondary Attacks': 'Délai entre vagues secondaires',
						'Delay Between Transports': 'Délai entre chaque transport',
						'delayed due to': 'retardé,',
						'delayed due to no available generals': 'retardé, aucun général disponible',
						'delayed due to no available Great Dragon': 'retardé, aucun Grand Dragon disponible',
						'delayed due to pending march request': 'retardé, une autre demande de marche est en attente',
						'Delete now': 'Supprimer',
						'Delete Battle Reports': 'Supprimer les rapports de bataille',
						'Delete messages': 'Suppression des messages',
						'Delete messages of this type': 'Suppression des messages de ce type',
						'Delete spy reports': 'Supprimer les rapports d\'espionnage',
						'Delete spy Reports': 'Supprimer les rapports d\'espionnage',
						'Deleting selected messages': 'Suppression des messages sélectionnés',
						'Deleting selected messages in progress': 'Suppression des messages sélectionnés en cours',
						'Deleting messages': 'Suppression de messages',
						'Deletion of messages': 'Suppression de messages',
						'Desert': 'Désert',
						'Detailed search': 'Recherche détaillée',
						'Disable <B>Alliance</B> tab': 'Désactiver l\'onglet <B>Alliance</B>',
						'Disable <B>Battle</B> tab': 'Désactiver l\'onglet <B>Simu</B>',
						'Disable <B>Bookmarks</B> tab': 'Désactiver l\'onglet <B>Signets</B>',
						'Disable <B>Fortuna\'s</B> tab': 'Désactiver l\'onglet <B>Fortuna</B>',
						'Disable <B>Inbox</B> tab': 'Désactiver l\'onglet <B>Messagerie</B>',
						'Disable <B>Leaderboards</B> tab': 'Désactiver l\'onglet <B>Leaderboards</B>',
						'Disable <B>Multi</B> tab': 'Désactiver l\'onglet <B>Multi</B>',
						'Disable <B>Search</B> tab': 'Désactiver l\'onglet <B>Carte</B>',
						'Disable <B>Single</B> tab': 'Désactiver l\'onglet <B>Unique</B>',
						'Disable <B>Spy</B> tab': 'Désactiver l\'onglet <B>Espionnage</B>',
						'Disable <B>Wall</B> tab': 'Désactiver l\'onglet <B>Rempart</B>',
						'Disable <B>Wave</B> tab': 'Désactiver l\'onglet <B>Vague</B>',
						'Disable <B>Log</B> tab': 'Désactiver l\'onglet <B>Log</B>',
						'Disabled': 'Désactivé',
						'Display official background image': 'Afficher l\'image officielle en arrière-plan',
						'Displayed': 'Affichés',
						'Dist': 'Dist',
						'Distance must be between': 'La distance doit être comprise entre',
						'Distance': 'Distance',
						'Dragons data successfully fetched': 'Données des dragons du sanctuaire chargées avec succès',
						'Dragons management': 'Gestions des dragons',
						'Dragon healing': 'Dégâts causés au dragon',
						'Dragons': 'Dragons',
						'Do not show alerts obsolete since': 'Ne pas afficher les alertes obsolètes depuis',
						'Do you want to delete existing Permanent Data': 'Voulez-vous supprimer les données permanentes',
						'Do you want to save in Permanent Data the current script setting': 'Voulez-vous sauvegarder le paramétrage actuel du script dans les données permanentes',
						'Do you want to save Map Data in local file': 'Voulez-vous sauvegarder les données de la carte dans un fichier local',
						'Do you want to save Permanent Data in local file': 'Voulez-vous sauvegarder les données permanentes dans un fichier local',
						'Do you want to reject this member': 'Voulez-vous exclure ce membre',
						'Do you want to use [0] on this job': 'Voulez-vous utiliser [0] pour cette tâche',
						'Do you want to use [0] on this march': 'Voulez-vous utiliser [0] pour cette marche',
						'Dutch': 'Hollandais',
						'Edit': 'Modifier',
						'Edit bookmark': 'Modifier signet',
						'Enable': 'Activer',
						'Enable confirmation on use of speed-ups': 'Activer la confirmation sur l\'utilisation de certains accélérateurs',
						'Enable confirmation on cancelling job in training/resurrection': 'Activer la confirmation sur l\'annulation d\'entrainement/résurrection',
						'Enable research on all OP': 'Activer la possibilité de lancer des recherches sur tous les OP',
						'Enable transport of ': 'Activer le transport de ',
						'Enable use of speed-ups in attacks waves': 'Activer l\'utilisation des accélérateurs de temps dans les vagues d\'attaque',
						'Enable use of speed-ups in training/resurrection jobs': 'Activer l\'utilisation de accélérateurs de temps dans les formations/résurrections',
						'Enable verbose logging': 'Activer la journalisation d\'évenements',
						'Enable window drag': 'Autoriser le déplacement de la fenêtre',
						'Enable the sentinel tower': 'Activer la sentinelle',
						'Enable notifications when i win an object in Fortuna automatic play': 'Activer les notifications sur les gains automatique de Fortuna',
						'Enable notifications when i receive spy': 'Activer les notifications quand je reçois une alerte Espion',
						'Enable notifications when i receive attack': 'Activer les notifications quand je reçois une alerte Attaque',
						'Enable notifications for tchat alliance':'Activer les notifications sur le tchat alliance',
						'Enable notifications for tchat realm':'Activer les notifications sur le tchat monde',
						'enchanting': 'Energie enchantée',
						'Enabled': 'Activé',
						'English': 'Anglais',
						'Enemy': 'Ennemi',
						'Ennemy coordinates': 'Coordonnées de l\'ennemi',
						'Enemy General': 'Général ennemi',
						'Ennemy name and alliance': 'Nom et alliance de l\'ennemi',
						'Enemy research levels': 'Niveaux de recherche de l\'ennemi',
						'Enter -1 as troop quantity to use the maximum available': 'Saisir -1 comme quantité de troupes pour utiliser le maximum disponible',
						'Error': 'Erreur',
						'Error while deleting messages': 'Erreur lors de la suppression des messages',
						'Error while deleting selected messages': 'Erreur lors de la suppression des messages sélectionnés',
						'Error while retrieving all messages': 'Erreur lors de la récupération de tous les messages',
						'Error while retrieving player data ': 'Erreur lors de la récupération des données du joueur',
						'Error while retrieving the alliance activity': 'Erreur lors de la récupération de l\'activité de l\'alliance',
						'Error while retrieving the item won': 'Erreur lors de la récupération du gain',
						'Error while retrieving the list of members': 'Erreur lors de la récuparation de la liste des membres',
						'Error while setting defense choice': 'Erreur lors de la mise à jour du choix des défenseurs',
						'Error while setting defense wall status': 'Erreur lors du changement de statut du rempart',
						'Evol': 'Evol',
						'Except': 'Sauf',
						'Exception': 'Exception',
						'failed': 'a échoué',
						'failed and returned error': 'a échoué et a retourné l\'erreur',
						'Fast search': 'Recherche rapide',
						'Features': 'Fonctionalités',
						'Fetching': 'Récupération',
						'Fetching Capital data': 'Chargement des données de la ville principale',
						'Fetching Dragons data': 'Chargement des données des dragons du sanctuaire',
						'Fetching Manifest': 'Chargement du Manifeste',
						'Fetching Outpost ': 'Chargement de l\'outpost ',
						'Fetching Seed': 'Chargement des données joueur',
						'Fetching Translation matrix': 'Chargement de la matrice de traductions',
						'Fire': 'Feu',
						'First value must be between': 'La première valeur du délai doit être comprise entre',
						'Flash game Auto refresh every': 'Auto-refraîchissement du jeu flash chaque',
						'Foes': 'Ennemis',
						'for': 'pour',
						'Force saving current script settings': 'Forcer la sauvegarde du paramétrage actuel du script dans le stockage local',
						'Fortuna\'s chance': 'Fortuna Chance',
						'Forum link': 'Lien Forum',
						'French': 'Français',
						'Game messages': 'Message du jeu',
						'Game Options': 'Options de jeu',
						'GD': 'GD',
						'Generals': 'Généraux',
						'German': 'Allemand',
						'Getting basic data...': 'Récupération des données de base',
						'Getting cities data...': 'Récupération des données des cités',
						'Getting dragons data...': 'Récupération des données des dragons du sanctuaire',
						'Getting game data...': 'Récupération des données de jeu',
						'Got': 'Trouvé',
						'Great dragons': 'Grands Dragons',
						'GreenScales': 'Écailles Naturelles',
						'Grids played': 'Grilles jouées',
						'About': 'Aide',
						'Hide spy alerts': 'Masquer les alertes d\'espionnage',
						'Hide sanctuary dragon at max level':'Masque les dragons du sanctuaire au niveau maximum',
						'Hiding': 'Sanctuaire',
						'History': 'Historique',
						'h': 'h',
						'Hide resource fields': 'Masquer les champs de ressources',
						'Ice': 'Glace',
						'Idle': 'Inoccupé',
						'In city': 'En ville',
						'In march': 'En marche',
						' in melee': ' en corps-à-corps',
						'in progress': 'en cours',
						'Inbox': 'Messagerie',
						'Include Great Dragon': 'Envoyer un grand dragon avec chaque attaque',
						'Info': 'Info',
						'Initialization': 'Initialisation',
						'Initializing...': 'Initialisation...',
						'Initializing map, auto-collect, ...': 'Initialisation de la carte, collecte automatique, ...',
						'Inspect current script settings': 'Inspecter le paramétrage actuel du script',
						'Invalid date From': 'Date "du" non valide',
						'Invalid date To': 'Date "au" non valide',
						'Invalid date range': 'Plage de dates invalide',
						'Invalid delays': 'Délais invalides',
						'Invalid number of troops': 'Nombre d\'unités invalide',
						'Joined': 'Adhésion',
						'Keep battle reports of attacks from other players': 'Gardez les rapports de bataille des attaques d\'autres joueurs',
						'Keep battle reports of my attacks on other players': 'Gardez les rapports de bataille de mes attaques contre d\'autres joueurs',
						' (kill ': ' (tuent ',
						'Last attack': 'Dernière attaque',
						'Last Block': 'Dernier bloquage',
						'Last report': 'Dernier rapport',
						'Last hour': 'Dernière heure',
						'Last items won': 'Derniers objets gagnés',
						'Leaderboards': 'Leaderboards',
						'Leaderboards retrieved': 'Leaderboard récupéré',
						'life lost': 'vie perdue',
						'L.I.T.': 'Transport Auto',
						'Loaded': 'Script chargé',
						'Loading basic data': 'Chargement des données de base',
						'Locale data was Successfully requested from the server': 'La requête pour les traductions a bien été traitée par le serveur',
						'Logs': 'Logs',
						'Log': 'Log',
						'Manifest not available, using defaults': 'Manifeste non disponible, utilisation des stats par défaut',
						'Manifest Successfully initialized': 'Manifeste initialisé avec succès',
						'Manifest was Successfully requested from the server': 'La requête pour le Manifeste a bien été traitée par le serveur',
						'Manual attack sent to': 'Attaque manuelle envoyé sur',
						'Mass deletion': 'Suppression en masse',
						'Mass deletion of messages': 'Suppression en masse de messages',
						'Max level': 'Niveau max',
						'Map data': 'Données carte',
						'Map Search': 'Recherche sur la carte',
						'Maximize resource to transport according to max load': 'Maximiser ressources en fonction de la charge maximale',
						'Maximum level reached': 'Niveau maximum atteint',
						'Maximum secondary marches before sending another primary attack': 'Nombre maximum de vagues secondaires<br/>avant de renvoyer une vague principale: ',
						'Maximum simultaneous marches': 'Nombre maximum de marches simultanées',
						'Maximum training queues possible per city, according to available resources': 'Maximum de formations possibles par ville, en fonction des ressources disponibles',
						'Members list ': 'Liste des membres ',
						'Message alliance': 'Message d\'alliance',
						'Message configuration': 'Configuration du message',
						'Message(s) deleted': 'Message(s) supprimé(s)',
						'Message(s) deletion in progress': 'Message(s) en cours de suppression',
						'Messages deleted': 'Messages supprimés',
						'messages deleted': 'messages supprimés',
						'Messages retrieved': 'Messages récupérés',
						'Messages selection deleted': 'Messages sélectionnés supprimés',
						'miles': 'miles',
						'Min level': 'Niveau min',
						' move to ': ' vont à la position ',
						'Multi': 'Multi',
						'Msg': 'Msg',
						'My city/OP name where the attack is coming': 'Le nom de ma ville/OP où l\'attaque arrive',
						'My city/OP coordinates': 'Les coordonnées de ma ville/OP',
						'My name': 'Mon nom',
						'Need': 'Requiert',
						'New version has been installed...': 'Une nouvelle version a été installée...',
						'No Generals Available': 'Aucun général disponible',
						'No great dragon available': 'Aucun grand dragon disponible',
						'No Great Dragon available': 'Aucun grand dragon disponible',
						'no max': 'pas de limite',
						'No new version of': 'Aucune nouvelle version de',
						'No resources to transport defined': 'Aucune ressource à envoyer n\'est définie',
						'No Recipient Defined': 'Aucun destinataire défini',
						'No Troops Defined': 'Aucune troupe définie',
						'Not blocked since': 'Non bloqué depuis',
						'Not ready': 'Non prêt',
						'Number of one-hour-bans': 'Nombre d\'heures bloquées',
						'of': 'sur',
						'of the following items': 'des objets suivants',
						'Only one training queue per city': 'Une seule formation de troupe par ville',
						'Options': 'Options',
						'Opts': 'Opts',
						'Outpost 1': 'Avant-poste aquatique',
						'Outpost 2': 'Avant-poste de pierre',
						'Outpost 3': 'Avant-poste de feu',
						'Outpost 4': 'Avant-poste éolien',
						'Overview': 'Vue d\'ensemble',
						'Owner': 'Propriétaire',
						'Parameters': 'Paramètres',
						'Play for': 'Jouer pendant',
						'Play sound on incoming sentinel report': 'Jouer un son à l\'arrivée de nouvelles alertes sentinelle',
						'Play sound on task completion': 'Jouer un son lors des fins de tâches',
						'Play sound when Fortuna\'s ticket played or a matching grid is found': 'Jouer un son lorsqu\' un ticket Fortuna est joué ou qu\'une grille recherchée est trouvée',
						'Played': 'Joués',
						'played this session': 'Joués cette session',
						'Player cities': 'Cités joueurs',
						'Player cities list': 'Liste des cités des joueurs',
						'Player data retrieved': 'Données joueur récupérées',
						'Player data was Successfully requested from the server': 'La requête pour les données joueur a bien été traitée par le serveur',
						'Player messages': 'Messages de joueurs',
						'Player name': 'Nom joueur',
						'Please wait...': 'Veuillez patienter...',
						'Preset': 'Préréglage',
						'Preset name': 'Nom du préréglage',
						'Presets': 'Préréglage',
						'Primary attack to ': 'Vague principale envoyée à ',
						'Production limit reached': 'Limite de production atteinte',
						'Purge All': 'Tout Purger',
						'Quest': 'Mission',
						'Qty': 'Qté',
						'Rate Limit Exceeded because there were too many requests': 'Limitation des requêtes dépassée, trop de requêtes ont été envoyées',
						'Read page ': 'Lecture de la page ',
						'Ready': 'Prêt',
						'Reaped': 'Fauchées',
						'Recipient': 'Destinataire',
						'Refresh': 'Actualiser',
						'Refresh applicants': 'Actu. candidats',
						'Refresh in': 'Nouvelle grille dans',
						'Refresh list': 'Rafraîchir la liste',
						'Refresh map data': 'Rafraîchir données carte',
						'Refresh selection': 'Rafraîchir sélection',
						'Refreshing player and cities data': 'Rafraîchissement des données joueur et cités',
						'Refreshing Tax Rate': 'Mise à jour du taux d\'imposition',
						'Reinforcement reports': 'Rapports de renforcement',
						'Reinforcement sent to': 'Renforcement envoyé à',
						'Reload': 'Recharger DOA',
						'Repairing': 'Réparation',
						'Repeat every': 'Répéter chaque',
						'Repeat attack alarm every': 'Répéter l\'alarme d\'attaque tous les',
						'Repeat spy alarm every': 'Répéter l\'alarme d\'espionnage tous les',
						'Request': 'Requête',
						'Requests Log': 'Log Requêtes',
						'Research Started': 'Recherche lancée',
						'Researching': 'Recherche',
						'Reset Stats': 'Réinitialiser Stats',
						'Resources stock levels update failed': 'Mise à jour des niveaux de stock des ressources a échoué',
						'Resources to transport': 'Ressources à envoyer',
						'Restore': 'Restaurer',
						'Restore script settings from local file': 'Restaurer le paramétrage du script à partir d\'un fichier texte local',
						'Resurrection': 'Résurrection',
						'Resurrect': 'Résurrection',
						'Retrieve all': 'Tout récupérer',
						'Retrieving leaderboards': 'Récupération du Leaderboard',
						'Retrieving messages': 'Récupération des messages',
						'Retry in': 'Nouvel essai dans',
						'Reviving': 'Résurrection',
						'Revival allowed': 'Résurrection autorisée',
						'Role': 'Rôle',
						'Rules': 'Règles',
						'Run Time': 'Temps d\'exécution',
						'Safe Mode': 'Mode Sans échec',
						'Sanctuary reports': 'Rapports du sanctuaire',
						'Save current map data in a local file': 'Sauvegarder les données actuelles de la carte dans un fichier local',
						'Save current script settings in a local file': 'Sauvegarder le paramétrage du script dans un fichier local',
						'Save preset': 'Sauvegarder réglage',
						'Scales': 'Ecailles',
						'Scan cities': 'Recherche cités',
						'Scan wilds': 'Recherche ES',
						'Scanning map': 'Balayage de la carte pour cités uniquement',
						'Scanning map for cities/wildernesses': 'Balayage de la carte pour cités/ES',
						'Scanning map for cities': 'Balayage de la carte pour cités',
						'Scanning map for wildernesses': 'Balayage de la carte pour ES uniquement',
						'Script language': 'Langage du script',
						'Script Options': 'Options du script',
						'Search coords': 'Coords recherche',
						'Search for alliance activity': 'Récupération de l\'activité de l\'alliance',
						'Search for alliance list': 'Recherche de la liste des alliances',
						'Search for alliance members': 'Recherche des membres de l\'alliance',
                        'Search for old name': 'Rechercher un ancien nom',
						'Search max radius': 'Rayon rech. max',
						'Search Radius': 'Rayon de balayage',
						'Second value must be at least': 'La seconde valeur doit être au moins à ',
						'Seconds': 'Secondes',
						'seconds': 'secondes',
						'Secondary attack to ': 'Vague secondaire envoyée à ',
						'Seed Successfully initialized': 'Données joueur initialisée avec succès',
						'Select all': 'Tout sélectionner',
						'Select at least one type of message or report to delete': 'Sélectionnez au moins un type de message ou de rapport à supprimer',
						'Send a message to alliance members in case of attack': 'Envoi d\'un message à toute l\'alliance en cas d\'attaque',
						'Send even without Dragon': 'Envoyer même sans Dragon',
						'Send Max in reinf': 'Max renforts',
						'Send reinforcement': 'Envoyer les renforts',
						'Send transport': 'Envoyer le transport',
						'Sending reinforcement': 'Envoi de renforts',
						'Sending transport': 'Envoi de transport',
						'Sentinel messages': 'Alertes sentinelle',
						'Sentinel tower': 'Sentinelle / Tour de guet',
						'Set Def': 'Màj déf',
						'Single': 'Unique',
						'Single attack sent to': 'Attaque unique envoyée sur',
						'Single attack': 'Attaque unique',
						'Souls': 'Âmes',
						'Sound configuration': 'Configuration du son',
						'Sound file': 'Fichier son',
						'Sound OFF': 'Couper son',
						'Spanish': 'Espagnol',
						'Spectral': 'Spectral',
						'SpectralDragonKeep': 'Autel du Dragon',
						'Spies done': 'Espionnages effectués',
						'Spies number': 'Nombre d\'espions',
						'Spy One Target': 'Espionner une cible en rafale',
						'Spy reports': 'Rapports d\'espionnage',
						'Spy to ': 'Espion(s) envoyé à ',
						'Stars': 'Etoiles',
						'Start': 'Début',
						'Start Date': 'Date de début',
						'Starting...': 'Démarrage...',
						'Step': 'Etape',
						'Stone': 'Pierre',
						'Stop if any troops lost': 'Désactiver en cas de pertes',
						'Stop the wheel when found the following items': 'Arrêter le rafraîchissement lorsque les articles suivants ont été trouvés',
						'succeeded': 'a réussi',
						'Successfully initialized': 'initialisé avec succès',
						'Successfully': 'Avec succès',
						'Summary': 'Général',
						' survivals)': ' survivants)',
						'Swamp': 'Marais',
						'Swedish': 'Suédois',
						'switchDefense OK': 'Switch défense OK',
						'Switch defense wall status': 'Changement du statut du rempart',
						'Switching defense': 'Changement de la défense',
						'Tabs Options': 'Options des onglets',
						'Target': 'Cible',
						'Targets': 'Cibles',
						'Task Completed': 'Tâche éffectuée',
						'Tasks': 'Tâches',
						'Tax Rate': 'Taux d\'imposition',
						'Terrain length set to ': 'Longueur du terrain initialisée à ',
						'Test': 'Test',
						'Notification permission test': 'Test de la permission des notifications',
						'This should not clear map and alliance data.': 'Ceci n\'effacera pas les données carte et alliance.',
						'Time': 'Durée',
						'to': 'a',
						'To be refreshed': 'A rafraîchir',
						'Toggle Flash': 'Switcher flash',
						'Total grids played': 'Total de grilles jouées',
						'Total grids displayed': 'Total de grilles affichées',
						'Total lost': 'Total perdu',
						'to win': 'de gagner',
						'Tower': 'Guet',
						'Tower configuration': 'Configuration sentinelle',
						'Training Configuration': 'Configuration de la formation',
						'Training job cancelled': 'Tâche d\'entrainement annulée',
						'Translation Matrix Successfully initialized': 'Matrice de traduction initialisée avec succès',
						'Transport reports': 'Rapports de transport',
						'Transport sent to': 'Transport envoyé à',
						'Troops Capped': 'Troupes plafonnées',
						'Troops for Bookmarks Attack': 'Troupes pour attaque du signet',
						'Troops for defense': 'Défenseurs',
						'Troops for Primary Attack': 'Troupes pour Attaque principale',
						'Troops for reinforcement': 'Troupes pour le renforcement',
						'Troops for Secondary Attacks': 'Troupes pour Attaques secondaires',
						'Troops for transport': 'Troupes pour le transport',
						'Troops for Wave Attack': 'Troupes pour Attaque en Vague',
						'Troops lost': 'Troupes perdues',
						'Troops max': 'Max. troupes',
						'Troops statistics': 'Statistiques des troupes',
						'Troops statistics for': 'Statistiques pour',
						'Turned Off': 'Désactivé',
						'Units': 'Unités',
						'Unlimited': 'Illimité',
						'Unselect all': 'Tout déselectionner',
						'Unowned only': 'Libres seulement',
						'Update': 'M.A.J.',
						'Updating City values': 'Mise à jour des données de la ville',
						'Use the Levels Tab to select attack areas': 'Utilisez l\'onglet "Niveaux" pour sélectionner les cibles',
						'Version update': 'Mise à jour',
						'Wall management': 'Gestion rempart',
						'Warning': 'Alerte',
						'was returned with a status of': 'a retourné le statut',
						'Water': 'Eau',
						'Wave attack to ': 'Attaque en vagues sur ',
						'Wave': 'Vague',
						'Wiki URL': 'Lien Wiki',
						'Wildernesses list': 'Liste des étendues sauvages',
						'Wind': 'Vent',
						'Without alliance': 'Sans alliance',
						'You are': 'Vous êtes',
						'Yoyo': 'Yoyo',
						'Yoyo functionality': 'Fonctionalité Yoyo',

						'ATrans': 'Ballons', /* abbr Armored Transport */
						'Banshee': 'Banshee', /* abbr Wind Troop - Banshee */
						'BatDrg': 'DG', /* abbr Battle Dragon */
						'Conscr': 'Conscr', /* abbr Conscript */
						'DesDrg': 'DrgHelio', /* abbr Sand Dragon */
						'Fang': 'GueAqua', /* abbr Aqua Troop */
						'FGiant': 'GéantGla', /* abbr Frost giant */
						'FireDrg': 'DrgFeu', /* abbr Fire Dragon */
						'FireM': 'Miroir', /* abbr Fire Mirror */
						'ForDrg': 'DrgGaïa', /* abbr Forest Dragon */
						'GrtDrg': 'GrdDrag', /* abbr Great Dragon */
						'Halbrd': 'Halbrd', /* abbr Halberdsman */
						'IceDrg': 'DrgGlace', /* abbr Ice Dragon */
						'Kaiser': 'Kaiser', /* abbr Kaiser */
						'CavDrg': 'DrgMet', /* abbr Dragon métal */
						'LBM': 'Archer', /* abbr Longbowman */
						'Leviathan': 'Levia', /* abbr Artic Leviathan */
						'Harr.': 'Chasseur', /* abbr Harrier */
						'LCannon': 'CanonF', /* abbr Lightning Cannon */
						'Ranger': 'Electro', /* abbr Volt Ranger */
						'ShadStalk': 'Rôdeur', /* abbr Shadow Stalker */
						'Magma': 'Magma', /* abbr Fire Troop - Magmasaurus */
						'Mino': 'Mino', /* abbr Minotaur */
						'Ogre': 'Ogre', /* abbr Stone Troop - Ogre */
						'PackDrg': 'DrgTrans', /* abbr Pack dragons */
						'Ruiner': 'Rava', /* abbr Dimensional Ruiner */
						'Slayer': 'Slayer', /* abbr Dark Slayer */
						'SpctDrg': 'DrgSpct', /* abbr Spectral Dragon */
						'SReaper': 'Fauch', /* abbr Ice Troop - SoulReaper */
						'SSDrg': 'Rapide', /* abbr Swift Strike Dragon */
						'Storm': 'Storm', /* abbr Storm Drakes */
						'StnDrg': 'DrgPier', /* abbr Stone Dragon */
						'Strider': 'Marcheur', /* abbr Sand Troop - Sand striders */
						'SwpDrg': 'SerpMeph', /* abbr Swamp Dragon */
						'Titan': 'Titan', /* abbr Forest Troop - Petrified Titans */
						'Venom': 'Venom', /* abbr Sumpfkröte */
						'WatDrg': 'DrgAqua', /* abbr Water Dragon */
						'WndDrg': 'DrgEol', /* abbr Wind Dragon */
						'Wyrm': 'Wyrm',
						'Defen': 'Golem',
						'Scarab': 'Scarabé',
						'DrgRid' : 'Drag',
						/* Missing or wrong Kabam translations */
						'FireDragon': 'Dragon du Feu',
						'WindDragon': 'Dragon Eolien',
						'ajax-req-versions': 'Récupération des versions API supportées',
						'ajax-req-locales': 'Chargement matrice de traductions',
						'ajax-req-manifest': 'Chargement du manifeste',
						'ajax-req-cookie': 'Envoi d\'un cookie pour paramétrage du son',
						'ajax-req-player': 'Données du joueur',
						'ajax-req-cities': 'Données d\'une cité',
						'ajax-req-jobs': 'Récupération des tâches en cours',
						'ajax-req-dragons': 'Récupération des dragons du sanctuaire',
						'ajax-req-alliances': 'Récupération Top 100 alliances',
						'ajax-req-membership': 'Récupération membres de l\'alliance',
						'ajax-req-activity': 'Récupération activité de l\'alliance',
						'ajax-req-map': 'Données carte',
						'ajax-req-tile_at': 'Données carte par coordonnée',
						'ajax-req-building': 'Lancement d\'une construction',
						'ajax-req-research': 'Lancement d\'une recherche',
						'ajax-req-training': 'Lancement d\'une formation',
						'ajax-req-resurrect': 'Lancement d\'une résurrection',
						'ajax-req-canceljob': 'Annulation d\'une tâche',
						'ajax-req-marches': 'Lancement d\'une marche',
						'ajax-req-cancelmarch': 'Annulation/rappel d\'une marche',
						'ajax-req-reports': 'Liste des messages',
						'ajax-req-reports_del': 'Suppression d\'un message',
						'ajax-req-reports_read': 'Lecture d\'un message',
						'ajax-req-message': 'Envoi d\'un message',
						'ajax-req-minigame': 'Récupération liste des lots Fortuna',
						'ajax-req-save_minigame': 'Sélection aléatoire du lot Fortuna',
						'ajax-req-leaderboards': 'Récupération leaderbord',
						'ajax-req-collect': 'Collecte des ressources d\'un outpost',
						'ajax-req-claim': 'Réclamation d\'une mission',
						'ajax-req-defended': 'Passage en défense / caché',
						'ajax-req-defense': 'Mise à jour choix des défenseurs',
						'ajax-req-items': 'Utilisation d\'un objet (accélérateur)',
						'ajax-req-breeding': 'Accouplement des dragons',
						'ajax-req-feeding': 'Amélioration des dragons',
						'ajax-req-dragonHandle': 'Rejeter/Retirer/Equiper un dragon du sanctuaire',
						'ajax-req-customization': 'Équiper un dragon d\'armure et d\'écailles',
						'Zzz': 'Zzz'
					};
					break;
					// Dutch (by Kaas)
				case 'nl':
					TRANSLATION_ARRAY = {
						'</B> and <B>': '</B> en <B>',
						'<B>Attacker\'s move turn</B>': '<B>Beurt van de aanvaller</B>',
						'<B>Attacker\'s attack turn</B>': '<B>Aanvalsbeurt van de aanvaller</B>',
						'<b>Bad request!</b>': '<b>Ongeldige aanvraag</b>',
						'<B>Defender\'s move turn</B>': '<B>Beurt van de verdediger</B>',
						'<B>Defender\'s attack turn</B>': '<B>Aanvalsbeurt van de verdediger</B>',
						'<b>Rate Limit Exceeded</b>, too many requests!': '<b>Limiet Serveraanvragen overschreden</b>',
						'About CalciumScript': 'Over CalciumScript',
						'above the first value': 'boven de eerste waarde',
						'Action Log': 'Actie Log',
						'Actions': 'Acties',
						'Activate Attacks Logs': 'Aanvalslog activeren',
						'Alerts log': 'Alarmlog',
						'All players': 'Alle spelers',
						'All types': 'Alle types',
						'Alliance features': 'Kenmerken van allianties ',
						'Alliances list retrieved': 'Lijst allianties geladen',
						'Alliance members list retrieved': 'Ledenlijst alliantie geladen',
						'Alliance messages': 'Alliantieberichten',
						'and': 'en',
						'Another march request is pending': 'Een ander marsaanvraag is al onderweg',
						'Are you sure you want to delete All Permanent Data': 'Ben je zeker dat je permanente gegevens wil verwijderen',
						'Arrival time': 'Aankomsttijd',
						'at': 'bij',
						' at ': ' bij ',
						' at range': ' in bereik',
						'Attack sent to': 'Aanval verzonden naar',
						'Attack One Target in Multiple waves': 'Aanval van één doel via meerdere Waves',
						'Attacker': 'Aanvaller',
						'Attacking': 'Bezig met aanval',
						'Attacks Configuration': 'Aanvalconfiguratie',
						'Attacks Stats': 'Aanvalstatistieken',
						'Attacks': 'Aanvallen',
						'attempted': 'geprobeerd',
						'attempt for': 'Geprobeerd voor',
						'Auto harvest resources from outposts every': 'Automatisch oogsten van buitenposten elke',
						'Auto refresh info tab data every': 'Autoverversen van Infotab elke',
						'Automatically': 'Automatisch',
						'Automatically recall transport 1 minute before delivery': 'Automatisch terugroepen van transport 1 min voor levering',
						'Available troops': 'Beschikbare troepen',
						'Awaiting task completion notification': 'In afwachtig van klaarmelding',
						'Back at the same time': 'Terug op hetzelfde moment',
						'Backup': 'Backup',
						'Battle': 'Gevecht',
						'Battle calculator': 'Gevechtscalculator',
						'Battle forces': 'Strijdkrachten',
						'Battle log': 'Gevechtslogboek',
						'Battle lost !!': 'Strijd verloren !!',
						'Battle mechanics': 'Strijdleer',
						'Battle won !!': 'Strijd gewonnen !!',
						'Bookmark': 'Bookmark',
						'Bookmarks': 'Bookmarks',
						'Bookmarks Configuration': 'Bookmarks configuratie',
						'Bookmark saved': 'Bookmarks weggeschreven',
						'Building': 'Bezig met bouwen',
						'Busy': 'Bezig',
						'by': 'door',
						'By distance ascending': 'Op afstand oplopend',
						'By distance descending': 'Op afstand aflopend',
						'Cache data': 'Cache gegevens',
						'Calculate': 'Berekenen',
						'Camps/wilds attack reports': 'Athropus strijdbericht',
						'Capital data': 'Kerngegevens',
						'Capital data successfully fetched': 'Kerngegevens geladen',
						'Check sentinel reports every ': 'Controleren van helderziendebericht elke',
						'Check the following great dragons to exclude them from being sent': 'Klik volgende draken zodat ze niet gebruikt worden',
						'Check to use UTC time instead of local time': 'Klik om UTC tijd te gebruiken ipv. locale tijd',
						'Claim': 'Vorderen',
						'Claimed': 'Gevorderd',
						'Claiming quest': 'Quest gevorderd',
						'Clear all': 'Alle verwijderen',
						'Clear all data': 'Alle info verwijderen',
						'Clear last attack on all maps': 'Laatste aanval op alle kaarten verwijderen',
						'Clear last attack on current map': 'Laatste aanval op actuele kaart verwijderen',
						'Clear local storage (internet cache)': 'Opschonen internet cache',
						'Clear log': 'Log verwijderen',
						'Clear Stats': 'Statistieken verwijderen',
						'Collected resources at outpost': 'Verzamelde rijkdommen bij buitenpost',
						'Completing...': 'Bezig met ...',
						'Completion errors': 'Voltooiingsfouten',
						'Config': 'Instelling',
						'Confirmation': 'Bevestiging',
						'Console Log': 'Console Log',
						'Console': 'Console',
						'Coordinates': 'Coordinaten',
						'Coords': 'Coords',
						/*
						 * 'Copy troops reported by the sentinel to the battle
						 * calculator' : '?????',
						 */
						' damages taken': ' Schade',
						' damages to ': ' Schade aan ',
						'data': 'gegevens',
						'data successfully fetched': 'Het laden van gegevens is geslaagd ',
						'Date range': 'Gegevensbereik',
						' deal ': ' overeenkomst ',
						'Defender': 'Verdediger',
						'Defending': 'Verdedigen',
						'Delay before script startup': 'Vertraging voordat script wordt opgestart',
						'Delay Between Attacks': 'Vertraging tussen aanvalgolven',
						'Delay Between Transports': 'Vertraging tussen transporten',
						'delayed due to': 'vertraging veroorzaakt door,',
						'delayed due to no available generals': 'vertraging omdat generaals niet beschikbaar zijn',
						'delayed due to no available Great Dragon': 'vertraging omdat Grote Draak niet beschikbaar is',
						'delayed due to pending march request': 'vertraging omdat er al een mars is begonnen',
						'Delete now': 'Nu verwijderen',
						'Delete Battle Reports': 'Strijdrapporten verwijderen',
						'Delete messages': 'Berichten verwijderen',
						'Delete messages of this type': 'Berichten van dit type verwijderen',
						'Delete spy reports': 'Spionberichten verwijderen',
						'Detailed search': 'Uitgebreid zoeken',
						'Disable <B>Alliance</B> tab': 'Uitschakelen <B>Alliantie</B> tab',
						'Disable <B>Battle</B> tab': 'Uitschakelen <B>Strijd</B> tab',
						'Disable <B>Bookmarks</B> tab': 'Uitschakelen <B>Bookmarks</B> tab',
						'Disable <B>Multi</B> tab': 'Uitschakelen <B>Multi</B> tab',
						'Disable <B>Search</B> tab': 'Uitschakelen <B>Zoek</B> tab',
						'Disable <B>Spy</B> tab': 'Uitschakelen <B>Spion</B> tab',
						'Disable <B>Wall</B> tab': 'Uitschakelen <B>Muur</B> tab',
						'Disable <B>Wave</B> tab': 'Uitschakelen <B>Wave</B> tab',
						'Disable <B>Log</B> tab': 'Uitschakelen <B>Log</B> tab',
						'Disabled': 'Uitgeschakeld',
						'Display official background image': 'Tonen van officiele achtergrond afbeelding',
						'Dist': 'Afst',
						'Distance must be between': 'Afstand moet zijn tussen',
						'Distance': 'Afstand',
						'Dragon healing': 'Draak genezing',
						'Dragons': 'Draken',
						'Do not show alerts obsolete since': 'Laat geen waarschuwing zien sinds',
						/*
						 * 'Do you want to delete existing Permanent Data' :
						 * '?????',
						 */
						'Do you want to save in Permanent Data the current script setting': 'Wil je permanente gegevens in actuele script wegschrijven',
						'Do you want to save Map Data in local file': 'Wil je kaartgegevens in lokaal bestand wegschrijven',
						'Do you want to save Permanent Data in local file': 'Wil je permanente gegevens in lokaal bestand wegschrijven',
						'Dutch': 'Nederlands',
						'Edit': 'Wijzigen',
						'Edit bookmark': 'Bookmark wijzigen',
						'Enable': 'Aanzetten',
						/*
						 * 'Enable cheat (all troops in all outposts, transport
						 * of blue energy)' : 'Cheat aanzetten (alle troepen in
						 * alle buitenposten, transport van blauwe energie)',
						 */
						'Enable transport of ': 'Aanzetten van transport van ',
						'Enable use of speed-ups in attacks waves': 'Aanzetten van het gebruik van speed-ups in aanvalWaves',
						'Enable verbose logging': 'Aanzetten van log',
						'Enable window drag': 'Aanzetten van slepen van venster',
						'Enable the sentinel tower': 'Aanzetten van Helderziendetoren',
						'Enabled': 'Aangezet',
						'English': 'Engels',
						'Enemy General': 'Vijandige generaal',
						'Enemy research levels': 'Vijandig onderzoekniveaus',
						'Enter -1 as troop quantity to use the maximum available': 'Vul -1 in als hoeveelheid troepen zodat max. aantal wordt gebruikt',
						'Error': 'Fout',
						'Error while retrieving the list of members': 'Fout bij het ophalen van ledenlijst',
						'Error while setting defense choice': 'Fout bij het selecteren van verdediging',
						'Evol': 'Evol',
						'Except': 'Uitgezonderd',
						'Exception': 'Uitzondering',
						'failed': 'mislukt',
						'failed and returned error': 'mislukt met foutmelding',
						'Fast search': 'Snel zoeken',
						'Features': 'Functies',
						'Fetching': 'Bezig met laden',
						'Fetching Capital data': 'Bezig met ophalen van kerngegevens',
						'Fetching Manifest': 'Bezig met ophalen van Manisfest',
						'Fetching Outpost ': 'Bezig met ophalen van Buitenpost ',
						'Fetching Seed': 'Bezig met ophalen van overige gegevens',
						'Fetching Translation matrix': 'Bezig met ophalen van vertaalmatrix',
						'Fire': 'Vuur',
						'First value must be between': 'Eerste waarde moet liggen tussen',
						'Flash game Auto refresh every': 'Verversen FlashGame elke',
						/* 'Foes' : '?????', */
						'for': 'voor',
						'Force saving current script settings': 'Forceren van wegschrijven van scriptinstellingen',
						'Forum link': 'Forum link',
						'French': 'Frans',
						'Game messages': 'Spelberichten',
						'Game Options': 'Spelopties',
						'GD': 'GD',
						'Generals': 'Generaals',
						'German': 'Duits',
						'Getting basic data...': 'Bezig met ophalen van basisgegevens',
						'Getting cities data...': 'Bezig met ophalen van stadgegevens',
						'Getting game data...': 'Bezig met ophalen van spelgegevens',
						'Got': 'Ontvangen',
						'Great Dragons': 'Grote Draken',
						'About': 'Over',
						'Hide spy alerts': 'Verbergen spionwaarschuwingen',
						'Hiding': 'Verbergen',
						'History': 'Geschiedenis',
						'h': 'u',
						'Ice': 'IJs',
						'Idle': 'Niet aktief',
						'In city': 'In stad',
						'In march': 'Onderweg',
						' in melee': ' bezig met strijd',
						'in progress': 'bezig',
						'Include Great Dragon': 'Grote Draak toevoegen',
						'Initialization': 'Initialisatie',
						'Initializing...': 'Bezig met Initialisatie',
						'Initializing map, auto-collect, ...': 'Initialisatie kaart, Auto-inzamelen , ...',
						'Invalid date From': 'Verkeerde datum van',
						'Invalid date To': 'Verkeerde datum tot',
						'Invalid date range': 'Verkeerde datumreeks',
						'Invalid delays': 'Verkeerde vertraging',
						'Invalid number of troops': 'Verkeerde aantal troepen',
						'Joined': 'Toegevoegd',
						'Keep battle reports of attacks from other players': 'Behoud strijdrapporten van aanvallen van andere spelers',
						'Keep battle reports of my attacks on other players': 'Behoud strijdrapporten van mijn aanvallen met andere spelers',
						' (kill ': ' (dood ',
						'Last attack': 'Laatste aanval',
						'life lost': 'Verloren levens',
						'Loaded': 'Geladen',
						'Loading basic data': 'Laden van algemene gegevens',
						'Locale data was Successfully requested from the server': 'Lokale Data zijn succesvol geladen',
						'Logs': 'Logbestanden',
						'Log': 'Log',
						'Manifest not available, using defaults': 'Manifest niet beschikbaar, gebruikt standaardgegevens',
						'Manifest Successfully initialized': 'Manifest succesvol geinitialiseerd',
						'Manifest was Successfully requested from the server': 'Manifest is succesvol van server opgevraagd',
						'Manual attack sent to': 'Handmatige aanval gestuurd naar',
						'Max level': 'Max niveau',
						'Map Search': 'Zoeken van kaarten',
						'Maximize resource to transport according to max load': 'Maximale middelen voor transporten ivm maximale last',
						'Maximum level reached': 'Maximale niveau bereikt',
						'Maximum simultaneous marches': 'Maximaal aantal gelijktijde marsen',
						'Maximum training queues possible per city, according to available resources': 'Maximaal aantal trainings per stad vergelekeb met beschikbare middelen',
						'Members list ': 'Ledenlijst ',
						'Message(s) deleted': 'Bericht(en) verwijderd',
						'Message(s) deletion in progress': 'Bericht(en)verwijdering aan de gang',
						'miles': 'Mijlen',
						'Min level': 'Min niveau',
						' move to ': ' gaan naar ',
						'Multi': 'Multi',
						'Need': 'Nodig',
						/* 'New version has been installed...' : '?????...', */
						'No Generals Available': 'Geen generaals beschikbaar',
						'No great dragon available': 'Geen Grote Draak beschikbaar',
						'no max': 'Geen maximum',
						'No new version of': 'Geen nieuwe versie van',
						'No resources to transport defined': 'Geen middelen voor transport gedefinieerd',
						'No Troops Defined': 'Geen troepen gedefinieerd',
						'Not ready': 'Niet klaar',
						'of': 'van',
						'Only one training queue per city': 'Slechts één training per stad',
						'Options': 'Opties',
						'Opts': 'Opts',
						'Outpost 1': 'Water buitenpost',
						'Outpost 2': 'Steen Buitenpost',
						'Outpost 3': 'Vuur Buitenpost',
						'Outpost 4': 'Wind Buitenpost',
						'Overview': 'Overzicht',
						'Owner': 'Eigenaar',
						'Play for': 'Spelen voor',
						'Play sound on incoming sentinel report': 'Speel geluid bij in komend Helderziende rapport',
						'Play sound on task completion': 'Speel geluid bij voltooiing van taal',
						'Player cities': 'Steden van speler',
						'Player cities list': 'Stedenlijst van speler',
						'Player data was Successfully requested from the server': 'Spelergegevens succesvol van server aangevraagd',
						'Player messages': 'Berichten van speler',
						'Player name': 'Spelernaam',
						'Please wait...': 'Even geduld...',
						'Preset': 'Standaard instelling',
						'Preset name': 'Standaard naam',
						'Primary attack to ': 'Eerste aanval naar ',
						'Quest': 'Opdracht',
						'Rate Limit Exceeded because there were too many requests': 'Teveel aanvragen voor taken',
						'Read page ': 'Laden van pagina ',
						'Ready': 'Klaar',
						'Recipient': 'Ontvanger',
						'Refresh': 'Verversen',
						'Refresh list': 'Te verversenlijst',
						'Refresh map data': 'Verversen kaart',
						'Refresh selection': 'Keuze verversen',
						'Reinforcement reports': 'Versterkingsrapporten',
						'Reinforcement sent to': 'Versterking zenden naar',
						'Reload': 'Opnieuw laden',
						'Repairing': 'Aan het repareren',
						'Repeat every': 'Herhaal elke',
						'Research Started': 'Onderzoek gestart',
						'Researching': 'Aan het onderzoeken',
						'Reset Stats': 'Reset statistieken',
						'Resources stock levels update failed': 'Verversen van voorraadgegevens mislukt',
						'Resources to transport': 'Middelen voor transport',
						'Restore': 'Terugzetten',
						'Restore script settings from local file': 'Terugzetten van scriptsettings uit bestand',
						'Resurrection': 'Herrijzenis',
						'Resurrect': 'Herrijzen',
						'Retry in': 'Opnieuw proberen in',
						'Reviving': 'Herleving',
						'Role': 'Rol',
						'Rules': 'Regels',
						'Run Time': 'Looptijd',
						'Safe Mode': 'Beveligingswijze',
						'Save current map data in a local file': 'Wegschrijven van aktuele kaartgegevens in lokaal bestand',
						'Save current script settings in a local file': 'Wegschrijven van aktuele scriptgegevens in lokaal bestand',
						'Save preset': 'Wegschrijven standaardgegevens',
						'Scanning map': 'Scannen van kaart op steden',
						'Scanning map for cities/wildernesses': 'Scannen van kaart op steden/wildernissen',
						'Scanning map for wildernesses': 'Scannen van kaart op wildernissen',
						'Script language': 'Scripttaal',
						'Script Options': 'Script Opties',
						'Search coords': 'Zoeken van coördinaten',
						'Search for alliance list': 'Zoeken naar allianties',
						'Search for alliance members': 'Zoeken naar leden van allianties',
						'Search max radius': 'Zoeken naar maximale straal',
						'Search Radius': 'Zoeken naar straal',
						'Second value must be at least': 'Twee waard moet minstens zijn',
						'Seconds': 'Seconden',
						'seconds': 'seconden',
						'Secondary attack to ': 'Tweede aanval naar ',
						'Seed Successfully initialized': 'Seed succesvol geinitialiseerd',
						'Select at least one type of message or report to delete': 'Selecteren tenminste één bericht om te verwijderen',
						'Send reinforcement': 'Versterking sturen',
						'Send transport': 'Transport sturen',
						'Sending reinforcement': 'Bezig met verzenden van versterking',
						'Sending transport': 'Bezig met verzending van transport',
						'Sentinel messages': 'Helderziende berichten',
						'Sentinel tower': 'Helderziendetoren',
						'Set Def': 'Zet verd',
						'Souls': 'Zielen',
						'Sound configuration': 'Geluidsinstelling',
						'Sound file': 'Geluidsbestand',
						'Spanish': 'Spaans',
						'Spectral': 'Spectral',
						'SpectralDragonKeep': 'Sprookruïnedraak',
						'Spies done': 'Aantal bespionneringen',
						'Spies number': 'Aantal spionnen',
						'Spy One Target': 'Eén doel bespionneren',
						'Spy reports': 'Spionberichten',
						'Spy to ': 'Spion naar ',
						'Stars': 'Sterren',
						'Start': 'Begin',
						'Start Date': 'Startdatum',
						'Starting...': 'Beginnen...',
						'Step': 'Stap',
						'Stone': 'Steen',
						'Stop if any troops lost': 'Stoppen in geval van troepverlies',
						'succeeded': 'geslaagd',
						'Successfully initialized': 'Inlezen geslaagd',
						'Successfully': 'Geslaagd',
						'Summary': 'Samenvatting',
						' survivals)': ' overlevenden)',
						/* 'Swamp' : '?????', */
						'Swedish': 'Zweeds',
						'switchDefense OK': 'Omschakelen verdediging OK',
						'Switch defense wall status': 'Omschakelen muurverdediging status',
						'Switching defense': 'Bezig met omschakelen verdediging',
						'Tabs Options': 'Tab Opties',
						'Target': 'Opdrachten',
						'Targets': 'Opdrachten',
						'Task Completed': 'Taak gereed',
						'Tasks': 'Taken',
						'Terrain length set to ': 'Gebiedsgrootte gezet tot ',
						/*
						 * 'This should not clear map and alliance data.' :
						 * '?????.',
						 */
						'Time': 'Tijd',
						'to': 'naar',
						'To be refreshed': 'Verversen aanzetten',
						'Toggle Flash': 'Flash aan-uitzetten',
						'Tower': 'Toren',
						'Tower configuration': 'Torenconfiguratie',
						'Training Configuration': 'Trainingconfiguratie',
						'Translation Matrix Successfully initialized': 'Vertalingsmatrix met succes ingelezen',
						'Transport reports': 'Transportbericht',
						'Transport sent to': 'Transport verzonden naar',
						'Troops Capped': 'Troepenstop',
						'Troops for Bookmarks Attack': 'Troepen voor Bookmark aanval',
						'Troops for defense': 'Verdedigingstroepen',
						'Troops for Primary Attack': 'Troepen voor eerste aanval',
						'Troops for reinforcement': 'Troepen voor versterking',
						'Troops for Secondary Attacks': 'Troepen voor tweede aanval',
						'Troops for transport': 'Troepen voor transport',
						'Troops for Wave Attack': 'Troepen voor Waveaanval',
						'Troops lost': 'Verloren troepen',
						'Troops max': 'Max. troepen',
						'Troops statistics': 'Statistieken van troepen',
						'Troops statistics for': 'Statistieken van troepen voor',
						'Turned Off': 'Uit',
						'Unlimited': 'Onbeperkt',
						'Unowned only': 'Alleen niet in bezit',
						'Updating City values': 'Stadinstellingen verversen',
						'Use the Levels Tab to select attack areas': 'Gebruik de Level tab om aanvalsgebieden te kiezen',
						'Version update': 'Versie update',
						'Wall management': 'Muurbeheer',
						'Warning': 'Waarschuwing',
						'was returned with a status of': 'teruggekomen met status',
						'Water': 'Water',
						'Wave attack to ': 'Waveaanvaal naar',
						'Wave': 'Wave',
						'Wiki URL': 'Url van Wiki',
						'Wildernesses list': 'Wildernissenlijst',
						'Wind': 'Wind',
						'Without alliance': 'Zonder alliantie',
						'You are': 'Je bent',
						'Yoyo': 'Yoyo',
						'Yoyo functionality': 'Yoyo functie',
						'ATrans': 'GepTrn',
						/* abbr Armored Transport */ 'Banshee': 'Banshee',
						/* abbr Wind Troop - Banshee */ 'BatDrg': 'StrDrk',
						/* abbr Battle Dragon */ 'Conscr': 'Rekr',
						/* abbr Conscript */ 'Fang': 'SnijVis',
						/* abbr Aqua Troop */
						/* 'FGiant' : '?????', */
						/* abbr Frost giant */
						'FireDrg': 'VuuDrk',
						/* abbr Fire Dragon */ 'FireM': 'VuuSpi',
						/* abbr Fire Mirror */ 'GrtDrg': 'GD',
						/* abbr Great Dragon */ 'Halbrd': 'HBD',
						/* abbr Halberdsman */ 'IceDrg': 'IJSD',
						/* abbr Ice Dragon */ 'LBM': 'BooS',
						/* abbr Longbowman */ 'LCannon': 'LCannon',
						/* abbr Lightning Cannon */ 'Magma': 'Pyro',
						/* abbr Fire Troop - Magmasaurus */ 'Mino': 'Mino',
						/* abbr Minotaur */ 'Ogre': 'Graniet',
						/* abbr Stone Troop - Ogre */ 'PackDrg': 'TrnDrK',
						/* abbr Pack dragons */ 'SpctDrg': 'SpDrK',
						/* abbr Spectral Dragon */ 'SReaper': 'ZRov',
						/* abbr Ice Troop - SoulReaper */ 'SSDrg': 'SneDrK',
						/* abbr Swift Strike Dragon */ 'StnDrg': 'SteDrK',
						/* abbr Stone Dragon */ 'SwpDrg': 'ZwSlg',
						/* abbr Swamp Dragon */ 'Venom': 'Gif',
						/* abbr Swamp Troop - Venom */ 'WatDrg': 'WatDrK',
						/* abbr Water Dragon */ 'WndDrg': 'WindDrK',
						/* abbr Wind Dragon */ 'CavDrg': 'CavDrg',
						/* abbr Cave Dragon */ 'LunDrg': 'LunDrg',
						/* abbr Luna Dragon */
						/* Missing or wrong Kabam translations */
						'FireDragon': 'Vuurdraak',
						'WindDragon': 'Winddraak',
						'ajax-req-versions': 'Getting current API version',
						'ajax-req-locales': 'Loading translation matrix',
						'ajax-req-cookie': 'Set a cookie for sound setup',
						'ajax-req-manifest': 'Loading manifest',
						'ajax-req-player': 'Player data',
						'ajax-req-cities': 'City data',
						'ajax-req-jobs': 'Getting all jobs list',
						'ajax-req-dragons': 'Getting dragons data',
						'ajax-req-alliances': 'Retrieving Alliances Top 100',
						'ajax-req-membership': 'Retrieving Alliance membership',
						'ajax-req-activity': 'Retrieving Alliance activity',
						'ajax-req-map': 'Map data',
						'ajax-req-tile_at': 'Map data for one tile',
						'ajax-req-building': 'Lauching one building',
						'ajax-req-research': 'Lauching one research',
						'ajax-req-training': 'Lauching one training',
						'ajax-req-resurrect': 'Lauching one resurrection',
						'ajax-req-canceljob': 'Cancelling one job',
						'ajax-req-marches': 'Lauching one march',
						'ajax-req-cancelmarch': 'Cancelling/recalling one march',
						'ajax-req-reports': 'Message list',
						'ajax-req-reports_del': 'Deleting one message',
						'ajax-req-reports_read': 'Reading one message',
						'ajax-req-message': 'Sending one message',
						'ajax-req-minigame': 'Getting fortuna prizes list',
						'ajax-req-save_minigame': 'Playing one fortuna\'s grid',
						'ajax-req-leaderboards': 'Getting leaderbords data',
						'ajax-req-collect': 'Collecting resources from one outpost',
						'ajax-req-claim': 'Claiming one quest',
						'ajax-req-defended': 'Setting in defense / in sanctuary',
						'ajax-req-defense': 'Choice of Defense forces',
						'ajax-req-items': 'Using one item (speedups)',
						'ajax-req-breeding': 'Dragons breeding',
						'ajax-req-feeding': 'Dragons feeding',
						'ajax-req-dragonHandle': 'Dismiss/Remove/Equip one dragon',
						'Zzz': 'Zzz'
					};
					break;
					// Swedish (by Lindström & Toruk & Robert & Evil Eye)
				case 'sv':
					TRANSLATION_ARRAY = {
						'</B> and <B>': '</B> och <B>',
						'<B>Attacker\'s move turn</B>': '<B>Försvara med offensiva enheter</B>',
						'<B>Attacker\'s attack turn</B>': '<B>Attackera med offensiva enheter</B>',
						'<b>Bad request!</b>': '<b>Dålig begäran!</b>',
						'<B>Defender\'s move turn</B>': '<B>Försvara med defensiva enheter</B>',
						'<B>Defender\'s attack turn</B>': '<B>Attackera med defensiva enheter</B>',
						'<b>Rate Limit Exceeded</b>, too many requests!': '<b>Begränsa fråga överstiger</b>, alltför många förfrågningar skickats!',
						'About CalciumScript': 'Om CalciumScript',
						'above the first value': 'över det första värdet',
						'Action Log': 'Händelselogg',
						'Actions': 'Händelser',
						'Activate Attacks Logs': 'Aktivera attackloggning',
						'Alerts log': 'Varning log',
						'All players': 'Alla spelare',
						'All types': 'Alla typer',
						'Alliance features': 'Alliansens funktioner',
						'Alliances list retrieved': 'Allians-listan hämtat',
						'Alliance members list retrieved': 'Förteckning över medlemmar i alliansen återvinns',
						'Alliance messages': 'Allians inlägg',
						'and': 'och',
						'Another march request is pending': 'En annan begäran av marcher är avvaktande',
						'Are you sure you want to delete All Permanent Data': 'Är du säker på att du vill radera all permanent Data',
						'Army presets': 'Armen förinställningar',
						'Arrival time': 'Ankomsttid',
						'at': 'vid',
						' at ': ' hos ',
						' at range': ' på distans',
						'Attack arrival time': 'Attack ankomsttid',
						'Attack forces': 'Attack styrkor',
						'Attack sent to': 'Attack skickad till',
						'Attack One Target in Multiple waves': 'Attackera ett mål I flera vågor',
						'Attacker': 'Anfallare',
						'Attacking': 'Attackerar',
						'Attacks Configuration': 'Konfigurera attacker',
						'Attacks Stats': 'Anfall statistik',
						'Attacks': 'Attacker',
						'attempted': 'försökt',
						'attempt for': 'försök för',
						'Auto harvest resources from outposts every': 'Automatisk insamling av resurser från utpost(erna) varje',
						'Auto refresh info tab data every': 'Auto uppdatering data av fliken info varje',
						'Automatically': 'Automatiskt',
						'Automatically recall transport 1 minute before delivery': 'Automatiskt hämta transport 1 minut före leverans',
						'Available troops': 'Tillgängliga trupper',
						'Awaiting task completion notification': 'Väntar på anmälan om utgången av uppdrag',
						'Back at the same time': 'Tillbaka på samma tid',
						'Backup': 'Backup',
						'Battle': 'Strid',
						'Battle calculator': 'Strids simulator',
						'Battle forces': 'Stridande trupper',
						'Battle log': 'Strids log',
						'Battle lost !!': 'Förlorade strider !!',
						'Battle mechanics': 'Strids mekanism',
						'Battle won !!': 'Vunna strider !!',
						'Bookmark': 'Bokmärke',
						'Bookmarks': 'Bokmärken',
						'Bookmarks Configuration': 'Inställningar för bokmärken',
						'Bookmark saved': 'Bokmärke sparat',
						'Building': 'Konstruktionsförlopp',
						'Busy': 'Upptagen',
						'by': 'av',
						'By distance ascending': 'Med stigande avstånd',
						'By distance descending': 'Med fallande avstånd',
						'Cache data': 'Cache data',
						'Calculate': 'Beräkna',
						'Camps/wilds attack reports': 'Rapporter om läger/vildmarker attack',
						'Capital data': 'Stads data',
						'Capital data successfully fetched': 'Stads data hämtat med framgång',
						'Check sentinel reports every ': 'Kontrollera portvakt rapporter varje ',
						'Check the following great dragons to exclude them from being sent': 'Markera följande drakar som ej ska skickas med i attacker',
						'Check to use UTC time instead of local time': 'Kontrollera för använda UTC-tid i stället för lokal tid',
						'Claim': 'Hävdar',
						'Claimed': 'Hävdade',
						'Claiming quest': 'Skickar förfrågan',
						'Clear all': 'Rensa all',
						'Clear all data': 'Rensa all info',
						'Clear last attack on all maps': 'Rensa senaste attacker på alla kartor',
						'Clear last attack on current map': 'Rensa senaste attacker på aktuella kartan',
						'Clear local storage (internet cache)': 'Radera webbhistorik',
						'Clear log': 'Rensa loggen',
						'Clear Stats': 'Radera stats',
						'Collected resources at outpost': 'Resurser samlas från utpost',
						'Completing...': 'Slutför...',
						'Completion errors': 'Fel vid slutförande',
						'Config': 'Konfig',
						'Confirmation': 'Bekräfta',
						'Console Log': 'Konsol Log',
						'Console': 'Konsol',
						'Coordinates': 'Koordinater',
						'Coords': 'Kords',
						' damages taken': ' tagen skada',
						' damages to ': ' skada till ',
						'data': 'data',
						'data successfully fetched': 'data hämtades med framgång',
						'Date range': 'Datumintervall',
						' deal ': ' göra skada ',
						'Defender': 'Försvarare',
						'Defending': 'Försvarar',
						'Delay before script startup': 'Initial fördröjning innan skriptet startas',
						'Delay Between Attacks': 'Fördröjning mellan attacker',
						'Delay Between Transports': 'Fördröjning mellan transporter',
						'Delay before first secondary attack': 'Fördröjning innan första sekundära attackerar',
						'Delay before sending Primary attack': 'Fördröjning innan du skickar primära attack',
						'Delay Between Secondary Attacks': 'Delay Between Secondary Attacks',
						'delayed due to': 'försenad,',
						'delayed due to no available generals': 'försenad, generaler ej tillgängliga',
						'delayed due to no available Great Dragon': 'försenad, ingen stor drake tillgängliga',
						'delayed due to pending march request': 'försenad, begäran av avvaktande marcher',
						'Delete now': 'Radera nu',
						'Delete Battle Reports': 'Radera Strids rapporter',
						'Delete messages': 'Ta bort inlägg',
						'Delete messages of this type': 'Ta bort inlägg av denna typ',
						'Delete spy reports': 'Radera spionrapporter',
						'Detailed search': 'Detaljerad sökning',
						'Disable <B>Alliance</B> tab': 'Inaktivera <B>Allians</B>',
						'Disable <B>Battle</B> tab': 'Inaktivera <B>Strid</B>',
						'Disable <B>Bookmarks</B> tab': 'Inaktivera <B>Bokmärken</B>',
						'Disable <B>Multi</B> tab': 'Inaktivera <B>Multi</B>',
						'Disable <B>Search</B> tab': 'Inaktivera <B>Sök</B>',
						'Disable <B>Spy</B> tab': 'Inaktivera <B>Spionage</B>',
						'Disable <B>Wall</B> tab': 'Inaktivera <B>Mur</B>',
						'Disable <B>Wave</B> tab': 'Inaktivera <B>Våg</B>',
						'Disable <B>Log</B> tab': 'Inaktivera <B>Logg</B>',
						'Disabled': 'Inaktiverad',
						'Display official background image': 'Visa den officiella bakrundsbilden',
						'Dist': 'Avstånd',
						'Distance must be between': 'Avståndet måste vara mellan',
						'Distance': 'Avstånd',
						'Dragon healing': 'Drakhälsa',
						'Dragons': 'Drakar',
						'Do not show alerts obsolete since': 'visa ej äldre varningar än',
						'Do you want to save in Permanent Data the current script setting': 'Vill du spara permanent data i det aktuella skriptets inställningar',
						'Do you want to save Map Data in local file': 'Vill du spara den kartdata i den lokala filen',
						'Do you want to save Permanent Data in local file': 'Vill du spara den permanenta datan i den lokala filen',
						'Dutch': 'Holländska',
						'Dragons management' : 'Dragon förvaltning',
                        'Edit': 'Redigera',
						'Edit bookmark': 'Redigera bokmärken',
						'Enable': 'Aktivera',
						'Enable transport of ': 'Aktivera transportera ',
						'Enable use of speed-ups in attacks waves': 'Aktivera användning av hastighetsbegränsande upp attackerna',
						'Enable verbose logging': 'Aktivera detaljerad loggning',
						'Enable window drag': 'Aktivera fönsterdrag',
						'Enable the sentinel tower': 'Aktivera vakttorn',
						'Enabled': 'Aktiverad',
						'English': 'Engelska',
						'Enemy General': 'Fiende General',
						'Ennemy coordinates': 'Ennemy koordinater',
						'Ennemy name and alliance': 'Ennemy namn och alliansen',
						'Enemy research levels': 'Fiendens forsknings nivå',
						'Enter -1 as troop quantity to use the maximum available': 'Ange -1 på truppkvantitet för att använda maximalt tillgängliga',
						'Error': 'Fel',
						'Error while retrieving the list of members': 'Fel vid hämtning av medlems listan',
						'Error while setting defense choice': 'Fel medans inställning av försvar',
						'Evol': 'Förändring',
						'Except': 'Undantag',
						'Exception': 'Undantag',
						'failed': 'misslyckades',
						'failed and returned error': 'misslyckades och återkallade felet',
						'Fast search': 'Snabb sökning',
						'Features': 'Funktioner',
						'Fetching': 'Laddar',
						'Fetching Capital data': 'Laddar av största staden data',
						'Fetching Manifest': 'Laddar Manifest',
						'Fetching Outpost ': 'Laddar Utpost ',
						'Fetching Seed': 'Laddar av spelar data',
						'Fetching Translation matrix': 'Hämtar översättning',
						'Fire': 'Eld',
						'First value must be between': 'Första värdet måste ligga mellan',
						'Flash game Auto refresh every': 'Autorefresh av Flashspel varje',
						/* 'Foes' : '?????', */
						'for': 'för',
						'Force saving current script settings': 'Spara samtliga skript-inställningar',
						'Forum link': 'Forum länk',
						'French': 'Franska',
						'Game messages': 'Meddelande av spelet',
						'Game Options': 'Spelalternativ',
						'GD': 'JD',
						'Generals': 'Generaler',
						'German': 'Tyska',
						'Getting basic data...': 'Återvinning av grund data...',
						'Getting cities data...': 'Återvinning av städer data...',
						'Getting game data...': 'Återvinning av speldata...',
						'Got': 'Läst in',
						'Great dragons': 'Jätte Drakar',
						'About': 'Angående',
						'Hide spy alerts': 'Dölj spion varningar',
						'Hiding': 'Göm',
						'History': 'Historia',
						'h': 't',
						'Ice': 'Is',
						'Idle': 'Overksam',
						'In city': 'I staden',
						'In march': 'I marsh',
						' in melee': ' i närstrid',
						'in progress': 'pågår',
						'Include Great Dragon': 'Skicka en stor drake med varje attack',
						'Initialization': 'Initierar',
						'Initializing...': 'Initierar...',
						'Initializing map, auto-collect, ...': 'Initiera kartan, automatisk insamling, ...',
						'Invalid date From': 'Ogiltig datum Från',
						'Invalid date To': 'Ogiltig datum Till',
						'Invalid date range': 'Ogiltigt datumintervall',
						'Invalid delays': 'Ogiltig fördröjning',
						'Invalid number of troops': 'Inkorrekt antal av trupper',
						'Joined': 'Anslöt',
						'Keep battle reports of attacks from other players': 'Spara stridsrapporter av attacker från andra spelare',
						'Keep battle reports of my attacks on other players': 'Spara stridsrapporter av mina attacker på andra spelare',
						' (kill ': ' (Döda ',
						'Last attack': 'Senaste attack',
						'Last report': 'Senaste rapport',
						'L.I.T.': 'Automatiskt transport',
						'life lost': 'Förlorat liv',
						'Loaded': 'Laddad',
						'Loading basic data': 'Laddar grunddata',
						'Locale data was Successfully requested from the server': 'Lokal data har lyckats hämtats från servern',
						'Logs': 'Log',
						'Log': 'Log',
						'Manifest not available, using defaults': 'Manifestet är ej tillgänglig, använder standardinställningar',
						'Manifest Successfully initialized': 'Manifesto initierades framgångsrikt',
						'Manifest was Successfully requested from the server': 'Manifestet har framgångsrikt behandlats av servern',
						'Manual attack sent to': 'Manuellattack skickad till',
						'Max level': 'Nivå max',
						'Map Search': 'Kart sök',
						'Maximize resource to transport according to max load': 'Maximera resurser för transport enligt maximal last',
						'Maximum level reached': 'Maximinivån uppnådde',
						'Maximum secondary marches before sending another primary attack': 'Maximal sekundära marscher innan du skickar en annan primär attack',
						'Maximum simultaneous marches': 'Max. antal marcher',
						'Maximum training queues possible per city, according to available resources': 'Maximera köer enligt tillgängliga resurser',
						'Members list ': 'Medlemslista ',
						'Message(s) deleted': 'Meddelande(n) borttagna',
						'Message(s) deletion in progress': 'Meddelande(n) radering pågår',
						'Message alliance': 'Meddela allians',
						'Message configuration': 'Meddelande konfiguration',
						'miles': 'miles',
						'Min level': 'Nivå min',
		' move to ': ' flytta till ',
						'Multi': 'Flera',
						'My city/OP name where the attack is coming': 'Min stad/OP namn var attacken kommer',
						'My city/OP coordinates': 'Min stad/OP koordinater',
						'My name': 'Mitt namn',
						'Need': 'Behöver',
						'No Generals Available': 'Generaler ej tillgängliga',
						'No great dragon available': 'Ingen stor drake tillgänglig',
						'no max': 'ingen gräns',
						'No new version of': 'Ingen ny version av',
						'No resources to transport defined': 'Ej tillräckligt med resurser',
						'No Troops Defined': 'Inga trupper tagna',
						'Not ready': 'Inte redo',
						'of': 'av',
						'Only one training queue per city': 'En enda utbildning per stad',
						'Options': 'Inställningar',
						'Opts': 'Inställ',
						'Outpost 1': 'Vatten utpost',
						'Outpost 2': 'Sten utpost',
						'Outpost 3': 'Eld utpost',
						'Outpost 4': 'Vind utpost',
						'Overview': 'Översyn',
						'Owner': 'Ägare',
						'Parameters': 'Parametrar',
						'Play for': 'Spela för',
						'Play sound on incoming sentinel report': 'Spela upp ljud vid varning från Vaktposten',
						'Play sound on task completion': 'Spela ljud vid slutförande',
						'Player cities': 'Spelares Städer',
						'Player cities list': 'Förteckning av spelarstäder',
						'Player data was Successfully requested from the server': 'Spelardatan har framgångsrikt hämtats från servern',
						'Player messages': 'Meddelanden av spelare',
						'Player name': 'Spelar namn',
						'Please wait...': 'Vänligen vänta...',
						'Preset': 'Förinställd',
						'Preset name': 'Namn på försvar',
						'Primary attack to ': 'Huvudattacken till ',
						'Quest': 'Begäran',
						'Rate Limit Exceeded because there were too many requests': 'Gränsen är uppnådd på grund av för många förfrågningar',
						'Read page ': 'Läs sidan ',
						'Ready': 'Redo',
						'Recipient': 'Mottagare',
						'Refresh': 'Uppdatera',
						'Refresh applicants': 'Uppdatera sökande',
						'Refresh list': 'Uppdatera lista',
						'Refresh map data': 'Uppdatera kartdata',
						'Refresh selection': 'Uppdatera utvald',
						'Reinforcement reports': 'Förstärkning rapporter',
						'Reinforcement sent to': 'Förstärkning skickat till',
						'Reload': 'Uppdaterar DOA',
						'Repairing': 'Reparerar',
						'Repeat every': 'Upprepa varje',
						'Research Started': 'Forskning startad',
						'Researching': 'Forska',
						'Reset Stats': 'Nollställ statistik',
						'Resources stock levels update failed': 'Uppdatering av lagernivåer av resurser har misslyckades',
						'Resources to transport': 'Resurser för att skicka',
						'Restore': 'Återställ',
						'Restore script settings from local file': 'Återställ skript-inställningar från lokal fil',
						'Resurrection': 'Återupplivar',
						'Resurrect': 'Återuppliva',
						'Retry in': 'Fortsätta igen',
						'Reviving': 'Återuppliva',
						'Role': 'Roll',
						'Rules': 'Regler',
						'Run Time': 'Tidsförlopp',
						'Safe Mode': 'Felsäkert läge',
						'Save current map data in a local file': 'Spara aktuell data i lokal fil',
						'Save current script settings in a local file': 'Spara skript-inställningar i lokal fil',
						'Save preset': 'Spara förinställning',
						'Scales' : 'Fjäll', 
                        'Scan cities': 'Skanna städer',
						'Scan wilds': 'Skanna vildmarker',
						'Scanning map': 'Skannar kartan endast efter städer',
						'Scanning map for cities/wildernesses': 'Skanna kartan efter städer/vildmarker',
						'Scanning map for wildernesses': 'Skannar kartan endast efter vildmarker',
						'Script language': 'Skript språk',
						'Script Options': 'Script alternativ',
						'Search coords': 'Sök kords',
						'Search for alliance list': 'Leta efter allians listan',
						'Search for alliance members': 'Sök efter allians medlemmar',
						'Search max radius': 'Sök max. avstånd',
						'Search Radius': 'Sök avstånd',
						'Second value must be at least': 'Andra värdet måste vara minst',
						'Seconds': 'Sekunder',
						'seconds': 'sekunder',
						'Secondary attack to ': 'Påföljande attacken till ',
						'Seed Successfully initialized': 'Spelare data initieras framgångsrikt',
						'Select at least one type of message or report to delete': 'Välj minst en typ av meddelande eller rapport ta bort',
						'Send reinforcement': 'Skicka förstärkning',
						'Send transport': 'Skicka transporter',
						'Sending reinforcement': 'Skickar förstärkning',
						'Sending transport': 'Skickar transporter',
						'Sentinel messages': 'Varningar från Vaktposten',
						'Sentinel tower': 'Vaktposttorn',
						'Set Def': 'Ange Frs',
						'Single attack': 'Single anfall',
						'Souls': 'Själar',
						'Sound configuration': 'Ljudinställning',
						'Sound file': 'Ljudfil',
						'Spanish': 'Spanska',
						'Spectral': 'Spöklik',
						'SpectralDragonKeep': 'Spöklik Drakaltare',
						'Spies done': 'Spion klar',
						'Spies number': 'Antal spioner',
						'Spy One Target': 'Speja av 1 mål',
						'Spy reports': 'Spion rapporter',
						'Spy to ': 'Spion skickad till ',
						'Stars': 'Stjärnor',
						'Start': 'Start',
						'Start Date': 'Startdatum',
						'Starting...': 'Starta...',
						'Step': 'Steg',
						'Stone': 'Sten',
						'Stop if any troops lost': 'Avbryt vågor vid truppförlust',
						'succeeded': 'lyckades',
						'Successfully initialized': 'Framgångsrikt initierats',
						'Successfully': 'Framgångsrikt',
						'Summary': 'Sammandrag',
						' survivals)': ' överlevande)',
						/* 'Swamp' : '?????', */
						'Swedish': 'Svenska',
						'switchDefense OK': 'Försvars ändring OK',
						'Switch defense wall status': 'Ändra försvar på mur',
						'Switching defense': 'Ändrar försvar',
						'Tabs Options': 'Flikar alternativ',
						'Target': 'Mål',
						'Targets': 'Målen',
						'Task Completed': 'Utförd uppgift',
						'Tasks': 'Uppgifter',
						'Terrain length set to ': 'Terräng avstånd inställd på ',
						/*
						 * 'This should not clear map and alliance data.' :
						 * '?????.',
						 */
						'Time': 'Tid',
						'to': 'till',
						'To be refreshed': 'Att uppdatera',
						'Toggle Flash': 'Förnya Flash',
						'Tower': 'Torn',
						'Tower configuration': 'Konfigurera Vakttorn',
						'Training Configuration': 'Konfig av autoträning',
						'Translation Matrix Successfully initialized': 'Översättning Matrix initierades framgångsrikt',
						'Transport reports': 'Transport rapporter',
						'Transport sent to': 'Transport skickat till',
						'Troops Capped': 'Capped trupper',
						'Troops for Bookmarks Attack': 'Trupper för bokmärkta attacker',
						'Troops for defense': 'Trupper för försvar',
						'Troops for Primary Attack': 'Trupper I Huvudanfallet',
						'Troops for reinforcement': 'Trupper för förstärkning',
						'Troops for Secondary Attacks': 'Trupper I påföljande anfallsvågor',
						'Troops for transport': 'Trupper för transport',
						'Troops for Wave Attack': 'Trupper för vågattacker',
						'Troops lost': 'Trupper förlorade',
						'Troops max': 'Max. trupper',
						'Troops statistics': 'Statistik trupper',
						'Troops statistics for': 'Statistik för',
						'Turned Off': 'Avstängd',
                        'Update' : 'Uppdatering',
						'Unlimited': 'Obegränsat',
						'Unowned only': 'Bara lediga',
						'Updating City values': 'Uppdatera data av stadens',
						'Use the Levels Tab to select attack areas': 'Använd fliken "Nivåer" för att välja mål',
						'Version update': 'Uppdatering version',
						'Wall management': 'Hantera mur',
						'Warning': 'Varning',
						'was returned with a status of': 'returnerades med status',
						'Water': 'Vatten',
						'Wave attack to ': 'Vågor skickade till ',
						'Wave': 'Vågor',
						'Wiki URL': 'Wiki URL',
						'Wildernesses list': 'Vildmarks lista',
						'Wind': 'Vind',
						'Without alliance': 'Allianslös',
						'You are': 'Du är',
						'Yoyo': 'Yoyo',
						'Yoyo functionality': 'Yoyo funktionalitet',
						'ATrans': 'AT',
						/* abbr Armored Transport */ 'Banshee': 'Banshee',
						/* abbr Wind Troop - Banshee */ 'BatDrg': 'BD',
						/* abbr Battle Dragon */ 'Conscr': 'Bärare',
						/* abbr Conscript */ 'Fang': 'Fisk',
						/* abbr Aqua Troop */
						/* 'FGiant' : '?????', */
						/* abbr Frost giant */
						'FireDrg': 'Eld drake',
						/* abbr Fire Dragon */ 'FireM': 'FM',
						/* abbr Fire Mirror */ 'GrtDrg': 'JätteDrg',
						/* abbr Great Dragon */ 'Halbrd': 'Halbrd',
						/* abbr Halberdsman */ 'IceDrg': 'FrostDrg',
						/* abbr Ice Dragon */ 'LBM': 'LBM',
						/* abbr Longbowman */ 'LCannon': 'LCannon',
						/* abbr Lightning Cannon */ 'Magma': 'Lava',
						/* abbr Fire Troop - Magmasaurus */ 'Mino': 'Mino',
						/* abbr Minotaur */ 'Ogre': 'Troll',
						/* abbr Stone Troop - Ogre */ 'PackDrg': 'PckDrg',
						/* abbr Pack dragons */ 'SpctDrg': 'SpökDrag',
						/* abbr Spectral Dragon */ 'SReaper': 'Själskördare',
						/* abbr Ice Troop - SoulReaper */ 'SSDrg': 'SSD',
						/* abbr Swift Strike Dragon */ 'StnDrg': 'DrgSten',
						/* abbr Stone Dragon */ 'SwpDrg': 'TräskDrk',
						/* abbr Swamp Dragon */ 'Venom': 'Giftväktare',
						/* abbr Swamp Troop - Venom */ 'WatDrg': 'DrgVatten',
						/* abbr Water Dragon */ 'WndDrg': 'Vind drake',
						/* abbr Wind Dragon */ 'Harrier': 'Harrier',
						/* abbr Steelshard Harrier */
						/* Missing Kabam translations */
						'FireDragon': 'Elddrakar',
						'WindDragon': 'Vinddrakar',
						'ajax-req-versions': 'Getting current API version',
						'ajax-req-locales': 'Loading translation matrix',
						'ajax-req-cookie': 'Set a cookie for sound setup',
						'ajax-req-manifest': 'Loading manifest',
						'ajax-req-player': 'Player data',
						'ajax-req-cities': 'City data',
						'ajax-req-jobs': 'Getting all jobs list',
						'ajax-req-dragons': 'Getting dragons data',
						'ajax-req-alliances': 'Retrieving Alliances Top 100',
						'ajax-req-membership': 'Retrieving Alliance membership',
						'ajax-req-activity': 'Retrieving Alliance activity',
						'ajax-req-map': 'Map data',
						'ajax-req-tile_at': 'Map data for one tile',
						'ajax-req-building': 'Lauching one building',
						'ajax-req-research': 'Lauching one research',
						'ajax-req-training': 'Lauching one training',
						'ajax-req-resurrect': 'Lauching one resurrection',
						'ajax-req-canceljob': 'Cancelling one job',
						'ajax-req-marches': 'Lauching one march',
						'ajax-req-cancelmarch': 'Cancelling/recalling one march',
						'ajax-req-reports': 'Message list',
						'ajax-req-reports_del': 'Deleting one message',
						'ajax-req-reports_read': 'Reading one message',
						'ajax-req-message': 'Sending one message',
						'ajax-req-minigame': 'Getting fortuna prizes list',
						'ajax-req-save_minigame': 'Playing one fortuna\'s grid',
						'ajax-req-leaderboards': 'Getting leaderbords data',
						'ajax-req-collect': 'Collecting resources from one outpost',
						'ajax-req-claim': 'Claiming one quest',
						'ajax-req-defended': 'Setting in defense / in sanctuary',
						'ajax-req-defense': 'Choice of Defense forces',
						'ajax-req-items': 'Using one item (speedups)',
						'ajax-req-breeding': 'Dragons breeding',
						'ajax-req-feeding': 'Dragons feeding',
						'ajax-req-dragonHandle': 'Dismiss/Remove/Equip one dragon',
						'Zzz': 'Zzz'
					};
					break;
				default:
					TRANSLATION_ARRAY = {
						'FireDragon': 'Fire Dragon',
						'WindDragon': 'Wind Dragon',
						'Outpost 1': 'Water dragon outpost',
						'Outpost 2': 'Stone dragon outpost',
						'Outpost 3': 'Fire dragon outpost',
						'Outpost 4': 'Wind dragon outpost',
						'ajax-req-versions': 'Getting current API version',
						'ajax-req-locales': 'Loading translation matrix',
						'ajax-req-cookie': 'Set a cookie for sound setup',
						'ajax-req-manifest': 'Loading manifest',
						'ajax-req-player': 'Player data',
						'ajax-req-cities': 'City data',
						'ajax-req-jobs': 'Getting all jobs list',
						'ajax-req-dragons': 'Getting dragons data',
						'ajax-req-alliances': 'Retrieving Alliances Top 100',
						'ajax-req-membership': 'Retrieving Alliance membership',
						'ajax-req-activity': 'Retrieving Alliance activity',
						'ajax-req-map': 'Map data',
						'ajax-req-tile_at': 'Map data for one tile',
						'ajax-req-building': 'Lauching one building',
						'ajax-req-research': 'Lauching one research',
						'ajax-req-training': 'Lauching one training',
						'ajax-req-resurrect': 'Lauching one resurrection',
						'ajax-req-canceljob': 'Cancelling one job',
						'ajax-req-marches': 'Lauching one march',
						'ajax-req-cancelmarch': 'Cancelling/recalling one march',
						'ajax-req-reports': 'Message list',
						'ajax-req-reports_del': 'Deleting one message',
						'ajax-req-reports_read': 'Reading one message',
						'ajax-req-message': 'Sending one message',
						'ajax-req-minigame': 'Getting fortuna prizes list',
						'ajax-req-save_minigame': 'Playing one fortuna\'s grid',
						'ajax-req-leaderboards': 'Getting leaderbords data',
						'ajax-req-collect': 'Collecting resources from one outpost',
						'ajax-req-claim': 'Claiming one quest',
						'ajax-req-defended': 'Setting in defense / in sanctuary',
						'ajax-req-defense': 'Choice of Defense forces',
						'ajax-req-items': 'Using one item (speedups)',
						'ajax-req-breeding': 'Dragons breeding',
						'ajax-req-feeding': 'Dragons feeding',
						'ajax-req-dragonHandle': 'Dismiss/Remove/Equip one dragon',
						'Zzz': 'Zzz'
					};
			}
		}

		function setMainStyles() {
			var css = '\
	.jewel {\
		padding : 1px;\
		font-size: 7pt !important;\
		color: #666 !important;\
	}\
	.progress_on {\
		height:12px;\
		width:2px;\
		background-color: rgb(0,125,189);\
		background-image: linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -moz-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -webkit-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
	}\
	.progress_off {\
		height:12px;\
		width:2px;\
		background-color:rgb(255,255,255);\
	}\
	.progress_bar {\
		border: 1px solid #333;\
		border-radius: 3px;\
		-moz-border-radius: 3px;\
		-webkit-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
	}\
	.' + UID['popup_outer'] + ' {\
		border: 1px solid #777;\
		padding-left:3px;\
		padding-right:3px;\
		padding-bottom:3px;\
		border-radius: 5px;\
		-moz-border-radius: 5px;\
		-webkit-box-shadow: rgba(0,0,0,0.52) 0 0 5px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 0 0 5px;\
	}\
	.' + UID['popup_close'] + ' {\
		position: absolute;\
		display:block;\
		right:-1px;\
		margin-top:-1px;\
		width:20px;\
		height:18px;\
		text-align:center;\
		color:#fff;\
		background-color:#555;\
		font-weight:bold;\
		font-size:12px !important;\
		padding:1px;\
		border: 1px solid #666;\
		border-radius: 5px;\
		-moz-border-radius: 5px;\
		cursor: pointer;\
	}\
	.' + UID['popup_close'] + ':hover {\
		background-color:#922;\
		background-image: linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.6) 99%);\
		background-image: -moz-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.6) 99%);\
		background-image: -webkit-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.6) 99%);\
	}\
	.' + UID['popup_bar'] + ':hover {\
		cursor: move;\
	}\
	#' + UID['main_outer'] + ' {\
		background-color: rgb(255,255,255);\
	}\
	#' + UID['main_outer'] + ' * {\
		font-size:8pt;\
		font-family:helvetica,"lucida grande",tahoma,verdana,arial,sans-serif;\
	}\
	#' + UID['main_outer'] + ' div.container {\
		background-color:rgb(245,245,228);\
		height:100%;\
		width:100%;\
		overflow-x: auto;\
	}\
	.confirm_button {\
		width:60px;\
		padding-top:1px;\
		padding-bottom:1px;\
		color:white;\
		font-weight:bold;\
		border: 1px solid #333;\
		border-radius: 3px;\
		-moz-border-radius: 3px;\
		background-image: linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -moz-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -webkit-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		-webkit-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
		cursor:hand;\
		cursor:pointer;\
		background-color: rgb(0,94,189);\
	}\
	.confirm_button:hover {\
		background-color: rgb(0,125,150);\
	}\
	div.' + UID['title'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:#ffffff;\
		background-color:rgb(60,90,150);\
		background-image:url(\'' + urlBackgroundLogo + '\');\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	.' + UID['title'] + ' * {\
		display:inline-block !important;\
		font-style: normal !important;\
		text-decoration: none !important;\
		font-weight:bold;\
		color:#ffffff;\
		font-size: 10pt !important;\
		line-height: 10pt !important;\
		padding: 0;\
		text-shadow			: 1px 1px rgba(0,0,0,0.6) !important;\
		-moz-text-shadow	: 1px 1px rgba(0,0,0,0.6) !important;\
		-webkit-text-shadow	: 1px 1px rgba(0,0,0,0.6) !important;\
		-khtml-text-shadow	: 1px 1px rgba(0,0,0,0.6) !important;\
	}\
	';
			addStyle(css);
		}

		function setStyles() {
			var css = '\
	.jewel {\
		padding : 1px;\
		font-size: 7pt !important;\
		color: #666 !important;\
	}\
	.bluejwl {\
		padding : 1px;\
		font-size: 7pt !important;\
		color: #2B4988 !important;\
	}\
	.wrap {\
		white-space: normal !important;\
	}\
	div.short {\
		color: #000;\
		height:7px;\
	}\
	.emptyline {\
		height:3px;\
	}\
	.progress_on {\
		height:12px;\
		width:2px;\
		background-color: rgb(0,125,189);\
		background-image: linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -moz-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -webkit-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
	}\
	.progress_off {\
		height:12px;\
		width:2px;\
		background-color:rgb(255,255,255);\
	}\
	.progress_bar {\
		border: 1px solid #333;\
		border-radius: 3px;\
		-moz-border-radius: 3px;\
		-webkit-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
	}\
	.' + UID['hiding'] + ' {\
		background-color: rgb(0,160,110);\
		color: white;\
		padding-left: 10px;\
		padding-right: 10px;\
		margin-right: -2px;\
		border-radius: 2px;\
		-moz-border-radius: 2px;\
		-webkit-box-shadow: rgba(0,0,0,0.52) 0 0 2px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 0 0 2px;\
	}\
	.' + UID['defending'] + ' {\
		background-color: rgb(184,0,46);\
		color: white;\
		padding-left: 10px;\
		padding-right: 10px;\
		margin-right: -2px;\
		border-radius: 2px;\
		-moz-border-radius: 2px;\
		-webkit-box-shadow: rgba(0,0,0,0.52) 0 0 2px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 0 0 2px;\
	}\
	.' + UID['information'] + ' {\
		background:url(http://doa.wygopro.com/images/information.png) no-repeat top left;\
		background-position:center center;\
		color: white;\
		padding-right: 10px;\
	}\
	.' + UID['scrollable'] + ' {\
		overflow: auto !important;\
	}\
	.' + UID['popup_outer'] + ' {\
		border: 1px solid #777;\
		padding-left:3px;\
		padding-right:3px;\
		padding-bottom:3px;\
		border-radius: 5px;\
		-moz-border-radius: 5px;\
		-webkit-box-shadow: rgba(0,0,0,0.52) 0 0 5px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 0 0 5px;\
	}\
	.' + UID['popup_close'] + ' {\
		position: absolute;\
		display:block;\
		right:-1px;\
		margin-top:-1px;\
		width:20px;\
		height:18px;\
		text-align:center;\
		color:#fff;\
		background-color:#555;\
		font-weight:bold;\
		font-size:12px !important;\
		padding:1px;\
		border: 1px solid #666;\
		border-radius: 5px;\
		-moz-border-radius: 5px;\
		cursor: pointer;\
	}\
	.' + UID['popup_close'] + ':hover {\
		background-color:#922;\
		background-image: linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.6) 99%);\
		background-image: -moz-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.6) 99%);\
		background-image: -webkit-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.6) 99%);\
	}\
	.' + UID['popup_bar'] + ':hover {\
		cursor: move;\
	}\
	#' + UID['main_outer'] + ' {\
		background-color: rgb(255,255,255);\
	}\
	#' + UID['main_outer'] + ' * {\
		font-size:8pt;\
		font-family:helvetica,"lucida grande",tahoma,verdana,arial,sans-serif;\
	}\
	#' + UID['main_outer'] + ' ul.tabs {\
		overflow: hidden;\
		display: block;\
		border-bottom: 1px solid #898989;\
		height: 26px;\
		list-style: none;\
		margin: 0;\
		padding: 0;\
		font-size: 10px;\
	}\
	#' + UID['main_outer'] + ' ul.line2 {\
		height: 20px;\
	}\
	#' + UID['main_outer'] + ' ul.tabs li.tab {\
		display: inline-block;\
		float: left;\
		cursor:pointer !important;\
	}\
	#' + UID['main_outer'] + ' ul.tabs li.tab a {\
		background-color: rgb(235,238,245);\
		border-bottom-width: 1px;\
		border: 1px solid #898989;\
		border-left-width: 0;\
		color: #333;\
		font-weight: bold;\
		display: block;\
		height: 16px;\
		margin-top: 6px;\
		padding: 2px 9px 3px 8px;\
		position: relative;\
		text-decoration: none;\
		cursor:pointer;\
	}\
	#' + UID['main_outer'] + ' ul.tabs li.line1 a {\
		padding: 2px 9px 0px 8px;\
	}\
	#' + UID['main_outer'] + ' ul.tabs li.line2 a {\
		height: 16px;\
		margin-top: 0px;\
	}\
	#' + UID['main_outer'] + ' ul.tabs li.first a {\
		border-left-width: 1px;\
	}\
	#' + UID['main_outer'] + ' ul.tabs li.tab a.selected {\
		background-color: rgb(60,90,150);\
		border-top-color: #3B5998;\
		border-bottom-color: #3B5998;\
		border-left-color: #5973A9;\
		border-right-color: #5973A9;\
		color: white;\
		-webkit-box-shadow: rgba(0,0,0,0.6) 1px 0px 1px;\
		-moz-box-shadow: rgba(0,0,0,0.6) 1px 0px 1px;\
		background-image: linear-gradient(bottom, rgba(0,0,0,0) 12%, rgba(255,255,255,0.3) 90%, rgba(255,255,255,0.9) 99%);\
		background-image: -moz-linear-gradient(bottom, rgba(0,0,0,0) 12%, rgba(255,255,255,0.3) 90%, rgba(255,255,255,0.9) 99%);\
		background-image: -webkit-linear-gradient(bottom, rgba(0,0,0,0) 12%, rgba(255,255,255,0.3) 90%, rgba(255,255,255,0.9) 99%);\
	}\
	#' + UID['main_outer'] + ' div.container {\
		height: 100%;\
		width: 100%;\
		overflow-x: auto;\
	}\
	#' + UID['main_outer'] + ' div.container ul.tabs li.tab a {\
		height: 13px;\
		background-color: rgb(241,241,241);\
	}\
	#' + UID['main_outer'] + ' div.container ul.tabs li.tab a.selected {\
		background-color: rgb(110,132,181);\
	}\
	div.' + UID['title'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:#ffffff;\
		background-color:rgb(60,90,150);\
		background-image:url(\'' + urlBackgroundLogo + '\');\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	div.' + UID['title_sr'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:#ffffff;\
		background-color:rgb(60,90,150);\
		background-image:url(\'' + urlBackgroundLogo + '\');\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	.' + UID['title'] + ' * {\
		display:inline-block !important;\
		font-style: normal !important;\
		text-decoration: none !important;\
		font-weight:bold;\
		color:#ffffff;\
		font-size: 10pt !important;\
		line-height: 10pt !important;\
		padding: 0;\
		text-shadow			: 1px 1px rgba(0,0,0,0.6) !important;\
		-moz-text-shadow	: 1px 1px rgba(0,0,0,0.6) !important;\
		-webkit-text-shadow	: 1px 1px rgba(0,0,0,0.6) !important;\
		-khtml-text-shadow	: 1px 1px rgba(0,0,0,0.6) !important;\
	}\
	div.' + UID['title_main'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		font-size:13pt;\
		padding-top:2px;\
		padding-bottom:0;\
		white-space:nowrap;\
		text-align:center;\
		color:#ffffff;\
		background-color:rgb(60,90,150);\
		background-image:url(\'' + urlBackgroundLogo + '\');\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	div.' + UID['title_main'] + ' td a {\
		cursor:pointer;\
	}\
	div.' + UID['subtitle'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:#ffffff;\
		background-color: rgb(60,60,60);\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	div.' + UID['subtitle_light'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:#ffffff;\
		background-color: rgb(169,169,169);\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	div.' + UID['subtitle_sr'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:#ffffff;\
		background-color: rgb(60,60,60);\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	div.' + UID['content'] + ' {\
		border:1px solid rgb(255,200,50);\
		background-color: rgb(245,245,228);\
		padding:3px;\
		border-radius: 2px;\
		color: #000;\
		-moz-border-radus: 2px;\
		-webkit-box-shadow: rgba(0,0,0,0.52) 0 0 2px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 0 0 2px;\
	}\
	div.' + UID['status_ticker'] + ' {\
		border:1px solid #995;\
		background-color: rgb(239,239,224);\
		padding:2px;\
		border-radius: 2px;\
		color: #000;\
		-moz-border-radus: 2px;\
		-webkit-box-shadow: rgba(0,0,0,0.52) 0 0 2px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 0 0 2px;\
	}\
	div.' + UID['status_report'] + ' {\
		height: 106px;\
		max-height: 106px;\
		overflow:auto;\
		color: #000;\
	}\
	div.' + UID['status_feedback'] + ' {\
		border: 1px solid #ddd;\
		padding-top: 5px;\
		padding-right: 5px;\
		padding-bottom: 0.5em;\
		padding-left: 5px;\
		height: 34px;\
		background-color: rgb(255,235,235);\
		text-align:left;\
		font-weight:bold;\
		border-radius: 3px;\
		color: #000;\
		-moz-border-radius: 3px;\
	}\
	table.' + UID['row_style'] + ' tr td {\
		padding: 1px 1px;\
	}\
	table.' + UID['row_style'] + ' tr td.right {\
		font-weight:bold;\
		text-align:right;\
		padding-right: 5px;\
	}\
	table.' + UID['row_style'] + ' tr:nth-child(odd) {\
		background: rgba(255, 255, 255, 0.0);\
	}\
	table.' + UID['row_style'] + ' tr:nth-child(even) {\
		background: rgba(255, 255, 255, 1.0);\
	}\
	table.' + UID['table_targets'] + ' tr td {\
		white-space:normal;\
		vertical-align:top;\
		padding-top: 5px;\
		padding-bottom: 5px;\
	}\
	table.' + UID['table_wrap'] + ' tr td {\
		white-space:normal;\
		padding: 1px 1px;\
		cursor: default;\
	}\
	table.' + UID['table'] + ' tr td,\
	table.' + UID['compact_table'] + ' tr td,\
	table.' + UID['table'] + ' tr td div {\
		border:none;\
		background:none;\
		white-space:nowrap;\
		padding: 1px 1px;\
		cursor: default;\
	}\
	table.' + UID['table'] + ' tr td {\
		padding: 1px 4px;\
	}\
	table.' + UID['table'] + ' tr td.right,\
	table.' + UID['compact_table'] + ' tr td.right,\
	table.' + UID['table'] + ' tr td.right div {\
		font-weight:bold;\
		text-align:right;\
		padding-right: 5px;\
	}\
	table.' + UID['table'] + ' tr td.left,\
	table.' + UID['compact_table'] + ' tr td.left,\
	table.' + UID['table'] + ' tr td.left div {\
		font-weight:bold;\
		text-align:left;\
		padding-right: 5px;\
	}\
	table.' + UID['table_console'] + ' tr td {\
		white-space:normal;\
		vertical-align:top;\
	}\
	td.' + UID['underline'] + ' {\
		border-bottom:1px solid #ccc;\
		background:none;\
		padding: 1px 4px 1px 4px;\
	}\
	table tr.' + UID['row_top_headers'] + ' td,\
	table tr.' + UID['row_headers'] + ' td {\
		color: white;\
		background-color: rgb(110,115,125);\
		border-right: 2px solid #eef;\
		font-weight:bold;\
		text-align:center;\
		line-height:11pt;\
	}\
	table tr.' + UID['row_top_headers'] + ' td {\
		background-color: rgb(90,95,115);\
	}\
	table tr.' + UID['row_headers'] + ' td a {\
		cursor:pointer;\
	}\
	table tr.' + UID['row_headers_left'] + ' td {\
		color: white;\
		background-color: rgb(110,115,125);\
		border-right: 2px solid #eef;\
		font-weight:bold;\
		text-align:left;\
		line-height:11pt;\
	}\
	tr.' + UID['row_marchOther'] + ' td {\
		color:#888888;\
	}\
	tr.' + UID['row_marchMine'] + ' td {\
		color:#000000;\
	}\
	tr.' + UID['row_owned'] + ' {\
	}\
	table tr td div.' + UID['info_protect'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:yellow;\
		background-color:#0044a0;\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	table tr td div.' + UID['info_alerts'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:white;\
		background-color:#770000;\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	table tr td div.' + UID['info_boosts'] + ' {\
		border:1px solid;\
		border-color:#ffffff;\
		font-weight:bold;\
		padding-top:2px;\
		padding-bottom:2px;\
		text-align:center;\
		color:white;\
		background-color: rgb(110,115,125);\
		border-radius: 2px;\
		-moz-border-radus: 2px;\
	}\
	input.short {\
		width:30px;\
	}\
	input.' + UID['btn_on'] + ',\
	input.' + UID['btn_off'] + ',\
	input.' + UID['btn_red'] + ',\
	input.' + UID['btn_green'] + ',\
	input.' + UID['btn_blue'] + ',\
	input.' + UID['btn_yellow'] + ',\
	input.' + UID['btn_cyan'] + ',\
	input.' + UID['btn_purple'] + ',\
	input.' + UID['btn_disabled'] + ',\
	#' + UID['main_outer'] + ' input[type=button] {\
		width:130px;\
		padding-top:1px;\
		padding-bottom:1px;\
		color:white;\
		font-weight:bold;\
		border: 1px solid #333;\
		border-radius: 3px;\
		-moz-border-radius: 3px;\
		background-image: linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -moz-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -webkit-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		-webkit-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
		cursor:hand;\
		cursor:pointer;\
	}\
	#' + UID['main_outer'] + ' input[type=button] {\
		background-color: rgb(0,125,189);\
	}\
	#' + UID['main_outer'] + ' input[type=button]:hover {\
		background-color: rgb(40,150,210);\
	}\
	input.' + UID['btn_on'] + ' {\
		background-color: rgb(0,160,110) !important;\
	}\
	input.' + UID['btn_on'] + ':hover {\
		background-color: rgb(0,200,150) !important;\
	}\
	input.' + UID['btn_off'] + ' {\
		background-color: rgb(184,0,46) !important;\
	}\
	input.' + UID['btn_off'] + ':hover {\
		background-color: rgb(200,50,100) !important;\
	}\
	input.thin {\
		width: auto !important;\
		font-size: 7pt !important;\
		margin:0;\
		padding-top:0;\
		padding-top:0;\
		padding-bottom:0;\
		padding-left:2px;\
		padding-right:2px;\
	}\
	input.small {\
		margin:0;\
		padding-top:0;\
		padding-bottom:0;\
		padding-left:1px;\
		padding-right:1px;\
		font-size:10pt;\
	}\
	input.Xtrasmall {\
		margin:0;\
		padding-top:0;\
		padding-bottom:0;\
		padding-left:1px;\
		padding-right:1px;\
		font-size:7pt;\
	}\
	.confirm_button {\
		width:60px;\
		padding-top:1px;\
		padding-bottom:1px;\
		color:white;\
		font-weight:bold;\
		border: 1px solid #333;\
		border-radius: 3px;\
		-moz-border-radius: 3px;\
		background-image: linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -moz-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		background-image: -webkit-linear-gradient(bottom, rgba(0,0,0,0.1) 10%, rgba(255,255,255,0.3) 60%, rgba(255,255,255,0.5) 99%);\
		-webkit-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
		-moz-box-shadow: rgba(0,0,0,0.52) 1px 1px 1px;\
		cursor:hand;\
		cursor:pointer;\
		background-color: rgb(0,94,189);\
	}\
	.confirm_button:hover {\
		background-color: rgb(0,125,150);\
	}\
	input.' + UID['btn_red'] + ' {\
		background-color: rgb(184,0,46) !important;\
	}\
	input.' + UID['btn_red'] + ':hover {\
		background-color: rgb(200,50,100) !important;\
	}\
	input.' + UID['btn_green'] + ' {\
		background-color: rgb(0,160,110) !important;\
	}\
	input.' + UID['btn_green'] + ':hover {\
		background-color: rgb(0,210,150) !important;\
	}\
	input.' + UID['btn_black'] + ' {\
		background-color: rgb(0,0,0) !important;\
	}\
	input.' + UID['btn_black'] + ':hover {\
		background-color: rgb(50,50,50) !important;\
	}\
	input.' + UID['btn_blue'] + ' {\
		background-color: rgb(0,94,189);\
	}\
	input.' + UID['btn_blue'] + ':hover {\
		background-color: rgb(0,125,150);\
	}\
	input.' + UID['btn_yellow'] + ' {\
		background-color:#BFBF00 !important;\
	}\
	input.' + UID['btn_yellow'] + ':hover {\
		background-color:#DFDF00 !important;\
	}\
	input.' + UID['btn_cyan'] + ' {\
		background-color:#00BFBF !important;\
	}\
	input.' + UID['btn_cyan'] + ':hover {\
		background-color:#00DFDF !important;\
	}\
	input.' + UID['btn_purple'] + ' {\
		background-color:#BF00BF !important;\
	}\
	input.' + UID['btn_purple'] + ':hover {\
		background-color:#DF00DF !important;\
	}\
	input.' + UID['btn_disabled'] + ' {\
		background-color:#D8D8D8 !important;\
	}\
	input.' + UID['btn_disabled'] + ':hover {\
		background-color:#F8F8F8F8 !important;\
	}\
	#' + UID['main_outer'] + ' input[type=text] {\
		border: 1px solid #888;\
		border-radius: 2px;\
		-moz-border-radius: 2px;\
		-webkit-box-shadow: rgba(0,0,0,0.2) 1px 1px 3px inset;\
		-moz-box-shadow: rgba(0,0,0,0.2) 1px 1px 3px inset;\
	}\
	#' + UID['main_outer'] + ' input[type=text]:active,\
	#' + UID['main_outer'] + ' input[type=text]:focus {\
		border-color: #000;\
		-webkit-box-shadow: rgba(0,0,0,0.5) 1px 1px 4px inset;\
		-moz-box-shadow: rgba(0,0,0,0.5) 1px 1px 4px inset;\
	}\
	span.' + UID['bold_red'] + ' {\
		color:#550000;\
		font-weight:bold;\
	}\
	span.' + UID['green'] + ' {\
		color:#009C1F;\
		font-weight:bold;\
	}\
	span.' + UID['blue'] + ' {\
		color:#0000AA;\
		font-weight:bold;\
	}\
	span.' + UID['red'] + ' {\
		color:#AA0000;\
		font-weight:bold;\
	}\
	hr.thin {\
		margin:0px;\
		padding:0px;\
	}\
	div#' + UID['tooltip'] + ' {\
		position: absolute;\
		max-width:185px;\
		padding: 5px 8px;\
		color:#fff;\
		font-family: "Lucida Grande","Lucida Sans Unicode","bitstream vera sans","trebuchet ms",verdana,sans-serif;\
		font-size:9pt;\
		background-color: rgb(60,90,150);\
		background-color: rgba(60,90,150,0.6);\
		border: 1px solid white;\
		border-radius: 3px;\
		-webkit-box-shadow: rgb(0,0,0) 0px 0px 5px;\
		-moz-box-shadow: rgb(0,0,0) 0px 0px 5px;\
		background-image: linear-gradient(bottom, rgba(30,30,30,0.9) 1%, rgba(30,30,30,0.5) 100%);\
		background-image: -moz-linear-gradient(bottom, rgba(30,30,30,0.9) 1%, rgba(30,30,30,0.5) 100%);\
		background-image: -webkit-linear-gradient(bottom, rgba(30,30,30,0.9) 1%, rgba(30,30,30,0.5) 100%);\
		visibility: hidden;\
		z-index: 1000;\
	}\
	.onoffswitch {\
		position: relative; width: 51px;\
		-webkit-user-select:none; -moz-user-select:none; -ms-user-select: none;\
	}\
	.onoffswitch-checkbox {\
		display: none;\
	}\
	.onoffswitch-label {\
		display: block; overflow: hidden; cursor: pointer;\
		border: 2px solid #666666; border-radius: 5px;\
	}\
	.onoffswitch-inner {\
		display: block; width: 200%; margin-left: -100%;\
		-moz-transition: margin 0.3s ease-in 0s; -webkit-transition: margin 0.3s ease-in 0s;\
		-o-transition: margin 0.3s ease-in 0s; transition: margin 0.3s ease-in 0s;\
	}\
	.onoffswitch-inner:before, .onoffswitch-inner:after {\
		display: block; float: left; width: 50%; height: 15px; padding: 0; line-height: 15px;\
		font-size: 11px; color: white; font-family: Trebuchet, Arial, sans-serif; font-weight: bold;\
		-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;\
	}\
	.onoffswitch-inner:before {\
		content: "ON";\
		padding-left: 10px;\
		background-color: #009063; color: #FFFFFF;\
	}\
	.onoffswitch-inner:after {\
		content: "OFF";\
		padding-right: 10px;\
		background-color: #AF1138; color: #FFFFFF;\
		text-align: right;\
	}\
	.onoffswitch-switch {\
		display: block; width: 10px; margin: 0px;\
		background: #FAFAFA;\
		border: 2px solid #666666; border-radius: 5px;\
		position: absolute; top: 0; bottom: 0; right: 37px;\
		-moz-transition: all 0.3s ease-in 0s; -webkit-transition: all 0.3s ease-in 0s;\
		-o-transition: all 0.3s ease-in 0s; transition: all 0.3s ease-in 0s;\
		background-image: -moz-linear-gradient(center top, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0) 100%);\
		background-image: -webkit-linear-gradient(center top, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0) 100%);\
		background-image: -o-linear-gradient(center top, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0) 100%);\
		background-image: linear-gradient(center top, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0) 100%);\
	}\
	.onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-inner {\
		margin-left: 0;\
	}\
	.onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-switch {\
		right: 0px; \
	}\
	';
			addStyle(css);
		}


		setMainStyles();
		var initialDelay = Math.randRange(5000, 8000);
		progressBar.init(800 + Math.randRange(1, 50), 100, 450, 150, translate('Initialization'), 400, false);
		progressBar.start({
			steps: 1,
			delay: initialDelay,
			title: scriptName + ' - v' + scriptVersion + ' : ' + translate('Starting...'),
			stepText: translate('Delay before script startup')
		});
		setTimeout(scriptStartup, initialDelay);
	}
})();